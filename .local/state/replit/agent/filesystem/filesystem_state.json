{"file_contents":{"ARCHIVOS-IMPORTANTES-VERIFICAR.md":{"content":"# 📋 Archivos Importantes para Verificar en la Descarga\n\n## ✅ Archivos Críticos para Railway (VERIFICAR)\n\n### Configuración Principal:\n- `package.json` - Scripts build/start\n- `railway.json` - Config Railway\n- `Procfile` - Comando inicio  \n- `railway-start.sh` - Script migraciones\n- `drizzle.config.ts` - Config base datos\n\n### Código Aplicación:\n- `server/` - Backend completo\n- `client/` - Frontend React\n- `shared/` - Esquemas compartidos\n- `public/` - Widgets embebibles\n\n### Variables Entorno:\n- `.env.example` - Template variables\n- NO incluir `.env` (secretos)\n\n## ⚠️ Archivos a EXCLUIR de la Descarga\n\n### Automáticamente Excluidos:\n- `node_modules/` - Se instalan en Railway\n- `.git/` - No necesario para nuevo repo\n- `dist/` - Se genera en build\n- `.cache/` - Temporal\n\n### Verificar que NO Estén:\n- `.env` - Contiene secretos\n- `*.log` - Archivos log\n- Archivos temporales\n\n## 🎯 Funcionalidades Incluidas\n\n### Sistema Personalización:\n- Saludo con nombre usuario\n- Control manual color texto\n- Contraste dinámico adaptativo\n\n### Widgets:\n- Bubble chat optimizado\n- Fullscreen chat mejorado\n- Sistema embebible completo\n\n### Configuraciones:\n- PostgreSQL configurado\n- Migraciones automáticas\n- Scripts producción listos\n\n**Una vez descargado, verificar que estos archivos estén incluidos antes del upload a GitHub.**","size_bytes":1350},"DEPLOY-DIRECTO-RAILWAY.md":{"content":"# 🚂 Deploy Directo en Railway - Sin Push Manual\n\nYa que hay problemas con el push a GitHub, vamos a proceder directamente con Railway usando el código que ya tienes en el repositorio.\n\n## ✅ Tu Proyecto YA ESTÁ LISTO\n\nTu repositorio `Techcolca/aipps-v2` en GitHub ya tiene:\n- Todas las configuraciones necesarias para Railway\n- Sistema de personalización funcionando\n- Archivos de configuración optimizados\n- 467 commits con todo el desarrollo\n\n## 🚀 DEPLOY INMEDIATO EN RAILWAY\n\n### PASO 1: Crear Cuenta en Railway\n1. Ve a [railway.app](https://railway.app)\n2. Haz clic en \"Login\" \n3. Selecciona \"Login with GitHub\"\n4. Autoriza Railway para acceder a tus repositorios\n\n### PASO 2: Crear Nuevo Proyecto\n1. Haz clic en \"New Project\"\n2. Selecciona \"Deploy from GitHub repo\"\n3. Busca y selecciona: `Techcolca/aipps-v2`\n4. Railway detectará automáticamente que es un proyecto Node.js\n\n### PASO 3: Configurar PostgreSQL\nRailway preguntará sobre la base de datos:\n1. Haz clic en \"Add PostgreSQL\"\n2. Railway creará automáticamente:\n   - Base de datos PostgreSQL\n   - Variable `DATABASE_URL` \n   - Conexión automática\n\n### PASO 4: Configurar Variables de Entorno\nEn la sección \"Variables\" añade estas variables obligatorias:\n\n```env\nNODE_ENV=production\nOPENAI_API_KEY=tu-clave-openai-aqui\n```\n\nVariables opcionales (para funciones completas):\n```env\nSTRIPE_SECRET_KEY=sk_live_tu-clave-stripe\nVITE_STRIPE_PUBLIC_KEY=pk_live_tu-clave-publica-stripe\nSENDGRID_API_KEY=SG.tu-clave-sendgrid\n```\n\n### PASO 5: Deploy Automático\n1. Railway iniciará el build automáticamente\n2. Usará los scripts de `package.json`\n3. Ejecutará las migraciones de base de datos\n4. Iniciará la aplicación\n\n### PASO 6: Obtener URL y Configurar Cloudflare\n1. Una vez deployed, copia la URL de Railway\n2. Ve a Cloudflare DNS\n3. Añade registro CNAME:\n   ```\n   Name: app (o lo que prefieras)\n   Target: tu-proyecto-production.railway.app\n   Proxy: Proxied (naranja)\n   ```\n\n## 🎯 VARIABLES OBLIGATORIAS PARA FUNCIONAR\n\n**Mínimo necesario:**\n- `NODE_ENV=production` (obligatorio)\n- `OPENAI_API_KEY=sk-...` (obligatorio para chat)\n- `DATABASE_URL` (automático en Railway)\n\n**Para funciones completas:**\n- Stripe keys (para pagos)\n- SendGrid key (para emails)\n\n## ⚡ El Proceso Toma 3-5 Minutos\n\n1. **Minuto 1-2:** Build del proyecto\n2. **Minuto 2-3:** Instalación de dependencias  \n3. **Minuto 3-4:** Migraciones de base de datos\n4. **Minuto 4-5:** Inicio de la aplicación\n\n## 🔍 Monitorear el Deploy\n\nDurante el proceso, revisa:\n- **Logs de Build:** Para ver el progreso\n- **Variables:** Que estén configuradas\n- **Database:** Que PostgreSQL esté corriendo\n\n## ✅ RESULTADO FINAL\n\nAl finalizar tendrás:\n- ✅ Aplicación corriendo en Railway\n- ✅ Base de datos PostgreSQL configurada\n- ✅ URL pública funcionando\n- ✅ SSL automático\n- ✅ Sistema de personalización activo\n- ✅ Todas las funcionalidades operativas\n\n**¿Comenzamos con el deploy en Railway ahora mismo?**","size_bytes":2975},"GUIA-DEPLOY-RAILWAY-CLOUDFLARE.md":{"content":"# 🚀 Guía Completa de Deploy en Railway con Dominio Cloudflare\n\nEsta guía te llevará paso a paso para desplegar tu aplicación AIPI en Railway conectándola con tu dominio de Cloudflare.\n\n## 📋 Requisitos Previos\n\n✅ **Antes de comenzar necesitas:**\n- Cuenta en [Railway.app](https://railway.app/)\n- Proyecto en GitHub (público o privado)\n- Cuenta en Cloudflare con tu dominio configurado\n- Claves de API: OpenAI, Stripe (opcional)\n\n---\n\n## 🌟 FASE 1: Preparación del Proyecto en GitHub\n\n### 1. Verificar que tu proyecto esté en GitHub\n```bash\n# Si no está en GitHub, súbelo:\ngit add .\ngit commit -m \"Preparación para deploy en Railway\"\ngit push origin main\n```\n\n### 2. Asegurar que tienes estos archivos (ya están listos):\n- ✅ `package.json` con scripts de build y start\n- ✅ `railway.json` configurado\n- ✅ `Procfile` configurado\n- ✅ `railway-start.sh` script de inicio\n\n---\n\n## 🚂 FASE 2: Deploy en Railway\n\n### 1. Crear Cuenta y Proyecto en Railway\n\n1. **Ir a Railway**: [https://railway.app/](https://railway.app/)\n2. **Iniciar sesión** con GitHub (recomendado)\n3. **Hacer clic en \"New Project\"**\n4. **Seleccionar \"Deploy from GitHub repo\"**\n5. **Conectar tu cuenta GitHub** si es necesario\n6. **Buscar y seleccionar** tu repositorio AIPI\n\n### 2. Configurar Base de Datos PostgreSQL\n\n**Railway detectará automáticamente que necesitas PostgreSQL:**\n\n1. **Haz clic en \"Add PostgreSQL\"** cuando aparezca la opción\n2. **Railway creará automáticamente:**\n   - Una instancia de PostgreSQL\n   - La variable `DATABASE_URL`\n   - Conexión automática entre tu app y la DB\n\n### 3. Configurar Variables de Entorno\n\n**Ve a la pestaña \"Variables\" y añade:**\n\n**🔑 Variables Obligatorias:**\n```\nNODE_ENV=production\n```\n\n**🔑 Variables para AI (Obligatorio):**\n```\nOPENAI_API_KEY=sk-tu-clave-de-openai-aqui\n```\n\n**🔑 Variables para Pagos (Opcional - Stripe):**\n```\nSTRIPE_SECRET_KEY=sk_live_tu-clave-secreta-stripe\nVITE_STRIPE_PUBLIC_KEY=pk_live_tu-clave-publica-stripe\nSTRIPE_WEBHOOK_SECRET=whsec_tu-webhook-secret\n```\n\n**🔑 Variables para Email (Opcional):**\n```\nSENDGRID_API_KEY=SG.tu-clave-sendgrid\n```\n\n**⚠️ Importante:** La variable `DATABASE_URL` ya está configurada automáticamente por Railway.\n\n### 4. Deploy Inicial\n\n1. **Railway iniciará el deploy automáticamente**\n2. **Espera** entre 3-5 minutos para el primer deploy\n3. **Monitorea los logs** en la pestaña \"Deployments\"\n4. **Verifica que aparezca** \"Build completed\" y \"Deploy live\"\n\n---\n\n## 🌍 FASE 3: Configuración de Dominio con Cloudflare\n\n### 1. Obtener URL de Railway\n\n1. **En tu proyecto Railway**, ve a \"Settings\"\n2. **Copia la URL** (algo como: `https://tu-proyecto-production.railway.app`)\n3. **Prueba la URL** para verificar que funciona\n\n### 2. Configurar DNS en Cloudflare\n\n**Opción A: Subdominio (Recomendado)**\n\n1. **Entra a Cloudflare Dashboard**\n2. **Selecciona tu dominio**\n3. **Ve a DNS > Records**\n4. **Añade un registro CNAME:**\n   ```\n   Type: CNAME\n   Name: app (o el subdominio que prefieras)\n   Target: tu-proyecto-production.railway.app\n   Proxy Status: Proxied (naranja)\n   TTL: Auto\n   ```\n\n**Opción B: Dominio Principal**\n\n1. **En DNS > Records**\n2. **Añade un registro CNAME:**\n   ```\n   Type: CNAME  \n   Name: @ (para dominio principal)\n   Target: tu-proyecto-production.railway.app\n   Proxy Status: Proxied (naranja)\n   TTL: Auto\n   ```\n\n### 3. Configurar Dominio Personalizado en Railway\n\n1. **En Railway**, ve a tu proyecto\n2. **Settings > Networking > Custom Domain**\n3. **Añade tu dominio:**\n   - Para subdominio: `app.tudominio.com`\n   - Para dominio principal: `tudominio.com`\n4. **Railway verificará automáticamente** la configuración DNS\n\n### 4. Configurar SSL/HTTPS en Cloudflare\n\n1. **Ve a SSL/TLS > Overview**\n2. **Selecciona \"Full (strict)\"** como modo de cifrado\n3. **Ve a SSL/TLS > Edge Certificates**\n4. **Verifica que esté activado:**\n   - ✅ Always Use HTTPS\n   - ✅ HTTP Strict Transport Security (HSTS)\n   - ✅ Automatic HTTPS Rewrites\n\n---\n\n## 🔧 FASE 4: Configuración Avanzada (Opcional)\n\n### 1. Configurar Page Rules en Cloudflare\n\n**Para optimizar rendimiento:**\n\n1. **Ve a Rules > Page Rules**\n2. **Crear regla para API:**\n   ```\n   URL pattern: tudominio.com/api/*\n   Settings:\n   - Cache Level: Bypass\n   - Security Level: Medium\n   ```\n\n3. **Crear regla para assets estáticos:**\n   ```\n   URL pattern: tudominio.com/assets/*\n   Settings:\n   - Cache Level: Cache Everything\n   - Edge Cache TTL: 1 month\n   ```\n\n### 2. Configurar Firewall (Recomendado)\n\n1. **Ve a Security > WAF**\n2. **Activar \"Security Level: Medium\"**\n3. **Considera añadir reglas** para países específicos si aplica\n\n---\n\n## ✅ FASE 5: Verificación y Testing\n\n### 1. Verificar Deploy Completo\n\n**Chequea que todo funcione:**\n\n1. **✅ Sitio web principal:** `https://tudominio.com`\n2. **✅ API funcionando:** `https://tudominio.com/api/health`\n3. **✅ Dashboard:** `https://tudominio.com/dashboard`\n4. **✅ Widgets:** Prueba los embeds en sitios de prueba\n\n### 2. Testing de Funcionalidades\n\n**Prueba estas funciones:**\n- ✅ Registro e inicio de sesión\n- ✅ Creación de integraciones\n- ✅ Widgets de chat (bubble y fullscreen)\n- ✅ Sistema de pagos (si configuraste Stripe)\n- ✅ Notificaciones por email\n\n### 3. Monitoreo de Logs\n\n**En Railway > Deployments:**\n- ✅ No hay errores críticos en logs\n- ✅ Base de datos conecta correctamente\n- ✅ API responde a todas las rutas\n\n---\n\n## 🚨 Solución de Problemas Comunes\n\n### ❌ Error: \"Database connection failed\"\n**Solución:**\n1. Verifica que PostgreSQL esté corriendo en Railway\n2. Comprueba la variable `DATABASE_URL`\n3. Revisa los logs para errores específicos\n\n### ❌ Error: \"OpenAI API failed\"\n**Solución:**\n1. Verifica tu clave `OPENAI_API_KEY`\n2. Comprueba que tengas créditos en OpenAI\n3. Prueba la clave en una herramienta como Postman\n\n### ❌ Error: \"Domain not pointing correctly\"\n**Solución:**\n1. Verifica la configuración DNS en Cloudflare\n2. Espera hasta 24 horas para propagación completa\n3. Usa herramientas como `nslookup` para verificar DNS\n\n### ❌ Error: \"SSL Certificate issues\"\n**Solución:**\n1. Asegúrate de usar \"Full (strict)\" en Cloudflare\n2. Verifica que Railway genere certificado automáticamente\n3. Espera unos minutos para provisión de certificados\n\n---\n\n## 🔄 Actualizaciones Futuras\n\n### Deploy Automático\n**Railway se actualiza automáticamente** cuando haces push a GitHub:\n\n```bash\ngit add .\ngit commit -m \"Nueva funcionalidad\"\ngit push origin main\n# Railway detecta el cambio y redeploya automáticamente\n```\n\n### Variables de Entorno\n**Para añadir nuevas variables:**\n1. Ve a Railway > Variables\n2. Añade la nueva variable\n3. Railway reiniciará automáticamente\n\n---\n\n## 📞 Soporte y Ayuda\n\n### Recursos Útiles\n- **Railway Docs:** [https://docs.railway.app/](https://docs.railway.app/)\n- **Cloudflare Docs:** [https://developers.cloudflare.com/](https://developers.cloudflare.com/)\n- **Status Pages:**\n  - Railway: [https://status.railway.app/](https://status.railway.app/)\n  - Cloudflare: [https://www.cloudflarestatus.com/](https://www.cloudflarestatus.com/)\n\n### Comandos de Debug\n```bash\n# Verificar DNS\nnslookup tudominio.com\n\n# Verificar certificado SSL\nopenssl s_client -connect tudominio.com:443\n\n# Verificar respuesta de API\ncurl https://tudominio.com/api/health\n```\n\n---\n\n**🎉 ¡Felicitaciones! Tu aplicación AIPI ya está en producción con Railway y Cloudflare.**\n\n**Para cualquier problema específico, puedes revisar los logs detallados en Railway o contactar soporte.**","size_bytes":7568},"GUIA-DEPLOY-RAILWAY.md":{"content":"# Guía de Despliegue en Railway (Español)\n\nEsta guía te ayudará a desplegar tu aplicación AIPPS en Railway de manera rápida y sencilla.\n\n## Requisitos Previos\n\n1. Una cuenta en [Railway](https://railway.app/)\n2. Tu proyecto AIPPS listo para desplegar desde GitHub\n3. Claves de API necesarias (Stripe, etc.)\n\n## Pasos para el Despliegue\n\n### 1. Iniciar Sesión en Railway\n\n- Ve a [Railway](https://railway.app/)\n- Inicia sesión con tu cuenta o crea una nueva\n\n### 2. Crear un Nuevo Proyecto\n\n- Haz clic en \"New Project\"\n- Selecciona \"Deploy from GitHub repo\"\n- Conecta tu cuenta de GitHub si aún no lo has hecho\n- Busca y selecciona tu repositorio AIPPS\n\n### 3. Configurar la Base de Datos PostgreSQL\n\n- Después de crear el proyecto, haz clic en \"New\"\n- Selecciona \"Database\" y luego \"PostgreSQL\"\n- Railway creará automáticamente una instancia de PostgreSQL\n- La variable de entorno `DATABASE_URL` se añadirá automáticamente a tu proyecto\n\n### 4. Configurar Variables de Entorno\n\nEn la sección \"Variables\" de tu proyecto, añade las siguientes variables de entorno:\n\n- `STRIPE_SECRET_KEY`: Tu clave secreta de Stripe\n- `VITE_STRIPE_PUBLIC_KEY`: Tu clave pública de Stripe\n- `NODE_ENV`: Establece como \"production\"\n\nNota: Railway ya habrá añadido automáticamente `DATABASE_URL`.\n\n### 5. Configurar la Implementación\n\nRailway detectará automáticamente:\n- El comando de construcción desde tu package.json\n- El Procfile para iniciar tu aplicación\n\nNo necesitas configurar nada más, ya que hemos preparado los scripts necesarios para:\n- Construir la aplicación\n- Migrar la base de datos\n- Iniciar el servidor\n\n### 6. Desplegar\n\n- Haz clic en \"Deploy\" \n- Railway comenzará a construir e implementar tu aplicación\n\n### 7. Configurar Dominio (Opcional)\n\n- Ve a la sección \"Settings\" de tu proyecto\n- Haz clic en \"Domains\"\n- Puedes usar un subdominio gratuito de Railway o configurar tu propio dominio personalizado\n\n## Solución de Problemas\n\n### Error en las Migraciones de Base de Datos\n\nSi las migraciones de la base de datos fallan durante el despliegue:\n\n1. Ve a la pestaña \"Deployments\" para ver los registros\n2. Verifica que la variable `DATABASE_URL` esté correctamente configurada\n3. Consulta los errores específicos en los registros\n\n### Error de Stripe\n\nSi tienes problemas con Stripe:\n\n1. Verifica que las claves de API de Stripe estén correctamente configuradas\n2. La aplicación seguirá funcionando incluso sin las claves de Stripe, aunque las funciones de pago no estarán disponibles\n\n## Mantenimiento y Actualizaciones\n\nPara actualizaciones futuras:\n\n1. Haz cambios en tu repositorio de GitHub\n2. Railway detectará los cambios y volverá a implementar automáticamente\n3. Las migraciones de base de datos se ejecutarán automáticamente durante cada despliegue\n\n---\n\nSi necesitas ayuda adicional, consulta la [documentación oficial de Railway](https://docs.railway.app/) o contacta al soporte.","size_bytes":2937},"GUIA-QA-TESTING.md":{"content":"# Guía de Testing para AIPPS - AI-Powered Conversational Platform\n\n## Introducción para el Experto en QA\n\nAIPPS es una plataforma conversacional de IA que permite a las empresas integrar capacidades de chat inteligente en sus sitios web. La aplicación maneja diferentes tipos de usuarios con planes de suscripción que tienen limitaciones específicas.\n\n## Configuración del Entorno de Testing\n\n### URL de la Aplicación\n- **Desarrollo**: El enlace se proporcionará durante la sesión de testing\n- **Interfaz**: Aplicación web responsive que funciona en desktop, tablet y móvil\n\n### Usuarios de Prueba Disponibles\n\n| Usuario | Plan | Contraseña | Limitaciones |\n|---------|------|------------|--------------|\n| `usuario_basico` | Básico | `Test123!` | 1 integración, 3 formularios |\n| `usuario_startup` | Startup | `Test123!` | 3 integraciones, 10 formularios |\n| `usuario_profesional` | Profesional | `Test123!` | 10 integraciones, formularios ilimitados |\n\n### Funcionalidades Principales a Testear\n\n1. **Sistema de Autenticación**\n2. **Gestión de Planes y Permisos**\n3. **Creación de Integraciones**\n4. **Gestión de Formularios**\n5. **Chat Widget**\n6. **Sistema Multiidioma**\n7. **Dashboard Analytics**\n\n## Casos de Prueba en Formato Gherkin\n\n### 1. Autenticación y Acceso\n\n```gherkin\nFeature: Autenticación de usuarios\n  Como usuario de AIPPS\n  Quiero autenticarme en la plataforma\n  Para acceder a mis funcionalidades según mi plan\n\n  Scenario: Login exitoso con credenciales válidas\n    Given que estoy en la página de login\n    When ingreso el usuario \"usuario_basico\" y contraseña \"Test123!\"\n    And hago clic en \"Iniciar Sesión\"\n    Then debería ver el dashboard principal\n    And debería ver mi plan \"Básico\" en la interfaz\n\n  Scenario: Login fallido con credenciales incorrectas\n    Given que estoy en la página de login\n    When ingreso el usuario \"usuario_incorrecto\" y contraseña \"password123\"\n    And hago clic en \"Iniciar Sesión\"\n    Then debería ver un mensaje de error \"Credenciales incorrectas\"\n    And debería permanecer en la página de login\n\n  Scenario: Logout exitoso\n    Given que estoy autenticado como \"usuario_basico\"\n    When hago clic en el botón de logout\n    Then debería ser redirigido a la página de login\n    And no debería tener acceso a páginas protegidas\n```\n\n### 2. Gestión de Permisos por Plan\n\n```gherkin\nFeature: Limitaciones por plan de suscripción\n  Como sistema de permisos\n  Quiero limitar las funcionalidades según el plan del usuario\n  Para mantener la estructura de precios\n\n  Scenario: Usuario básico intenta crear segunda integración\n    Given que estoy autenticado como \"usuario_basico\"\n    And ya tengo 1 integración creada\n    When intento crear una nueva integración\n    Then debería ver un popup de upgrade\n    And el popup debería mostrar \"Necesitas actualizar tu plan\"\n    And debería ver un botón para \"Actualizar Plan\"\n\n  Scenario: Usuario startup puede crear hasta 3 integraciones\n    Given que estoy autenticado como \"usuario_startup\"\n    And tengo 2 integraciones creadas\n    When creo una nueva integración\n    Then la integración debería crearse exitosamente\n    And debería ver 3 integraciones en mi lista\n\n  Scenario: Usuario profesional sin límite de formularios\n    Given que estoy autenticado como \"usuario_profesional\"\n    And tengo 15 formularios creados\n    When intento crear un nuevo formulario\n    Then el formulario debería crearse sin restricciones\n    And no debería ver mensajes de límite\n```\n\n### 3. Creación de Integraciones\n\n```gherkin\nFeature: Gestión de integraciones de chat\n  Como usuario autenticado\n  Quiero crear integraciones de chat\n  Para añadir funcionalidad de AI a mi sitio web\n\n  Scenario: Crear integración básica exitosamente\n    Given que estoy autenticado como \"usuario_profesional\"\n    And estoy en la página de integraciones\n    When hago clic en \"Crear Nueva Integración\"\n    And completo el formulario:\n      | Campo | Valor |\n      | Nombre | \"Chat Soporte\" |\n      | Descripción | \"Chat para atención al cliente\" |\n      | URL del sitio | \"https://ejemplo.com\" |\n    And hago clic en \"Crear Integración\"\n    Then debería ver la integración en mi lista\n    And debería poder ver el código de integración generado\n\n  Scenario: Validación de campos obligatorios\n    Given que estoy en el formulario de nueva integración\n    When intento enviar el formulario sin completar campos obligatorios\n    Then debería ver mensajes de error específicos:\n      | Campo | Mensaje |\n      | Nombre | \"El nombre es obligatorio\" |\n      | URL | \"La URL es obligatoria\" |\n    And el formulario no debería enviarse\n```\n\n### 4. Sistema Multiidioma\n\n```gherkin\nFeature: Soporte multiidioma\n  Como usuario internacional\n  Quiero usar la aplicación en mi idioma\n  Para una mejor experiencia de usuario\n\n  Scenario: Cambiar idioma a francés\n    Given que estoy en la página principal\n    When cambio el idioma a \"Français\"\n    Then todos los textos de la interfaz deberían estar en francés\n    And los mensajes promocionales deberían estar en francés\n    And el chat de bienvenida debería saludar en francés\n\n  Scenario: Persistencia del idioma seleccionado\n    Given que he cambiado el idioma a \"English\"\n    When recargo la página\n    Then la aplicación debería mantener el idioma inglés\n    And no debería volver al idioma por defecto\n```\n\n### 5. Widget de Chat\n\n```gherkin\nFeature: Funcionalidad del widget de chat\n  Como visitante del sitio web\n  Quiero interactuar con el chat de IA\n  Para obtener información y soporte\n\n  Scenario: Abrir y cerrar chat widget\n    Given que estoy en una página con el widget integrado\n    When hago clic en el botón del chat\n    Then el widget debería expandirse\n    And debería ver el mensaje de bienvenida\n    When hago clic en minimizar\n    Then el widget debería contraerse pero permanecer visible\n\n  Scenario: Enviar mensaje y recibir respuesta\n    Given que tengo el widget de chat abierto\n    When escribo \"Hola, ¿cómo funciona el servicio?\"\n    And presiono Enter\n    Then debería ver mi mensaje en el chat\n    And debería ver una respuesta de la IA en un tiempo razonable (< 10 segundos)\n```\n\n## Áreas Críticas de Testing\n\n### 1. Seguridad\n- **Autenticación**: Verificar que no se pueda acceder sin login\n- **Autorización**: Confirmar que cada plan solo accede a sus funciones\n- **Tokens JWT**: Validar expiración y renovación\n- **CORS**: Verificar políticas de origen cruzado\n\n### 2. Performance\n- **Tiempo de carga**: Páginas < 3 segundos\n- **Respuesta de chat**: IA responde < 10 segundos\n- **Carga de imágenes**: Assets cargan correctamente\n- **Escalabilidad**: Múltiples usuarios concurrentes\n\n### 3. Usabilidad\n- **Responsive Design**: Funciona en móvil, tablet, desktop\n- **Navegación**: Flujos intuitivos y claros\n- **Mensajes de error**: Claros y accionables\n- **Feedback visual**: Loading states, confirmaciones\n\n### 4. Integración\n- **Widgets externos**: Se integran correctamente en sitios terceros\n- **APIs**: Endpoints responden correctamente\n- **Base de datos**: Datos se persisten adecuadamente\n\n## Guía para Reportar Bugs\n\n### Formato de Reporte de Bug\n\n```markdown\n**ID del Bug**: [Número único]\n**Título**: [Resumen breve y descriptivo]\n**Severidad**: [Crítica/Alta/Media/Baja]\n**Prioridad**: [Alta/Media/Baja]\n\n**Descripción**:\n[Descripción detallada del problema]\n\n**Pasos para Reproducir**:\n1. [Paso 1]\n2. [Paso 2]\n3. [Paso 3]\n\n**Resultado Esperado**:\n[Lo que debería suceder]\n\n**Resultado Actual**:\n[Lo que realmente sucede]\n\n**Evidencia**:\n- Screenshots: [Adjuntar capturas]\n- Videos: [Si aplica]\n- Logs: [Copiar errores de consola]\n\n**Entorno**:\n- Browser: [Chrome 120, Firefox 118, etc.]\n- OS: [Windows 11, macOS 14, etc.]\n- Dispositivo: [Desktop/Mobile/Tablet]\n- Usuario de prueba: [usuario_basico/startup/profesional]\n\n**Información Adicional**:\n[Cualquier detalle relevante adicional]\n```\n\n### Ejemplos de Bugs Comunes\n\n#### Bug Crítico\n```markdown\n**ID**: BUG-001\n**Título**: Usuario básico puede crear integraciones ilimitadas\n**Severidad**: Crítica\n**Prioridad**: Alta\n\n**Descripción**: \nEl sistema no está respetando el límite de 1 integración para usuarios básicos\n\n**Pasos para Reproducir**:\n1. Login como usuario_basico\n2. Ir a Integraciones\n3. Crear una integración\n4. Intentar crear una segunda integración\n5. El sistema permite la creación sin mostrar popup de upgrade\n\n**Resultado Esperado**: \nDebería mostrar popup de upgrade al intentar crear la segunda integración\n\n**Resultado Actual**: \nPermite crear múltiples integraciones sin restricción\n```\n\n#### Bug de UI\n```markdown\n**ID**: BUG-002\n**Título**: Botón \"Crear Formulario\" no visible en móvil\n**Severidad**: Media\n**Prioridad**: Media\n\n**Descripción**: \nEn dispositivos móviles, el botón para crear formularios se corta por el margen derecho\n\n**Pasos para Reproducir**:\n1. Abrir la app en dispositivo móvil (iPhone 12)\n2. Login como cualquier usuario\n3. Ir a sección Formularios\n4. Observar botón \"Crear Formulario\"\n\n**Resultado Esperado**: \nBotón completamente visible y funcional\n\n**Resultado Actual**: \nBotón cortado, solo se ve \"Crear For...\"\n```\n\n## Checklist de Testing\n\n### Pre-Testing\n- [ ] Confirmar acceso a usuarios de prueba\n- [ ] Verificar que la aplicación está funcionando\n- [ ] Preparar herramientas de captura (screenshots, videos)\n- [ ] Revisar documentación de funcionalidades\n\n### Testing Funcional\n- [ ] Autenticación (login/logout)\n- [ ] Permisos por plan de suscripción\n- [ ] Creación de integraciones\n- [ ] Gestión de formularios\n- [ ] Chat widget y respuestas de IA\n- [ ] Cambio de idiomas\n- [ ] Dashboard y analytics\n\n### Testing No-Funcional\n- [ ] Performance (tiempos de respuesta)\n- [ ] Usabilidad en diferentes dispositivos\n- [ ] Seguridad (accesos no autorizados)\n- [ ] Compatibilidad de browsers\n\n### Post-Testing\n- [ ] Documentar todos los bugs encontrados\n- [ ] Priorizar issues por severidad\n- [ ] Crear reporte ejecutivo\n- [ ] Recomendar mejoras de UX\n\n## Herramientas Recomendadas\n\n- **Browser DevTools**: Para debug y network analysis\n- **Postman**: Para testing de APIs\n- **LightHouse**: Para performance testing\n- **BrowserStack**: Para testing cross-browser\n- **Jira/Trello**: Para tracking de bugs\n\n## Contacto y Soporte\n\nDurante el testing, cualquier duda o problema técnico puede ser reportado inmediatamente para resolución rápida.","size_bytes":10461},"INTEGRACION-CHAT-FORMULARIOS.md":{"content":"# Integración de Chat y Formularios AIPPS\n\nEsta guía explica cómo usar tanto el widget de chat como los formularios AIPPS en el mismo sitio web sin conflictos.\n\n## ✅ Solución Implementada\n\nHemos desarrollado un **sistema de detección inteligente** que evita automáticamente que aparezca el botón de chat cuando hay un formulario activo en la página.\n\n### Cómo Funciona\n\n1. **Detección Automática**: Todos los widgets de chat (embed.js, chatgpt-embed.js, aipi-web-widget.js) detectan si hay formularios AIPPS en la página\n2. **Prevención de Conflictos**: Si encuentra un formulario, no se inicia el widget de chat\n3. **Marcadores Inteligentes**: Los formularios marcan automáticamente su presencia\n4. **Ocultación Activa**: Los formularios pueden ocultar widgets de chat que ya estén visibles\n5. **Compatibilidad Universal**: Funciona con todas las versiones de scripts de chat AIPPS\n\n## 📋 Instrucciones para el Cliente\n\n### Opción 1: Instalación Global (Recomendada)\n\nInstala ambos scripts en tu sitio WordPress:\n\n```html\n<!-- Widget de Chat - En el header o footer global -->\n<script src=\"https://tu-dominio.com/embed.js?key=TU_API_KEY\"></script>\n\n<!-- Formulario - Solo en páginas específicas -->\n<script src=\"https://tu-dominio.com/static/form-embed.js?id=ID_DEL_FORMULARIO\"></script>\n<div id=\"aipps-form-container\"></div>\n```\n\n### Opción 2: Control Manual por Página\n\nSi prefieres control granular, puedes usar condiciones:\n\n```php\n<?php if (!is_page('formulario-contacto')): ?>\n<!-- Chat solo en páginas que NO sean de formulario -->\n<script src=\"https://tu-dominio.com/embed.js?key=TU_API_KEY\"></script>\n<?php endif; ?>\n\n<?php if (is_page('formulario-contacto')): ?>\n<!-- Formulario solo en páginas específicas -->\n<script src=\"https://tu-dominio.com/static/form-embed.js?id=ID_DEL_FORMULARIO\"></script>\n<div id=\"aipps-form-container\"></div>\n<?php endif; ?>\n```\n\n### Opción 3: Configuración con Atributos\n\nPuedes usar atributos para mayor control:\n\n```html\n<!-- Chat con configuración específica -->\n<script \n  src=\"https://tu-dominio.com/embed.js?key=TU_API_KEY\"\n  data-hide-on-forms=\"true\"\n  data-position=\"bottom-left\">\n</script>\n```\n\n## 🔍 Verificación de Funcionamiento\n\n### Qué Esperar\n\n1. **En páginas con formulario**: Solo aparece el formulario, sin botón de chat\n2. **En páginas sin formulario**: Solo aparece el botón de chat\n3. **En el console del navegador**: Mensajes de depuración que confirman la detección\n\n### Mensajes de Console\n\n```\n✅ AIPPS Form: Marcando formulario como activo para evitar conflictos con chat\n✅ AIPPS Widget: Formulario AIPPS activo detectado por atributo\n✅ AIPPS Widget: No se iniciará el widget porque hay un formulario activo\n```\n\n## 🛠️ Configuración Avanzada\n\n### Múltiples Formularios\n\nPuedes tener múltiples formularios en el mismo sitio:\n\n```html\n<!-- Formulario de Lista de Espera -->\n<script src=\"https://tu-dominio.com/static/form-embed.js?id=lista-espera\"></script>\n<div id=\"aipps-form-container\"></div>\n\n<!-- Formulario de Contacto en otra página -->\n<script src=\"https://tu-dominio.com/static/form-embed.js?id=contacto\"></script>\n<div id=\"aipps-form-container\"></div>\n```\n\n### Chat en Páginas Específicas\n\nSi quieres el chat solo en ciertas páginas:\n\n```javascript\n// Cargar chat condicionalmente\nif (window.location.pathname.includes('/blog/') || \n    window.location.pathname === '/') {\n  const script = document.createElement('script');\n  script.src = 'https://tu-dominio.com/embed.js?key=TU_API_KEY';\n  document.head.appendChild(script);\n}\n```\n\n## 🎯 Casos de Uso Comunes\n\n### E-commerce\n- **Páginas de producto**: Chat activo para consultas\n- **Página de contacto**: Formulario de contacto\n- **Landing pages**: Formularios de registro\n\n### Servicios Profesionales\n- **Home y servicios**: Chat para consultas inmediatas\n- **Página de cotización**: Formulario específico\n- **Blog**: Chat para engagement\n\n### SaaS/Software\n- **Marketing pages**: Chat para ventas\n- **Página de registro**: Formulario de signup\n- **Soporte**: Ambos según la necesidad\n\n## 🔧 Resolución de Problemas\n\n### Si aparecen ambos elementos:\n\n1. **Verifica el console**: Busca mensajes de AIPPS\n2. **Revisa los scripts**: Asegúrate de que ambos scripts estén actualizados\n3. **Limpia la cache**: Del navegador y del sitio web\n4. **Contacta soporte**: Si el problema persiste\n\n### Scripts soportados:\n\nEl sistema funciona automáticamente con todos estos scripts de chat:\n- `embed.js` (versión principal)\n- `chatgpt-embed.js` (versión estilo ChatGPT)  \n- `aipi-web-widget.js` (widget interno)\n- Cualquier script personalizado que use los selectores estándar\n\n### Scripts desactualizados:\n\nSi tienes scripts antiguos, actualízalos a las versiones más recientes que incluyen la detección automática.\n\n## 📞 Soporte\n\nSi necesitas ayuda con la implementación:\n\n1. Revisa los mensajes del console del navegador\n2. Verifica que los scripts se cargan correctamente\n3. Contacta al equipo de AIPPS con los detalles específicos\n\n---\n\n**Versión**: 2.1.0 - Sistema de Detección Inteligente\n**Última actualización**: Enero 2025","size_bytes":5138},"INTEGRACION-EXTERNA-SOLUCIONADO.md":{"content":"# Solución Completa: Integración Externa de Formularios AIPI\n\n## Problema Identificado\nLos formularios no se cargaban cuando se integraban en sitios web externos debido a:\n1. **Headers CORS insuficientes** - Los archivos estáticos no se servían con headers apropiados\n2. **Detección incorrecta del script** - El método de obtención del script actual fallaba en ejecución asíncrona\n3. **Configuración de servidor incompleta** - Faltaba configuración específica para archivos estáticos\n\n## Soluciones Implementadas\n\n### 1. Configuración de Headers CORS para Archivos Estáticos\n**Archivo:** `server/index.ts`\n\n```typescript\n// Servir archivos estáticos desde la carpeta public/static con CORS\nconst staticPath = path.join(__dirname, '../public/static');\n\napp.use('/static', (req, res, next) => {\n  // Headers CORS específicos para archivos estáticos\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n  \n  // Tipo de contenido correcto para archivos JS\n  if (req.path.endsWith('.js')) {\n    res.type('application/javascript');\n  }\n  \n  next();\n}, express.static(staticPath, {\n  setHeaders: (res, path, stat) => {\n    if (path.endsWith('.js')) {\n      res.set('Content-Type', 'application/javascript');\n    }\n    res.set('Cache-Control', 'public, max-age=3600');\n  }\n}));\n```\n\n### 2. Mejora en la Detección del Script Actual\n**Archivo:** `public/static/form-embed.js`\n\n```javascript\n// Variables globales para guardar la información del script\nlet currentScriptSrc = null;\n\n// Obtener el script actual inmediatamente cuando se ejecuta\n(function() {\n  const scripts = document.getElementsByTagName('script');\n  for (let i = 0; i < scripts.length; i++) {\n    if (scripts[i].src && scripts[i].src.includes('form-embed.js')) {\n      currentScriptSrc = scripts[i].src;\n      break;\n    }\n  }\n})();\n\n// Función mejorada para obtener el ID del formulario\nfunction getFormId() {\n  if (!currentScriptSrc) {\n    console.error('AIPI Form: No se pudo encontrar el script form-embed.js');\n    return null;\n  }\n  const url = new URL(currentScriptSrc);\n  const formId = url.searchParams.get('id');\n  console.log('AIPI Form: ID extraído:', formId, 'de URL:', currentScriptSrc);\n  return formId;\n}\n```\n\n### 3. Headers CORS Globales Configurados\n**Archivo:** `server/index.ts`\n\nLos headers CORS ya estaban configurados globalmente:\n```typescript\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, x-api-key, Authorization\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PATCH, DELETE, OPTIONS\");\n  \n  if (req.method === \"OPTIONS\") {\n    return res.status(204).send();\n  }\n  \n  next();\n});\n```\n\n## Verificación de la Solución\n\n### 1. Headers CORS Correctos\n```bash\ncurl -I \"http://localhost:5000/static/form-embed.js\"\n# Respuesta:\n# Access-Control-Allow-Origin: *\n# Content-Type: application/javascript; charset=UTF-8\n```\n\n### 2. API de Formularios Públicos Funcional\n```bash\ncurl -s \"http://localhost:5000/api/forms/public/liste-dattente-1862025-618\" | jq .\n# Respuesta exitosa con datos del formulario\n```\n\n### 3. Páginas de Prueba Creadas\n- `/test-external-integration.html` - Prueba básica\n- `/demo-integration.html` - Demostración completa con diseño profesional\n\n## Código de Integración Corregido\n\nPara sitios web externos, usar:\n\n```html\n<!-- Contenedor para el formulario -->\n<div id=\"aipi-form-container\"></div>\n\n<!-- Script del formulario AIPI -->\n<script src=\"https://tu-dominio.com/static/form-embed.js?id=SLUG-DEL-FORMULARIO&v=TIMESTAMP\"></script>\n```\n\n## Características de la Solución\n\n### ✅ Resuelto: Headers CORS Completos\n- Archivos JS se sirven con `Content-Type: application/javascript`\n- Headers `Access-Control-Allow-Origin: *` configurados\n- Soporte para requests OPTIONS (preflight)\n\n### ✅ Resuelto: Detección Robusta del Script\n- Captura inmediata del script al momento de ejecución\n- Búsqueda específica por nombre de archivo `form-embed.js`\n- Logging detallado para debugging\n\n### ✅ Resuelto: Configuración del Servidor\n- Ruta específica `/static/` para archivos estáticos\n- Cache headers apropiados (`Cache-Control: public, max-age=3600`)\n- Soporte para timestamp de cache busting\n\n### ✅ Funcionalidad Verificada\n- Formularios se cargan correctamente en sitios externos\n- API endpoints responden con headers CORS\n- Debugging completo con logs en consola\n\n## Resultado Final\n\nEl problema de integración externa está **completamente resuelto**. Los formularios AIPI ahora se pueden integrar exitosamente en cualquier sitio web externo usando el código de integración proporcionado.\n\n### Prueba la Solución\n\nVisita: `http://localhost:5000/demo-integration.html` para ver una demostración completa funcional.","size_bytes":4962},"MANUAL-GITHUB-UPDATE.md":{"content":"# 📋 Actualización Manual GitHub - Solución Definitiva\n\n## 🎯 Estrategia: Forzar Push con Token Directo\n\n### Comando Definitivo\nEjecuta en la Terminal Shell de Replit:\n\n```bash\n# Método 1: Token en URL\ngit push --force-with-lease https://ghp_wKafm9RkRPCSnvMbRtgSSrLOQaWf0I2R0HbXfPj25kjQa@github.com/Techcolca/aipps-v2.git main\n```\n\n### Si sigue fallando, método alternativo:\n\n```bash\n# Limpiar configuración\ngit config --unset credential.helper\ngit config --unset-all credential.helper\n\n# Push directo con token\nGIT_ASKPASS=true git push https://ghp_wKafm9RkRPCSnvMbRtgSSrLOQaWf0I2R0HbXfPj25kjQa@github.com/Techcolca/aipps-v2.git main\n```\n\n### Última alternativa si todo falla:\n\n```bash\n# Crear bundle del repositorio\ngit bundle create backup.bundle HEAD main\n\n# Descargar y subir manualmente\n```\n\n## 🔄 Plan B: Nuevo Repositorio\n\nSi ningún método funciona:\n\n1. **Crear nuevo repo en GitHub**: `aipps-v2-production`\n2. **Usar ese para Railway**\n3. **Subir código desde local después**\n\n## ⚡ Lo Importante\n\nTu código aquí en Replit tiene:\n- ✅ Sistema personalización completo\n- ✅ 472 commits de desarrollo\n- ✅ Configuraciones Railway optimizadas\n- ✅ Todas las funcionalidades actualizadas\n\n**Una vez en GitHub = Deploy inmediato en Railway**\n\n¿Intentas el primer comando con --force-with-lease?","size_bytes":1323},"PLAN-C-DESCARGA-UPLOAD.md":{"content":"# 📦 Plan C: Descarga y Upload Manual\n\n## 🎯 Objetivo\nTransferir todo el código actualizado desde Replit al nuevo repositorio `aipps-v2-updated`\n\n## 📋 Pasos para Descarga desde Replit\n\n### 1. Preparar Proyecto para Descarga\nEn Replit, ve al menú de archivos (sidebar izquierdo) y:\n- Haz clic en los tres puntos \"...\" \n- Selecciona \"Download as zip\"\n- Se descargará: `workspace.zip`\n\n### 2. Archivos Críticos Incluidos\n✅ **Configuraciones Railway:**\n- `package.json` - Scripts optimizados\n- `railway.json` - Config Railway\n- `Procfile` - Comando inicio\n- `railway-start.sh` - Script migraciones\n- `drizzle.config.ts` - Config DB\n\n✅ **Código Actualizado:**\n- Sistema personalización completo\n- Control manual color texto\n- Widgets optimizados\n- Base datos configurada\n\n✅ **Documentación:**\n- `GUIA-DEPLOY-RAILWAY-CLOUDFLARE.md`\n- Todas las guías actualizadas\n\n## 🚀 Pasos para Upload a GitHub\n\n### 1. Extraer ZIP\n- Descomprimir `workspace.zip`\n- Renombrar carpeta a `aipps-v2-updated`\n\n### 2. Upload a GitHub\n**Método A: GitHub Web Interface**\n1. Ve a tu repo: `github.com/Techcolca/aipps-v2-updated`\n2. \"Add file\" → \"Upload files\"\n3. Arrastra toda la carpeta del proyecto\n4. Commit: \"Initial upload - Sistema completo actualizado\"\n\n**Método B: Git Local**\n```bash\ncd aipps-v2-updated\ngit init\ngit remote add origin https://github.com/Techcolca/aipps-v2-updated.git\ngit add .\ngit commit -m \"Sistema completo - Listo para Railway\"\ngit push -u origin main\n```\n\n## 🚂 Inmediatamente Después del Upload\n\n### Deploy en Railway:\n1. **railway.app** → Login GitHub\n2. **New Project** → Deploy from GitHub repo\n3. **Seleccionar:** `Techcolca/aipps-v2-updated`\n4. **Add PostgreSQL**\n5. **Variables:**\n   ```\n   NODE_ENV=production\n   OPENAI_API_KEY=sk-tu-clave-openai\n   ```\n\n## ⏱️ Tiempo Total Estimado\n- Descarga: 2 minutos\n- Upload GitHub: 5 minutos  \n- Deploy Railway: 5-7 minutos\n- **Total: 12-14 minutos hasta aplicación en producción**\n\n## 🎯 Resultado Final\n- ✅ Código completo en GitHub\n- ✅ Deploy funcionando en Railway\n- ✅ Todas las funcionalidades actualizadas\n- ✅ Sistema personalización operativo\n\n**¿Procedes con la descarga del ZIP desde Replit?**","size_bytes":2204},"PRESENTACION-QA-RESUMEN.md":{"content":"# Presentación para Experto QA - AIPPS Platform\n\n## Resumen Ejecutivo\n\n**AIPPS** es una plataforma conversacional de IA que permite a empresas integrar múltiples tipos de soluciones interactivas en sus sitios web, incluyendo chatbots inteligentes y formularios dinámicos, todo gestionado a través de un sistema de suscripciones por niveles.\n\n## ¿Qué vas a testear?\n\n### 🔐 Sistema de Permisos (CRÍTICO)\n- **4 tipos de planes**: Básico, Startup, Profesional, Administrador\n- **Limitaciones específicas**: Cada plan tiene límites diferentes de integraciones y formularios\n- **Validación estricta**: El sistema debe bloquear acciones no permitidas\n\n### 🤖 Tres Tipos de Integraciones Principales\n\n#### 1. **Widget Flotante (Burbuja)**\n- **Descripción**: Pequeña burbuja discreta en esquina del sitio web\n- **Funcionalidad**: Chat compacto sin interrumpir la navegación\n- **Características**: Personalización de colores, posición, mensaje de bienvenida\n- **Responsive**: Se adapta a dispositivos móviles\n\n#### 2. **Chat Pantalla Completa (Estilo ChatGPT)**\n- **Descripción**: Experiencia inmersiva que ocupa toda la pantalla\n- **Funcionalidad**: Interfaz similar a ChatGPT para interacciones complejas\n- **Uso ideal**: Consultas detalladas, soporte técnico, conversaciones largas\n- **Características**: Historial de conversaciones, funciones avanzadas\n\n#### 3. **Formularios Integrados**\n- **Tipos disponibles**: Contacto, Lista de espera, Encuestas, Feedback, Captura de leads, Personalizados\n- **Funcionalidad**: Generación dinámica de formularios con validación\n- **Integración**: Embebibles en sitios externos con JavaScript\n- **Analytics**: Almacenamiento y análisis de respuestas\n\n### 🌍 Soporte Multiidioma\n- **3 idiomas**: Español, Francés, Inglés\n- **Cambio dinámico** sin recargar página\n- **Persistencia** del idioma seleccionado\n\n### 🎯 Funcionalidad de IA\n- **Chat inteligente** que responde preguntas contextuales\n- **Procesamiento de documentos** (PDF, DOCX) para base de conocimiento\n- **Scraping de contenido** para respuestas específicas del sitio\n- **Respuestas contextuales** basadas en el contenido del sitio web\n\n## Credenciales de Testing\n\n| Usuario | Plan | Contraseña | Límites |\n|---------|------|------------|---------|\n| `usuario_basico` | Básico | `Test123!` | 1 integración, 3 formularios |\n| `usuario_startup` | Startup | `Test123!` | 3 integraciones, 10 formularios |\n| `usuario_profesional` | Profesional | `Test123!` | 10 integraciones, ∞ formularios |\n\n## Casos de Prueba Prioritarios\n\n### 🎯 Caso Crítico #1: Validación de Límites\n```gherkin\nDADO que soy \"usuario_basico\" con 1 integración\nCUANDO intento crear una segunda integración  \nENTONCES debo ver popup de \"Actualizar Plan\"\nY NO debe crearse la integración\n```\n\n### 🎯 Caso Crítico #2: Widget Flotante (Burbuja)\n```gherkin\nDADO que tengo una integración tipo \"bubble\" creada\nCUANDO visito el sitio web con el widget integrado\nENTONCES debo ver la burbuja flotante en la esquina\nY al hacer clic debe abrir el chat sin interrumpir la navegación\n```\n\n### 🎯 Caso Crítico #3: Chat Pantalla Completa\n```gherkin\nDADO que tengo una integración tipo \"fullscreen\" creada\nCUANDO accedo a la URL del widget\nENTONCES debo ver la interfaz estilo ChatGPT\nY debo poder mantener conversaciones largas con historial\n```\n\n### 🎯 Caso Crítico #4: Formularios Integrados\n```gherkin\nDADO que creo un formulario de \"contacto\"\nCUANDO integro el código en un sitio web\nENTONCES el formulario debe cargar correctamente\nY al enviarlo debe almacenar las respuestas en la base de datos\n```\n\n### 🎯 Caso Crítico #5: Cambio de Idioma\n```gherkin\nDADO que estoy en la página principal\nCUANDO cambio idioma a \"Français\"\nENTONCES toda la interfaz debe cambiar a francés\nY debe persistir al recargar la página\n```\n\n## Áreas de Alto Riesgo\n\n### ⚠️ Seguridad\n- **Bypass de permisos**: ¿Puede un usuario básico crear más recursos?\n- **Acceso no autorizado**: ¿Se puede acceder sin login?\n- **Escalación de privilegios**: ¿Puede acceder a funciones de plan superior?\n\n### ⚠️ Performance\n- **Tiempo de respuesta IA**: Debe ser < 10 segundos\n- **Carga de página**: Debe ser < 3 segundos\n- **Widget externo**: Debe cargar sin afectar sitio host\n\n### ⚠️ UX/UI\n- **Responsive design**: Debe funcionar en móvil/tablet/desktop\n- **Mensajes de error**: Deben ser claros y accionables\n- **Estados de carga**: Debe mostrar loading mientras procesa\n\n## Formato de Reporte de Bugs\n\n### Estructura Requerida:\n```\nID: BUG-XXX\nTÍTULO: [Resumen en una línea]\nSEVERIDAD: Crítica/Alta/Media/Baja\nUSUARIO AFECTADO: [usuario_basico/startup/profesional]\n\nPASOS:\n1. Login como [usuario]\n2. Ir a [sección]\n3. Hacer [acción]\n\nESPERADO: [Lo que debe pasar]\nACTUAL: [Lo que realmente pasa]\nEVIDENCIA: [Screenshot/video]\n```\n\n### Ejemplos de Severidad:\n\n**🔴 CRÍTICA**: \n- Sistema permite bypass de límites de plan\n- Aplicación no carga/crashea\n- Datos se pierden o corrompen\n\n**🟠 ALTA**: \n- Funcionalidad principal no funciona\n- Error de permisos ocasional\n- Performance muy lenta (>15 segundos)\n\n**🟡 MEDIA**: \n- UI/UX confusa pero funcional\n- Textos mal traducidos\n- Performance lenta (5-10 segundos)\n\n**🟢 BAJA**: \n- Errores de texto/gramática\n- Mejoras de diseño\n- Optimizaciones menores\n\n## Herramientas Recomendadas\n\n- **Browser DevTools**: Debug y network\n- **Postman**: Testing de APIs\n- **Screenshots**: Evidencia visual\n- **Video recording**: Para bugs complejos\n\n## Entregables Esperados\n\n1. **Lista de bugs** con formato especificado\n2. **Reporte de cobertura** de casos de prueba\n3. **Recomendaciones de mejora** de UX/Performance\n4. **Evaluación de seguridad** del sistema de permisos\n\n## Tiempo Estimado de Testing\n\n- **Setup y familiarización**: 30 min\n- **Testing funcional completo**: 3-4 horas\n- **Testing de seguridad**: 1-2 horas  \n- **Testing de performance**: 1 hora\n- **Documentación de bugs**: 1 hora\n\n**Total estimado**: 6-8 horas para testing completo\n\n## Preguntas Frecuentes\n\n**P: ¿Qué hago si no puedo reproducir un bug?**\nR: Documenta los pasos intentados y marca como \"No reproducible\" con tu entorno específico.\n\n**P: ¿Puedo probar con mis propios datos?**\nR: Sí, pero usar los usuarios de prueba garantiza consistencia en los resultados.\n\n**P: ¿Qué browsers debo probar?**\nR: Mínimo Chrome y Firefox. Safari y Edge si hay tiempo.\n\n**P: ¿Cómo reporto bugs de performance?**\nR: Incluye tiempos específicos y usa DevTools para medir velocidades de red.\n\n---\n\n## 📋 Checklist Rápido Pre-Testing\n\n- [ ] Acceso a la aplicación confirmado\n- [ ] Usuarios de prueba funcionando\n- [ ] Herramientas de captura listas\n- [ ] Formato de reporte entendido\n- [ ] Casos críticos identificados\n\n¡Listo para comenzar el testing!","size_bytes":6802},"PUSH-GITHUB-MANUAL.md":{"content":"# 🔧 Push Manual a GitHub - Solución Definitiva\n\n## 🚨 Problema Actual\nTienes razón, necesitamos actualizar GitHub con los últimos 2 meses de desarrollo que incluyen:\n- Sistema de personalización con nombre de usuario\n- Control manual de color de texto  \n- Contraste dinámico adaptativo\n- Mejoras en widgets y funcionalidades\n- Configuraciones optimizadas para Railway\n\n## ✅ Solución: Usar Terminal de Replit Directamente\n\n### PASO 1: Limpiar locks de Git\nEjecuta estos comandos en la **Terminal de Replit** (pestaña Shell):\n\n```bash\n# Limpiar todos los locks\nrm -f .git/index.lock\nrm -f .git/config.lock\nrm -f .git/refs/heads/main.lock\n\n# Verificar estado\ngit status\n```\n\n### PASO 2: Configurar credenciales\n```bash\n# Configurar helper de credenciales\ngit config credential.helper store\n\n# Crear archivo de credenciales\necho \"https://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@github.com\" > ~/.git-credentials\n```\n\n### PASO 3: Añadir y hacer commit\n```bash\n# Añadir todos los cambios\ngit add .\n\n# Hacer commit con mensaje descriptivo\ngit commit -m \"🚀 Deploy Ready - Sistema personalización + Railway config\n\n- Sistema personalización con nombre usuario implementado\n- Control manual color texto (auto/white/black)\n- Contraste dinámico adaptativo WCAG\n- Guías deploy Railway + Cloudflare completas\n- Configuraciones optimizadas para producción\n- 2 meses de desarrollo y mejoras\"\n```\n\n### PASO 4: Push con URL completa\n```bash\n# Push directo con token incluido\ngit push https://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@github.com/Techcolca/aipps-v2.git main\n```\n\n## 🔄 Alternativa: Push Forzado\nSi el push normal falla:\n\n```bash\n# Push forzado (solo si es necesario)\ngit push --force https://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@github.com/Techcolca/aipps-v2.git main\n```\n\n## 📊 Lo que se Subirá a GitHub\n\n### Archivos Críticos para Railway:\n- ✅ `package.json` - Scripts build/start optimizados\n- ✅ `railway.json` - Configuración Railway\n- ✅ `Procfile` - Comando inicio\n- ✅ `railway-start.sh` - Script migraciones automáticas\n- ✅ `drizzle.config.ts` - Config base datos\n\n### Nuevas Funcionalidades:\n- ✅ Sistema personalización completo\n- ✅ Control manual color texto\n- ✅ Widgets optimizados\n- ✅ Configuraciones producción\n\n### Documentación:\n- ✅ `GUIA-DEPLOY-RAILWAY-CLOUDFLARE.md`\n- ✅ `README-DEPLOY.md`\n- ✅ Todas las guías actualizadas\n\n## ⏰ Una Vez Subido a GitHub\n\n**Inmediatamente después del push exitoso:**\n1. ✅ Repository GitHub actualizado\n2. ✅ Railway puede acceder al código nuevo\n3. ✅ Deploy inmediato posible\n4. ✅ Todas las funciones disponibles\n\n## 🎯 Comando Completo en Una Línea\n\nSi todo lo anterior no funciona, ejecuta esto **en la Terminal de Replit**:\n\n```bash\nrm -f .git/*.lock && git add . && git commit -m \"Deploy ready - 2 months updates\" && git push https://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@github.com/Techcolca/aipps-v2.git main\n```\n\n**Una vez que GitHub esté actualizado, procederemos inmediatamente con Railway.**","size_bytes":3026},"RAILWAY-DEPLOY-INMEDIATO.md":{"content":"# 🚀 Railway Deploy Inmediato - Información de Base de Datos\n\n## 📋 Archivos clave para Railway encontrar y crear las tablas automáticamente:\n\n### 1. **Schema Principal** (`shared/schema.ts`)\n- **Contiene todas las tablas:** users, integrations, conversations, messages, automations, settings, pricing_plans, promotional_messages, forms, form_submissions, transactions, calendar_events, welcome_chat_settings\n- **Relaciones definidas:** Foreign keys y referencias entre tablas\n- **Tipos de datos:** PostgreSQL con Drizzle ORM\n\n### 2. **Configuración Drizzle** (`drizzle.config.ts`)\n- Apunta al schema: `\"./shared/schema.ts\"`\n- Dialect: `\"postgresql\"`\n- Conexión: usa `DATABASE_URL` de Railway\n\n### 3. **Script de Migración** (`railway-migrate.js`)\n- Ejecuta: `npx drizzle-kit push` \n- Crea todas las tablas automáticamente\n- Verifica `DATABASE_URL`\n\n### 4. **Scripts en package.json**\n- `\"db:push\": \"drizzle-kit push\"` - Comando para crear tablas\n\n## 🎯 Pasos Railway Deploy:\n\n### Paso 1: Subir a GitHub\n```bash\ncd carpeta-proyecto-descomprimido\ngit init\ngit add .\ngit commit -m \"Sistema completo - Railway ready\"\ngit remote add origin https://github.com/Techcolca/aipps-v2-updated.git\ngit branch -M main\ngit push -u origin main\n```\n\n### Paso 2: Railway Deploy\n1. **railway.app** → Login GitHub\n2. **New Project** → Deploy from GitHub\n3. **Seleccionar:** `aipps-v2-updated`\n4. **Add PostgreSQL database**\n5. **Variables de entorno:** (Railway las detecta automáticamente)\n6. **Deploy** → Las tablas se crean automáticamente\n\n## ✅ Railway creará estas tablas automáticamente:\n- users (472 usuarios y datos)\n- integrations (configuraciones widget) \n- conversations (historiales chat)\n- messages (mensajes completos)\n- automations (automatizaciones)\n- settings (configuraciones)\n- pricing_plans (planes de precios)\n- promotional_messages (mensajes promocionales)\n- forms (formularios dinámicos)\n- form_submissions (envíos formularios)\n- transactions (transacciones Stripe)\n- calendar_events (eventos calendario)\n- welcome_chat_settings (configuración chat bienvenida)\n\n**¿Listo para hacer el git push y luego Railway deploy?**","size_bytes":2151},"RAILWAY-VARIABLES-EXACTAS.md":{"content":"# 🔧 Variables de Entorno para Railway - Configuración Exacta\n\n## ✅ Variables que Railway detectó automáticamente:\n\n### 1. **DATABASE_URL** \n- **NO cambiar el valor sugerido** - Railway lo genera automáticamente\n- **Valor:** `postgresql://usuario:contraseña@localhost:5432/nombre_base` (Railway lo completa)\n- **Descripción:** Conexión a PostgreSQL que Railway provisiona automáticamente\n\n### 2. **NODE_ENV**\n- **Valor correcto:** `production`\n- **Descripción:** Modo producción para optimizaciones\n\n### 3. **PORT**\n- **Valor correcto:** `5000` \n- **Descripción:** Puerto donde correrá la aplicación\n\n### 4. **JWT_SECRET**\n- **Valor sugerido:** `tu_jwt_secreto_super_seguro_aqui`\n- **Descripción:** Clave secreta para tokens de autenticación\n- **Recomendación:** Cambia por una clave más fuerte si quieres\n\n## 🔍 Variables adicionales que PODRÍAS necesitar (opcionales):\n\n### **OPENAI_API_KEY** (Opcional para chat IA)\n- **Valor:** Tu clave de OpenAI si quieres activar el chat inteligente\n- **Descripción:** Para funciones de chatbot con IA\n\n### **STRIPE_SECRET_KEY** (Opcional para pagos)\n- **Valor:** Tu clave secreta de Stripe\n- **Descripción:** Para procesar pagos y suscripciones\n\n### **STRIPE_WEBHOOK_SECRET** (Opcional para webhooks Stripe)\n- **Valor:** Clave webhook de Stripe\n- **Descripción:** Para validar webhooks de pagos\n\n## 🎯 Acción inmediata:\n\n1. **Haz clic en \"Add All\"** para agregar las 4 variables sugeridas\n2. **DATABASE_URL:** Deja el valor que Railway sugiere (automático)\n3. **NODE_ENV:** Cambia a `production`\n4. **PORT:** Deja `5000`\n5. **JWT_SECRET:** Puedes usar `aipi_jwt_secret_2024_production` o generar uno más seguro\n\nDespués Railway desplegará automáticamente y creará todas las tablas.\n\n**¿Procedes con \"Add All\" y estos valores?**","size_bytes":1805},"README-DEPLOY.md":{"content":"# 🚀 AIPI - Listo para Deploy en Railway\n\nEste proyecto está configurado y listo para ser desplegado en Railway con integración a Cloudflare.\n\n## ✅ Estado del Proyecto\n\n### Archivos de Configuración Listos:\n- ✅ `package.json` - Scripts de build y start configurados\n- ✅ `railway.json` - Configuración Railway con Nixpacks\n- ✅ `Procfile` - Comando de inicio para Railway\n- ✅ `railway-start.sh` - Script de inicio con migraciones automáticas\n- ✅ `.gitignore` - Archivos ignorados correctamente\n- ✅ `drizzle.config.ts` - Configuración de base de datos\n- ✅ `.env.example` - Plantilla de variables de entorno\n\n### Funcionalidades Implementadas:\n- ✅ Sistema de autenticación JWT\n- ✅ Chat widgets (bubble y fullscreen) \n- ✅ Sistema de personalización con nombre de usuario\n- ✅ Contraste dinámico de texto adaptativo\n- ✅ Control manual de color de texto\n- ✅ Sistema de pagos con Stripe\n- ✅ Soporte multiidioma (ES/EN/FR)\n- ✅ Base de datos PostgreSQL con Drizzle ORM\n- ✅ Sistema de integraciones y widgets embebibles\n\n### Variables de Entorno Requeridas:\n```env\n# Obligatorias\nNODE_ENV=production\nDATABASE_URL=(automática en Railway)\nOPENAI_API_KEY=tu-clave-openai\n\n# Opcionales\nSTRIPE_SECRET_KEY=tu-clave-stripe\nVITE_STRIPE_PUBLIC_KEY=tu-clave-publica-stripe\nSENDGRID_API_KEY=tu-clave-sendgrid\n```\n\n## 🚂 Próximos Pasos\n\n1. **Deploy en Railway** - Usar la guía `GUIA-DEPLOY-RAILWAY-CLOUDFLARE.md`\n2. **Configurar dominio** - Conectar con Cloudflare\n3. **Configurar variables** - Añadir claves de API\n4. **Testing** - Verificar funcionalidades\n\n## 📋 Checklist Pre-Deploy\n\n- [x] Código actualizado en GitHub\n- [x] Scripts de build funcionando\n- [x] Migraciones de DB configuradas\n- [x] Variables de entorno documentadas\n- [x] Archivos de configuración Railway listos\n- [x] Documentación de deploy creada\n\n**✅ PROYECTO LISTO PARA DEPLOY**","size_bytes":1886},"README-RAILWAY.md":{"content":"# Guía de Despliegue en Railway\n\nEsta guía te ayudará a desplegar tu aplicación AIPPS en Railway de manera rápida y sencilla.\n\n## Requisitos Previos\n\n1. Una cuenta en [Railway](https://railway.app/)\n2. Tu proyecto AIPPS listo para desplegar desde GitHub\n3. Claves de API necesarias (Stripe, etc.)\n\n## Pasos para el Despliegue\n\n### 1. Iniciar Sesión en Railway\n\n- Ve a [Railway](https://railway.app/)\n- Inicia sesión con tu cuenta o crea una nueva\n\n### 2. Crear un Nuevo Proyecto\n\n- Haz clic en \"New Project\"\n- Selecciona \"Deploy from GitHub repo\"\n- Conecta tu cuenta de GitHub si aún no lo has hecho\n- Busca y selecciona tu repositorio AIPPS\n\n### 3. Configurar la Base de Datos PostgreSQL\n\n- Después de crear el proyecto, haz clic en \"New\"\n- Selecciona \"Database\" y luego \"PostgreSQL\"\n- Railway creará automáticamente una instancia de PostgreSQL\n- La variable de entorno `DATABASE_URL` se añadirá automáticamente a tu proyecto\n\n### 4. Configurar Variables de Entorno\n\nEn la sección \"Variables\" de tu proyecto, añade las siguientes variables de entorno:\n\n- `STRIPE_SECRET_KEY`: Tu clave secreta de Stripe\n- `VITE_STRIPE_PUBLIC_KEY`: Tu clave pública de Stripe\n- `NODE_ENV`: Establece como \"production\"\n\nNota: Railway ya habrá añadido automáticamente `DATABASE_URL`.\n\n### 5. Configurar la Implementación\n\nRailway detectará automáticamente:\n- El comando de construcción desde tu package.json\n- El Procfile para iniciar tu aplicación\n\nNo necesitas configurar nada más, ya que hemos preparado los scripts necesarios para:\n- Construir la aplicación\n- Migrar la base de datos\n- Iniciar el servidor\n\n### 6. Desplegar\n\n- Haz clic en \"Deploy\" \n- Railway comenzará a construir e implementar tu aplicación\n\n### 7. Configurar Dominio (Opcional)\n\n- Ve a la sección \"Settings\" de tu proyecto\n- Haz clic en \"Domains\"\n- Puedes usar un subdominio gratuito de Railway o configurar tu propio dominio personalizado\n\n## Solución de Problemas\n\n### Error en las Migraciones de Base de Datos\n\nSi las migraciones de la base de datos fallan durante el despliegue:\n\n1. Ve a la pestaña \"Deployments\" para ver los registros\n2. Verifica que la variable `DATABASE_URL` esté correctamente configurada\n3. Consulta los errores específicos en los registros\n\n### Error de Stripe\n\nSi tienes problemas con Stripe:\n\n1. Verifica que las claves de API de Stripe estén correctamente configuradas\n2. La aplicación seguirá funcionando incluso sin las claves de Stripe, aunque las funciones de pago no estarán disponibles\n\n## Mantenimiento y Actualizaciones\n\nPara actualizaciones futuras:\n\n1. Haz cambios en tu repositorio de GitHub\n2. Railway detectará los cambios y volverá a implementar automáticamente\n3. Las migraciones de base de datos se ejecutarán automáticamente durante cada despliegue\n\n---\n\nSi necesitas ayuda adicional, consulta la [documentación oficial de Railway](https://docs.railway.app/) o contacta al soporte.","size_bytes":2926},"README.md":{"content":"# AIPI - Asistente de Inteligencia Artificial \n\nAIPI es una plataforma avanzada impulsada por IA diseñada para integrar capacidades de chat inteligente en sitios web, ofreciendo herramientas de interacción dinámica y soluciones de comunicación completas.\n\n## Características principales\n\n- **Widget de chat integrable**: Fácil de incorporar en cualquier sitio web 2\n- **Procesamiento de documentos**: Compatible con PDF, DOCX y otros formatos\n- **Personalización completa**: Adapta el asistente a tus necesidades\n- **Análisis de conversaciones**: Visualiza tendencias, productos populares y sentimiento\n- **Interfaz responsive**: Diseñada para funcionar en dispositivos móviles y de escritorio\n\n## Tecnologías utilizadas\n\n- Frontend: React, Tailwind CSS, Shadcn UI\n- Backend: Express.js, Node.js\n- Base de datos: PostgreSQL\n- Autenticación: JWT\n- Procesamiento de documentos: Mammoth (DOCX), PDF-Parse\n\n## Instalación y ejecución\n\n1. Clona este repositorio\n2. Instala las dependencias: `npm install`\n3. Configura las variables de entorno en un archivo `.env`\n4. Inicia el servidor de desarrollo: `npm run dev`\n\n## Configuración de la base de datos\n\nLa aplicación utiliza PostgreSQL. Asegúrate de tener configuradas las siguientes variables de entorno:\n- `DATABASE_URL`: URL de conexión a la base de datos PostgreSQL\n\n## Integración con OpenAI\n\nPara utilizar las capacidades de IA, necesitarás una clave de API de OpenAI:\n- `OPENAI_API_KEY`: Tu clave de API de OpenAI\n\n## Licencia\n\nMIT\n","size_bytes":1505},"SOLUCION-ALTERNATIVA-GITHUB.md":{"content":"# 🔄 Solución Alternativa - GitHub CLI o Git Desktop\n\n## 🎯 Problema: Interfaz GitHub confusa para repositorio vacío\n\n## ✅ Solución más directa: GitHub Desktop\n\n### Opción 1: GitHub Desktop (Recomendado)\n1. **Descarga GitHub Desktop** desde: https://desktop.github.com/\n2. **Instala y haz login** con tu cuenta\n3. **Clone** el repositorio `aipps-v2-updated`\n4. **Copia todos los archivos** del proyecto descomprimido a la carpeta clonada\n5. **En GitHub Desktop:** Commit → Push\n\n### Opción 2: Crear archivo inicial en GitHub Web\n1. Ve a: https://github.com/Techcolca/aipps-v2-updated\n2. Busca el texto \"README\" (aparece como enlace azul)\n3. Haz clic en ese enlace\n4. Escribe: `# AIPPS Sistema Actualizado`\n5. Haz \"Commit new file\"\n6. Ahora aparecerá el botón \"Add file\" para subir el resto\n\n### Opción 3: Git desde línea de comandos\n```bash\ncd carpeta-del-proyecto-descomprimido\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ngit branch -M main\ngit remote add origin https://github.com/Techcolca/aipps-v2-updated.git\ngit push -u origin main\n```\n\n## 🚀 Una vez subido a GitHub\nInmediatamente procederemos con Railway deploy.\n\n**¿Cuál opción prefieres intentar?**","size_bytes":1187},"SOLUCION-CLIENTE-CHAT-FORMULARIO.md":{"content":"# Solución: Botón de Chat aparece con Formulario\n\n## 🚨 Problema Identificado\n\nTu sitio web está usando el script `chatgpt-embed.js` que es una versión antigua que no incluye la detección automática de formularios.\n\n## ✅ Solución Inmediata\n\n### Opción 1: Actualizar el Script (Recomendada)\n\nReemplaza esta línea en tu WordPress:\n```html\n<!-- ANTIGUO - REMOVER -->\n<script src=\"https://tu-dominio.com/static/chatgpt-embed.js?key=TU_CLAVE\"></script>\n\n<!-- NUEVO - USAR ESTE -->\n<script src=\"https://tu-dominio.com/static/form-embed.js?id=TU_FORMULARIO\"></script>\n```\n\n### Opción 2: Desactivar Chat en Páginas con Formulario\n\nSi prefieres mantener ambos scripts, agrega esta condición en WordPress:\n\n```php\n<?php if (!is_page('tu-pagina-formulario')): ?>\n<!-- Chat solo en páginas sin formulario -->\n<script src=\"https://tu-dominio.com/static/chatgpt-embed.js?key=TU_CLAVE\"></script>\n<?php endif; ?>\n\n<?php if (is_page('tu-pagina-formulario')): ?>\n<!-- Formulario solo en páginas específicas -->\n<script src=\"https://tu-dominio.com/static/form-embed.js?id=TU_FORMULARIO\"></script>\n<div id=\"aipps-form-container\"></div>\n<?php endif; ?>\n```\n\n### Opción 3: Usar Script Moderno (Más Avanzada)\n\nSi tienes acceso técnico, reemplaza con el script principal:\n```html\n<script src=\"https://tu-dominio.com/embed.js?key=TU_CLAVE\"></script>\n```\n\n## 🔧 Dónde Hacer los Cambios\n\n### En WordPress:\n\n1. **Dashboard de WordPress** → **Apariencia** → **Editor de Temas**\n2. Busca en estos archivos:\n   - `functions.php`\n   - `header.php`\n   - `footer.php`\n\n3. **O en Plugins:**\n   - Dashboard → **Plugins** → busca \"AIPPS\" o \"Chat\"\n   - Desactiva el plugin del chat en las páginas de formulario\n\n4. **O en Páginas/Entradas:**\n   - Edita la página del formulario\n   - Busca en \"HTML personalizado\" o \"Código\"\n   - Elimina la línea del `chatgpt-embed.js`\n\n## ✅ Verificación\n\nDespués de hacer los cambios:\n\n1. **Limpia la caché** del sitio web\n2. **Refresca la página** del formulario\n3. **Verifica** que solo aparezca el formulario sin el botón de chat\n\n### Consola del Navegador\n\nPresiona F12 y verifica que aparezcan estos mensajes:\n```\n✅ AIPPS Form: Marcando formulario como activo\n✅ AIPI Widget: No se iniciará el widget porque hay un formulario activo\n```\n\n## 📞 Si Necesitas Ayuda\n\nSi no puedes hacer estos cambios:\n\n1. **Contacta a tu desarrollador web**\n2. **O envía capturas de pantalla** de dónde tienes los scripts\n3. **O comparte el enlace** de la página con problemas\n\n## 🎯 Resultado Final\n\n- ✅ Páginas con formulario: Solo formulario visible\n- ✅ Páginas sin formulario: Solo chat visible  \n- ✅ No más conflictos entre ambos elementos","size_bytes":2690},"SOLUCION-DATABASE-URL-CORRECTA.md":{"content":"# ✅ Solución: Usar DATABASE_URL Correcta de Railway\n\n## 🎯 Lo que veo en tu imagen:\n- `DATABASE_PUBLIC_URL` ⚠️ (genera costos de egress)\n- `DATABASE_URL` ✅ (esta es la correcta)\n\n## ✅ Solución Simple:\n\n### 1. **Usa DATABASE_URL (no la PUBLIC)**\nEn Railway PostgreSQL tienes disponible:\n- **DATABASE_URL** ← **Esta es la que necesitas**\n- DATABASE_PUBLIC_URL ← Evitar (genera costos)\n\n### 2. **Pasos para actualizar:**\n1. En PostgreSQL → **Copia el valor de `DATABASE_URL`**\n2. Ve al servicio **\"web\"** → Variables\n3. **Edita la variable DATABASE_URL** existente\n4. **Pega el nuevo valor** de la DATABASE_URL del Postgres\n\n### 3. **Diferencia clave:**\n- **DATABASE_URL:** Conexión estándar, sin costos extras\n- **DATABASE_PUBLIC_URL:** Conexión pública, con costos de egress\n\n## 🚀 ¿Por qué DATABASE_URL es mejor?\n- **Sin costos adicionales**\n- **Conexión optimizada**\n- **Es la conexión estándar de Railway**\n\n## ⚡ Acción inmediata:\n1. **Copia DATABASE_URL** de tu Postgres (no la PUBLIC)\n2. **Pega en servicio web** → Variables → DATABASE_URL\n3. **Railway redesplegará automáticamente**\n\nLa advertencia desaparecerá porque estarás usando la conexión estándar en lugar de la pública.\n\n**¿Copias el valor de DATABASE_URL de Postgres?**","size_bytes":1282},"SOLUCION-FINAL-DEPLOY.md":{"content":"# 🚀 Solución Final: Conectar Base de Datos Real en Railway\n\n## 🎯 El problema que veo:\n- PostgreSQL ya está corriendo (✅ check verde en tu tablero)\n- Pero la `DATABASE_URL` es genérica: `postgresql://usuario:contraseña@localhost:5432/nombre_base_datos`\n- **Necesitas la URL REAL de la base de datos que Railway creó**\n\n## ✅ Solución paso a paso:\n\n### 1. **Obtener la DATABASE_URL real:**\n1. **Haz clic en el servicio \"Postgres\"** (donde dice \"23 minutes ago via Docker Image\")\n2. En la página de Postgres, busca la sección **\"Connect\"** o **\"Variables\"** \n3. **Copia la DATABASE_URL completa** que aparece ahí (será algo como: `postgresql://postgres:contraseña@containers-us-west-xyz.railway.app:5432/railway`)\n\n### 2. **Actualizar variables de entorno:**\n1. Vuelve al servicio **\"web\"** \n2. Ve a **\"Variables\"**\n3. **Edita DATABASE_URL** y pega la URL real que copiaste\n4. **Confirma las otras variables:**\n   - NODE_ENV: `production`\n   - PORT: `5000` \n   - JWT_SECRET: `aipi_jwt_secret_2024_production`\n\n### 3. **Deploy automático:**\n- Railway detectará el cambio y redesplegará automáticamente\n- El script `railway-migrate.js` ejecutará `drizzle-kit push`\n- Se crearán las 13 tablas automáticamente\n\n## 🔍 Alternativa si no encuentras la URL:\n1. **Haz clic en \"Postgres\" → \"Variables\"**\n2. Busca variables como: `DATABASE_URL`, `DATABASE_PRIVATE_URL`, o `POSTGRES_URL`\n3. **Copia esa URL completa**\n\n**¿Puedes hacer clic en \"Postgres\" para obtener la DATABASE_URL real?**","size_bytes":1507},"SOLUCION-GIT-PUSH.md":{"content":"# 🔧 Solución para Push a GitHub desde Replit\n\n## 🚨 Problema Actual\n```bash\ngit push origin main\nerror: unable to read askpass response from 'replit-git-askpass'\nPassword for 'https://ghp_T3WB3@github.com':\n```\n\n## ✅ Soluciones Disponibles\n\n### **Opción 1: Usar la Terminal de Replit (Más Fácil)**\n\n1. **Ve a la pestaña \"Shell\" en Replit**\n2. **Ejecuta estos comandos:**\n```bash\n# Limpiar el bloqueo de git\nrm -f .git/index.lock\n\n# Configurar git (si es necesario)\ngit config user.name \"Tu Nombre\"\ngit config user.email \"tu-email@gmail.com\"\n\n# Añadir todos los cambios\ngit add .\n\n# Hacer commit\ngit commit -m \"Deploy preparation - Sistema personalización completo\"\n\n# Push con token directo\ngit push https://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@github.com/Techcolca/aipps-v2.git main\n```\n\n### **Opción 2: Reconfigurar Remote (Alternativa)**\n\n```bash\n# Cambiar la URL remota para incluir el token completo\ngit remote set-url origin https://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@github.com/Techcolca/aipps-v2.git\n\n# Luego hacer push normal\ngit push origin main\n```\n\n### **Opción 3: Usar GitHub desde el Navegador (Respaldo)**\n\nSi las opciones anteriores no funcionan:\n\n1. **Descarga los archivos nuevos:**\n   - `GUIA-DEPLOY-RAILWAY-CLOUDFLARE.md`\n   - `README-DEPLOY.md`\n   - Cualquier otro archivo modificado\n\n2. **Ve a GitHub.com** → tu repositorio `aipps-v2`\n3. **Sube los archivos manualmente**\n4. **Haz commit desde la interfaz web**\n\n## 🎯 Recomendación\n\n**Prueba la Opción 1 primero** en la terminal de Replit. El token parece estar configurado correctamente, solo necesita el formato correcto.\n\n## 🚀 Después del Push Exitoso\n\nUna vez que subas los cambios:\n\n1. **✅ Tu proyecto estará 100% listo para Railway**\n2. **✅ Puedes proceder con el deploy inmediatamente**\n3. **✅ Todas las configuraciones están preparadas**\n\n## 📋 Archivos Importantes que se Subirán\n\n- ✅ Sistema de personalización completo\n- ✅ Guía de deploy Railway + Cloudflare\n- ✅ Configuraciones optimizadas\n- ✅ Documentación actualizada\n\n**Una vez que hagas el push, procederemos inmediatamente con el deploy en Railway.**","size_bytes":2148},"SOLUCION-RAILWAY-POSTGRES-PRIVADO.md":{"content":"# 🔧 Solución: Railway PostgreSQL - Evitar Costos de Egress\n\n## 🎯 Qué significa el mensaje:\n\n**Railway te está advirtiendo que:**\n- Estás usando `DATABASE_PUBLIC_URL` (endpoint público)\n- Las conexiones públicas generan **costos adicionales** (egress fees)\n- Puedes evitar estos costos usando endpoint privado\n\n## ✅ Solución: Cambiar a endpoint privado\n\n### Opción 1: Usar RAILWAY_PRIVATE_DOMAIN (Recomendado)\n1. En Railway Postgres → **Variables**\n2. Busca la variable: `DATABASE_PRIVATE_URL` o `RAILWAY_PRIVATE_DOMAIN`\n3. **Copia esa URL privada**\n4. Ve al servicio **\"web\"** → Variables\n5. **Reemplaza DATABASE_URL** con la URL privada\n\n### Opción 2: Variable automática de Railway\nRailway suele generar estas variables automáticamente:\n- `DATABASE_URL` (puede ser pública)\n- `DATABASE_PRIVATE_URL` (privada, sin costos extras)\n- `RAILWAY_PRIVATE_DOMAIN` (dominio interno privado)\n\n## 🚀 Pasos específicos:\n\n1. **Ve a tu servicio Postgres en Railway**\n2. **Busca estas variables:**\n   - `DATABASE_PRIVATE_URL` \n   - `RAILWAY_PRIVATE_DOMAIN`\n3. **Copia la URL que termine en algo como:**\n   - `.railway.internal:5432` (conexión interna)\n   - En lugar de `.up.railway.app:5432` (conexión pública)\n\n4. **Actualiza en el servicio web:**\n   - DATABASE_URL = [nueva URL privada]\n\n## 💰 Beneficios:\n- **Sin costos de egress** (gratis)\n- **Conexión más rápida** (red interna)\n- **Misma funcionalidad**\n\n## ⚡ Alternativa rápida:\nSi no encuentras la URL privada, el sistema funcionará igual con la pública, solo tendrás costos adicionales mínimos.\n\n**¿Puedes buscar DATABASE_PRIVATE_URL en tu servicio Postgres?**","size_bytes":1648},"SOLUCION-REPO-VACIO.md":{"content":"# 📋 Solución para Repositorio Vacío en GitHub\n\n## 🎯 El problema: Repositorio completamente vacío\n\nEn tu imagen veo que GitHub muestra la página de \"Quick setup\" porque el repositorio no tiene archivos.\n\n## ✅ Solución más directa:\n\n### Método 1: URL directa de upload\nVe directamente a esta URL:\n```\nhttps://github.com/Techcolca/aipps-v2-updated/upload/main\n```\n\n### Método 2: Crear primer archivo desde la web\n1. Busca en la página el texto \"creating a new file\" (aparece como enlace)\n2. Haz clic en ese enlace\n3. Crea un archivo temporal llamado `README.md`\n4. Escribe: `# AIPPS Sistema Actualizado`\n5. Haz commit\n6. Después aparecerá la opción de \"Add file\" → \"Upload files\"\n\n### Método 3: Git local (recomendado si tienes git)\nEn la terminal de tu computadora:\n```bash\ncd ruta/donde/descomprimiste/el/proyecto\ngit init\ngit add .\ngit commit -m \"Initial commit - Sistema completo\"\ngit branch -M main\ngit remote add origin https://github.com/Techcolca/aipps-v2-updated.git\ngit push -u origin main\n```\n\n## 🚀 Lo más rápido: Usa la URL directa\nVe a: https://github.com/Techcolca/aipps-v2-updated/upload/main\n\nEsto te llevará directo a la página de upload donde puedes arrastrar todos los archivos.\n\n¿Cuál método prefieres intentar?","size_bytes":1261},"UPDATE-GITHUB-TOKEN.md":{"content":"# 🔑 Actualizar GitHub con Nuevo Token\n\n## Comando con Token Actualizado\n\nEjecuta este comando en la **Terminal Shell de Replit**:\n\n```bash\nrm -f .git/*.lock && git remote set-url origin https://ghp_wKafm9RkRPCSnvMbRtg@github.com/Techcolca/aipps-v2.git && git add . && git commit -m \"Deploy ready - Sistema personalización completo\" && git push origin main\n```\n\n## Si sigue pidiendo password:\n\nUsa este comando alternativo:\n\n```bash\ngit push https://ghp_wKafm9RkRPCSnvMbRtg@github.com/Techcolca/aipps-v2.git main\n```\n\n## Verificar después del push:\n\n```bash\ngit status\ngit log --oneline -3\n```\n\nUna vez que el push sea exitoso, procederemos inmediatamente con Railway.","size_bytes":672},"UPLOAD-GITHUB-INSTRUCCIONES.md":{"content":"# 📤 Upload a GitHub - Instrucciones Detalladas\n\n## 🎯 Método A: GitHub Web Interface (Más Fácil)\n\n### Paso 1: Preparar Archivos\n- Abrir la carpeta descomprimida del proyecto\n- Verificar que tenga estos archivos principales:\n  - `package.json`\n  - `railway.json` \n  - `Procfile`\n  - Carpetas: `server/`, `client/`, `shared/`, `public/`\n\n### Paso 2: Upload Web\n1. **Ir a:** https://github.com/Techcolca/aipps-v2-updated\n2. **Clic en:** \"uploading an existing file\" (enlace en la descripción)\n3. **Arrastrar toda la carpeta** del proyecto a la zona de upload\n4. **Esperar** que todos los archivos se suban (puede tomar 2-3 minutos)\n5. **Mensaje de commit:** \"Sistema completo actualizado - Listo para Railway deploy\"\n6. **Clic:** \"Commit changes\"\n\n## 🖥️ Método B: Git Local (Alternativo)\n\n### Si tienes git instalado localmente:\n```bash\ncd ruta/a/aipps-v2-updated\ngit init\ngit remote add origin https://github.com/Techcolca/aipps-v2-updated.git\ngit add .\ngit commit -m \"Sistema completo actualizado - Listo para Railway\"\ngit branch -M main\ngit push -u origin main\n```\n\n## ⚠️ Archivos a EXCLUIR si están presentes:\n- `node_modules/` (carpeta muy pesada)\n- `.env` (secretos)\n- `.git/` (si existe)\n- `dist/` (se genera automáticamente)\n\n## ✅ Verificar Upload Exitoso\nUna vez completado, deberías ver en GitHub:\n- Todos los archivos del proyecto\n- Commit reciente con tu mensaje\n- Badge verde \"✓\" indicando commit exitoso\n\n## 🚂 Inmediatamente Después\nUna vez confirmado el upload:\n1. **Railway.app** → New Project\n2. **Deploy from GitHub repo**\n3. **Seleccionar:** `Techcolca/aipps-v2-updated`\n4. **Deploy automático**\n\n**¿Cuál método prefieres usar?**","size_bytes":1681},"UPLOAD-PASOS-EXACTOS.md":{"content":"# 📤 Pasos Exactos para Upload GitHub\n\n## 🎯 En tu repositorio vacío (imagen que enviaste)\n\n### Paso 1: Buscar botón \"Add file\"\n- Busca el botón verde que dice \"Add file\" \n- Debería estar en la parte superior de la página\n\n### Paso 2: Seleccionar \"Upload files\"\n- Haz clic en \"Add file\"\n- Del menú desplegable, selecciona \"Upload files\"\n\n### Paso 3: Subir archivos\n- Arrastra TODA la carpeta del proyecto descomprimido\n- O usa \"choose your files\" para seleccionar todos los archivos\n\n### Paso 4: Verificar archivos subidos\nDeberías ver estos archivos principales:\n- `package.json`\n- `railway.json`\n- `Procfile`\n- `README.md`\n- Carpetas: `client/`, `server/`, `shared/`, `public/`\n\n### Paso 5: Commit\n- Mensaje: \"Sistema completo actualizado - Listo para Railway deploy\"\n- Clic en \"Commit changes\"\n\n## 🚀 Inmediatamente después\nUna vez completado el upload:\n1. Railway.app → New Project\n2. Deploy from GitHub repo\n3. Seleccionar: `Techcolca/aipps-v2-updated`\n\n**¿Ves el botón \"Add file\" en la interfaz de GitHub?**","size_bytes":1031},"VARIABLES-FALTANTES-RAILWAY.md":{"content":"# 🔧 Variables Adicionales para Railway - Basadas en tus Secrets\n\n## ✅ Variables que YA tienes configuradas:\n- DATABASE_URL ✓\n- NODE_ENV ✓ \n- PORT ✓\n- JWT_SECRET ✓\n\n## 🚀 Variables FALTANTES que debes agregar (basadas en tus secrets de Replit):\n\n### **OPENAI_API_KEY** \n- **Valor:** Usa el mismo que tienes en Replit secrets\n- **Función:** Activa chat inteligente con IA\n- **Importante:** Sin esto el chatbot no funcionará con IA\n\n### **STRIPE_SECRET_KEY**\n- **Valor:** Usa el mismo que tienes en Replit secrets  \n- **Función:** Procesar pagos y suscripciones\n- **Importante:** Sin esto no funcionarán los pagos\n\n### **STRIPE_WEBHOOK_SECRET** (Opcional)\n- **Valor:** Clave webhook de Stripe\n- **Función:** Validar webhooks de pago\n\n## 🎯 Cómo agregarlas:\n\n1. En Railway, haz clic **\"+ New Variable\"**\n2. **Agrega:**\n   - **Variable:** `OPENAI_API_KEY`\n   - **Valor:** Copia el mismo de tus Replit secrets\n3. **Agrega:**\n   - **Variable:** `STRIPE_SECRET_KEY`  \n   - **Valor:** Copia el mismo de tus Replit secrets\n\n## ⚡ Importancia:\n- **Sin OPENAI_API_KEY:** Chat básico solamente\n- **Con OPENAI_API_KEY:** Chat inteligente completo\n- **Sin STRIPE_SECRET_KEY:** Solo plan gratuito\n- **Con STRIPE_SECRET_KEY:** Sistema de pagos completo\n\n**¿Agregas estas 2 variables adicionales ahora?**","size_bytes":1312},"VARIABLES-OPCIONALES-RAILWAY.md":{"content":"# 🔧 Variables Opcionales para Railway - Funcionalidades Adicionales\n\n## ✅ Variables BÁSICAS (Ya configuradas - ¡Suficientes para funcionar!)\n- DATABASE_URL ✓\n- NODE_ENV ✓ \n- PORT ✓\n- JWT_SECRET ✓\n\n## 🚀 Variables OPCIONALES (Para funcionalidades avanzadas):\n\n### **OPENAI_API_KEY** (Para chat inteligente)\n- **Función:** Activa el chatbot con IA de OpenAI\n- **Sin esta variable:** El chat funcionará con respuestas básicas\n- **Con esta variable:** Chat inteligente y contextual\n\n### **STRIPE_SECRET_KEY** (Para pagos y suscripciones)\n- **Función:** Procesar pagos, planes premium\n- **Sin esta variable:** Solo plan gratuito disponible\n- **Con esta variable:** Pagos completos funcionando\n\n### **STRIPE_WEBHOOK_SECRET** (Para webhooks de Stripe)\n- **Función:** Validar eventos de pago\n- **Necesario solo si usas Stripe**\n\n### **SENDGRID_API_KEY** (Para envío de emails)\n- **Función:** Notificaciones por email, recuperación de contraseñas\n- **Sin esta variable:** No se envían emails\n- **Con esta variable:** Sistema de emails completo\n\n## 🎯 Recomendación actual:\n\n**¡Tu configuración actual es perfecta para empezar!**\n\n1. **Deploy ahora** con las 4 variables que tienes\n2. **Verifica que funciona** la aplicación web\n3. **Después agrega** las variables opcionales según necesites:\n   - Si quieres chat IA → OPENAI_API_KEY\n   - Si quieres pagos → STRIPE_SECRET_KEY\n   - Si quieres emails → SENDGRID_API_KEY\n\n## 🚀 ¿Qué hacer ahora?\n1. **Espera el deploy** (debería estar procesándose)\n2. **Verifica la URL** de la aplicación\n3. **Prueba que funciona**\n4. Luego agregamos variables opcionales si las necesitas\n\n**¿Ves el progreso del deploy en la pestaña \"Deployments\"?**","size_bytes":1721},"add-default-pricing-plans.js":{"content":"import pg from 'pg';\nconst { Pool } = pg;\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport { createRequire } from 'module';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst require = createRequire(import.meta.url);\n\n// Importar PRODUCTS desde el archivo stripe.ts mediante un pequeño hack\nconst stripePath = resolve(__dirname, './server/lib/stripe.js');\nconst { PRODUCTS } = await import(stripePath);\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nasync function createDefaultPricingPlans() {\n  console.log('Comenzando la creación de planes de precios predeterminados...');\n  \n  try {\n    // Verificar si ya existen planes en la base de datos\n    const { rows: existingPlans } = await pool.query('SELECT COUNT(*) as count FROM pricing_plans');\n    const planCount = parseInt(existingPlans[0].count);\n    \n    if (planCount > 0) {\n      console.log(`Ya existen ${planCount} planes de precios en la base de datos. No se crearán nuevos planes.`);\n      return;\n    }\n    \n    console.log('No se encontraron planes de precios. Creando planes predeterminados...');\n    \n    // Crear planes de precios a partir de la constante PRODUCTS\n    for (const [key, product] of Object.entries(PRODUCTS)) {\n      // Preparar datos para la inserción\n      const planData = {\n        planId: key.toLowerCase(),\n        name: product.name,\n        description: product.description,\n        price: product.price / 100, // Convertir de centavos a unidades para mantener consistencia con el frontend\n        priceDisplay: product.priceDisplay,\n        currency: product.currency || 'cad',\n        interval: product.interval || 'month',\n        features: JSON.stringify(product.features), // Almacenar características como JSON\n        tier: product.tier,\n        interactionsLimit: product.interactionsLimit,\n        isAnnual: !!product.isAnnual, // Convertir a booleano\n        discount: product.discount || null,\n        popular: !!product.popular, // Convertir a booleano\n        available: product.available === undefined ? true : product.available, // Predeterminado a true si no se especifica\n      };\n      \n      // Insertar plan en la base de datos\n      await pool.query(`\n        INSERT INTO pricing_plans \n        (plan_id, name, description, price, price_display, currency, interval, features, tier, interactions_limit, is_annual, discount, popular, available)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n      `, [\n        planData.planId,\n        planData.name,\n        planData.description,\n        planData.price,\n        planData.priceDisplay,\n        planData.currency,\n        planData.interval,\n        planData.features,\n        planData.tier,\n        planData.interactionsLimit,\n        planData.isAnnual,\n        planData.discount,\n        planData.popular,\n        planData.available\n      ]);\n      \n      console.log(`✓ Plan creado: ${planData.name} (${planData.planId})`);\n    }\n    \n    console.log('Todos los planes de precios se han creado correctamente.');\n  } catch (error) {\n    console.error('Error al crear planes de precios:', error);\n  } finally {\n    // Cerrar la conexión\n    await pool.end();\n  }\n}\n\n// Ejecutar la función\ncreateDefaultPricingPlans();","size_bytes":3325},"add-more-form-templates.js":{"content":"import pg from 'pg';\nconst { Pool } = pg;\nimport { drizzle } from 'drizzle-orm/node-postgres';\n\n// Conexión a la base de datos\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\n// Plantillas adicionales para alcanzar un total de 10\nconst additionalTemplates = [\n  {\n    name: \"Encuesta de Satisfacción\",\n    description: \"Obtén feedback valioso de tus clientes con esta encuesta de satisfacción.\",\n    type: \"survey\",\n    is_default: true,\n    structure: {\n      fields: [\n        {\n          type: \"rating\",\n          name: \"satisfaction\",\n          label: \"¿Cómo calificarías tu experiencia con nosotros?\",\n          required: true,\n          settings: {\n            min: 1,\n            max: 5,\n            icon: \"star\"\n          }\n        },\n        {\n          type: \"select\",\n          name: \"service_used\",\n          label: \"¿Qué servicio has utilizado?\",\n          required: true,\n          options: [\n            { label: \"Atención al cliente\", value: \"customer_service\" },\n            { label: \"Ventas\", value: \"sales\" },\n            { label: \"Soporte técnico\", value: \"technical_support\" },\n            { label: \"Otros\", value: \"other\" }\n          ]\n        },\n        {\n          type: \"textarea\",\n          name: \"feedback\",\n          label: \"¿Qué podríamos mejorar?\",\n          required: false,\n          placeholder: \"Tu opinión es muy importante para nosotros\"\n        },\n        {\n          type: \"checkbox\",\n          name: \"contact_permission\",\n          label: \"¿Podemos contactarte para seguimiento?\",\n          required: false\n        },\n        {\n          type: \"email\",\n          name: \"email\",\n          label: \"Tu correo electrónico\",\n          required: false,\n          conditional: {\n            field: \"contact_permission\",\n            value: true\n          }\n        }\n      ],\n      settings: {\n        submitLabel: \"Enviar encuesta\",\n        successMessage: \"¡Gracias por tu feedback!\"\n      }\n    },\n    styling: {\n      fontFamily: \"Inter, sans-serif\",\n      primaryColor: \"#4F46E5\",\n      borderRadius: \"8px\",\n      background: \"rgba(255, 255, 255, 0.95)\",\n      shadow: \"lg\"\n    }\n  },\n  {\n    name: \"Solicitud de Presupuesto\",\n    description: \"Formulario para solicitar presupuestos personalizados para tus clientes.\",\n    type: \"lead\",\n    is_default: true,\n    structure: {\n      fields: [\n        {\n          type: \"text\",\n          name: \"company_name\",\n          label: \"Nombre de la empresa\",\n          required: true,\n          placeholder: \"Tu empresa\"\n        },\n        {\n          type: \"text\",\n          name: \"contact_name\",\n          label: \"Nombre de contacto\",\n          required: true,\n          placeholder: \"Nombre completo\"\n        },\n        {\n          type: \"email\",\n          name: \"email\",\n          label: \"Correo electrónico\",\n          required: true,\n          placeholder: \"correo@ejemplo.com\"\n        },\n        {\n          type: \"tel\",\n          name: \"phone\",\n          label: \"Teléfono\",\n          required: false,\n          placeholder: \"+34 600000000\"\n        },\n        {\n          type: \"select\",\n          name: \"service_type\",\n          label: \"Tipo de servicio\",\n          required: true,\n          options: [\n            { label: \"Desarrollo web\", value: \"web_development\" },\n            { label: \"Diseño gráfico\", value: \"graphic_design\" },\n            { label: \"Marketing digital\", value: \"digital_marketing\" },\n            { label: \"Consultoría\", value: \"consulting\" },\n            { label: \"Otro\", value: \"other\" }\n          ]\n        },\n        {\n          type: \"textarea\",\n          name: \"project_details\",\n          label: \"Detalles del proyecto\",\n          required: true,\n          placeholder: \"Describe tu proyecto y necesidades específicas\"\n        },\n        {\n          type: \"number\",\n          name: \"budget\",\n          label: \"Presupuesto estimado (€)\",\n          required: false,\n          placeholder: \"1000\"\n        },\n        {\n          type: \"date\",\n          name: \"deadline\",\n          label: \"Fecha límite\",\n          required: false\n        }\n      ],\n      settings: {\n        submitLabel: \"Solicitar presupuesto\",\n        successMessage: \"¡Hemos recibido tu solicitud! Te contactaremos en breve.\"\n      }\n    },\n    styling: {\n      fontFamily: \"Poppins, sans-serif\",\n      primaryColor: \"#2563EB\",\n      borderRadius: \"4px\",\n      background: \"#FFFFFF\",\n      shadow: \"md\"\n    }\n  },\n  {\n    name: \"Registro para Webinar\",\n    description: \"Formulario optimizado para registrar asistentes a eventos virtuales.\",\n    type: \"registration\",\n    is_default: true,\n    structure: {\n      fields: [\n        {\n          type: \"text\",\n          name: \"name\",\n          label: \"Nombre completo\",\n          required: true,\n          placeholder: \"Tu nombre\"\n        },\n        {\n          type: \"email\",\n          name: \"email\",\n          label: \"Correo electrónico\",\n          required: true,\n          placeholder: \"correo@ejemplo.com\"\n        },\n        {\n          type: \"text\",\n          name: \"company\",\n          label: \"Empresa\",\n          required: false,\n          placeholder: \"Nombre de tu empresa\"\n        },\n        {\n          type: \"select\",\n          name: \"job_title\",\n          label: \"Cargo\",\n          required: false,\n          options: [\n            { label: \"Director/a\", value: \"director\" },\n            { label: \"Gerente\", value: \"manager\" },\n            { label: \"Técnico/a\", value: \"technical\" },\n            { label: \"Estudiante\", value: \"student\" },\n            { label: \"Otro\", value: \"other\" }\n          ]\n        },\n        {\n          type: \"select\",\n          name: \"how_found\",\n          label: \"¿Cómo nos encontraste?\",\n          required: true,\n          options: [\n            { label: \"Redes sociales\", value: \"social_media\" },\n            { label: \"Búsqueda en Google\", value: \"google\" },\n            { label: \"Recomendación\", value: \"referral\" },\n            { label: \"Email\", value: \"email\" },\n            { label: \"Otro\", value: \"other\" }\n          ]\n        },\n        {\n          type: \"checkbox\",\n          name: \"reminder\",\n          label: \"Quiero recibir un recordatorio por email 24h antes del evento\",\n          required: false,\n          default: true\n        },\n        {\n          type: \"checkbox\",\n          name: \"marketing_consent\",\n          label: \"Acepto recibir emails sobre futuros webinars y contenido relacionado\",\n          required: false\n        }\n      ],\n      settings: {\n        submitLabel: \"Confirmar registro\",\n        successMessage: \"¡Registro completado! Recibirás un email de confirmación.\"\n      }\n    },\n    styling: {\n      fontFamily: \"Roboto, sans-serif\",\n      primaryColor: \"#8B5CF6\",\n      borderRadius: \"8px\",\n      background: \"#F9FAFB\",\n      shadow: \"sm\"\n    }\n  },\n  {\n    name: \"Formulario de Pedido\",\n    description: \"Perfecto para tomar pedidos online de manera organizada.\",\n    type: \"order\",\n    is_default: true,\n    structure: {\n      fields: [\n        {\n          type: \"text\",\n          name: \"customer_name\",\n          label: \"Nombre del cliente\",\n          required: true,\n          placeholder: \"Nombre completo\"\n        },\n        {\n          type: \"email\",\n          name: \"email\",\n          label: \"Correo electrónico\",\n          required: true,\n          placeholder: \"correo@ejemplo.com\"\n        },\n        {\n          type: \"tel\",\n          name: \"phone\",\n          label: \"Teléfono\",\n          required: true,\n          placeholder: \"+34 600000000\"\n        },\n        {\n          type: \"textarea\",\n          name: \"shipping_address\",\n          label: \"Dirección de envío\",\n          required: true,\n          placeholder: \"Dirección completa incluyendo código postal\"\n        },\n        {\n          type: \"select\",\n          name: \"product\",\n          label: \"Producto\",\n          required: true,\n          options: [\n            { label: \"Producto A - 29.99€\", value: \"product_a\" },\n            { label: \"Producto B - 49.99€\", value: \"product_b\" },\n            { label: \"Producto C - 99.99€\", value: \"product_c\" },\n            { label: \"Pack Completo - 149.99€\", value: \"full_pack\" }\n          ]\n        },\n        {\n          type: \"number\",\n          name: \"quantity\",\n          label: \"Cantidad\",\n          required: true,\n          default: 1,\n          min: 1,\n          max: 10\n        },\n        {\n          type: \"select\",\n          name: \"payment_method\",\n          label: \"Método de pago\",\n          required: true,\n          options: [\n            { label: \"Tarjeta de crédito\", value: \"credit_card\" },\n            { label: \"PayPal\", value: \"paypal\" },\n            { label: \"Transferencia bancaria\", value: \"bank_transfer\" }\n          ]\n        },\n        {\n          type: \"textarea\",\n          name: \"notes\",\n          label: \"Notas adicionales\",\n          required: false,\n          placeholder: \"Instrucciones especiales para el pedido\"\n        }\n      ],\n      settings: {\n        submitLabel: \"Confirmar Pedido\",\n        successMessage: \"¡Pedido recibido! Recibirás un email de confirmación con los detalles.\"\n      }\n    },\n    styling: {\n      fontFamily: \"Lato, sans-serif\",\n      primaryColor: \"#10B981\",\n      borderRadius: \"6px\",\n      background: \"#FFFFFF\",\n      shadow: \"md\"\n    }\n  },\n  {\n    name: \"Evaluación de Evento\",\n    description: \"Recopila feedback detallado sobre tus eventos y conferencias.\",\n    type: \"feedback\",\n    is_default: true,\n    structure: {\n      fields: [\n        {\n          type: \"text\",\n          name: \"name\",\n          label: \"Nombre (opcional)\",\n          required: false,\n          placeholder: \"Tu nombre\"\n        },\n        {\n          type: \"select\",\n          name: \"event_name\",\n          label: \"Selecciona el evento\",\n          required: true,\n          options: [\n            { label: \"Conferencia anual 2025\", value: \"annual_conf_2025\" },\n            { label: \"Taller práctico - Mayo\", value: \"workshop_may\" },\n            { label: \"Webinar técnico - Junio\", value: \"tech_webinar_june\" }\n          ]\n        },\n        {\n          type: \"rating\",\n          name: \"overall_rating\",\n          label: \"Valoración general del evento\",\n          required: true,\n          settings: {\n            min: 1,\n            max: 5,\n            icon: \"star\"\n          }\n        },\n        {\n          type: \"rating\",\n          name: \"content_rating\",\n          label: \"Calidad del contenido\",\n          required: true,\n          settings: {\n            min: 1,\n            max: 5,\n            icon: \"star\"\n          }\n        },\n        {\n          type: \"rating\",\n          name: \"speaker_rating\",\n          label: \"Ponentes\",\n          required: true,\n          settings: {\n            min: 1,\n            max: 5,\n            icon: \"star\"\n          }\n        },\n        {\n          type: \"rating\",\n          name: \"organization_rating\",\n          label: \"Organización\",\n          required: true,\n          settings: {\n            min: 1,\n            max: 5,\n            icon: \"star\"\n          }\n        },\n        {\n          type: \"textarea\",\n          name: \"highlights\",\n          label: \"¿Qué fue lo mejor del evento?\",\n          required: false,\n          placeholder: \"Comparte lo que más te gustó\"\n        },\n        {\n          type: \"textarea\",\n          name: \"improvements\",\n          label: \"¿Qué podríamos mejorar?\",\n          required: false,\n          placeholder: \"Tus sugerencias son importantes\"\n        },\n        {\n          type: \"checkbox\",\n          name: \"future_events\",\n          label: \"Me gustaría recibir información sobre futuros eventos\",\n          required: false\n        }\n      ],\n      settings: {\n        submitLabel: \"Enviar evaluación\",\n        successMessage: \"¡Gracias por tu evaluación! Tu feedback nos ayuda a mejorar.\"\n      }\n    },\n    styling: {\n      fontFamily: \"Inter, sans-serif\",\n      primaryColor: \"#F59E0B\",\n      borderRadius: \"10px\",\n      background: \"#FFFBEB\",\n      shadow: \"md\"\n    }\n  },\n  {\n    name: \"Solicitud de Empleo\",\n    description: \"Optimizado para reclutar candidatos y revisar solicitudes de empleo.\",\n    type: \"application\",\n    is_default: true,\n    structure: {\n      fields: [\n        {\n          type: \"text\",\n          name: \"full_name\",\n          label: \"Nombre completo\",\n          required: true,\n          placeholder: \"Tu nombre completo\"\n        },\n        {\n          type: \"email\",\n          name: \"email\",\n          label: \"Correo electrónico\",\n          required: true,\n          placeholder: \"tu@email.com\"\n        },\n        {\n          type: \"tel\",\n          name: \"phone\",\n          label: \"Teléfono\",\n          required: true,\n          placeholder: \"+34 600000000\"\n        },\n        {\n          type: \"select\",\n          name: \"position\",\n          label: \"Puesto al que aplicas\",\n          required: true,\n          options: [\n            { label: \"Desarrollador/a Frontend\", value: \"frontend_dev\" },\n            { label: \"Desarrollador/a Backend\", value: \"backend_dev\" },\n            { label: \"Diseñador/a UX/UI\", value: \"ux_designer\" },\n            { label: \"Project Manager\", value: \"project_manager\" },\n            { label: \"Marketing Digital\", value: \"digital_marketing\" }\n          ]\n        },\n        {\n          type: \"textarea\",\n          name: \"experience\",\n          label: \"Experiencia relevante\",\n          required: true,\n          placeholder: \"Describe brevemente tu experiencia relacionada con el puesto\"\n        },\n        {\n          type: \"file\",\n          name: \"resume\",\n          label: \"Adjunta tu CV\",\n          required: true,\n          settings: {\n            allowedTypes: \".pdf,.doc,.docx\",\n            maxSize: 5 // en MB\n          }\n        },\n        {\n          type: \"file\",\n          name: \"portfolio\",\n          label: \"Portfolio (opcional)\",\n          required: false,\n          settings: {\n            allowedTypes: \".pdf,.zip,.url\",\n            maxSize: 10 // en MB\n          }\n        },\n        {\n          type: \"url\",\n          name: \"linkedin\",\n          label: \"Perfil de LinkedIn\",\n          required: false,\n          placeholder: \"https://linkedin.com/in/tu-perfil\"\n        },\n        {\n          type: \"select\",\n          name: \"availability\",\n          label: \"Disponibilidad\",\n          required: true,\n          options: [\n            { label: \"Inmediata\", value: \"immediate\" },\n            { label: \"En 2 semanas\", value: \"two_weeks\" },\n            { label: \"En 1 mes\", value: \"one_month\" },\n            { label: \"Más de 1 mes\", value: \"more_than_month\" }\n          ]\n        },\n        {\n          type: \"checkbox\",\n          name: \"data_consent\",\n          label: \"Doy mi consentimiento para el tratamiento de mis datos personales según la política de privacidad\",\n          required: true\n        }\n      ],\n      settings: {\n        submitLabel: \"Enviar solicitud\",\n        successMessage: \"¡Hemos recibido tu solicitud! Revisaremos tu perfil y te contactaremos en caso de avanzar en el proceso.\"\n      }\n    },\n    styling: {\n      fontFamily: \"Roboto, sans-serif\",\n      primaryColor: \"#3B82F6\",\n      borderRadius: \"4px\",\n      background: \"#F9FAFB\",\n      shadow: \"md\"\n    }\n  },\n  {\n    name: \"Registro a Newsletter\",\n    description: \"Forma sencilla para capturar suscriptores a tu boletín informativo.\",\n    type: \"subscription\",\n    is_default: true,\n    structure: {\n      fields: [\n        {\n          type: \"email\",\n          name: \"email\",\n          label: \"Tu correo electrónico\",\n          required: true,\n          placeholder: \"correo@ejemplo.com\"\n        },\n        {\n          type: \"text\",\n          name: \"first_name\",\n          label: \"Nombre\",\n          required: false,\n          placeholder: \"Tu nombre\"\n        },\n        {\n          type: \"select\",\n          name: \"interests\",\n          label: \"Temas de interés\",\n          required: false,\n          multiple: true,\n          options: [\n            { label: \"Tecnología\", value: \"tech\" },\n            { label: \"Marketing\", value: \"marketing\" },\n            { label: \"Diseño\", value: \"design\" },\n            { label: \"Negocios\", value: \"business\" },\n            { label: \"Productividad\", value: \"productivity\" }\n          ]\n        },\n        {\n          type: \"select\",\n          name: \"frequency\",\n          label: \"Frecuencia preferida\",\n          required: false,\n          options: [\n            { label: \"Diario\", value: \"daily\" },\n            { label: \"Semanal\", value: \"weekly\" },\n            { label: \"Quincenal\", value: \"biweekly\" },\n            { label: \"Mensual\", value: \"monthly\" }\n          ]\n        },\n        {\n          type: \"checkbox\",\n          name: \"consent\",\n          label: \"Acepto recibir comunicaciones comerciales y entiendo que puedo darme de baja en cualquier momento\",\n          required: true\n        }\n      ],\n      settings: {\n        submitLabel: \"Suscribirme\",\n        successMessage: \"¡Gracias por suscribirte! Por favor, confirma tu correo electrónico para completar el proceso.\"\n      }\n    },\n    styling: {\n      fontFamily: \"Inter, sans-serif\",\n      primaryColor: \"#6366F1\",\n      borderRadius: \"8px\",\n      background: \"#FFFFFF\",\n      shadow: \"sm\"\n    }\n  }\n];\n\n// Función para insertar plantillas\nasync function insertTemplates() {\n  try {\n    const client = await pool.connect();\n    \n    for (const template of additionalTemplates) {\n      console.log(`Insertando plantilla: ${template.name}`);\n      \n      // Comprobar si la plantilla ya existe\n      const checkQuery = 'SELECT id FROM form_templates WHERE name = $1';\n      const checkResult = await client.query(checkQuery, [template.name]);\n      \n      if (checkResult.rows.length > 0) {\n        console.log(`La plantilla \"${template.name}\" ya existe, saltando...`);\n        continue;\n      }\n      \n      // Insertar la nueva plantilla\n      const insertQuery = `\n        INSERT INTO form_templates (name, description, type, structure, styling, is_default)\n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING id\n      `;\n      \n      const result = await client.query(insertQuery, [\n        template.name,\n        template.description,\n        template.type,\n        JSON.stringify(template.structure),\n        JSON.stringify(template.styling),\n        template.is_default\n      ]);\n      \n      console.log(`Plantilla \"${template.name}\" creada con ID: ${result.rows[0].id}`);\n    }\n    \n    client.release();\n    console.log('Proceso completado con éxito.');\n  } catch (error) {\n    console.error('Error al insertar plantillas:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Ejecutar el script\ninsertTemplates();","size_bytes":18656},"add-pricing-plans.ts":{"content":"import { storage } from './server/storage';\nimport { PRODUCTS } from './server/lib/stripe';\n\n/**\n * Script para crear planes de precios predeterminados en la base de datos.\n * Este script utiliza la configuración definida en server/lib/stripe.ts.\n */\nasync function createDefaultPricingPlans() {\n  console.log('Comenzando la creación de planes de precios predeterminados...');\n  \n  try {\n    // Verificar si ya existen planes en la base de datos\n    const existingPlans = await storage.getPricingPlans();\n    \n    if (existingPlans.length > 0) {\n      console.log(`Ya existen ${existingPlans.length} planes de precios en la base de datos. No se crearán nuevos planes.`);\n      return;\n    }\n    \n    console.log('No se encontraron planes de precios. Creando planes predeterminados...');\n    \n    // Crear planes de precios a partir de la constante PRODUCTS\n    for (const [key, product] of Object.entries(PRODUCTS)) {\n      // Preparar datos para la inserción\n      const planData = {\n        planId: key.toLowerCase(),\n        name: product.name,\n        description: product.description,\n        price: product.price / 100, // Convertir de centavos a unidades para mantener consistencia con el frontend\n        priceDisplay: product.priceDisplay,\n        currency: product.currency || 'cad',\n        interval: product.interval || 'month',\n        features: product.features, // Ya es un array\n        tier: product.tier,\n        interactionsLimit: product.interactionsLimit,\n        isAnnual: !!product.isAnnual, // Convertir a booleano\n        discount: product.discount || null,\n        popular: !!product.popular, // Convertir a booleano\n        available: product.available === undefined ? true : product.available, // Predeterminado a true si no se especifica\n      };\n      \n      // Insertar plan en la base de datos\n      await storage.createPricingPlan(planData);\n      \n      console.log(`✓ Plan creado: ${planData.name} (${planData.planId})`);\n    }\n    \n    console.log('Todos los planes de precios se han creado correctamente.');\n  } catch (error) {\n    console.error('Error al crear planes de precios:', error);\n  }\n}\n\n// Ejecutar la función\ncreateDefaultPricingPlans();","size_bytes":2193},"clear-i18n-cache.js":{"content":"// Script temporal para limpiar el cache de i18next\nconsole.log('Limpiando cache de i18next...');\nlocalStorage.removeItem('i18nextLng');\nlocalStorage.removeItem('i18next');\nlocalStorage.clear();\nconsole.log('Cache limpiado. Recargando página...');\nwindow.location.reload();","size_bytes":274},"create-admin.js":{"content":"import bcrypt from 'bcrypt';\nimport pg from 'pg';\nimport crypto from 'crypto';\n\nconst { Pool } = pg;\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL\n});\n\nasync function createAdminUser() {\n  try {\n    // Generar una API key única\n    const apiKey = 'aipi_' + crypto.randomBytes(16).toString('hex');\n    \n    // Hashear la contraseña\n    const hashedPassword = await bcrypt.hash('admin1726', 10);\n    \n    // Verificar si el usuario ya existe\n    const checkResult = await pool.query(\n      'SELECT id FROM users WHERE username = $1',\n      ['admin']\n    );\n    \n    if (checkResult.rowCount > 0) {\n      // Actualizar el usuario existente\n      await pool.query(\n        `UPDATE users \n         SET password = $1, \n             api_key = $2\n         WHERE username = $3`,\n        [hashedPassword, apiKey, 'admin']\n      );\n      console.log('Usuario admin actualizado con nueva contraseña');\n    } else {\n      // Crear nuevo usuario admin\n      await pool.query(\n        `INSERT INTO users \n         (username, password, email, full_name, api_key, created_at) \n         VALUES ($1, $2, $3, $4, $5, NOW())`,\n        ['admin', hashedPassword, 'admin@example.com', 'Administrador', apiKey]\n      );\n      console.log('Usuario admin creado exitosamente');\n    }\n    \n    // Obtener el ID del usuario admin\n    const userResult = await pool.query(\n      'SELECT id FROM users WHERE username = $1',\n      ['admin']\n    );\n    \n    const userId = userResult.rows[0].id;\n    \n    // Crear una suscripción Enterprise con acceso ilimitado\n    const checkSubscription = await pool.query(\n      'SELECT id FROM subscriptions WHERE user_id = $1 AND tier = $2',\n      [userId, 'enterprise']\n    );\n    \n    if (checkSubscription.rowCount === 0) {\n      // Crear una nueva suscripción Enterprise\n      await pool.query(\n        `INSERT INTO subscriptions \n         (user_id, tier, status, interactions_limit, interactions_used, \n          created_at, updated_at, start_date, end_date, \n          stripe_customer_id, stripe_price_id, stripe_subscription_id)\n         VALUES ($1, $2, $3, $4, $5, NOW(), NOW(), NOW(), $6, $7, $8, $9)`,\n        [\n          userId, \n          'enterprise', \n          'active', \n          99999, // Límite prácticamente ilimitado\n          0,\n          new Date(new Date().setFullYear(new Date().getFullYear() + 10)), // 10 años de suscripción\n          'admin_customer', // ID de cliente ficticio para admin\n          'price_enterprise', // ID de precio ficticio\n          'sub_admin_enterprise' // ID de suscripción ficticio\n        ]\n      );\n      console.log('Suscripción Enterprise creada para usuario admin');\n    } else {\n      console.log('El usuario admin ya tiene una suscripción Enterprise');\n    }\n    \n    console.log('Proceso completado exitosamente');\n  } catch (error) {\n    console.error('Error al crear usuario admin:', error);\n  } finally {\n    // Cerrar la conexión\n    pool.end();\n  }\n}\n\ncreateAdminUser();","size_bytes":2978},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"railway-migrate.js":{"content":"import { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nconsole.log('🚀 Iniciando migración de base de datos para Railway...');\n\n// Verificar que DATABASE_URL existe\nif (!process.env.DATABASE_URL) {\n  console.error('❌ ERROR: DATABASE_URL no está definido. No se puede migrar la base de datos.');\n  console.error('💡 Asegúrate de haber provisionado PostgreSQL en Railway y configurado DATABASE_URL');\n  process.exit(1);\n}\n\nconsole.log('✅ DATABASE_URL encontrado, iniciando migración...');\n\ntry {\n  // Ejecutar la migración con sintaxis moderna\n  console.log('📊 Ejecutando drizzle-kit push...');\n  execSync('npx drizzle-kit push', { \n    stdio: 'inherit',\n    env: { ...process.env }\n  });\n  \n  console.log('✨ Migración completada con éxito!');\n  console.log('📋 Base de datos Railway configurada y lista para usar');\n} catch (error) {\n  console.error('💥 Error durante la migración:', error.message);\n  console.error('🔍 Verifica que DATABASE_URL sea válido y la base de datos esté accesible');\n  process.exit(1);\n}","size_bytes":1076},"railway-start.sh":{"content":"#!/bin/bash\n\n# Imprimir mensaje de inicio\necho \"🚀 ===== Iniciando despliegue AIPI en Railway ======\"\n\n# Verificar variables críticas\necho \"🔍 Verificando variables de entorno...\"\nif [ -z \"$DATABASE_URL\" ]; then\n  echo \"❌ ERROR: DATABASE_URL no está definido\"\n  echo \"💡 Asegúrate de configurar DATABASE_URL=\\${{Postgres.DATABASE_URL}} en Railway\"\n  exit 1\nfi\n\nif [ -z \"$NODE_ENV\" ]; then\n  echo \"⚠️ WARNING: NODE_ENV no definido, configurando a production\"\n  export NODE_ENV=production\nfi\n\nif [ -z \"$PORT\" ]; then\n  echo \"⚠️ WARNING: PORT no definido, usando puerto 5000\"\n  export PORT=5000\nfi\n\necho \"✅ Variables verificadas: NODE_ENV=$NODE_ENV, PORT=$PORT\"\n\n# Paso 1: Verificar conexión a base de datos\necho \"🔌 Verificando conexión a PostgreSQL...\"\nnode -e \"\nconst pg = require('pg');\nconst pool = new pg.Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n});\n\npool.query('SELECT 1 as test')\n  .then(() => {\n    console.log('✅ Conexión a base de datos exitosa');\n    return pool.end();\n  })\n  .catch(err => {\n    console.error('❌ Error conectando a base de datos:', err.message);\n    process.exit(1);\n  });\n\"\n\n# Paso 2: Ejecutar migraciones de base de datos\necho \"📊 Ejecutando migraciones de schema con drizzle-kit...\"\nnpx drizzle-kit push --force\n\nif [ $? -ne 0 ]; then\n  echo \"❌ ERROR: Migración de schema falló\"\n  exit 1\nfi\n\necho \"✅ Migraciones de schema completadas\"\n\n# Paso 3: Configurar datos iniciales\necho \"🏗️  Configurando datos iniciales de AIPI...\"\nnpx tsx setup-railway-db.js\n\nif [ $? -ne 0 ]; then\n  echo \"❌ ERROR: Configuración de datos iniciales falló\"\n  echo \"🔍 Revisa logs arriba para detalles del error\"\n  exit 1\nfi\n\necho \"✅ Configuración de base de datos completada exitosamente\"\n\n# Paso 4: Verificar datos críticos - SOLO migrar si NO estamos en Railway g\nif [ \"$RAILWAY_ENVIRONMENT_NAME\" = \"production\" ] || [ \"$RAILWAY_ENVIRONMENT_NAME\" = \"staging\" ]; then\n  echo \"✅ En Railway - Datos críticos ya configurados en setup-railway-db.js\"\n  echo \"✅ Usuario Pablo y admin ya creados exitosamente\"\n  echo \"✅ Saltando migración local - no necesaria en Railway\"\nelse\n  echo \"🔄 Migrando datos críticos de Replit...\"\n  echo \"⚠️ Ejecutando solo en entorno Replit...\"\nfi\n\necho \"✅ Migración de datos completada\"\n\n# Paso 5: Iniciar la aplicación\necho \"🌐 Iniciando servidor AIPI en producción...\"\necho \"📡 Puerto: $PORT\"\necho \"🗄️ Base de datos: Conectado\"\necho \"🚀 Estado: Producción\"\n\n# DESPUÉS (línea 87):\nNODE_ENV=production PORT=${PORT:-5000} npx tsx server/index.ts --host 0.0.0.0\n","size_bytes":2674},"replit.md":{"content":"# AIPI - AI-Powered Conversational Platform\n\n## Overview\n\nAIPI is an advanced conversational AI platform for websites, offering intelligent chat widgets and integrated form solutions. It aims to provide dynamic interaction tools and communication solutions, enhancing user engagement and data collection on client websites. Key capabilities include bubble-style and fullscreen chat interfaces, and embeddable form solutions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (September 2025)\n\n### Railway Deployment Preparation - COMPLETED\n- **Problem Solved**: Aplicación necesitaba adaptarse completamente para Railway deployment\n- **Solution Implemented**: Configuración completa de Railway con PostgreSQL estándar\n- **Technical Details**:\n  - Migración de Neon Serverless a PostgreSQL estándar con pg y drizzle-orm/node-postgres\n  - Scripts de migración modernizados con drizzle-kit sintaxis actual\n  - Archivo setup-railway-db.js completamente funcional para inicialización automática\n  - Configuración SSL para producción en Railway\n  - railway-start.sh optimizado con verificación de variables y conexión DB\n  - Health check endpoint en /api/health para Railway monitoring\n  - Script de backup completo (create-replit-backup.js) para preservar datos\n  - Script de restauración (restore-railway-data.js) para migrar datos existentes\n  - Build de producción verificado y funcionando correctamente\n  - RAILWAY-DEPLOY-INSTRUCTIONS.md con guía paso a paso completa\n- **Files Modified**: server/db.ts, railway-start.sh, railway.json, setup-railway-db.js, server/routes.ts\n- **Files Created**: create-replit-backup.js, restore-railway-data.js, RAILWAY-DEPLOY-INSTRUCTIONS.md\n- **Result**: Aplicación 100% lista para deploy profesional en Railway con migración de datos automática\n- **Date**: September 2, 2025\n\n## Previous Changes (August 2025)\n\n### Dynamic Text Contrast System - COMPLETED\n- **Problem Solved**: Text readability issues with different widget background colors\n- **Solution Implemented**: Automatic luminance-based text color calculation\n- **Technical Details**: \n  - WCAG-compliant luminance calculations (threshold: 0.6)\n  - Real-time color recalculation after server configuration loads\n  - CSS injection with !important rules for reliable application\n  - Comprehensive debug tools for testing and validation\n- **Result**: Perfect text contrast across all widget configurations\n- **Date**: August 15, 2025\n\n### Manual Text Color Control - COMPLETED\n- **Problem Solved**: Users needed manual override for automatic text color calculations\n- **Solution Implemented**: Manual text color selection with three options\n- **Technical Details**:\n  - Database schema updated with `textColor` field in integrations table\n  - Three options: 'auto' (default), 'white', 'black'\n  - Integration in both bubble and fullscreen widgets\n  - Auto-save functionality in edit-integration interface\n  - Override system that respects manual selection over automatic calculation\n- **Result**: Users can force white or black text regardless of background color\n- **Date**: August 15, 2025\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **UI Library**: Tailwind CSS with Shadcn UI components\n- **State Management**: React Query\n- **Build Tool**: Vite\n- **Widget Scripts**: Multiple embeddable JavaScript widgets for external integration.\n- **UI/UX Decisions**: Dynamic typography, adaptive color schemes based on widget themes, professional styling with rounded corners, shadows, and border accents. Support for visual formatting in chatbot responses including titles, lists, and emphasis.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript\n- **Authentication**: JWT-based authentication with cookie support\n- **File Processing**: Document processing for PDF, DOCX formats.\n- **API Design**: RESTful API.\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM (via Neon serverless).\n- **Schema Management**: Drizzle Kit for migrations.\n\n### Key Components\n- **Chat Widget System**: Bubble, fullscreen, and modern form integrations with embeddable JavaScript and real-time communication. Includes intelligent conflict detection and dynamic text contrast adaptation.\n- **Document Processing Engine**: Supports PDF, DOCX, and plain text content extraction for knowledge base integration.\n- **AI Integration Layer**: Utilizes OpenAI GPT-4o-mini for chat completion, sentiment analysis, and summarization, building context-aware knowledge bases from scraped content.\n- **Form Management System**: Dynamic, template-based form generation with external embedding and comprehensive data collection.\n- **Payment Integration**: Stripe for payment processing, subscription management, and webhook handling for tiered pricing plans.\n- **Internationalization**: Complete multilingual support with 100% translation coverage for UI elements, messages, and content across English, Spanish, and French. Eliminated all raw technical data and underscore-separated text from UI. All translation keys return proper strings (not objects) with comprehensive analytics chart translations.\n- **Dynamic Text Contrast System**: Automatic text color calculation based on background luminance for optimal readability across all widget configurations. Uses WCAG-compliant luminance calculations with configurable thresholds.\n\n## External Dependencies\n\n- **OpenAI API**: AI model access for chat completions.\n- **Stripe**: Payment processing and subscription management.\n- **PostgreSQL**: Primary database.\n- **Google Calendar API**: Appointment scheduling.\n- **Outlook Calendar API**: Microsoft calendar integration.\n- **SendGrid/AWS SES**: Email notification services.","size_bytes":5810},"scrape-techcolca.js":{"content":"import { WebScraper } from './server/lib/webscraper.ts';\nimport { MemStorage } from './server/storage.ts';\n\nasync function scrapeTechcolcaSite() {\n  try {\n    console.log('Iniciando scraping del sitio Techcolca...');\n    \n    // Crear instancia del webscraper\n    const scraper = new WebScraper();\n    \n    // Hacer scraping del sitio de Techcolca\n    const scrapedData = await scraper.scrapeSite('https://techcolca.ca/', 5);\n    \n    console.log(`Scraping completado. Páginas procesadas: ${scrapedData.pagesProcessed}`);\n    console.log(`Total de páginas encontradas: ${scrapedData.pages.length}`);\n    \n    // Inicializar storage\n    const storage = new MemStorage();\n    \n    // Insertar contenido en la base de datos\n    for (const pageContent of scrapedData.pages) {\n      console.log(`Guardando contenido de: ${pageContent.url}`);\n      \n      // Crear nuevo contenido del sitio\n      await storage.createSiteContent({\n        url: pageContent.url,\n        content: pageContent.content,\n        title: pageContent.title,\n        integrationId: 8 // ID de la integración Techcolca\n      });\n      \n      console.log(`✓ Contenido guardado: ${pageContent.title}`);\n    }\n    \n    console.log('✅ Scraping y guardado completado exitosamente');\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Error durante el scraping:', error);\n    process.exit(1);\n  }\n}\n\nscrapeTechcolcaSite();","size_bytes":1403},"setup-railway-db.js":{"content":"// Archivo para crear todas las tablas necesarias en la base de datos durante el despliegue en Railway\nimport pg from 'pg';\nconst { Pool } = pg;\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport { eq } from 'drizzle-orm';\nimport * as schema from './shared/schema.ts';\nimport bcrypt from 'bcrypt';\n\nconst { users, integrations, pricingPlans, welcomeMessages } = schema;\n\nasync function setupDatabase() {\n  console.log('🏗️  Configurando base de datos inicial para Railway...');\n  \n  if (!process.env.DATABASE_URL) {\n    console.error('❌ ERROR: DATABASE_URL no está configurado. No se puede inicializar la base de datos.');\n    process.exit(1);\n  }\n  \n  try {\n    console.log('🔌 Conectando a la base de datos Railway PostgreSQL...');\n    const pool = new Pool({ \n      connectionString: process.env.DATABASE_URL,\n      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n    });\n    const db = drizzle(pool, { schema });\n    \n    console.log('✅ Conexión a base de datos establecida');\n\n    // Crear usuario administrador por defecto si no existe\n    const adminEmail = 'admin@aipi.com';\n    try {\n      const existingAdmin = await db.select().from(users).where(eq(users.email, adminEmail)).limit(1);\n\n      if (existingAdmin.length === 0) {\n        console.log('👤 Creando usuario administrador por defecto...');\n        \n        const hashedPassword = await bcrypt.hash('admin123', 10);\n        const apiKey = 'aipi_admin_' + Math.random().toString(36).substring(2, 15);\n\n        await db.insert(users).values({\n          username: 'admin',\n          email: adminEmail,\n          password: hashedPassword,\n          fullName: 'Administrador AIPI',\n          apiKey: apiKey\n        });\n        \n        console.log('✅ Usuario administrador creado');\n      } else {\n        console.log('👤 Usuario administrador ya existe');\n      }\n\n      // Crear usuario Pablo si no existe\n      const pabloEmail = 'techcolca@gmail.com';\n      const existingPablo = await db.select().from(users).where(eq(users.email, pabloEmail)).limit(1);\n\n      if (existingPablo.length === 0) {\n        console.log('👤 Creando usuario Pablo...');\n        \n        const hashedPasswordPablo = await bcrypt.hash('pablo123', 10);\n        const apiKeyPablo = 'aipi_pablo_' + Math.random().toString(36).substring(2, 15);\n\n        const [pablo] = await db.insert(users).values({\n          username: 'Pablo',\n          email: pabloEmail,\n          password: hashedPasswordPablo,\n          fullName: 'Pablo Techcolca',\n          apiKey: apiKeyPablo\n        }).returning();\n        \n        console.log('✅ Usuario Pablo creado con ID:', pablo.id);\n\n        // Crear integración básica para Pablo\n        console.log('🔗 Creando integración para Pablo...');\n        await db.insert(integrations).values({\n          userId: pablo.id,\n          name: 'Sitio Principal',\n          url: 'https://mi-sitio.com',\n          apiKey: 'int_pablo_' + Math.random().toString(36).substring(2, 15),\n          themeColor: '#3b82f6',\n          position: 'bottom-right',\n          active: true,\n          widgetType: 'bubble',\n          language: 'es',\n          description: 'Integración principal de Pablo',\n          botBehavior: 'Sé amable y profesional, responde de manera precisa a las preguntas sobre el sitio web.'\n        });\n        console.log('✅ Integración de Pablo creada');\n        \n      } else {\n        console.log('👤 Usuario Pablo ya existe');\n      }\n\n    } catch (error) {\n      console.log('⚠️  No se pudo crear usuarios (tabla puede no existir aún):', error.message);\n    }\n\n    // Crear planes de precios por defecto si no existen\n    console.log('💰 Verificando planes de precios...');\n    try {\n      const existingPlans = await db.select().from(pricingPlans).limit(1);\n\n      if (existingPlans.length === 0) {\n        console.log('📋 Creando planes de precios por defecto...');\n        \n        const defaultPlans = [\n          {\n            planId: 'free',\n            name: 'Free',\n            description: 'Plan gratuito con funciones básicas',\n            price: 0,\n            priceDisplay: '$0/mes',\n            currency: 'cad',\n            interval: 'month',\n            features: ['100 mensajes/mes', '1 integración', 'Soporte básico'],\n            tier: 'free',\n            interactionsLimit: 100,\n            isAnnual: false,\n            discount: null,\n            popular: false,\n            available: true,\n            stripeProductId: null,\n            stripePriceId: null\n          },\n          {\n            planId: 'pro',\n            name: 'Pro',\n            description: 'Plan profesional para empresas',\n            price: 2900,\n            priceDisplay: '$29/mes',\n            currency: 'cad',\n            interval: 'month',\n            features: ['5,000 mensajes/mes', '10 integraciones', 'Soporte prioritario', 'Analytics avanzados'],\n            tier: 'pro',\n            interactionsLimit: 5000,\n            isAnnual: false,\n            discount: null,\n            popular: true,\n            available: true,\n            stripeProductId: null,\n            stripePriceId: null\n          },\n          {\n            planId: 'enterprise',\n            name: 'Enterprise',\n            description: 'Plan empresarial con funciones avanzadas',\n            price: 9900,\n            priceDisplay: '$99/mes',\n            currency: 'cad',\n            interval: 'month',\n            features: ['Mensajes ilimitados', 'Integraciones ilimitadas', 'Soporte 24/7', 'API completa', 'White-label'],\n            tier: 'enterprise',\n            interactionsLimit: -1,\n            isAnnual: false,\n            discount: null,\n            popular: false,\n            available: true,\n            stripeProductId: null,\n            stripePriceId: null\n          }\n        ];\n\n        await db.insert(pricingPlans).values(defaultPlans);\n        console.log('✅ Planes de precios creados');\n      } else {\n        console.log('💰 Planes de precios ya existen');\n      }\n    } catch (error) {\n      console.log('⚠️  No se pudieron crear planes de precios (tabla puede no existir aún):', error.message);\n    }\n\n    // Crear mensajes de bienvenida por defecto si no existen\n    console.log('💬 Verificando mensajes de bienvenida...');\n    try {\n      const existingMessages = await db.select().from(welcomeMessages).limit(1);\n\n      if (existingMessages.length === 0) {\n        console.log('📝 Creando mensajes de bienvenida por defecto...');\n        \n        const defaultMessages = [\n          {\n            messageText: '🚀 ¡Transforma tu sitio web con AI conversacional inteligente!',\n            messageTextFr: '🚀 Transformez votre site web avec une IA conversationnelle intelligente!',\n            messageTextEn: '🚀 Transform your website with intelligent conversational AI!',\n            messageType: 'commercial',\n            isActive: true,\n            expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),\n            orderIndex: 1\n          },\n          {\n            messageText: '💬 Crea experiencias únicas para tus visitantes con AIPI',\n            messageTextFr: '💬 Créez des expériences uniques pour vos visiteurs avec AIPI',\n            messageTextEn: '💬 Create unique experiences for your visitors with AIPI',\n            messageType: 'commercial',\n            isActive: true,\n            expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),\n            orderIndex: 2\n          },\n          {\n            messageText: '🎯 Automatiza atención al cliente 24/7 con inteligencia artificial',\n            messageTextFr: '🎯 Automatisez le service client 24/7 avec intelligence artificielle',\n            messageTextEn: '🎯 Automate 24/7 customer service with artificial intelligence',\n            messageType: 'automation',\n            isActive: true,\n            expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),\n            orderIndex: 3\n          }\n        ];\n\n        await db.insert(welcomeMessages).values(defaultMessages);\n        console.log('✅ Mensajes de bienvenida creados');\n      } else {\n        console.log('💬 Mensajes de bienvenida ya existen');\n      }\n    } catch (error) {\n      console.log('⚠️  No se pudieron crear mensajes de bienvenida (tabla puede no existir aún):', error.message);\n    }\n    \n    console.log('🎉 Configuración de base de datos completada exitosamente!');\n    console.log('📊 Base de datos Railway lista para producción');\n    await pool.end();\n    \n    return true;\n  } catch (error) {\n    console.error('💥 Error configurando la base de datos:', error.message);\n    console.error('🔍 Detalles del error:', error);\n    return false;\n  }\n}\n\n// Ejecutar la configuración\nsetupDatabase()\n  .then(success => {\n    if (success) {\n      console.log('La base de datos está lista para usar.');\n      process.exit(0);\n    } else {\n      console.error('No se pudo configurar la base de datos.');\n      process.exit(1);\n    }\n  })\n  .catch(error => {\n    console.error('Error inesperado:', error);\n    process.exit(1);\n  });\n","size_bytes":9111},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"temp-lang-change.js":{"content":"console.log('Setting language to French'); localStorage.setItem('i18nextLng', 'fr'); window.location.reload();\n","size_bytes":111},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  server: {\n    hmr: {\n      overlay: true,\n      protocol: 'ws',\n      host: '0.0.0.0',\n    },\n    host: '0.0.0.0',\n    port: 5000,\n  },\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1207},"migrations/add_welcome_chat_scraping_fields.js":{"content":"import { Pool } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { sql } from 'drizzle-orm';\nimport ws from 'ws';\n\n// Configuración de conexión a la base de datos\nconst connectionString = process.env.DATABASE_URL;\n\nif (!connectionString) {\n  console.error('ERROR: DATABASE_URL debe estar definida como variable de entorno');\n  process.exit(1);\n}\n\n// Configurar Neon para WebSockets\nimport { neonConfig } from '@neondatabase/serverless';\nneonConfig.webSocketConstructor = ws;\n\n// Crear pool de conexiones\nconst pool = new Pool({ connectionString });\nconst db = drizzle(pool);\n\n/**\n * Migración para añadir los campos relacionados con el scraping al chatbot de bienvenida\n */\nasync function addWelcomeChatScrapingFields() {\n  try {\n    console.log('Añadiendo campos de scraping a la tabla de configuración...');\n    \n    // Verificar si los campos ya existen\n    const columnsResult = await db.execute(sql`\n      SELECT column_name \n      FROM information_schema.columns \n      WHERE table_name = 'settings' \n      AND (column_name = 'welcome_page_chat_scraping_enabled' \n           OR column_name = 'welcome_page_chat_scraping_depth'\n           OR column_name = 'welcome_page_chat_scraping_data')\n    `);\n    \n    const existingColumns = columnsResult.rows.map(row => row.column_name);\n    \n    // Añadir los campos que no existan\n    if (!existingColumns.includes('welcome_page_chat_scraping_enabled')) {\n      await db.execute(sql`\n        ALTER TABLE settings \n        ADD COLUMN welcome_page_chat_scraping_enabled BOOLEAN DEFAULT false\n      `);\n      console.log('Campo welcome_page_chat_scraping_enabled añadido');\n    }\n    \n    if (!existingColumns.includes('welcome_page_chat_scraping_depth')) {\n      await db.execute(sql`\n        ALTER TABLE settings \n        ADD COLUMN welcome_page_chat_scraping_depth INTEGER DEFAULT 5\n      `);\n      console.log('Campo welcome_page_chat_scraping_depth añadido');\n    }\n    \n    if (!existingColumns.includes('welcome_page_chat_scraping_data')) {\n      await db.execute(sql`\n        ALTER TABLE settings \n        ADD COLUMN welcome_page_chat_scraping_data TEXT\n      `);\n      console.log('Campo welcome_page_chat_scraping_data añadido');\n    }\n    \n    console.log('Migración completada exitosamente');\n  } catch (error) {\n    console.error('Error durante la migración:', error);\n    throw error;\n  }\n}\n\n// Ejecutar la migración\naddWelcomeChatScrapingFields()\n  .then(() => {\n    console.log('Migración completada con éxito');\n    process.exit(0);\n  })\n  .catch(error => {\n    console.error('Error ejecutando la migración:', error);\n    process.exit(1);\n  });","size_bytes":2669},"migrations/add_welcome_chat_settings.js":{"content":"import pg from 'pg';\nconst { Pool } = pg;\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL\n});\n\nasync function addWelcomeChatSettings() {\n  try {\n    console.log('Iniciando migración para agregar configuración del chatbot de bienvenida...');\n    \n    // Verificar si las columnas ya existen\n    const checkColumnsQuery = `\n      SELECT column_name \n      FROM information_schema.columns \n      WHERE table_name = 'settings' \n      AND column_name = 'welcome_page_chat_greeting';\n    `;\n    \n    const checkResult = await pool.query(checkColumnsQuery);\n    \n    if (checkResult.rows.length > 0) {\n      console.log('Las columnas para la configuración del chatbot de bienvenida ya existen.');\n      return;\n    }\n    \n    // Añadir nuevas columnas a la tabla settings\n    const addColumnsQuery = `\n      ALTER TABLE settings\n      ADD COLUMN IF NOT EXISTS welcome_page_chat_enabled BOOLEAN DEFAULT true,\n      ADD COLUMN IF NOT EXISTS welcome_page_chat_greeting TEXT DEFAULT '👋 ¡Hola! Soy AIPPS, tu asistente de IA. ¿En qué puedo ayudarte hoy?',\n      ADD COLUMN IF NOT EXISTS welcome_page_chat_bubble_color TEXT DEFAULT '#111827',\n      ADD COLUMN IF NOT EXISTS welcome_page_chat_text_color TEXT DEFAULT '#FFFFFF',\n      ADD COLUMN IF NOT EXISTS welcome_page_chat_behavior TEXT DEFAULT 'Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.';\n    `;\n    \n    await pool.query(addColumnsQuery);\n    \n    console.log('Migración completada exitosamente.');\n  } catch (error) {\n    console.error('Error durante la migración:', error);\n  } finally {\n    pool.end();\n  }\n}\n\n// Ejecutar la migración\naddWelcomeChatSettings();","size_bytes":1689},"migrations/update-pricing-plans-document.js":{"content":"import pg from 'pg';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst { Pool } = pg;\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n});\n\n/**\n * Script para actualizar los planes de precios según el documento específico\n * PLAN 1: BÁSICO - $7 USD/mes\n * PLAN 2: STARTUP - $29 USD/mes  \n * PLAN 3: PROFESIONAL - $89 USD/mes\n * PLAN 4: EMPRESARIAL - $299 USD/mes\n */\nasync function updatePricingPlansFromDocument() {\n  console.log('Actualizando planes de precios según documento específico...');\n  \n  try {\n    // Primero eliminar planes existentes para evitar conflictos\n    await pool.query('DELETE FROM pricing_plans');\n    console.log('Planes existentes eliminados.');\n\n    // Definir los nuevos planes según el documento\n    const newPlans = [\n      {\n        planId: 'basic',\n        name: 'Básico',\n        description: 'Plan básico para sitios web pequeños',\n        price: 700, // $7 USD en centavos\n        priceDisplay: '$7 USD',\n        currency: 'usd',\n        interval: 'month',\n        features: [\n          '500 conversaciones/mes',\n          '1 formulario personalizable (2 plantillas disponibles)',\n          'Widget de chat tipo burbuja únicamente',\n          'Integración en 1 sitio web',\n          'Procesamiento de documentos básico (PDF, DOCX)',\n          'Captura básica de leads',\n          'Análisis básicos de conversaciones',\n          'Soporte por email',\n          'Personalización limitada de branding'\n        ],\n        tier: 'basic',\n        interactionsLimit: 500,\n        isAnnual: false,\n        discount: null,\n        popular: false,\n        available: true\n      },\n      {\n        planId: 'startup',\n        name: 'Startup',\n        description: 'Perfecto para negocios en crecimiento',\n        price: 2900, // $29 USD en centavos\n        priceDisplay: '$29 USD',\n        currency: 'usd',\n        interval: 'month',\n        features: [\n          '2,000 conversaciones/mes',\n          '5 formularios personalizables (todas las plantillas)',\n          'Widget chat + modo pantalla completa tipo ChatGPT',\n          'Integración en hasta 3 sitios web',\n          'Procesamiento avanzado de documentos',\n          'Base de conocimiento personalizada',\n          'Captura y seguimiento de leads',\n          'Análisis avanzados con métricas',\n          'Personalización completa de branding',\n          'Soporte prioritario por email y chat',\n          'Exportación de datos básica'\n        ],\n        tier: 'startup',\n        interactionsLimit: 2000,\n        isAnnual: false,\n        discount: null,\n        popular: true,\n        available: true\n      },\n      {\n        planId: 'professional',\n        name: 'Profesional',\n        description: 'Para empresas profesionales',\n        price: 8900, // $89 USD en centavos\n        priceDisplay: '$89 USD',\n        currency: 'usd',\n        interval: 'month',\n        features: [\n          '10,000 conversaciones/mes',\n          'Formularios ilimitados',\n          'Todas las funciones del plan Profesional',\n          'Integración en sitios web ilimitados',\n          'Automatizaciones básicas (respuestas automáticas)',\n          'Integración con CRM (Salesforce, HubSpot)',\n          'API de acceso para desarrolladores',\n          'Análisis avanzados con reportes personalizados',\n          'Exportación de datos en múltiples formatos',\n          'Respaldos automáticos',\n          'Gestión de equipos (hasta 5 usuarios)',\n          'Soporte por email, chat y telefónico',\n          'Onboarding personalizado'\n        ],\n        tier: 'professional',\n        interactionsLimit: 10000,\n        isAnnual: false,\n        discount: null,\n        popular: false,\n        available: true\n      },\n      {\n        planId: 'enterprise',\n        name: 'Empresarial',\n        description: 'Plan completo con IA automatizada',\n        price: 29900, // $299 USD en centavos\n        priceDisplay: '$299 USD',\n        currency: 'usd',\n        interval: 'month',\n        features: [\n          'Conversaciones ilimitadas',\n          'Formularios ilimitados',\n          'Todas las funciones disponibles',\n          'Integración en sitios web ilimitados',\n          'Automatizaciones completas con IA',\n          'IA local o IA normal',\n          'Integración con todos los CRM',\n          'API completa para desarrolladores',\n          'Análisis empresariales avanzados',\n          'Exportación de datos ilimitada',\n          'Respaldos automáticos diarios',\n          'Gestión de equipos ilimitada',\n          'Soporte 24/7 dedicado',\n          'Gerente de cuenta dedicado',\n          'SLA garantizado'\n        ],\n        tier: 'enterprise',\n        interactionsLimit: 999999,\n        isAnnual: false,\n        discount: null,\n        popular: false,\n        available: true\n      }\n    ];\n\n    // Insertar los nuevos planes\n    for (const plan of newPlans) {\n      await pool.query(`\n        INSERT INTO pricing_plans \n        (plan_id, name, description, price, price_display, currency, interval, features, tier, interactions_limit, is_annual, discount, popular, available)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n      `, [\n        plan.planId,\n        plan.name,\n        plan.description,\n        plan.price,\n        plan.priceDisplay,\n        plan.currency,\n        plan.interval,\n        JSON.stringify(plan.features),\n        plan.tier,\n        plan.interactionsLimit,\n        plan.isAnnual,\n        plan.discount,\n        plan.popular,\n        plan.available\n      ]);\n      \n      console.log(`✓ Plan creado: ${plan.name} (${plan.planId}) - ${plan.priceDisplay}`);\n    }\n    \n    console.log('Todos los planes de precios han sido actualizados correctamente según el documento.');\n  } catch (error) {\n    console.error('Error al actualizar planes de precios:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Ejecutar si se llama directamente\nif (import.meta.url === `file://${process.argv[1]}`) {\n  updatePricingPlansFromDocument();\n}\n\nexport { updatePricingPlansFromDocument };","size_bytes":6151},"public/embed.js":{"content":"(function() {\n  // AIPI Widget Configuration\n  const config = {\n    apiKey: \"\",\n    position: \"bottom-right\",\n    themeColor: \"#3B82F6\",\n    assistantName: \"AIPPS Assistant\",\n    greetingMessage: \"👋 Hi there! I'm AIPPS, your AI assistant. How can I help you today?\",\n    showAvailability: true,\n    userBubbleColor: \"#3B82F6\",\n    assistantBubbleColor: \"#E5E7EB\",\n    font: \"inter\",\n    autoOpen: false,\n    autoOpenDelay: 5000, // in milliseconds\n    visitorId: \"\",\n    conversationId: null,\n    widgetType: \"bubble\", // \"bubble\" or \"fullscreen\"\n    ignoredSections: [], // Secciones del sitio web a ignorar\n    serverUrl: \"https://api.aipi.example.com\", // Will be overridden by script URL source\n    fontURL: \"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\"\n  };\n\n  // Función para obtener traducciones según el idioma configurado en la integración\n  function getTranslations(language = null) {\n    // Usar el idioma de la integración, luego el del navegador como fallback\n    const lang = language || config.language || navigator.language.substring(0, 2);\n    const translations = {\n      es: {\n        placeholder: \"Escribe tu mensaje...\",\n        newConversation: \"Nueva conversación\",\n        sending: \"Enviando...\",\n        typing: \"Escribiendo...\",\n        minimize: \"Minimizar\",\n        close: \"Cerrar\",\n        expand: \"Expandir\",\n        // Auth form translations\n        welcomeTo: \"Bienvenido a\",\n        whyCreateAccount: \"¿Por qué crear una cuenta?\",\n        saveConversations: \"Guarda todas tus conversaciones\",\n        accessHistory: \"Accede a tu historial cuando quieras\",\n        secureData: \"Tus datos están seguros y privados\",\n        personalizedExperience: \"Experiencia personalizada y continua\",\n        signIn: \"Iniciar Sesión\",\n        register: \"Registrarse\",\n        username: \"Nombre de usuario\",\n        password: \"Contraseña\",\n        email: \"Correo electrónico\",\n        // Welcome messages\n        defaultWelcome: \"¡Hola! ¿En qué puedo ayudarte hoy?\",\n        fallbackWelcome: `👋 ¡Hola! Soy ${config.assistantName || config.integrationName || 'tu asistente'}, ¿Cómo puedo ayudarte hoy?`,\n        // Status\n        online: \"En línea\"\n      },\n      en: {\n        placeholder: \"Type your message...\",\n        newConversation: \"New conversation\",\n        sending: \"Sending...\",\n        typing: \"Typing...\",\n        minimize: \"Minimize\",\n        close: \"Close\",\n        expand: \"Expand\",\n        // Auth form translations\n        welcomeTo: \"Welcome to\",\n        whyCreateAccount: \"Why create an account?\",\n        saveConversations: \"Save all your conversations\",\n        accessHistory: \"Access your history whenever you want\",\n        secureData: \"Your data is secure and private\",\n        personalizedExperience: \"Personalized and continuous experience\",\n        signIn: \"Sign In\",\n        register: \"Register\",\n        username: \"Username\",\n        password: \"Password\",\n        email: \"Email\",\n        // Welcome messages\n        defaultWelcome: \"Hello! How can I help you today?\",\n        fallbackWelcome: `👋 Hi there! I'm ${config.assistantName || config.integrationName || 'your assistant'}. How can I help you today?`,\n        // Status\n        online: \"Online\"\n      },\n      fr: {\n        placeholder: \"Tapez votre message...\",\n        newConversation: \"Nouvelle conversation\",\n        sending: \"Envoi...\",\n        typing: \"Saisie...\",\n        minimize: \"Minimiser\",\n        close: \"Fermer\",\n        expand: \"Développer\",\n        // Auth form translations\n        welcomeTo: \"Bienvenue à\",\n        whyCreateAccount: \"Pourquoi créer un compte?\",\n        saveConversations: \"Sauvegardez toutes vos conversations\",\n        accessHistory: \"Accédez à votre historique quand vous voulez\",\n        secureData: \"Vos données sont sécurisées et privées\",\n        personalizedExperience: \"Expérience personnalisée et continue\",\n        signIn: \"Se connecter\",\n        register: \"S'inscrire\",\n        username: \"Nom d'utilisateur\",\n        password: \"Mot de passe\",\n        email: \"Email\",\n        // Welcome messages\n        defaultWelcome: \"Bonjour! Comment puis-je vous aider aujourd'hui?\",\n        fallbackWelcome: `👋 Bonjour! Je suis ${config.assistantName || config.integrationName || 'votre assistant'}. Comment puis-je vous aider aujourd'hui?`,\n        // Status\n        online: \"En ligne\"\n      }\n    };\n    return translations[lang] || translations.en;\n  }\n  \n  let t = getTranslations();\n\n  // Función para actualizar elementos del DOM con el idioma correcto\n  function updateLanguageElements() {\n    console.log('AIPPS Debug: ========= ACTUALIZANDO IDIOMA =========');\n    console.log('AIPPS Debug: Idioma objetivo:', config.language);\n    console.log('AIPPS Debug: Traducciones disponibles:', t);\n    console.log('AIPPS Debug: Placeholder objetivo:', t.placeholder);\n    \n    // Actualizar placeholder del input (bubble chat)\n    const chatInput = document.getElementById('aipi-input');\n    if (chatInput) {\n      const oldPlaceholder = chatInput.placeholder;\n      chatInput.placeholder = t.placeholder;\n      console.log('AIPPS Debug: Placeholder actualizado de:', oldPlaceholder, 'a:', t.placeholder);\n      \n      // Forzar actualización visual\n      chatInput.setAttribute('placeholder', t.placeholder);\n    } else {\n      console.log('AIPPS Debug: No se encontró elemento aipi-input');\n    }\n    \n    // Actualizar placeholder del input fullscreen\n    const fullscreenInput = document.getElementById('aipi-fullscreen-input');\n    if (fullscreenInput) {\n      const oldPlaceholder = fullscreenInput.placeholder;\n      fullscreenInput.placeholder = t.placeholder;\n      console.log('AIPPS Debug: Fullscreen placeholder actualizado de:', oldPlaceholder, 'a:', t.placeholder);\n      \n      // Forzar actualización visual\n      fullscreenInput.setAttribute('placeholder', t.placeholder);\n    } else {\n      console.log('AIPPS Debug: No se encontró elemento aipi-fullscreen-input');\n    }\n    \n    // Actualizar estado \"Online\" si existe\n    const statusElement = document.getElementById('aipi-status');\n    if (statusElement && config.showAvailability) {\n      const oldStatus = statusElement.textContent;\n      statusElement.textContent = t.online;\n      console.log('AIPPS Debug: Estado actualizado de:', oldStatus, 'a:', t.online);\n    }\n    \n    // Actualizar botón de nueva conversación si existe\n    const newConversationBtn = document.querySelector('[data-translate=\"newConversation\"]');\n    if (newConversationBtn) {\n      newConversationBtn.textContent = t.newConversation;\n      console.log('AIPPS Debug: Botón nueva conversación actualizado a:', t.newConversation);\n    }\n    \n    // Actualizar descripción personalizada en el formulario de auth\n    const authExplanation = document.querySelector('.aipi-explanation-text');\n    if (authExplanation) {\n      const integrationDescription = config.description || config.botBehavior || '';\n      if (integrationDescription.trim().length > 0) {\n        const translatedDescription = translateUserContent(integrationDescription.trim(), config.language);\n        const oldDescription = authExplanation.textContent;\n        authExplanation.textContent = translatedDescription;\n        console.log('AIPPS Debug: Descripción personalizada actualizada de:', oldDescription.substring(0, 50) + '...', 'a:', translatedDescription.substring(0, 50) + '...');\n      }\n    }\n\n    // Actualizar mensaje de bienvenida en mensajes existentes\n    const firstAssistantMessage = document.querySelector('.aipi-message.assistant .aipi-message-text');\n    if (firstAssistantMessage) {\n      const currentText = firstAssistantMessage.textContent;\n      // Solo actualizar si es un mensaje de bienvenida típico (contiene \"Hola\" o similares)\n      if (currentText.includes('Hola') || currentText.includes('Hello') || currentText.includes('Bonjour') || \n          currentText.includes('ayudarte') || currentText.includes('help') || currentText.includes('aider')) {\n        const newWelcomeMessage = config.welcomeMessage || t.defaultWelcome;\n        firstAssistantMessage.textContent = newWelcomeMessage;\n        console.log('AIPPS Debug: Mensaje de bienvenida actualizado de:', currentText, 'a:', newWelcomeMessage);\n      }\n    }\n\n    // Actualizar configuraciones de mensaje para futuras conversaciones\n    config.welcomeMessage = t.defaultWelcome;\n    config.greetingMessage = t.fallbackWelcome;\n    \n    // Actualizar título del formulario de auth\n    const authTitle = document.querySelector('.aipi-auth-header h2');\n    if (authTitle) {\n      const integrationName = config.integrationName || config.assistantName || 'Asistente IA';\n      const oldTitle = authTitle.textContent;\n      authTitle.innerHTML = `${t.welcomeTo} ${integrationName}`;\n      console.log('AIPPS Debug: Título auth actualizado de:', oldTitle, 'a:', `${t.welcomeTo} ${integrationName}`);\n    }\n    \n    // Actualizar cualquier otro elemento con atributo data-translate\n    const translatableElements = document.querySelectorAll('[data-translate]');\n    translatableElements.forEach(element => {\n      const key = element.getAttribute('data-translate');\n      if (t[key]) {\n        const oldText = element.textContent;\n        element.textContent = t[key];\n        console.log('AIPPS Debug: Elemento', key, 'actualizado de:', oldText, 'a:', t[key]);\n      }\n    });\n    \n    // Buscar todos los elementos con atributo data-translate-placeholder\n    const placeholderElements = document.querySelectorAll('[data-translate-placeholder]');\n    console.log('AIPPS Debug: Elementos con data-translate-placeholder encontrados:', placeholderElements.length);\n    placeholderElements.forEach(element => {\n      const key = element.getAttribute('data-translate-placeholder');\n      if (t[key]) {\n        const oldPlaceholder = element.placeholder;\n        element.placeholder = t[key];\n        element.setAttribute('placeholder', t[key]);\n        console.log('AIPPS Debug: Placeholder actualizado para elemento:', element.id, 'de:', oldPlaceholder, 'a:', t[key]);\n      }\n    });\n    \n    // Buscar todos los elementos de input y actualizar sus placeholders de forma más agresiva\n    const allInputs = document.querySelectorAll('input[type=\"text\"], textarea, input[placeholder]');\n    console.log('AIPPS Debug: Total inputs encontrados:', allInputs.length);\n    allInputs.forEach((input, index) => {\n      if (input.id && input.id.includes('aipi')) {\n        const oldPlaceholder = input.placeholder;\n        input.placeholder = t.placeholder;\n        input.setAttribute('placeholder', t.placeholder);\n        \n        // Force DOM update by removing and re-adding the attribute\n        input.removeAttribute('placeholder');\n        setTimeout(() => {\n          input.setAttribute('placeholder', t.placeholder);\n        }, 10);\n        \n        console.log(`AIPPS Debug: Input ${index} (${input.id}) actualizado de:`, oldPlaceholder, 'a:', t.placeholder);\n      }\n    });\n  }\n\n  // State variables\n  let widgetInstance = null;\n  let isOpen = false;\n  let isMinimized = false;\n  let messages = [];\n  let isTyping = false;\n  let conversationStarted = false;\n  let fontLoaded = false;\n  let siteContentScanned = false;\n  let currentPageContent = \"\";\n  let pageTitle = \"\";\n  let currentTextIndex = 0;\n  let textRotationInterval = null;\n\n  \n  // Fullscreen auth variables\n  let isAuthenticated = false;\n  let currentUser = null;\n  let userConversations = [];\n  let currentConversationId = null;\n\n  // Setup postMessage communication for dashboard\n  function setupDashboardCommunication() {\n    // Listen for messages from dashboard\n    window.addEventListener('message', function(event) {\n      if (event.data && event.data.type === 'AIPPS_DASHBOARD_CONFIG') {\n        console.log('AIPPS Debug: Recibido configuración de dashboard:', event.data);\n        \n        if (event.data.authToken) {\n          dashboardConfig.authToken = event.data.authToken;\n          localStorage.setItem('aipi_auth_token', event.data.authToken);\n          console.log('AIPPS Debug: Token sincronizado desde dashboard');\n        }\n        \n        if (event.data.apiBaseUrl) {\n          dashboardConfig.apiBaseUrl = event.data.apiBaseUrl;\n          dashboardConfig.isDashboard = true;\n          console.log('AIPPS Debug: URL base configurada desde dashboard');\n        }\n      }\n    });\n    \n    // Request configuration from dashboard if we're in iframe\n    if (window.parent && window.parent !== window) {\n      setTimeout(() => {\n        window.parent.postMessage({\n          type: 'AIPPS_REQUEST_CONFIG',\n          source: 'widget'\n        }, '*');\n        console.log('AIPPS Debug: Solicitando configuración al dashboard');\n      }, 100);\n    }\n  }\n\n  // Detectar si hay formularios AIPPS activos en la página\n  function detectActiveAippsForm() {\n    // Verificar atributo marcador del formulario\n    if (document.documentElement.hasAttribute('data-aipps-form-active')) {\n      console.log('AIPPS Widget: Formulario AIPPS activo detectado por atributo');\n      return true;\n    }\n\n    // Buscar contenedores de formularios AIPPS\n    const formContainers = document.querySelectorAll('[id*=\"aipps-form\"], [class*=\"aipps-form\"], [data-aipps-form]');\n    if (formContainers.length > 0) {\n      console.log('AIPPS Widget: Contenedor de formulario detectado');\n      return true;\n    }\n\n    // Buscar scripts de formulario activos\n    const formScripts = document.querySelectorAll('script[src*=\"form-embed.js\"]');\n    if (formScripts.length > 0) {\n      console.log('AIPPS Widget: Script de formulario detectado');\n      return true;\n    }\n\n    // Buscar elementos del wrapper del formulario moderno\n    const modernFormWrappers = document.querySelectorAll('.aipi-modern-form-wrapper');\n    if (modernFormWrappers.length > 0) {\n      console.log('AIPPS Widget: Wrapper de formulario moderno detectado');\n      return true;\n    }\n\n    return false;\n  }\n\n  // Initialize widget\n  function init() {\n    // Verificar si el widget ya existe para evitar duplicados\n    if (document.getElementById('aipi-widget-container') || window.AIPPS_WIDGET_INITIALIZED) {\n      console.log('AIPPS Widget: Ya inicializado, evitando duplicación');\n      return;\n    }\n\n    // Verificar si hay formularios activos antes de continuar\n    if (detectActiveAippsForm()) {\n      console.log('AIPPS Widget: No se iniciará el widget porque hay un formulario activo');\n      return;\n    }\n\n    // También verificar después de un pequeño delay para formularios que se cargan dinámicamente\n    setTimeout(() => {\n      if (detectActiveAippsForm() && document.getElementById('aipi-widget-container')) {\n        console.log('AIPPS Widget: Formulario detectado después de inicialización, ocultando widget');\n        const widget = document.getElementById('aipi-widget-container');\n        if (widget) widget.style.display = 'none';\n      }\n    }, 1000);\n    \n    // Verificación periódica cada 2 segundos para casos edge\n    setInterval(() => {\n      if (detectActiveAippsForm() && document.getElementById('aipi-widget-container')) {\n        const widget = document.getElementById('aipi-widget-container');\n        if (widget && widget.style.display !== 'none') {\n          console.log('AIPPS Widget: Verificación periódica - ocultando widget por formulario activo');\n          widget.style.display = 'none';\n        }\n      }\n    }, 2000);\n\n    window.AIPPS_WIDGET_INITIALIZED = true;\n    \n    // Setup dashboard communication first\n    setupDashboardCommunication();\n    \n    // Detect dashboard context\n    detectDashboardContext();\n\n    // Extract the API key from script tag using a more reliable method\n    let scriptSrc = '';\n    let foundApiKey = '';\n\n    // Find the embed.js script specifically and extract widget type\n    const scripts = document.querySelectorAll('script');\n    let scriptElement = null;\n    for (let script of scripts) {\n      if (script.src && script.src.includes('embed.js')) {\n        scriptSrc = script.src;\n        scriptElement = script;\n        break;\n      }\n    }\n    \n    // Extract widget type from data attribute\n    if (scriptElement) {\n      const widgetType = scriptElement.getAttribute('data-widget-type');\n      if (widgetType) {\n        config.widgetType = widgetType;\n        console.log('AIPPS Widget: Tipo de widget detectado:', widgetType);\n      }\n      \n      // Extract other data attributes\n      const themeColor = scriptElement.getAttribute('data-theme-color');\n      if (themeColor) {\n        config.themeColor = themeColor;\n      }\n      \n      const position = scriptElement.getAttribute('data-position');\n      if (position) {\n        config.position = position;\n      }\n      \n      const title = scriptElement.getAttribute('data-title');\n      if (title) {\n        config.assistantName = title;\n      }\n    }\n\n    // If not found by embed.js, try to find by key parameter\n    if (!scriptSrc) {\n      for (let script of scripts) {\n        if (script.src && script.src.includes('key=')) {\n          scriptSrc = script.src;\n          break;\n        }\n      }\n    }\n\n    // Extract API key from the found script\n    if (scriptSrc) {\n      // Try multiple methods to extract the key\n      const keyMatch = scriptSrc.match(/[?&]key=([^&]+)/);\n      if (keyMatch && keyMatch[1]) {\n        foundApiKey = keyMatch[1];\n      }\n    }\n\n    config.apiKey = foundApiKey;\n\n    // Extract server URL from script src safely\n    try {\n      const scriptUrl = new URL(scriptSrc);\n      config.serverUrl = `${scriptUrl.protocol}//${scriptUrl.hostname}${scriptUrl.port ? ':' + scriptUrl.port : ''}`;\n    } catch (error) {\n      console.warn(\"Error parsing script URL, falling back to default\");\n      // Extract domain from script src using regex as fallback\n      const domainMatch = scriptSrc.match(/https?:\\/\\/([^\\/]+)/);\n      if (domainMatch && domainMatch[0]) {\n        config.serverUrl = domainMatch[0];\n      } else {\n        // Hard fallback to the known Replit URL\n        config.serverUrl = \"https://aipps.ca\";\n      }\n    }\n\n    // FORCE dashboard API URL override\n    if (window.location.href.includes('replit.dev') || window.location.hostname.includes('replit.dev')) {\n      config.serverUrl = \"https://aipps.ca\";\n      dashboardConfig.isDashboard = true;\n      dashboardConfig.apiBaseUrl = window.location.href.includes('replit.dev') \n  ? \"https://aipps.ca\"\n  : null;\n      \n      // Force get auth token from dashboard context immediately\n      try {\n        const dashboardToken = localStorage.getItem('auth_token');\n        if (dashboardToken) {\n          dashboardConfig.authToken = dashboardToken;\n          console.log('AIPPS Debug: TOKEN FORZADO desde localStorage dashboard');\n        }\n      } catch (e) {\n        console.log('AIPPS Debug: Error accediendo localStorage:', e);\n      }\n      // Force production URL override\nconfig.serverUrl = \"https://aipps.ca\";\n      console.log('AIPPS Debug: FORZANDO URL de dashboard:', config.serverUrl);\n    }\n\n    // Generate visitor ID if not exists\n    if (!localStorage.getItem('aipi_visitor_id')) {\n      localStorage.setItem('aipi_visitor_id', 'visitor_' + Math.random().toString(36).substring(2, 15));\n    }\n    config.visitorId = localStorage.getItem('aipi_visitor_id');\n\n    // Debug: Log what we found\n    console.log('AIPPS Widget Debug:', {\n      scriptSrc: scriptSrc,\n      apiKey: config.apiKey,\n      serverUrl: config.serverUrl\n    });\n\n    // Load widget configuration from server\n    loadWidgetConfig().then(async () => {\n      // Load fonts\n      loadFont();\n\n      // Create widget DOM elements AFTER loading config\n      createWidgetDOM();\n\n      // Update button text with integration name\n      updateButtonText();\n\n      // Attach event listeners\n      attachEventListeners();\n\n      // Auto-open widget if configured\n      if (config.autoOpen) {\n        setTimeout(() => {\n          openWidget();\n        }, config.autoOpenDelay);\n      }\n\n      // Start periodic config refresh to detect changes\n      startConfigRefresh();\n      \n      // Forzar actualización de idioma después de la creación del widget\n      setTimeout(() => {\n        console.log('AIPPS Debug: Ejecutando actualización de idioma post-creación de widget');\n        updateLanguageElements();\n      }, 250);\n    }).catch(error => {\n      console.error('AIPI Widget Error:', error);\n    });\n  }\n\n  // Load widget configuration from server\n  async function loadWidgetConfig() {\n    if (!config.apiKey) {\n      throw new Error('AIPI API key is required. Add it to your script tag: ?key=YOUR_API_KEY');\n    }\n\n    try {\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}`);\n      if (!response.ok) {\n        throw new Error('Failed to load widget configuration');\n      }\n\n      const data = await response.json();\n\n      // Update config with server settings\n      if (data.integration) {\n        config.position = data.integration.position || config.position;\n        config.themeColor = data.integration.themeColor || config.themeColor;\n        config.widgetType = data.integration.widgetType || config.widgetType;\n        config.ignoredSections = data.integration.ignoredSections || [];\n        config.integrationName = data.integration.name || config.assistantName; // Nombre específico de la integración\n        config.description = data.integration.description || ''; // Descripción específica de la integración\n        config.botBehavior = data.integration.botBehavior || ''; // Comportamiento del bot\n        config.language = data.integration.language || 'es'; // Idioma de la integración\n        \n        // Actualizar traducciones con el idioma de la integración\n        t = getTranslations(config.language);\n        \n        // Actualizar elementos del DOM con el nuevo idioma (esperar a que el DOM esté listo)\n        setTimeout(() => updateLanguageElements(), 100);\n        \n        // También llamar inmediatamente para elementos ya existentes\n        updateLanguageElements();\n      }\n\n      // Store integration name and text color setting for dynamic messages\n      if (data.integration) {\n        config.integrationName = data.integration.name;\n        config.textColorMode = data.integration.textColor || 'auto';\n        console.log('AIPPS Debug: Configuración de color de texto cargada:', config.textColorMode);\n      }\n      \n      if (data.settings) {\n        config.assistantName = data.settings.assistantName || config.assistantName;\n      }\n      \n      // Regenerate translations with updated assistant name AFTER getting server config\n      t = getTranslations(config.language);\n      \n      if (data.settings) {\n        config.greetingMessage = data.settings.defaultGreeting || t.fallbackWelcome;\n        config.welcomeMessage = data.settings.welcomeMessage || t.defaultWelcome;\n        config.showAvailability = data.settings.showAvailability;\n        config.userBubbleColor = data.settings.userBubbleColor || config.userBubbleColor;\n        config.assistantBubbleColor = data.settings.assistantBubbleColor || config.assistantBubbleColor;\n        config.font = data.settings.font || config.font;\n        \n        console.log('AIPPS Debug: Configuración cargada:', {\n          assistantName: config.assistantName,\n          greetingMessage: config.greetingMessage,\n          conversationStyle: data.settings.conversationStyle,\n          assistantBubbleColor: config.assistantBubbleColor\n        });\n        \n        // CRITICAL FIX: Recalculate text color after loading server config\n        updateTextColorsAfterConfig();\n        \n        // Update existing welcome messages with correct assistant name\n        updateExistingWelcomeMessages();\n      }\n\n      // Extraer el contenido de la página actual para mejorar las respuestas\n      scanCurrentPageContent();\n\n    } catch (error) {\n      console.error('Error loading AIPI widget configuration:', error);\n      // Continue with default settings\n    }\n  }\n\n  // Function to periodically check for config updates (DISABLED to prevent 429 rate limiting)\n  function startConfigRefresh() {\n    // DISABLED: setInterval polling caused 429 rate limiting - config updates now manual only\n    if (false) { // Disabled polling\n    setInterval(async () => {\n      try {\n        const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}`);\n        if (response.ok) {\n          const data = await response.json();\n          \n          // Check if position has changed\n          const newPosition = data.integration?.position || 'bottom-right';\n          const newThemeColor = data.integration?.themeColor || config.themeColor;\n          const newLanguage = data.integration?.language || 'es';\n          \n          console.log('AIPPS Widget: Checking position - Current:', config.position, 'New:', newPosition);\n          console.log('AIPPS Widget: Checking language - Current:', config.language, 'New:', newLanguage);\n          \n          if (newPosition !== config.position) {\n            console.log('AIPPS Widget: Position changed from', config.position, 'to', newPosition);\n            config.position = newPosition;\n            \n            // Update widget position\n            if (widgetInstance) {\n              setWidgetPosition();\n              console.log('AIPPS Widget: Position updated to', newPosition);\n            }\n          } else {\n            console.log('AIPPS Widget: No position change detected');\n          }\n          \n          // Check if language has changed\n          if (newLanguage !== config.language) {\n            console.log('AIPPS Widget: Language changed from', config.language, 'to', newLanguage);\n            config.language = newLanguage;\n            \n            // Update translations and elements\n            t = getTranslations(config.language);\n            console.log('AIPPS Widget: New translations loaded:', t);\n            \n            // Call update function immediately and with delay for safety\n            updateLanguageElements();\n            setTimeout(() => updateLanguageElements(), 100);\n            setTimeout(() => updateLanguageElements(), 500);\n            \n            console.log('AIPPS Widget: Language updated to', newLanguage);\n            \n            // Additional aggressive update after a longer delay to ensure DOM is ready\n            setTimeout(() => {\n              console.log('AIPPS Widget: Performing final language update check');\n              updateLanguageElements();\n            }, 1000);\n          } else {\n            console.log('AIPPS Widget: No language change detected. Current:', config.language, 'API response:', newLanguage);\n            \n            // For debugging: force update every 10th check to ensure elements are always correct\n            if (Math.random() < 0.1) {\n              console.log('AIPPS Widget: Forcing periodic language refresh');\n              updateLanguageElements();\n            }\n          }\n          \n          if (newThemeColor !== config.themeColor) {\n            console.log('AIPPS Widget: Theme color changed from', config.themeColor, 'to', newThemeColor);\n            config.themeColor = newThemeColor;\n            \n            // Update theme color if changed\n            if (widgetInstance) {\n              const toggleButton = widgetInstance.querySelector('#aipi-toggle-button');\n              if (toggleButton) {\n                toggleButton.style.backgroundColor = config.themeColor;\n              }\n              \n              // Update other elements with theme color\n              const chatContainer = widgetInstance.querySelector('#aipi-chat-container');\n              if (chatContainer) {\n                const header = chatContainer.querySelector('#aipi-header');\n                if (header) {\n                  header.style.backgroundColor = config.themeColor;\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.debug('Config refresh failed:', error);\n      }\n    }, 5000); // Check every 5 seconds (reduced frequency)\n  }\n\n  // Función para extraer el contenido del sitio\n  function scanCurrentPageContent() {\n    try {\n      // Extraer título de la página\n      pageTitle = document.title || '';\n\n      // Extraer metadescription si existe\n      let metaDescription = '';\n      const metaDescriptionTag = document.querySelector('meta[name=\"description\"]');\n      if (metaDescriptionTag) {\n        metaDescription = metaDescriptionTag.getAttribute('content') || '';\n      }\n\n      // Extraer encabezados H1 y H2 para entender la estructura\n      const headings = [];\n      document.querySelectorAll('h1, h2').forEach(heading => {\n        const text = heading.textContent.trim();\n        if (text) {\n          // Verificar si este encabezado corresponde a una sección ignorada\n          const shouldIgnore = config.ignoredSections && config.ignoredSections.some(section => \n            text.toLowerCase().includes(section.toLowerCase())\n          );\n\n          if (!shouldIgnore) {\n            headings.push(`${heading.tagName}: ${text}`);\n          }\n        }\n      });\n\n      // Extraer contenido principal\n      let mainContent = '';\n\n      // Lista de selectores para contenido principal, ordenados por especificidad\n      const mainSelectors = [\n        // Selectores comunes de contenido principal\n        'main', 'article', '[role=\"main\"]', '.main-content', '#main-content', \n        // Selectores específicos de gestores de contenido\n        '.post-content', '.entry-content', '.article-content', '.page-content',\n        // Selectores más generales\n        '.content', '#content'\n      ];\n\n      // Intentar obtener el contenido principal con selectores comunes\n      for (const selector of mainSelectors) {\n        const elements = document.querySelectorAll(selector);\n        if (elements.length > 0) {\n          // Si hay múltiples elementos, concatenarlos (pero evitar duplicados)\n          const contents = [];\n          elements.forEach(el => {\n            // Hacer una copia para no modificar el DOM real\n            const clone = el.cloneNode(true);\n\n            // Eliminar elementos no deseados dentro del contenido principal\n            const unwanted = clone.querySelectorAll('script, style, iframe, nav, aside, .comment, .comments, .sidebar, .widget, .ad, .ads, .advertisement');\n            unwanted.forEach(unwantedEl => unwantedEl.remove());\n\n            // Eliminar secciones ignoradas\n            if (config.ignoredSections && config.ignoredSections.length > 0) {\n              config.ignoredSections.forEach(section => {\n                if (section && section.trim()) {\n                  // Buscar secciones por encabezados que contienen el texto\n                  clone.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {\n                    if (heading.textContent.toLowerCase().includes(section.toLowerCase())) {\n                      // Encontrar el contenedor de la sección (hermanos hasta el siguiente encabezado del mismo nivel o superior)\n                      let currentElement = heading;\n                      const headingLevel = parseInt(heading.tagName.substring(1));\n\n                      // Eliminar el encabezado mismo\n                      heading.parentNode?.removeChild(heading);\n\n                      // Eliminar elementos hasta el siguiente encabezado del mismo nivel o superior\n                      while (currentElement.nextElementSibling) {\n                        const nextElement = currentElement.nextElementSibling;\n                        const tagName = nextElement.tagName.toLowerCase();\n\n                        // Si encontramos un encabezado del mismo nivel o superior, detenemos la eliminación\n                        if (tagName.startsWith('h') && parseInt(tagName.substring(1)) <= headingLevel) {\n                          break;\n                        }\n\n                        nextElement.parentNode?.removeChild(nextElement);\n                      }\n                    }\n                  });\n\n                  // También buscar por contenedores que pueden tener un ID o clase que coincida con la sección\n                  clone.querySelectorAll(`[id*=\"${section}\"], [class*=\"${section}\"], section, div, article`).forEach(element => {\n                    // Verificar si el elemento o alguno de sus padres contiene el texto de la sección\n                    const elementText = element.textContent.toLowerCase();\n                    if (elementText.includes(section.toLowerCase())) {\n                      element.parentNode?.removeChild(element);\n                    }\n                  });\n                }\n              });\n            }\n\n            contents.push(clone.textContent.trim());\n          });\n\n          // Unir contenidos y eliminar duplicados\n          mainContent = Array.from(new Set(contents)).join('\\n\\n');\n          break;\n        }\n      }\n\n      // Si no se encontró contenido con selectores comunes, extraer del body de forma selectiva\n      if (!mainContent) {\n        // Crear una copia del body para manipular\n        const bodyClone = document.body.cloneNode(true);\n\n        // Eliminar todos los elementos no deseados\n        const elementsToRemove = bodyClone.querySelectorAll(\n          'script, style, link, meta, noscript, iframe, ' + \n          'nav, footer, header, aside, ' + \n          '[role=\"banner\"], [role=\"navigation\"], [role=\"complementary\"], [role=\"contentinfo\"], ' +\n          '.sidebar, #sidebar, .footer, #footer, .header, #header, ' + \n          '.navigation, #navigation, .menu, #menu, ' +\n          '.comment, .comments, #comments, ' +\n          '.widget, .widgets, ' +\n          '.ad, .ads, .advertisement, [class*=\"cookie\"], [id*=\"cookie\"], ' +\n          '.social, .share, .newsletter'\n        );\n\n        elementsToRemove.forEach(el => el.remove());\n\n        // Eliminar secciones ignoradas del body\n        if (config.ignoredSections && config.ignoredSections.length > 0) {\n          config.ignoredSections.forEach(section => {\n            if (section && section.trim()) {\n              // Buscar todas las secciones que contienen el texto en encabezados\n              bodyClone.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {\n                if (heading.textContent.toLowerCase().includes(section.toLowerCase())) {\n                  heading.parentNode?.removeChild(heading);\n                }\n              });\n\n              // Buscar contenedores que puedan contener la sección\n              bodyClone.querySelectorAll(`[id*=\"${section}\"], [class*=\"${section}\"], section, div, article`).forEach(element => {\n                const elementText = element.textContent.toLowerCase();\n                if (elementText.includes(section.toLowerCase())) {\n                  element.parentNode?.removeChild(element);\n                }\n              });\n            }\n          });\n        }\n\n        // Obtener párrafos significativos (con suficiente texto)\n        const paragraphs = [];\n        bodyClone.querySelectorAll('p').forEach(p => {\n          const text = p.textContent.trim();\n\n          // Verificar que este párrafo no pertenezca a una sección ignorada\n          const shouldIgnore = config.ignoredSections && config.ignoredSections.some(section => \n            text.toLowerCase().includes(section.toLowerCase())\n          );\n\n          // Solo incluir párrafos con al menos 100 caracteres y que no estén en secciones ignoradas\n          if (text.length > 100 && !shouldIgnore) {\n            paragraphs.push(text);\n          }\n        });\n\n        if (paragraphs.length > 0) {\n          // Si hay párrafos significativos, usarlos como contenido\n          mainContent = paragraphs.join('\\n\\n');\n        } else {\n          // En último caso, usar todo el texto del body limpio\n          mainContent = bodyClone.textContent.trim();\n        }\n      }\n\n      // Limpiar el texto (eliminar espacios extras, líneas vacías, etc.)\n      mainContent = mainContent\n        .replace(/\\s+/g, ' ')\n        .replace(/\\n\\s*\\n/g, '\\n\\n')\n        .trim();\n\n      // Limitar el tamaño para evitar problemas con peticiones demasiado grandes\n      // (limitar a ~8000 caracteres)\n      if (mainContent.length > 8000) {\n        mainContent = mainContent.substring(0, 8000) + '... [contenido truncado]';\n      }\n\n      // Guardar el contenido estructurado\n      currentPageContent = `\nTítulo: ${pageTitle}\nURL: ${window.location.href}\n${metaDescription ? `Descripción: ${metaDescription}\\n` : ''}\n${headings.length > 0 ? `Estructura de la página:\\n${headings.join('\\n')}\\n\\n` : ''}\nContenido principal:\n${mainContent}\n      `.trim();\n\n      siteContentScanned = true;\n      console.log('AIPI: Contenido de la página escaneado con éxito');\n      // Para depuración, descomentar la siguiente línea:\n      // console.log('Contenido escaneado:', currentPageContent);\n    } catch (error) {\n      console.error('Error escaneando contenido de la página:', error);\n\n      // En caso de error, intentar una versión simplificada\n      try {\n        pageTitle = document.title || '';\n        currentPageContent = `\nTítulo: ${pageTitle}\nURL: ${window.location.href}\nContenido: [Error al extraer contenido detallado]\n        `.trim();\n        siteContentScanned = true;\n      } catch (fallbackError) {\n        console.error('Error completo al escanear contenido:', fallbackError);\n        siteContentScanned = false;\n      }\n    }\n  }\n\n  // Load custom font\n  function loadFont() {\n    if (document.getElementById('aipi-font')) {\n      fontLoaded = true;\n      return;\n    }\n\n    const fontLink = document.createElement('link');\n    fontLink.id = 'aipi-font';\n    fontLink.rel = 'stylesheet';\n    fontLink.href = config.fontURL;\n    fontLink.onload = () => {\n      fontLoaded = true;\n    };\n\n    document.head.appendChild(fontLink);\n  }\n\n\n\n\n\n  // Create widget DOM structure\n  function createWidgetDOM() {\n    // Create an isolated root container that bypasses all CSS inheritance\n    const isolatedRoot = document.createElement('div');\n    isolatedRoot.style.cssText = `\n      all: initial !important;\n      position: fixed !important;\n      z-index: 2147483647 !important;\n      pointer-events: none !important;\n      width: 0 !important;\n      height: 0 !important;\n      margin: 0 !important;\n      padding: 0 !important;\n      border: none !important;\n      background: none !important;\n      overflow: visible !important;\n      clip: auto !important;\n      clip-path: none !important;\n      contain: none !important;\n      isolation: isolate !important;\n    `;\n    \n    // Main container with position based on config\n    widgetInstance = document.createElement('div');\n    widgetInstance.id = 'aipi-widget-container';\n    widgetInstance.style.cssText = `\n      all: initial !important;\n      position: fixed !important;\n      z-index: 2147483647 !important;\n      font-family: ${getFontFamily()} !important;\n      pointer-events: none !important;\n      overflow: visible !important;\n      width: auto !important;\n      height: auto !important;\n      margin: 0 !important;\n      padding: 0 !important;\n      border: none !important;\n      background: none !important;\n      clip: auto !important;\n      clip-path: none !important;\n    `;\n\n    // Agregar clase según el tipo de widget\n    if (config.widgetType === 'fullscreen') {\n      widgetInstance.classList.add('aipi-fullscreen-widget');\n\n      // Crear botón de acceso flotante para modo pantalla completa - MISMA estructura que bubble\n      const fullscreenButton = document.createElement('button');\n      fullscreenButton.id = 'aipi-fullscreen-button';\n      fullscreenButton.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" stroke=\"none\">\n          <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n        </svg>\n        <span class=\"aipi-button-text\">${escapeHTML(config.integrationName || config.assistantName || 'AIPI Assistant')}</span>\n      `;\n\n      // No añadir el botón dentro del widget, sino directamente al body para que sea independiente\n      document.body.appendChild(fullscreenButton);\n\n      // Usar onclick en lugar de addEventListener\n      fullscreenButton.onclick = function() {\n        try {\n          console.log('AIPI Debug: Botón fullscreen clickeado');\n          \n          // Check authentication for fullscreen mode\n          if (!isAuthenticated) {\n            showAuthForm();\n            return;\n          }\n\n          // Obtener el panel de chat directamente\n          const chatPanel = document.getElementById('aipi-chat-panel');\n          console.log('AIPI Debug: Panel de chat encontrado?', !!chatPanel);\n\n          if (chatPanel) {\n            // Ocultar el botón flotante\n            this.style.display = 'none';\n            console.log('AIPI Debug: Botón flotante ocultado');\n\n            // Load user conversations and show chat\n            loadUserConversations().then(() => {\n              showFullscreenChat();\n            });\n          } else {\n            console.error('Error AIPI: No se encontró el panel de chat. ID widget:', widgetInstance?.id);\n            alert('Error al abrir el chat: No se encontró el panel en el DOM');\n          }\n        } catch (error) {\n          console.error('Error AIPI al abrir el widget:', error);\n          alert('Error al abrir el chat: ' + error.message);\n        }\n      };\n    } else {\n      widgetInstance.classList.add('aipi-bubble-widget');\n    }\n\n    // Set position based on config\n    setWidgetPosition();\n\n    // Create CSS for widget\n    const widgetStyles = document.createElement('style');\n    widgetStyles.textContent = `\n        #aipi-widget-container * {\n          box-sizing: border-box;\n        }\n\n        #aipi-widget-container {\n          max-height: calc(100vh - 40px);\n          max-width: calc(100vw - 40px);\n        }\n\n      /* Ensure parent containers allow scroll */\n      html, body {\n        overflow: auto !important;\n      }\n\n      #aipi-chat-panel {\n        width: 350px;\n        height: 500px;\n        background-color: #fff;\n        border-radius: 10px;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n        display: flex;\n        flex-direction: column;\n        overflow: hidden;\n        margin-bottom: 16px;\n        transition: all 0.3s ease;\n        font-family: ${getFontFamily()};\n      }\n\n      .aipi-fullscreen-widget #aipi-chat-panel {\n        width: 100%;\n        height: 100%;\n        margin-bottom: 0;\n        border-radius: 0;\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n      }\n\n      .aipi-fullscreen-widget #aipi-toggle-button {\n        display: none;\n      }\n\n      #aipi-chat-header {\n        background-color: ${config.themeColor};\n        color: white;\n        padding: 16px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      #aipi-header-info {\n        display: flex;\n        align-items: center;\n      }\n\n      #aipi-avatar {\n        width: 32px;\n        height: 32px;\n        border-radius: 50%;\n        background-color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 12px;\n      }\n\n      #aipi-avatar svg {\n        width: 20px;\n        height: 20px;\n        color: ${config.themeColor};\n      }\n\n      #aipi-header-text {\n        display: flex;\n        flex-direction: column;\n      }\n\n      #aipi-assistant-name {\n        font-weight: 600;\n        font-size: 16px;\n      }\n\n      #aipi-status {\n        font-size: 12px;\n        opacity: 0.8;\n      }\n\n      #aipi-header-actions {\n        display: flex;\n      }\n\n      .aipi-header-button {\n        background: none;\n        border: none;\n        color: white;\n        cursor: pointer;\n        padding: 4px;\n        margin-left: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        opacity: 0.8;\n        transition: opacity 0.2s;\n      }\n\n      .aipi-header-button:hover {\n        opacity: 1;\n      }\n\n      #aipi-messages-container {\n        height: 300px !important;\n        overflow-y: scroll !important;\n        overflow-x: hidden !important;\n        padding: 16px;\n        background-color: #f9fafb;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n      }\n      \n      #aipi-messages-container::-webkit-scrollbar {\n        width: 8px;\n      }\n      \n      #aipi-messages-container::-webkit-scrollbar-track {\n        background: #f0f0f0;\n        border-radius: 4px;\n      }\n      \n      #aipi-messages-container::-webkit-scrollbar-thumb {\n        background: #888;\n        border-radius: 4px;\n      }\n      \n      #aipi-messages-container::-webkit-scrollbar-thumb:hover {\n        background: #555;\n      }\n\n\n\n      .aipi-message {\n        max-width: 80%;\n        padding: 10px 14px;\n        border-radius: 18px;\n        font-size: 14px;\n        line-height: 1.5;\n        word-wrap: break-word;\n        margin-bottom: 12px;\n        display: block;\n      }\n\n      .aipi-user-message {\n        background-color: ${config.userBubbleColor};\n        color: white;\n        align-self: flex-end;\n        border-bottom-right-radius: 4px;\n      }\n\n      .aipi-assistant-message {\n        background-color: ${config.assistantBubbleColor};\n        color: ${(() => {\n          const color = config.assistantBubbleColor || '#E5E7EB';\n          let hex = color.replace('#', '');\n          if (hex.length === 3) hex = hex.split('').map(c => c + c).join('');\n          if (hex.length !== 6) return '#1f2937 !important';\n          \n          const r = parseInt(hex.substr(0, 2), 16);\n          const g = parseInt(hex.substr(2, 2), 16);\n          const b = parseInt(hex.substr(4, 2), 16);\n          const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n          \n          console.log('🎨 AIPPS CSS Debug - Assistant Message:');\n          console.log('  Background color:', color);\n          console.log('  Luminance:', luminance.toFixed(3));\n          console.log('  Is dark background?', luminance < 0.6);\n          \n          const textColor = luminance < 0.6 ? '#ffffff' : '#1f2937';\n          console.log('  Selected text color:', textColor);\n          \n          return textColor + ' !important';\n        })()};\n        align-self: flex-start;\n        border-bottom-left-radius: 4px;\n      }\n\n\n\n      .aipi-typing-indicator {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        padding: 10px 14px;\n        background-color: ${config.assistantBubbleColor};\n        color: ${(() => {\n          const color = config.assistantBubbleColor || '#E5E7EB';\n          let hex = color.replace('#', '');\n          if (hex.length === 3) hex = hex.split('').map(c => c + c).join('');\n          if (hex.length !== 6) return '#1f2937 !important';\n          \n          const r = parseInt(hex.substr(0, 2), 16);\n          const g = parseInt(hex.substr(2, 2), 16);\n          const b = parseInt(hex.substr(4, 2), 16);\n          const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n          \n          console.log('🎨 AIPPS CSS Debug - Typing Indicator:');\n          console.log('  Background color:', color);\n          console.log('  Luminance:', luminance.toFixed(3));\n          console.log('  Is dark background?', luminance < 0.6);\n          \n          const textColor = luminance < 0.6 ? '#ffffff' : '#1f2937';\n          console.log('  Selected text color:', textColor);\n          \n          return textColor + ' !important';\n        })()};\n        border-radius: 18px;\n        border-bottom-left-radius: 4px;\n        align-self: flex-start;\n        max-width: 80px;\n      }\n\n\n\n      .aipi-typing-dot {\n        width: 8px;\n        height: 8px;\n        background-color: #6b7280;\n        border-radius: 50%;\n        animation: aipi-typing-animation 1.4s infinite ease-in-out;\n      }\n\n      .aipi-typing-dot:nth-child(1) {\n        animation-delay: 0s;\n      }\n\n      .aipi-typing-dot:nth-child(2) {\n        animation-delay: 0.2s;\n      }\n\n      .aipi-typing-dot:nth-child(3) {\n        animation-delay: 0.4s;\n      }\n\n      @keyframes aipi-typing-animation {\n        0%, 100% {\n          transform: translateY(0);\n        }\n        50% {\n          transform: translateY(-5px);\n        }\n      }\n\n      #aipi-input-container {\n        display: flex;\n        padding: 12px;\n        border-top: 1px solid #e5e7eb;\n        background-color: #fff;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        #aipi-input-container {\n          background-color: #1f2937;\n          border-top: 1px solid #374151;\n        }\n      }\n\n      #aipi-input {\n        flex: 1;\n        border: 1px solid #d1d5db;\n        border-radius: 20px;\n        padding: 10px 16px;\n        font-size: 14px;\n        outline: none;\n        background-color: #fff;\n        color: #1f2937;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        #aipi-input {\n          background-color: #374151;\n          border-color: #4b5563;\n          color: #e5e7eb;\n        }\n      }\n\n      #aipi-input:focus {\n        border-color: ${config.themeColor};\n        box-shadow: 0 0 0 1px ${config.themeColor}20;\n      }\n\n      #aipi-send-button {\n        background-color: ${config.themeColor};\n        border: none;\n        border-radius: 50%;\n        color: white;\n        width: 38px;\n        height: 38px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        margin-left: 8px;\n        transition: background-color 0.2s;\n      }\n\n      #aipi-send-button:hover {\n        background-color: ${adjustColor(config.themeColor, -20)};\n      }\n\n      #aipi-send-button:disabled {\n        background-color: #9ca3af;\n        cursor: not-allowed;\n      }\n\n      #aipi-minimized-container {\n        background-color: ${config.themeColor};\n        padding: 12px;\n        border-radius: 10px;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n        margin-bottom: 16px;\n        display: flex;\n        align-items: center;\n        color: white;\n        cursor: pointer;\n        transition: transform 0.2s;\n      }\n\n      #aipi-minimized-container:hover {\n        transform: translateY(-2px);\n      }\n\n      #aipi-minimized-avatar {\n        width: 32px;\n        height: 32px;\n        border-radius: 50%;\n        background-color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 12px;\n      }\n\n      #aipi-minimized-avatar svg {\n        width: 20px;\n        height: 20px;\n        color: ${config.themeColor};\n      }\n\n      #aipi-toggle-button {\n        all: initial !important;\n        min-width: 160px !important;\n        width: auto !important;\n        height: 36px !important;\n        border-radius: 18px !important;\n        background-color: #ff7b2a !important;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;\n        display: flex !important;\n        align-items: center !important;\n        justify-content: center !important;\n        cursor: pointer !important;\n        transition: all 0.3s ease !important;\n        border: none !important;\n        outline: none !important;\n        color: white !important;\n        z-index: 2147483647 !important;\n        position: fixed !important;\n        padding: 0 16px !important;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;\n        font-size: 14px !important;\n        font-weight: 600 !important;\n        white-space: nowrap !important;\n        overflow: visible !important;\n        margin: 0 !important;\n        opacity: 1 !important;\n        visibility: visible !important;\n        pointer-events: auto !important;\n        box-sizing: border-box !important;\n        isolation: isolate !important;\n        contain: none !important;\n        clip: auto !important;\n        clip-path: none !important;\n        transform: none !important;\n        right: 20px !important;\n        bottom: 20px !important;\n        left: auto !important;\n        top: auto !important;\n        max-width: calc(100vw - 40px) !important;\n      }\n\n      #aipi-toggle-button:hover {\n        transform: translateY(-3px) scale(1.05) !important;\n        background-color: ${adjustColor(config.themeColor, -20)} !important;\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.25) !important;\n        animation: none !important;\n      }\n\n      @keyframes aipi-pulse {\n        0%, 100% {\n          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n        }\n        50% {\n          box-shadow: 0 4px 20px ${config.themeColor}40, 0 0 0 8px ${config.themeColor}20;\n        }\n      }\n\n      @keyframes aipi-bounce {\n        0%, 100% {\n          transform: translateY(0);\n        }\n        50% {\n          transform: translateY(-5px);\n        }\n      }\n\n      .aipi-button-text, .aipi-message-text {\n        margin-left: 8px !important;\n        opacity: 1 !important;\n        max-width: none !important;\n        color: white !important;\n        font-weight: 600 !important;\n        font-size: 14px !important;\n        display: inline !important;\n        overflow: visible !important;\n        white-space: nowrap !important;\n      }\n\n      .aipi-message-text {\n        transition: opacity 0.3s ease !important;\n        max-width: calc(100vw - 120px) !important;\n        overflow: hidden !important;\n        text-overflow: ellipsis !important;\n      }\n\n      .aipi-notification-dot {\n        position: absolute;\n        top: -2px;\n        right: -2px;\n        width: 12px;\n        height: 12px;\n        background-color: #ef4444;\n        border-radius: 50%;\n        border: 2px solid white;\n        animation: aipi-bounce 1s infinite;\n      }\n\n      /* Additional overrides for WordPress and other CMS compatibility */\n      #aipi-widget-container {\n        position: fixed !important;\n        z-index: 2147483647 !important;\n        pointer-events: none !important;\n        font-family: ${getFontFamily()} !important;\n        overflow: visible !important;\n        width: auto !important;\n        height: auto !important;\n        top: auto !important;\n        left: auto !important;\n        right: auto !important;\n        bottom: auto !important;\n        margin: 0 !important;\n        padding: 0 !important;\n        border: none !important;\n        background: none !important;\n        clip: auto !important;\n        clip-path: none !important;\n      }\n      \n      #aipi-widget-container * {\n        pointer-events: auto !important;\n        box-sizing: border-box !important;\n      }\n      \n      #aipi-toggle-button {\n        isolation: isolate !important;\n        will-change: transform !important;\n        backface-visibility: hidden !important;\n        -webkit-backface-visibility: hidden !important;\n        transform-style: preserve-3d !important;\n        -webkit-transform-style: preserve-3d !important;\n        contain: layout style !important;\n        clip: auto !important;\n        clip-path: none !important;\n        overflow: visible !important;\n      }\n      \n      /* Force all parent elements to not clip the widget */\n      html, body {\n        overflow-x: visible !important;\n        overflow-y: visible !important;\n      }\n      \n      /* Ensure no parent containers clip the button */\n      #aipi-widget-container,\n      #aipi-widget-container *,\n      body *:has(#aipi-widget-container),\n      body *:has(#aipi-toggle-button) {\n        overflow: visible !important;\n        clip: auto !important;\n        clip-path: none !important;\n      }\n      \n      /* Additional positioning safeguards with more spacing */\n      @media screen and (max-width: 768px) {\n        #aipi-toggle-button {\n          max-width: calc(100vw - 40px) !important;\n          right: 20px !important;\n          bottom: 20px !important;\n        }\n      }\n      \n      @media screen and (min-width: 769px) {\n        #aipi-toggle-button {\n          max-width: calc(100vw - 60px) !important;\n          right: 30px !important;\n          bottom: 30px !important;\n        }\n      }\n\n      /* Estilos para el botón de acceso en modo pantalla completa */\n      #aipi-fullscreen-button {\n        display: flex;\n        align-items: center;\n        padding: 10px 16px;\n        background-color: ${config.themeColor};\n        color: white;\n        border-radius: 20px;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);\n        cursor: pointer;\n        position: fixed;\n        bottom: 24px;\n        right: 24px;\n        z-index: 999999;\n        font-family: ${getFontFamily()};\n        transition: transform 0.2s, box-shadow 0.2s;\n      }\n\n      #aipi-fullscreen-button:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n      }\n\n      .aipi-fullscreen-button-icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 8px;\n      }\n\n      .aipi-fullscreen-button-icon svg {\n        width: 20px;\n        height: 20px;\n        color: white;\n      }\n\n      .aipi-fullscreen-button-text {\n        font-weight: 600;\n        font-size: 14px;\n      }\n\n      /* Estilos para el botón flotante del modo pantalla completa */\n      #aipi-fullscreen-button {\n        position: fixed;\n        bottom: 24px;\n        right: 16px;\n        background-color: ${config.themeColor};\n        color: white;\n        display: flex;\n        align-items: center;\n        padding: 12px 20px;\n        border-radius: 50px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n        cursor: pointer;\n        z-index: 999999;\n        transition: all 0.3s ease;\n        max-width: calc(100vw - 32px);\n        overflow: visible;\n      }\n\n      #aipi-fullscreen-button:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.25);\n      }\n\n      .aipi-fullscreen-button-icon {\n        margin-right: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      /* Estilos para las conversaciones con botones de eliminación */\n      .aipi-conversation-item {\n        position: relative;\n        display: flex;\n        align-items: center;\n        padding: 12px;\n        margin-bottom: 8px;\n        border-radius: 8px;\n        background: #f8f9fa;\n        border: 1px solid #e9ecef;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .aipi-conversation-item:hover {\n        background: #e9ecef;\n        border-color: #dee2e6;\n      }\n\n      .aipi-conversation-item.active {\n        background: ${config.themeColor}20;\n        border-color: ${config.themeColor};\n      }\n\n      .aipi-conversation-content {\n        flex: 1;\n        min-width: 0;\n      }\n\n      .aipi-conversation-title {\n        font-weight: 600;\n        font-size: 14px;\n        color: #1f2937;\n        margin-bottom: 4px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      .aipi-conversation-preview {\n        font-size: 12px;\n        color: #6b7280;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      .aipi-delete-conversation-btn {\n        background: none;\n        border: none;\n        padding: 8px;\n        border-radius: 6px;\n        color: #6b7280;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        opacity: 0;\n        visibility: hidden;\n        flex-shrink: 0;\n        margin-left: 8px;\n      }\n\n      .aipi-conversation-item:hover .aipi-delete-conversation-btn {\n        opacity: 1;\n        visibility: visible;\n      }\n\n      .aipi-delete-conversation-btn:hover {\n        background: #fee2e2;\n        color: #dc2626;\n        transform: scale(1.1);\n      }\n\n      .aipi-delete-conversation-btn svg {\n        width: 16px;\n        height: 16px;\n        stroke-width: 2;\n      }\n    `;\n    document.head.appendChild(widgetStyles);\n\n    // Create markup - Only include toggle button for bubble widgets, not fullscreen\n    let toggleButtonHTML = '';\n    if (config.widgetType !== 'fullscreen') {\n      toggleButtonHTML = `\n        <button id=\"aipi-toggle-button\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" stroke=\"none\">\n            <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n          </svg>\n          <span class=\"aipi-message-text\">AIPI Assistant</span>\n        </button>\n      `;\n    }\n\n    widgetInstance.innerHTML = `\n      <div id=\"aipi-chat-panel\" style=\"display: none;\">\n        <div id=\"aipi-chat-header\">\n          <div id=\"aipi-header-info\">\n            <div id=\"aipi-avatar\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n              </svg>\n            </div>\n            <div id=\"aipi-header-text\">\n              <span id=\"aipi-assistant-name\">${escapeHTML(config.integrationName || config.assistantName)}</span>\n              ${config.showAvailability ? `<span id=\"aipi-status\">${t.online}</span>` : ''}\n            </div>\n          </div>\n          <div id=\"aipi-header-actions\">\n            <button class=\"aipi-header-button\" id=\"aipi-minimize-button\" aria-label=\"Minimize\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n              </svg>\n            </button>\n            <button class=\"aipi-header-button\" id=\"aipi-close-button\" aria-label=\"Close\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n              </svg>\n            </button>\n          </div>\n        </div>\n        <div id=\"aipi-messages-container\"></div>\n        <div id=\"aipi-input-container\">\n          <input type=\"text\" id=\"aipi-input\" placeholder=\"\" data-translate-placeholder=\"placeholder\">\n          <button id=\"aipi-send-button\" disabled>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n              <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div id=\"aipi-minimized-container\" style=\"display: none;\">\n        <div id=\"aipi-minimized-avatar\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n          </svg>\n        </div>\n        <span>${escapeHTML(config.assistantName)}</span>\n      </div>\n\n      ${toggleButtonHTML}\n    `;\n\n    // Add widget to isolated root, then isolated root to body\n    isolatedRoot.appendChild(widgetInstance);\n    document.body.appendChild(isolatedRoot);\n    \n    // Ensure the button is properly configured after DOM insertion\n    setTimeout(() => {\n      const toggleButton = document.getElementById('aipi-toggle-button');\n      if (toggleButton) {\n        console.log('AIPPS Widget: Botón encontrado después de inserción DOM');\n        // Force pointer events and positioning\n        toggleButton.style.pointerEvents = 'auto';\n        toggleButton.style.cursor = 'pointer';\n        toggleButton.style.zIndex = '2147483647';\n        toggleButton.style.position = 'fixed';\n      } else {\n        console.error('AIPPS Widget: Botón NO encontrado después de inserción DOM');\n      }\n    }, 100);\n  }\n\n  // Set widget position based on config\n  function setWidgetPosition() {\n    console.log('AIPPS Widget: Setting position to', config.position, 'for widget:', widgetInstance);\n    \n    if (!widgetInstance) {\n      console.error('AIPPS Widget: Widget instance not found when trying to set position');\n      return;\n    }\n    \n    // CRITICAL FIX: Find the appropriate button based on widget type\n    let targetButton;\n    if (config.widgetType === 'fullscreen') {\n      targetButton = document.getElementById('aipi-fullscreen-button');\n    } else {\n      targetButton = widgetInstance.querySelector('#aipi-toggle-button');\n    }\n    \n    if (!targetButton) {\n      console.error('AIPPS Widget: Target button not found for widget type:', config.widgetType);\n      return;\n    }\n    \n    console.log('AIPPS Widget: Found target button, applying position changes');\n    \n    // STEP 1: Clear ALL positioning styles from target button\n    targetButton.removeAttribute('style');\n    \n    // STEP 2: Calculate responsive offsets\n    const isMobile = window.innerWidth < 768;\n    const bottomOffset = isMobile ? '16px' : '20px';\n    const sideOffset = isMobile ? '16px' : '20px';\n    \n    // STEP 3: Build complete new style attribute\n    let newStyles = `\n      all: initial !important;\n      min-width: 160px !important;\n      width: auto !important;\n      height: 36px !important;\n      border-radius: 18px !important;\n      background-color: ${config.themeColor} !important;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;\n      display: flex !important;\n      align-items: center !important;\n      justify-content: center !important;\n      cursor: pointer !important;\n      transition: all 0.3s ease !important;\n      border: none !important;\n      outline: none !important;\n      color: white !important;\n      z-index: 2147483647 !important;\n      position: fixed !important;\n      padding: 0 16px !important;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;\n      font-size: 14px !important;\n      font-weight: 600 !important;\n      white-space: nowrap !important;\n      overflow: visible !important;\n      margin: 0 !important;\n      opacity: 1 !important;\n      visibility: visible !important;\n      pointer-events: auto !important;\n      box-sizing: border-box !important;\n      isolation: isolate !important;\n    `;\n    \n    // STEP 4: Add position-specific styles\n    switch (config.position) {\n      case 'bottom-left':\n        newStyles += ` bottom: ${bottomOffset} !important; left: ${sideOffset} !important; right: auto !important; top: auto !important;`;\n        console.log('AIPPS Widget: Applied bottom-left positioning to toggle button');\n        break;\n      case 'bottom-center':\n        newStyles += ` bottom: ${bottomOffset} !important; left: 50% !important; right: auto !important; top: auto !important; transform: translateX(-50%) !important;`;\n        console.log('AIPPS Widget: Applied bottom-center positioning to toggle button');\n        break;\n      case 'top-right':\n        newStyles += ` top: 20px !important; right: ${sideOffset} !important; left: auto !important; bottom: auto !important;`;\n        console.log('AIPPS Widget: Applied top-right positioning to toggle button');\n        break;\n      case 'top-left':\n        newStyles += ` top: 20px !important; left: ${sideOffset} !important; right: auto !important; bottom: auto !important;`;\n        console.log('AIPPS Widget: Applied top-left positioning to toggle button');\n        break;\n      case 'bottom-right':\n      default:\n        newStyles += ` bottom: ${bottomOffset} !important; right: ${sideOffset} !important; left: auto !important; top: auto !important;`;\n        console.log('AIPPS Widget: Applied bottom-right positioning to toggle button');\n        break;\n    }\n    \n    // STEP 5: Apply the complete new styles\n    targetButton.setAttribute('style', newStyles);\n    \n    // STEP 6: Force repaint\n    targetButton.offsetHeight;\n    \n    console.log('AIPPS Widget: Target button repositioned successfully. Final styles:', {\n      position: config.position,\n      computedTop: window.getComputedStyle(targetButton).top,\n      computedBottom: window.getComputedStyle(targetButton).bottom,\n      computedLeft: window.getComputedStyle(targetButton).left,\n      computedRight: window.getComputedStyle(targetButton).right,\n      buttonElement: targetButton\n    });\n\n    // Agregar listener para cambios de tamaño de ventana\n    window.addEventListener('resize', () => {\n      if (widgetInstance) {\n        setWidgetPosition();\n      }\n    });\n  }\n\n  // Textos dinámicos para el botón\n  const dynamicTexts = [\n    \"¡Hablemos!\",\n    \"¿Necesitas ayuda?\",\n    \"¡Pregúntame!\",\n    \"Estoy aquí 👋\",\n    \"¡Chatea conmigo!\",\n    \"¿Alguna duda?\",\n    \"¡Te ayudo!\"\n  ];\n\n  // Función para rotar textos del botón\n  function startTextRotation() {\n    const buttonText = document.querySelector('.aipi-button-text');\n    if (!buttonText) return;\n\n    textRotationInterval = setInterval(() => {\n      if (!isOpen) { // Solo rotar si el widget está cerrado\n        currentTextIndex = (currentTextIndex + 1) % dynamicTexts.length;\n        buttonText.textContent = dynamicTexts[currentTextIndex];\n\n        // Agregar una pequeña animación al cambiar el texto\n        buttonText.style.transform = 'scale(0.9)';\n        setTimeout(() => {\n          buttonText.style.transform = 'scale(1)';\n        }, 150);\n      }\n    }, 3000); // Cambiar texto cada 3 segundos\n  }\n\n  // Attach event listeners\n  function attachEventListeners() {\n    // Wait for DOM to be ready, then find elements\n    setTimeout(() => {\n      const toggleButton = document.getElementById('aipi-toggle-button');\n      const minimizeButton = document.getElementById('aipi-minimize-button');\n      const closeButton = document.getElementById('aipi-close-button');\n      const chatInput = document.getElementById('aipi-input');\n      const sendButton = document.getElementById('aipi-send-button');\n      const minimizedContainer = document.getElementById('aipi-minimized-container');\n\n      console.log('AIPPS Widget: Adjuntando eventos...', {\n        toggleButton: !!toggleButton,\n        minimizeButton: !!minimizeButton,\n        closeButton: !!closeButton,\n        chatInput: !!chatInput,\n        sendButton: !!sendButton\n      });\n\n      // Toggle widget open/close\n      if (toggleButton) {\n        // Función para manejar el toggle\n        function handleToggle(e) {\n          if (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n          }\n          console.log('AIPPS Widget: Toggle ejecutado');\n          if (isOpen) {\n            closeWidget();\n          } else {\n            openWidget();\n          }\n        }\n\n        // Limpiar cualquier event listener previo\n        toggleButton.onclick = null;\n        \n        // Remover todos los event listeners existentes clonando el elemento\n        const newToggleButton = toggleButton.cloneNode(true);\n        toggleButton.parentNode.replaceChild(newToggleButton, toggleButton);\n        \n        // Referenciar el nuevo botón\n        const cleanButton = document.getElementById('aipi-toggle-button');\n        \n        // Usar solo onclick para evitar conflictos\n        cleanButton.onclick = function(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n          \n          console.log('AIPPS Widget: Click detectado, estado actual isOpen:', isOpen);\n          \n          if (isOpen) {\n            console.log('AIPPS Widget: Cerrando widget');\n            closeWidget();\n          } else {\n            console.log('AIPPS Widget: Abriendo widget');\n            openWidget();\n          }\n          \n          return false;\n        };\n\n        // Forzar propiedades críticas directamente en el elemento limpio\n        cleanButton.style.zIndex = '2147483647';\n        cleanButton.style.pointerEvents = 'auto';\n        cleanButton.style.position = 'fixed';\n        cleanButton.style.cursor = 'pointer';\n        cleanButton.style.userSelect = 'none';\n        cleanButton.style.webkitUserSelect = 'none';\n\n        console.log('AIPPS Widget: Eventos configurados correctamente para el botón');\n\n        // Iniciar rotación de textos después de un breve delay (solo para modo no compacto)\n        setTimeout(() => {\n          // No iniciar rotación porque ahora usamos texto fijo \"AIPI Assistant\"\n          console.log('AIPPS Widget: Widget listo para usar');\n        }, 1000);\n      } else {\n        // Incrementar contador de reintentos\n        if (typeof window.aippsRetryCount === 'undefined') {\n          window.aippsRetryCount = 0;\n        }\n        \n        if (window.aippsRetryCount < 3) {\n          window.aippsRetryCount++;\n          console.log(`AIPPS Widget: No se encontró el botón principal - reintento ${window.aippsRetryCount}/3`);\n          setTimeout(() => {\n            attachEventListeners();\n          }, 500);\n          return;\n        } else {\n          console.error('AIPPS Widget: Máximo de reintentos alcanzado. Widget no completamente inicializado.');\n          return;\n        }\n      }\n\n      // Close widget - Enhanced for fullscreen mode\n      if (closeButton) {\n        // Remove any existing listeners\n        const newCloseButton = closeButton.cloneNode(true);\n        closeButton.parentNode.replaceChild(newCloseButton, closeButton);\n        \n        // Attach click handler to the new button\n        const cleanCloseButton = document.getElementById('aipi-close-button');\n        if (cleanCloseButton) {\n          cleanCloseButton.onclick = function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            console.log('AIPPS Debug: Close button clicked');\n            \n            try {\n              if (config.widgetType === 'fullscreen' || isAuthenticated) {\n                // For fullscreen/authenticated mode, hide chat and show the floating button again\n                const chatPanel = document.getElementById('aipi-chat-panel');\n                const fullscreenButton = document.getElementById('aipi-fullscreen-button');\n                \n                if (chatPanel) {\n                  chatPanel.style.display = 'none';\n                  console.log('AIPPS Debug: Chat panel hidden');\n                }\n                if (fullscreenButton) {\n                  fullscreenButton.style.display = 'flex';\n                  console.log('AIPPS Debug: Fullscreen button shown');\n                }\n                isOpen = false;\n                isAuthenticated = false;\n                currentUser = null;\n                currentConversationId = null;\n              } else {\n                window.aipiCloseWidget();\n              }\n            } catch (error) {\n              console.error('AIPPS Debug: Error in close button handler:', error);\n            }\n            return false;\n          };\n        }\n      }\n\n      // Minimize widget - Only for bubble mode\n      if (minimizeButton) {\n        minimizeButton.addEventListener('click', () => {\n          if (config.widgetType !== 'fullscreen') {\n            minimizeWidget();\n          }\n        });\n      }\n\n      // Maximize from minimized state\n      if (minimizedContainer) {\n        minimizedContainer.addEventListener('click', maximizeWidget);\n      }\n\n      // Handle input changes and send button\n      if (chatInput && sendButton) {\n        // Remove existing listeners by cloning elements\n        const newChatInput = chatInput.cloneNode(true);\n        const newSendButton = sendButton.cloneNode(true);\n        \n        chatInput.parentNode.replaceChild(newChatInput, chatInput);\n        sendButton.parentNode.replaceChild(newSendButton, sendButton);\n        \n        // Get references to the new clean elements\n        const cleanInput = document.getElementById('aipi-input');\n        const cleanSendButton = document.getElementById('aipi-send-button');\n        \n        if (cleanInput && cleanSendButton) {\n          // Handle input changes with multiple event types for better compatibility\n          function handleInputChange() {\n            const hasValue = cleanInput.value.trim();\n            cleanSendButton.disabled = !hasValue;\n            console.log('AIPPS Debug: Input changed, value:', cleanInput.value, 'hasValue:', hasValue, 'button disabled:', cleanSendButton.disabled);\n          }\n          \n          cleanInput.oninput = handleInputChange;\n          cleanInput.onkeyup = handleInputChange;\n          cleanInput.onchange = handleInputChange;\n\n          // Send message on Enter key\n          cleanInput.onkeydown = function(e) {\n            if (e.key === 'Enter' && cleanInput.value.trim()) {\n              e.preventDefault();\n              console.log('AIPPS Debug: Enter key pressed, sending message');\n              try {\n                window.aipiSendMessage();\n              } catch (error) {\n                console.error('AIPPS Debug: Error in Enter key handler:', error);\n              }\n            }\n          };\n\n          // Send message on button click\n          cleanSendButton.onclick = function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            console.log('AIPPS Debug: Send button clicked');\n            try {\n              if (cleanInput.value.trim()) {\n                window.aipiSendMessage();\n              }\n            } catch (error) {\n              console.error('AIPPS Debug: Error in send button handler:', error);\n            }\n            return false;\n          };\n          \n          // Enable send button based on current input value\n          const initialValue = cleanInput.value.trim();\n          cleanSendButton.disabled = !initialValue;\n          \n          console.log('AIPPS Debug: Input and send button events configured');\n          console.log('AIPPS Debug: Initial input value:', cleanInput.value, 'button disabled:', cleanSendButton.disabled);\n          console.log('AIPPS Debug: Input element found:', cleanInput);\n          console.log('AIPPS Debug: Send button found:', cleanSendButton);\n          \n          // Force a test to ensure events work\n          setTimeout(() => {\n            console.log('AIPPS Debug: Testing input events...');\n            cleanInput.value = 'test';\n            handleInputChange();\n            console.log('AIPPS Debug: After test - button disabled:', cleanSendButton.disabled);\n            \n            // Clear test value\n            setTimeout(() => {\n              cleanInput.value = '';\n              handleInputChange();\n              console.log('AIPPS Debug: After clear - button disabled:', cleanSendButton.disabled);\n            }, 100);\n          }, 500);\n        }\n      }\n      \n    }, 100); // Wait 100ms for DOM to be ready\n  }\n\n  // Start or continue conversation with AIPI\n  async function startConversation() {\n    if (!conversationStarted) {\n      // Create a new conversation\n      try {\n        const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/conversation`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            visitorId: config.visitorId\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to create conversation');\n        }\n\n        const data = await response.json();\n        config.conversationId = data.id;\n        conversationStarted = true;\n\n        // Add initial greeting in the correct language\n        const welcomeMessage = config.welcomeMessage || t.defaultWelcome;\n        addMessage(welcomeMessage, 'assistant');\n      } catch (error) {\n        console.error('Error starting conversation:', error);\n        addMessage('Sorry, I encountered an error. Please try again later.', 'assistant');\n      }\n    }\n  }\n\n  // Open the widget\n  function openWidget() {\n    console.log('AIPPS Widget: Intentando abrir widget...');\n    \n    const chatPanel = document.getElementById('aipi-chat-panel');\n    const toggleButton = document.getElementById('aipi-toggle-button');\n    const fullscreenButton = document.getElementById('aipi-fullscreen-button');\n\n    console.log('AIPPS Widget: Elementos encontrados:', {\n      chatPanel: !!chatPanel,\n      toggleButton: !!toggleButton,\n      fullscreenButton: !!fullscreenButton,\n      widgetType: config.widgetType\n    });\n\n    if (!chatPanel) {\n      console.error('AIPPS Widget: No se encontró el panel de chat');\n      return;\n    }\n\n    // Re-attach event listeners when opening widget to ensure they work\n    setTimeout(() => {\n      attachEventListeners();\n      console.log('AIPPS Debug: Event listeners re-attached after opening widget');\n    }, 100);\n\n    // Para widgets tipo fullscreen, abrir siempre directamente\n    if (config.widgetType === 'fullscreen') {\n      console.log('AIPPS Widget: Abriendo widget fullscreen');\n      \n      // Ocultar botón flotante cuando el chat está abierto\n      if (fullscreenButton) {\n        fullscreenButton.style.display = 'none';\n      }\n\n      // Forzar propiedades de visualización\n      chatPanel.style.cssText = `\n        display: flex !important;\n        position: fixed !important;\n        top: 0 !important;\n        left: 0 !important;\n        right: 0 !important;\n        bottom: 0 !important;\n        width: 100vw !important;\n        height: 100vh !important;\n        z-index: 2147483647 !important;\n        background: white !important;\n        flex-direction: column !important;\n      `;\n      isOpen = true;\n\n      // Start conversation if not already started\n      if (!conversationStarted) {\n        startConversation();\n      }\n\n      // Focus input\n      setTimeout(() => {\n        document.getElementById('aipi-input').focus();\n      }, 300);\n\n      // Scroll to bottom of messages\n      scrollToBottom();\n      return;\n    }\n\n    // Para widgets tipo bubble (comportamiento original)\n    console.log('AIPPS Widget: Abriendo widget bubble');\n\n    // Detener rotación de textos cuando está abierto\n    if (textRotationInterval) {\n      clearInterval(textRotationInterval);\n    }\n\n    if (isMinimized) {\n      maximizeWidget();\n      return;\n    }\n\n    // Calculate responsive offsets and position for chat panel\n    const isMobile = window.innerWidth < 768;\n    const bottomOffset = isMobile ? '16px' : '20px';\n    const sideOffset = isMobile ? '16px' : '20px';\n    const panelHeight = isMobile ? '400px' : '500px';\n    const panelWidth = isMobile ? '300px' : '350px';\n    \n    // Calculate chat panel position based on button position\n    let panelPositionStyles = '';\n    switch (config.position) {\n      case 'bottom-left':\n        panelPositionStyles = `bottom: calc(${bottomOffset} + 50px) !important; left: ${sideOffset} !important; right: auto !important; top: auto !important;`;\n        break;\n      case 'bottom-center':\n        panelPositionStyles = `bottom: calc(${bottomOffset} + 50px) !important; left: 50% !important; right: auto !important; top: auto !important; transform: translateX(-50%) !important;`;\n        break;\n      case 'top-right':\n        panelPositionStyles = `top: calc(20px + 50px) !important; right: ${sideOffset} !important; left: auto !important; bottom: auto !important;`;\n        break;\n      case 'top-left':\n        panelPositionStyles = `top: calc(20px + 50px) !important; left: ${sideOffset} !important; right: auto !important; bottom: auto !important;`;\n        break;\n      case 'bottom-right':\n      default:\n        panelPositionStyles = `bottom: calc(${bottomOffset} + 50px) !important; right: ${sideOffset} !important; left: auto !important; top: auto !important;`;\n        break;\n    }\n    \n    // Apply complete styles to chat panel with calculated position\n    chatPanel.style.cssText = `\n      display: flex !important;\n      position: fixed !important;\n      ${panelPositionStyles}\n      width: ${panelWidth} !important;\n      height: ${panelHeight} !important;\n      max-height: 80vh !important;\n      max-width: calc(100vw - 40px) !important;\n      z-index: 2147483647 !important;\n      background: white !important;\n      border-radius: 10px !important;\n      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2) !important;\n      flex-direction: column !important;\n      overflow: visible !important;\n      opacity: 1 !important;\n      visibility: visible !important;\n      pointer-events: auto !important;\n    `;\n    \n    console.log('AIPPS Widget: Chat panel positioned for', config.position, 'with styles:', panelPositionStyles);\n    isOpen = true;\n    \n    console.log('AIPPS Widget: Panel de chat configurado como visible');\n    \n    // Proteger el panel para que no se cierre inesperadamente\n    setTimeout(() => {\n      if (chatPanel && isOpen) {\n        // Forzar que se mantenga visible\n        chatPanel.style.display = 'flex';\n        chatPanel.style.visibility = 'visible';\n        chatPanel.style.opacity = '1';\n        console.log('AIPPS Widget: Protección de visibilidad aplicada');\n      }\n    }, 50);\n    \n    // Verificar cada 100ms durante 2 segundos que el panel siga visible\n    let protectionCount = 0;\n    const protectionInterval = setInterval(() => {\n      if (chatPanel && isOpen && protectionCount < 20) {\n        if (chatPanel.style.display === 'none' || chatPanel.style.visibility === 'hidden') {\n          console.log('AIPPS Widget: Panel cerrado inesperadamente, restaurando...');\n          chatPanel.style.display = 'flex';\n          chatPanel.style.visibility = 'visible';\n          chatPanel.style.opacity = '1';\n        }\n        protectionCount++;\n      } else {\n        clearInterval(protectionInterval);\n      }\n    }, 100);\n\n    // Focus input\n    setTimeout(() => {\n      document.getElementById('aipi-input').focus();\n    }, 300);\n\n    // Start conversation if not already started\n    if (!conversationStarted) {\n      startConversation();\n    }\n\n    // Scroll to bottom of messages\n    scrollToBottom();\n  }\n\n  // Close the widget\n  function closeWidget() {\n    const chatPanel = document.getElementById('aipi-chat-panel');\n    const minimizedContainer = document.getElementById('aipi-minimized-container');\n    const toggleButton = document.getElementById('aipi-toggle-button');\n    const fullscreenButton = document.getElementById('aipi-fullscreen-button');\n\n    // Para widgets tipo fullscreen, no permitir cerrar completamente\n    if (config.widgetType === 'fullscreen') {\n      // Mostrar el botón flotante nuevamente\n      if (fullscreenButton) {\n        fullscreenButton.style.display = 'flex';\n      }\n\n      chatPanel.style.display = 'none';\n      isOpen = false;\n      return;\n    }\n\n    // Para widgets tipo bubble (comportamiento original)\n    // Update toggle button icon and restart text rotation\n    toggleButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n      </svg>\n      <span class=\"aipi-button-text\">${dynamicTexts[currentTextIndex]}</span>\n      <div class=\"aipi-notification-dot\"></div>\n    `;\n\n    // Reiniciar rotación de textos cuando se cierra\n    setTimeout(() => {\n      startTextRotation();\n    }, 1000);\n\n    chatPanel.style.display = 'none';\n    minimizedContainer.style.display = 'none';\n    isOpen = false;\n    isMinimized = false;\n  }\n\n  // Minimize the widget\n  function minimizeWidget() {\n    const chatPanel = document.getElementById('aipi-chat-panel');\n    const minimizedContainer = document.getElementById('aipi-minimized-container');\n\n    // Para el widget tipo fullscreen, minimizar significa hacerlo más pequeño pero no ocultarlo\n    if (config.widgetType === 'fullscreen') {\n      // Si es fullscreen, cambiamos el estilo a bubble temporalmente\n      chatPanel.style.width = '350px';\n      chatPanel.style.height = '500px';\n      chatPanel.style.position = 'fixed';\n      chatPanel.style.bottom = '24px';\n      chatPanel.style.right = '24px';\n      chatPanel.style.left = 'auto';\n      chatPanel.style.top = 'auto';\n      chatPanel.style.borderRadius = '10px';\n      isMinimized = true;\n      return;\n    }\n\n    // Para widgets tipo bubble (comportamiento original)\n    chatPanel.style.display = 'none';\n    minimizedContainer.style.display = 'flex';\n    isMinimized = true;\n  }\n\n  // Maximize the widget from minimized state\n  function maximizeWidget() {\n    const chatPanel = document.getElementById('aipi-chat-panel');\n    const minimizedContainer = document.getElementById('aipi-minimized-container');\n\n    // Para el widget tipo fullscreen, maximizar significa restaurar su tamaño completo\n    if (config.widgetType === 'fullscreen') {\n      // Restaurar el estilo fullscreen\n      chatPanel.style.width = '100%';\n      chatPanel.style.height = '100%';\n      chatPanel.style.position = 'fixed';\n      chatPanel.style.top = '0';\n      chatPanel.style.left = '0';\n      chatPanel.style.right = '0';\n      chatPanel.style.bottom = '0';\n      chatPanel.style.borderRadius = '0';\n      isMinimized = false;\n\n      // Focus input\n      setTimeout(() => {\n        document.getElementById('aipi-input').focus();\n      }, 300);\n\n      // Scroll to bottom of messages\n      scrollToBottom();\n      return;\n    }\n\n    // Para widgets tipo bubble (comportamiento original)\n    minimizedContainer.style.display = 'none';\n    chatPanel.style.display = 'flex';\n    isMinimized = false;\n\n    // Focus input\n    setTimeout(() => {\n      document.getElementById('aipi-input').focus();\n    }, 300);\n\n    // Scroll to bottom of messages\n    scrollToBottom();\n  }\n\n  // Send a message\n  async function sendMessage() {\n    const chatInput = document.getElementById('aipi-input');\n    const message = chatInput.value.trim();\n\n    if (!message) return;\n\n    // Clear input\n    chatInput.value = '';\n    document.getElementById('aipi-send-button').disabled = true;\n\n    // Start conversation if not already started\n    if (!conversationStarted) {\n      await startConversation();\n    }\n\n    // Add user message to UI\n    addMessage(message, 'user');\n\n    // Show typing indicator\n    showTypingIndicator(true);\n\n    // Asegurarnos de que tenemos el contenido de la página si no lo hemos escaneado aún\n    if (!siteContentScanned) {\n      scanCurrentPageContent();\n    }\n\n    try {\n      // Mensaje de debug para verificar el envío de información contextual\n      console.log(\"Enviando mensaje con contexto de página:\", {\n        url: window.location.href,\n        title: pageTitle,\n        contentLength: currentPageContent ? currentPageContent.length : 0,\n        authenticated: isAuthenticated,\n        conversationId: currentConversationId || config.conversationId\n      });\n\n      let response;\n      \n      // Use different endpoints based on authentication status\n      if (isAuthenticated && currentConversationId) {\n        // Authenticated fullscreen mode\n        response = await fetch(`${config.serverUrl}/api/conversations/${currentConversationId}/messages`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${currentUser.token}`,\n          },\n          body: JSON.stringify({\n            content: message,\n            role: 'user'\n          }),\n        });\n      } else {\n        // Anonymous bubble mode\n        response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/message`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            conversationId: config.conversationId,\n            content: message,\n            role: 'user',\n            pageContext: {\n              title: pageTitle || document.title,\n              url: window.location.href,\n              content: currentPageContent\n            }\n          }),\n        });\n      }\n\n      // Hide typing indicator\n      showTypingIndicator(false);\n\n      if (!response.ok) {\n        // Show friendly error message in chat based on browser language\n        const userLang = navigator.language.split('-')[0];\n\n        if (response.status === 500) {\n          // Error messages based on language\n          if (userLang === 'fr') {\n            addMessage(\"Désolé, il y a un problème temporaire avec le service. Veuillez réessayer plus tard ou contacter le support si le problème persiste.\", 'assistant');\n          } else if (userLang === 'en') {\n            addMessage(\"Sorry, there is a temporary problem with the service. Please try again later or contact support if the problem persists.\", 'assistant');\n          } else {\n            // Default to Spanish\n            addMessage(\"Lo siento, hay un problema temporal con el servicio. Por favor, intenta de nuevo más tarde o contacta con soporte si el problema persiste.\", 'assistant');\n          }\n        } else {\n          // General error messages\n          if (userLang === 'fr') {\n            addMessage(\"Désolé, je n'ai pas pu traiter votre message. Veuillez réessayer.\", 'assistant');\n          } else if (userLang === 'en') {\n            addMessage(\"Sorry, I couldn't process your message. Please try again.\", 'assistant');\n          } else {\n            // Default to Spanish\n            addMessage(\"Lo siento, no pude procesar tu mensaje. Por favor, intenta de nuevo.\", 'assistant');\n          }\n        }\n        throw new Error(`Failed to send message: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      // Handle response based on authentication mode\n      if (isAuthenticated && currentConversationId) {\n        // Authenticated fullscreen mode response\n        if (data.aiResponse && data.aiResponse.content) {\n          addMessage(data.aiResponse.content, 'assistant');\n        } else if (data.error) {\n          addMessage(\"Lo siento, hubo un error procesando tu mensaje.\", 'assistant');\n        } else {\n          addMessage(\"Recibí tu mensaje, pero no pude generar una respuesta en este momento.\", 'assistant');\n        }\n      } else {\n        // Anonymous bubble mode response\n        if (data.aiMessage) {\n          addMessage(data.aiMessage.content, 'assistant');\n        } else {\n          // Show message based on user language\n          const userLang = navigator.language.split('-')[0];\n\n          if (userLang === 'fr') {\n            addMessage(\"J'ai reçu votre message, mais je n'ai pas pu générer une réponse pour le moment.\", 'assistant');\n          } else if (userLang === 'en') {\n            addMessage(\"I received your message, but I couldn't generate a response at this time.\", 'assistant');\n          } else {\n            // Default to Spanish\n            addMessage(\"Recibí tu mensaje, pero no pude generar una respuesta en este momento.\", 'assistant');\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      // Hide typing indicator if still showing\n      showTypingIndicator(false);\n\n      // Only add error message if one hasn't been added already\n      if (!document.querySelector('.aipi-assistant-message:last-child')) {\n        // Add connection error message based on language\n        const userLang = navigator.language.split('-')[0];\n\n        if (userLang === 'fr') {\n          addMessage(\"Désolé, il y a un problème de connexion. Veuillez vérifier votre connexion Internet et réessayer.\", 'assistant');\n        } else if (userLang === 'en') {\n          addMessage(\"Sorry, there is a connection problem. Please check your internet connection and try again.\", 'assistant');\n        } else {\n          // Default to Spanish\n          addMessage(\"Lo siento, hay un problema de conexión. Por favor, verifica tu conexión a internet e intenta de nuevo.\", 'assistant');\n        }\n      }\n    }\n  }\n\n  // Add message to UI\n  function addMessage(content, role) {\n    // Buscar específicamente dentro del widget\n    const chatPanel = document.getElementById('aipi-chat-panel');\n    let messagesContainer = chatPanel ? chatPanel.querySelector('#aipi-messages-container') : null;\n    \n    if (!messagesContainer || !chatPanel) {\n      console.error('AIPPS Debug: No se encontró messagesContainer o chatPanel');\n      return;\n    }\n\n    // Forzar que este contenedor tenga los estilos correctos\n    messagesContainer.style.cssText = `\n      height: 300px !important;\n      overflow-y: scroll !important;\n      overflow-x: hidden !important;\n      padding: 16px;\n      background-color: #f9fafb;\n      border: none;\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n    `;\n\n    const messageElement = document.createElement('div');\n    messageElement.className = `aipi-message ${role === 'user' ? 'aipi-user-message' : 'aipi-assistant-message'}`;\n    \n    if (role === 'assistant') {\n      // Formatear respuestas del asistente para mejor legibilidad\n      messageElement.innerHTML = formatAssistantMessage(content);\n    } else {\n      messageElement.textContent = content;\n    }\n\n    messagesContainer.appendChild(messageElement);\n    console.log('AIPPS Debug: Mensaje agregado con estilos forzados');\n\n    // Store message\n    messages.push({ role, content });\n\n    // Force scroll to bottom with delay\n    setTimeout(() => {\n      scrollToBottom();\n    }, 200);\n  }\n\n  // Show or hide typing indicator\n  function showTypingIndicator(show) {\n    const messagesContainer = document.getElementById('aipi-messages-container');\n    const existingIndicator = document.querySelector('.aipi-typing-indicator');\n\n    // Remove existing indicator if any\n    if (existingIndicator) {\n      messagesContainer.removeChild(existingIndicator);\n    }\n\n    if (show) {\n      const typingIndicator = document.createElement('div');\n      typingIndicator.className = 'aipi-typing-indicator';\n      typingIndicator.innerHTML = `\n        <div class=\"aipi-typing-dot\"></div>\n        <div class=\"aipi-typing-dot\"></div>\n        <div class=\"aipi-typing-dot\"></div>\n      `;\n\n      messagesContainer.appendChild(typingIndicator);\n      scrollToBottom();\n    }\n  }\n\n  // Función para detectar si un color es oscuro\n  function isColorDark(color) {\n    if (!color || typeof color !== 'string') return false;\n    \n    // Convertir color hex a RGB\n    let hex = color.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    if (hex.length !== 6) return false;\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Calcular luminancia usando la fórmula WCAG\n    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n    \n    // Si la luminancia es menor a 0.5, es un color oscuro\n    return luminance < 0.5;\n  }\n\n  // Función para obtener color de texto con contraste adecuado o forzado\n  function getContrastTextColor(backgroundColor) {\n    // Si hay una configuración específica de color de texto, usarla\n    if (config.textColorMode === 'white') {\n      return '#ffffff';\n    }\n    if (config.textColorMode === 'black') {\n      return '#1f2937';\n    }\n    \n    // Si es 'auto' o no está definido, calcular automáticamente\n    if (!backgroundColor || typeof backgroundColor !== 'string') {\n      return '#1f2937'; // Por defecto texto oscuro\n    }\n    \n    // Convertir a hex limpio\n    let hex = backgroundColor.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    if (hex.length !== 6) {\n      return '#1f2937'; // Por defecto si formato es inválido\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Calcular luminancia relativa usando fórmula WCAG 2.1\n    const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n    \n    // Si la luminancia es menor a 0.6, usar texto blanco (más estricto)\n    return luminance < 0.6 ? '#ffffff' : '#1f2937';\n  }\n\n  // Función para generar paleta de colores pasteles basada en el color principal\n  function generatePastelPalette(baseColor) {\n    let hex = baseColor;\n    if (!hex || typeof hex !== 'string') {\n      hex = '#6366f1'; // Color por defecto si no hay color\n    }\n    \n    hex = hex.replace('#', '');\n    if (hex.length !== 6) {\n      hex = '6366f1'; // Fallback si el formato es incorrecto\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Crear tonos pasteles más claros para mejor contraste con texto oscuro\n    const pastelLight = `rgba(${Math.round(r + (255 - r) * 0.9)}, ${Math.round(g + (255 - g) * 0.9)}, ${Math.round(b + (255 - b) * 0.9)}, 0.4)`;\n    const pastelMedium = `rgba(${Math.round(r + (255 - r) * 0.85)}, ${Math.round(g + (255 - g) * 0.85)}, ${Math.round(b + (255 - b) * 0.85)}, 0.5)`;\n    const pastelDark = `rgba(${Math.round(r + (255 - r) * 0.8)}, ${Math.round(g + (255 - g) * 0.8)}, ${Math.round(b + (255 - b) * 0.8)}, 0.6)`;\n    \n    return {\n      light: pastelLight,\n      medium: pastelMedium,\n      dark: pastelDark,\n      accent: '#' + hex\n    };\n  }\n\n  // Format assistant messages for better readability\n  function formatAssistantMessage(content) {\n    if (!content) return '';\n    \n    console.log('AIPI Debug: formatAssistantMessage called with text:', content.substring(0, 200));\n    \n    const palette = generatePastelPalette(config.themeColor || config.mainColor || '#6366f1');\n    const isDarkTheme = isColorDark(config.themeColor || config.mainColor || '#6366f1');\n    \n    console.log('AIPI Debug: Generated palette:', palette);\n    console.log('AIPI Debug: Main color:', config.themeColor || config.mainColor);\n    console.log('AIPI Debug: Is dark theme:', isDarkTheme);\n    \n    // Colores de texto basados en el tema - CORREGIDO para mejor contraste en fondos pasteles\n    const titleColor = '#1f2937'; // Siempre oscuro para mejor contraste en fondos pasteles\n    const bodyColor = '#374151'; // Siempre oscuro para mejor legibilidad\n    const accentColor = config.themeColor || config.mainColor || '#6366f1';\n    \n    // Trabajar directamente con el texto\n    let safeText = content;\n    \n    // Formatear títulos principales (líneas que empiezan con #) - ELIMINAR # del texto final\n    safeText = safeText.replace(/^# (.+)$/gm, \n      `<h1 style=\"font-size: 18px; font-weight: 700; color: ${titleColor}; margin: 16px 0 12px 0; line-height: 1.3; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.medium}; padding: 12px 16px; border-radius: 8px; border-left: 4px solid ${palette.accent}; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">$1</h1>`\n    );\n    \n    // Formatear subtítulos (líneas que empiezan con ##) - ELIMINAR ## del texto final\n    safeText = safeText.replace(/^## (.+)$/gm, \n      `<h2 style=\"font-size: 16px; font-weight: 600; color: ${titleColor}; margin: 14px 0 10px 0; line-height: 1.4; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.light}; padding: 10px 14px; border-radius: 6px; border-left: 3px solid ${palette.accent}; box-shadow: 0 1px 3px rgba(0,0,0,0.1);\">$1</h2>`\n    );\n    \n    // Formatear subtítulos de tercer nivel (líneas que empiezan con ###) - ELIMINAR ### del texto final\n    safeText = safeText.replace(/^### (.+)$/gm, \n      `<h3 style=\"font-size: 15px; font-weight: 600; color: ${titleColor}; margin: 12px 0 8px 0; line-height: 1.4; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.light}; padding: 8px 12px; border-left: 3px solid ${palette.accent}; border-radius: 5px; box-shadow: 0 1px 2px rgba(0,0,0,0.08);\">$1</h3>`\n    );\n    \n    // Formatear texto en negrita (**texto**)\n    safeText = safeText.replace(/\\*\\*(.+?)\\*\\*/g, \n      `<strong style=\"font-weight: 600; color: ${titleColor}; background: ${palette.light}; padding: 2px 5px; border-radius: 3px;\">$1</strong>`\n    );\n    \n    // Formatear texto destacado (*texto*)\n    safeText = safeText.replace(/\\*(.+?)\\*/g, \n      `<em style=\"font-style: italic; color: ${accentColor}; font-weight: 500; background: ${palette.light}; padding: 1px 3px; border-radius: 2px;\">$1</em>`\n    );\n    \n    // Formatear listas numeradas (1. texto)\n    safeText = safeText.replace(/^(\\d+)\\.\\s(.+)$/gm, \n      `<div style=\"margin: 8px 0; padding: 8px 12px; background: ${palette.light}; border-left: 3px solid ${palette.accent}; border-radius: 4px;\"><span style=\"font-weight: 500; color: ${titleColor};\">$1. $2</span></div>`\n    );\n    \n    // Formatear listas con viñetas (- texto)\n    safeText = safeText.replace(/^-\\s(.+)$/gm, \n      `<div style=\"margin: 6px 0; padding: 6px 12px; background: ${palette.light}; border-radius: 4px; border-left: 2px solid ${palette.medium};\"><span style=\"color: ${bodyColor};\">• $1</span></div>`\n    );\n    \n    // Formatear enlaces\n    safeText = safeText.replace(/(https?:\\/\\/[^\\s]+)/g, \n      `<a href=\"$1\" target=\"_blank\" style=\"color: ${accentColor}; text-decoration: underline; font-weight: 500;\">$1</a>`\n    );\n    \n    // Formatear párrafos (líneas que no son títulos ni listas)\n    const lines = safeText.split('\\n');\n    const formattedLines = lines.map(line => {\n      line = line.trim();\n      if (!line) return '<br>';\n      \n      // Si no es título, lista o ya tiene formato HTML, envolver en párrafo\n      if (!line.match(/^<(h1|h2|h3|div|a)/)) {\n        return `<p style=\"margin: 8px 0; line-height: 1.6; color: ${bodyColor}; font-size: 14px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\">${line}</p>`;\n      }\n      \n      return line;\n    });\n    \n    const finalResult = formattedLines.join('');\n    console.log('AIPI Debug: Final formatted result:', finalResult.substring(0, 300));\n    return finalResult;\n  }\n\n  // Scroll to bottom of messages container\n  function scrollToBottom() {\n    const messagesContainer = document.getElementById('aipi-messages-container');\n    if (messagesContainer) {\n      setTimeout(() => {\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        // Forzar scroll adicional en caso de problemas de timing\n        setTimeout(() => {\n          messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }, 100);\n      }, 150);\n    }\n  }\n\n  // Helper function to get font family based on config\n  function getFontFamily() {\n    switch (config.font) {\n      case 'roboto':\n        return \"'Roboto', sans-serif\";\n      case 'opensans':\n        return \"'Open Sans', sans-serif\";\n      case 'lato':\n        return \"'Lato', sans-serif\";\n      case 'poppins':\n        return \"'Poppins', sans-serif\";\n      case 'inter':\n      default:\n        return \"'Inter', sans-serif\";\n    }\n  }\n\n  // Helper function to adjust color brightness\n  function adjustColor(color, amount) {\n    // Convert hex to RGB\n    let r = parseInt(color.substring(1, 3), 16);\n    let g = parseInt(color.substring(3, 5), 16);\n    let b = parseInt(color.substring(5, 7), 16);\n\n    // Adjust brightness\n    r = Math.max(0, Math.min(255, r + amount));\n    g = Math.max(0, Math.min(255, g + amount));\n    b = Math.max(0, Math.min(255, b + amount));\n\n    // Convert back to hex\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n  }\n\n  // Helper function to escape HTML\n  function escapeHTML(text) {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#039;');\n  }\n\n  // Update button text with integration name\n  function updateButtonText() {\n    const buttonName = config.integrationName || config.assistantName;\n    \n    // Update bubble widget button text\n    const buttonTextElement = document.querySelector('.aipi-button-text');\n    if (buttonTextElement) {\n      buttonTextElement.textContent = buttonName;\n    }\n    \n    // Update fullscreen widget button text\n    const fullscreenButtonText = document.querySelector('.aipi-fullscreen-button-text');\n    if (fullscreenButtonText) {\n      fullscreenButtonText.textContent = buttonName;\n    }\n  }\n\n  // Function to translate user content dynamically\n  function translateUserContent(text, targetLang) {\n    if (!text || !targetLang || targetLang === 'es') return text;\n    \n    // Basic translation patterns for common business descriptions\n    const translations = {\n      en: {\n        // Spanish to English translations\n        'Soy tu asistente especializado en': 'I am your specialized assistant in',\n        'Estoy aquí para ayudarte con': 'I am here to help you with',\n        'información sobre nuestros servicios': 'information about our services',\n        'responder preguntas sobre nuestros productos': 'answer questions about our products',\n        'brindarte soporte profesional': 'provide professional support',\n        'Mi objetivo es ofrecerte': 'My goal is to offer you',\n        'una experiencia personalizada': 'a personalized experience',\n        'resolver todas tus consultas': 'resolve all your inquiries',\n        'de manera eficiente': 'efficiently',\n        'consultas': 'inquiries',\n        'productos': 'products',\n        'servicios': 'services',\n        'soporte': 'support',\n        'ayuda': 'help',\n        'información': 'information',\n        // Specific translations for Techcolca content\n        'TechColca': 'TechColca',\n        'especializado en TechColca': 'specialized in TechColca',\n        'ayudarte con información': 'help you with information',\n        'sobre nuestros': 'about our',\n        'responder preguntas': 'answer questions',\n        'brindarte': 'provide you'\n      },\n      fr: {\n        // Spanish to French translations\n        'Soy tu asistente especializado en': 'Je suis votre assistant spécialisé en',\n        'Estoy aquí para ayudarte con': 'Je suis ici pour vous aider avec',\n        'información sobre nuestros servicios': 'des informations sur nos services',\n        'responder preguntas sobre nuestros productos': 'répondre aux questions sur nos produits',\n        'brindarte soporte profesional': 'vous fournir un support professionnel',\n        'Mi objetivo es ofrecerte': 'Mon objectif est de vous offrir',\n        'una experiencia personalizada': 'une expérience personnalisée',\n        'resolver todas tus consultas': 'résoudre toutes vos questions',\n        'de manera eficiente': 'de manière efficace',\n        'consultas': 'questions',\n        'productos': 'produits',\n        'servicios': 'services',\n        'soporte': 'support',\n        'ayuda': 'aide',\n        'información': 'informations',\n        // Specific translations for Techcolca content\n        'TechColca': 'TechColca',\n        'especializado en TechColca': 'spécialisé en TechColca',\n        'ayudarte con información': 'vous aider avec des informations',\n        'sobre nuestros': 'sur nos',\n        'responder preguntas': 'répondre aux questions',\n        'brindarte': 'vous fournir'\n      }\n    };\n    \n    let translatedText = text;\n    const langTranslations = translations[targetLang];\n    \n    if (langTranslations) {\n      // Apply translations by replacing Spanish phrases with target language\n      Object.keys(langTranslations).forEach(spanishPhrase => {\n        const regex = new RegExp(spanishPhrase, 'gi');\n        translatedText = translatedText.replace(regex, langTranslations[spanishPhrase]);\n      });\n    }\n    \n    return translatedText;\n  }\n\n  // Authentication functions for fullscreen mode\n  function showAuthForm() {\n    // Generate personalized explanation based on integration\n    const integrationName = config.integrationName || config.assistantName || 'Asistente IA';\n    const integrationDescription = config.description || '';\n    const botBehavior = config.botBehavior || '';\n    \n    // Create a personalized explanation based on integration description\n    let personalizedExplanation;\n    \n    // Use integration description if available, otherwise fallback to bot behavior, then default message\n    if (integrationDescription && integrationDescription.trim().length > 0) {\n      personalizedExplanation = translateUserContent(integrationDescription.trim(), config.language);\n    } else if (botBehavior && botBehavior.trim().length > 0) {\n      personalizedExplanation = translateUserContent(botBehavior.trim(), config.language);\n    } else {\n      // Default fallback message in current language\n      const defaultMessages = {\n        es: `Soy una inteligencia artificial diseñada como consejero espiritual para ayudarte a crecer en tu fe. Todas mis respuestas están basadas en la Biblia y las enseñanzas de Jesucristo. Te ofrezco guía práctica, versículos relevantes y sabiduría bíblica para cualquier situación que enfrentes en tu vida cristiana.`,\n        en: `I am an artificial intelligence designed as a spiritual counselor to help you grow in your faith. All my responses are based on the Bible and the teachings of Jesus Christ. I offer practical guidance, relevant verses, and biblical wisdom for any situation you face in your Christian life.`,\n        fr: `Je suis une intelligence artificielle conçue comme conseiller spirituel pour vous aider à grandir dans votre foi. Toutes mes réponses sont basées sur la Bible et les enseignements de Jésus-Christ. J'offre des conseils pratiques, des versets pertinents et la sagesse biblique pour toute situation que vous rencontrez dans votre vie chrétienne.`\n      };\n      personalizedExplanation = defaultMessages[config.language] || defaultMessages.es;\n    }\n    \n    const authContainer = document.createElement('div');\n    authContainer.id = 'aipi-auth-container';\n    authContainer.innerHTML = `\n      <div class=\"aipi-auth-overlay\">\n        <div class=\"aipi-auth-modal\">\n          <div class=\"aipi-auth-header\">\n            <h2>${t.welcomeTo} ${escapeHTML(integrationName)}</h2>\n            <button class=\"aipi-auth-close\" onclick=\"closeAuthForm()\">×</button>\n          </div>\n          <div class=\"aipi-auth-content\">\n            <div class=\"aipi-auth-explanation\">\n              <div class=\"aipi-explanation-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"${config.themeColor}\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n                </svg>\n              </div>\n              <h3>${t.whyCreateAccount}</h3>\n              <p class=\"aipi-explanation-text\">${escapeHTML(personalizedExplanation)}</p>\n              <div class=\"aipi-benefits\">\n                <div class=\"aipi-benefit-item\">\n                  <span class=\"aipi-benefit-icon\">💬</span>\n                  <span>${t.saveConversations}</span>\n                </div>\n                <div class=\"aipi-benefit-item\">\n                  <span class=\"aipi-benefit-icon\">📚</span>\n                  <span>${t.accessHistory}</span>\n                </div>\n                <div class=\"aipi-benefit-item\">\n                  <span class=\"aipi-benefit-icon\">🔒</span>\n                  <span>${t.secureData}</span>\n                </div>\n                <div class=\"aipi-benefit-item\">\n                  <span class=\"aipi-benefit-icon\">⚡</span>\n                  <span>${t.personalizedExperience}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"aipi-auth-tabs\">\n              <button class=\"aipi-auth-tab active\" onclick=\"showLoginTab()\">${t.signIn}</button>\n              <button class=\"aipi-auth-tab\" onclick=\"showRegisterTab()\">${t.register}</button>\n            </div>\n            \n            <div id=\"aipi-login-form\" class=\"aipi-auth-form\">\n              <input type=\"text\" id=\"login-username\" placeholder=\"${t.username}\" required>\n              <input type=\"password\" id=\"login-password\" placeholder=\"${t.password}\" required>\n              <button onclick=\"handleLogin()\" class=\"aipi-auth-submit\">${t.signIn}</button>\n            </div>\n            \n            <div id=\"aipi-register-form\" class=\"aipi-auth-form\" style=\"display: none;\">\n              <input type=\"text\" id=\"register-username\" placeholder=\"${t.username}\" required>\n              <input type=\"email\" id=\"register-email\" placeholder=\"${t.email}\" required>\n              <input type=\"password\" id=\"register-password\" placeholder=\"${t.password}\" required>\n              <button onclick=\"handleRegister()\" class=\"aipi-auth-submit\">${t.register}</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Add auth styles\n    const authStyles = document.createElement('style');\n    authStyles.textContent = `\n      .aipi-auth-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 2147483647;\n      }\n      \n      .aipi-auth-modal {\n        background: white;\n        border-radius: 12px;\n        padding: 0;\n        width: 480px;\n        max-width: 90vw;\n        max-height: 90vh;\n        overflow-y: auto;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n      }\n      \n      .aipi-auth-header {\n        background: ${config.themeColor};\n        color: white;\n        padding: 20px;\n        border-radius: 12px 12px 0 0;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      \n      .aipi-auth-header h2 {\n        margin: 0;\n        font-size: 18px;\n        font-weight: 600;\n      }\n      \n      .aipi-auth-close {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      \n      .aipi-auth-content {\n        padding: 20px;\n      }\n      \n      .aipi-auth-explanation {\n        text-align: center;\n        margin-bottom: 25px;\n        padding: 20px;\n        background: #f8f9fa;\n        border-radius: 8px;\n        border: 1px solid #e5e7eb;\n      }\n      \n      .aipi-explanation-icon {\n        margin-bottom: 15px;\n      }\n      \n      .aipi-auth-explanation h3 {\n        margin: 0 0 15px 0;\n        font-size: 20px;\n        font-weight: 600;\n        color: #1f2937;\n      }\n      \n      .aipi-explanation-text {\n        margin: 0 0 20px 0;\n        font-size: 16px;\n        line-height: 1.6;\n        color: #4b5563;\n      }\n      \n      .aipi-benefits {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 10px;\n        margin-top: 15px;\n      }\n      \n      .aipi-benefit-item {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        font-size: 15px;\n        color: #374151;\n        text-align: left;\n      }\n      \n      .aipi-benefit-icon {\n        font-size: 16px;\n        width: 20px;\n        display: inline-block;\n      }\n      \n      /* Responsive Auth Modal */\n      @media (max-width: 480px) {\n        .aipi-auth-modal {\n          width: 95vw !important;\n          max-width: 95vw !important;\n          margin: 10px !important;\n        }\n        \n        .aipi-auth-header {\n          padding: 15px !important;\n        }\n        \n        .aipi-auth-header h2 {\n          font-size: 16px !important;\n        }\n        \n        .aipi-auth-content {\n          padding: 15px !important;\n        }\n        \n        .aipi-auth-explanation {\n          padding: 15px !important;\n          margin-bottom: 20px !important;\n        }\n        \n        .aipi-auth-explanation h3 {\n          font-size: 18px !important;\n        }\n        \n        .aipi-explanation-text {\n          font-size: 14px !important;\n        }\n        \n        .aipi-benefits {\n          grid-template-columns: 1fr !important;\n          gap: 8px !important;\n        }\n        \n        .aipi-benefit-item {\n          font-size: 13px !important;\n        }\n        \n        .aipi-auth-form input {\n          padding: 10px !important;\n          font-size: 16px !important;\n        }\n        \n        .aipi-auth-submit {\n          padding: 12px !important;\n          font-size: 16px !important;\n        }\n      }\n      \n      @media (min-width: 481px) and (max-width: 768px) {\n        .aipi-auth-modal {\n          width: 85vw !important;\n          max-width: 85vw !important;\n        }\n        \n        .aipi-auth-explanation h3 {\n          font-size: 19px !important;\n        }\n        \n        .aipi-explanation-text {\n          font-size: 15px !important;\n        }\n        \n        .aipi-benefits {\n          grid-template-columns: 1fr !important;\n        }\n      }\n      \n      @media (min-width: 769px) and (max-width: 1024px) {\n        .aipi-auth-modal {\n          width: 70vw !important;\n          max-width: 500px !important;\n        }\n      }\n      \n      .aipi-auth-tabs {\n        display: flex;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #e5e7eb;\n      }\n      \n      .aipi-auth-tab {\n        flex: 1;\n        padding: 10px;\n        border: none;\n        background: none;\n        cursor: pointer;\n        font-weight: 500;\n        color: #6b7280;\n        border-bottom: 2px solid transparent;\n      }\n      \n      .aipi-auth-tab.active {\n        color: ${config.themeColor};\n        border-bottom-color: ${config.themeColor};\n      }\n      \n      .aipi-auth-form input {\n        width: 100%;\n        padding: 12px;\n        margin-bottom: 15px;\n        border: 1px solid #d1d5db;\n        border-radius: 6px;\n        font-size: 14px;\n        box-sizing: border-box;\n      }\n      \n      .aipi-auth-form input:focus {\n        outline: none;\n        border-color: ${config.themeColor};\n        box-shadow: 0 0 0 3px ${config.themeColor}20;\n      }\n      \n      .aipi-auth-submit {\n        width: 100%;\n        padding: 12px;\n        background: ${config.themeColor};\n        color: white;\n        border: none;\n        border-radius: 6px;\n        font-weight: 600;\n        cursor: pointer;\n        font-size: 14px;\n      }\n      \n      .aipi-auth-submit:hover {\n        background: ${adjustColor(config.themeColor, -20)};\n      }\n    `;\n    \n    document.head.appendChild(authStyles);\n    document.body.appendChild(authContainer);\n  }\n\n  window.showLoginTab = function() {\n    document.getElementById('aipi-login-form').style.display = 'block';\n    document.getElementById('aipi-register-form').style.display = 'none';\n    document.querySelectorAll('.aipi-auth-tab').forEach(tab => tab.classList.remove('active'));\n    document.querySelectorAll('.aipi-auth-tab')[0].classList.add('active');\n  }\n\n  window.showRegisterTab = function() {\n    document.getElementById('aipi-login-form').style.display = 'none';\n    document.getElementById('aipi-register-form').style.display = 'block';\n    document.querySelectorAll('.aipi-auth-tab').forEach(tab => tab.classList.remove('active'));\n    document.querySelectorAll('.aipi-auth-tab')[1].classList.add('active');\n  }\n\n  window.closeAuthForm = function() {\n    const authContainer = document.getElementById('aipi-auth-container');\n    if (authContainer) {\n      authContainer.remove();\n    }\n  }\n\n  window.handleLogin = async function() {\n    const username = document.getElementById('login-username').value;\n    const password = document.getElementById('login-password').value;\n    \n    if (!username || !password) {\n      alert('Por favor, completa todos los campos');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${config.serverUrl}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        console.log('AIPPS Debug: Login exitoso');\n        \n        // Guardar el token en múltiples ubicaciones\n        if (userData.token) {\n          localStorage.setItem('auth_token', userData.token);\n          localStorage.setItem('aipi_auth_token', userData.token);\n          sessionStorage.setItem('auth_token', userData.token);\n          \n          // También guardar en cookies\n          document.cookie = `auth_token=${userData.token}; path=/; max-age=86400`;\n          \n          console.log('AIPPS Debug: Token guardado correctamente en login');\n        } else {\n          console.log('AIPPS Debug: No se recibió token en la respuesta de login');\n        }\n        \n        currentUser = userData.user || userData;\n        isAuthenticated = true;\n        closeAuthForm();\n        \n        await loadUserConversationsFromDashboard();\n        showFullscreenChat();\n      } else {\n        const error = await response.json();\n        alert(error.message || 'Error al iniciar sesión');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      alert('Error de conexión. Inténtalo de nuevo.');\n    }\n  }\n\n  window.handleRegister = async function() {\n    const username = document.getElementById('register-username').value;\n    const email = document.getElementById('register-email').value;\n    const password = document.getElementById('register-password').value;\n    \n    if (!username || !email || !password) {\n      alert('Por favor, completa todos los campos');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${config.serverUrl}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, email, password }),\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        console.log('AIPPS Debug: Registro exitoso');\n        \n        // Guardar el token en múltiples ubicaciones\n        if (userData.token) {\n          localStorage.setItem('auth_token', userData.token);\n          localStorage.setItem('aipi_auth_token', userData.token);\n          sessionStorage.setItem('auth_token', userData.token);\n          \n          // También guardar en cookies\n          document.cookie = `auth_token=${userData.token}; path=/; max-age=86400`;\n          \n          console.log('AIPPS Debug: Token guardado correctamente en registro');\n        } else {\n          console.log('AIPPS Debug: No se recibió token en la respuesta de registro');\n        }\n        \n        currentUser = userData.user || userData;\n        isAuthenticated = true;\n        closeAuthForm();\n        \n        await loadUserConversationsFromDashboard();\n        showFullscreenChat();\n      } else {\n        const error = await response.json();\n        alert(error.message || 'Error al registrarse');\n      }\n    } catch (error) {\n      console.error('Register error:', error);\n      alert('Error de conexión. Inténtalo de nuevo.');\n    }\n  }\n\n  async function loadUserConversations() {\n    try {\n      const token = localStorage.getItem('aipi_auth_token');\n      const response = await fetch(`${getApiBaseUrl()}/api/conversations`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (response.ok) {\n        userConversations = await response.json();\n        console.log('AIPPS Debug: Conversaciones cargadas:', userConversations.length);\n      } else {\n        console.error('Error loading conversations:', response.status);\n        userConversations = [];\n      }\n    } catch (error) {\n      console.error('Error loading conversations:', error);\n      userConversations = [];\n    }\n  }\n\n  async function loadUserConversationsFromDashboard() {\n    try {\n      console.log('AIPPS Debug: Cargando conversaciones usando sistema autenticado...');\n      \n      // Use authenticated system for fullscreen widget: JWT token + apiKey\n      const token = getAuthToken();\n      \n      if (!token) {\n        console.log('AIPPS Debug: No auth token found, user needs to login');\n        userConversations = [];\n        return;\n      }\n      \n      const response = await fetch(`${getApiBaseUrl()}/api/widget/${config.apiKey}/conversations/user`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n      });\n\n      console.log('AIPPS Debug: Authenticated conversations response status:', response.status);\n      \n      if (response.ok) {\n        userConversations = await response.json();\n        console.log('AIPPS Debug: Conversaciones autenticadas cargadas:', userConversations.length);\n      } else if (response.status === 401) {\n        console.log('AIPPS Debug: Token expired or invalid, user needs to login again');\n        // Clear invalid token\n        localStorage.removeItem('aipi_auth_token');\n        if (typeof document !== 'undefined' && document.cookie) {\n          document.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n        }\n        userConversations = [];\n      } else {\n        console.error('Error loading authenticated conversations:', response.status);\n        const errorText = await response.text();\n        console.error('Error details:', errorText);\n        userConversations = [];\n      }\n    } catch (error) {\n      console.error('Error loading authenticated conversations:', error);\n      userConversations = [];\n    }\n  }\n\n  function showFullscreenChat() {\n    const chatPanel = document.getElementById('aipi-chat-panel');\n    if (!chatPanel) return;\n\n    chatPanel.innerHTML = `\n      <div class=\"aipi-fullscreen-layout\">\n        <div class=\"aipi-conversations-sidebar\" id=\"aipi-conversations-sidebar\">\n          <div class=\"aipi-sidebar-header\">\n            <div class=\"aipi-header-title\">\n              <h3>Conversaciones</h3>\n              <div class=\"aipi-user-info\" id=\"aipi-user-info\" style=\"font-size: 12px; color: #6b7280; display: block; margin-top: 2px;\">\n                <!-- User info will be loaded here -->\n              </div>\n            </div>\n            <button onclick=\"createNewConversation()\" class=\"aipi-new-chat-btn\">+ Nueva</button>\n          </div>\n          <div class=\"aipi-conversations-list\" id=\"aipi-conversations-list\">\n            ${renderConversationsList()}\n          </div>\n        </div>\n        \n        <div class=\"aipi-chat-main\">\n          <div id=\"aipi-chat-header\">\n            <div id=\"aipi-header-info\">\n              <button class=\"aipi-mobile-menu-btn\" id=\"aipi-mobile-menu-btn\" aria-label=\"Toggle conversations\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\n                  <line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\n                  <line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\n                </svg>\n              </button>\n              <div id=\"aipi-avatar\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n                </svg>\n              </div>\n              <div id=\"aipi-header-text\">\n                <span id=\"aipi-assistant-name\">${escapeHTML(config.integrationName || config.assistantName)}</span>\n                <span id=\"aipi-status\">${t.online}</span>\n              </div>\n            </div>\n            <div id=\"aipi-header-actions\">\n              <button class=\"aipi-header-button\" onclick=\"window.aipiCloseFullscreen()\" aria-label=\"Close\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                </svg>\n              </button>\n            </div>\n          </div>\n          <div id=\"aipi-messages-container\"></div>\n          <div id=\"aipi-input-container\">\n            <input type=\"text\" id=\"aipi-fullscreen-input\" placeholder=\"\" data-translate-placeholder=\"placeholder\" onkeydown=\"if(event.key==='Enter') window.aipiSendFullscreenMessage()\">\n            <button onclick=\"window.aipiSendFullscreenMessage()\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n                <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n\n    const fullscreenStyles = document.createElement('style');\n    fullscreenStyles.textContent = `\n      .aipi-fullscreen-layout {\n        display: flex;\n        height: 100vh;\n        font-family: ${getFontFamily()};\n        position: relative;\n      }\n      \n      .aipi-conversations-sidebar {\n        width: 300px;\n        background: #f8f9fa;\n        border-right: 1px solid #e5e7eb;\n        display: flex;\n        flex-direction: column;\n        transition: transform 0.3s ease;\n        position: relative;\n      }\n      \n      .aipi-mobile-menu-btn {\n        display: none;\n        background: rgba(255, 255, 255, 0.2);\n        border: none;\n        color: white;\n        padding: 8px;\n        border-radius: 6px;\n        cursor: pointer;\n        margin-right: 12px;\n        transition: background 0.2s;\n      }\n      \n      .aipi-mobile-menu-btn:hover {\n        background: rgba(255, 255, 255, 0.3);\n      }\n      \n      .aipi-sidebar-overlay {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n      }\n      \n      /* Mobile responsive styles - Consistent with Desktop Behavior */\n      @media (max-width: 480px) {\n        .aipi-conversations-sidebar {\n          position: fixed !important;\n          top: 0 !important;\n          left: 0 !important;\n          height: 100vh !important;\n          z-index: 1001 !important;\n          transform: translateX(-100%) !important;\n          width: 75vw !important;\n          max-width: 280px !important;\n          box-shadow: 2px 0 15px rgba(0, 0, 0, 0.2) !important;\n        }\n        \n        .aipi-conversations-sidebar.show {\n          transform: translateX(0) !important;\n        }\n        \n        .aipi-chat-main {\n          width: 100% !important;\n          transition: all 0.3s ease !important;\n        }\n        \n        .aipi-chat-main.sidebar-open {\n          margin-left: 75vw !important;\n          width: 25vw !important;\n        }\n        \n        .aipi-mobile-menu-btn {\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n        }\n        \n        .aipi-sidebar-overlay {\n          display: none !important;\n        }\n        \n        .aipi-sidebar-header {\n          padding: 12px !important;\n        }\n        \n        .aipi-sidebar-header h3 {\n          font-size: 14px !important;\n        }\n        \n        .aipi-new-chat-btn {\n          padding: 4px 8px !important;\n          font-size: 11px !important;\n        }\n      }\n      \n      /* Tablet Portrait */\n      @media (min-width: 481px) and (max-width: 768px) {\n        .aipi-conversations-sidebar {\n          position: fixed !important;\n          top: 0 !important;\n          left: 0 !important;\n          height: 100vh !important;\n          z-index: 1001 !important;\n          transform: translateX(-100%) !important;\n          width: 60vw !important;\n          max-width: 320px !important;\n          box-shadow: 2px 0 15px rgba(0, 0, 0, 0.2) !important;\n        }\n        \n        .aipi-conversations-sidebar.show {\n          transform: translateX(0) !important;\n        }\n        \n        .aipi-chat-main {\n          width: 100% !important;\n          transition: all 0.3s ease !important;\n        }\n        \n        .aipi-chat-main.sidebar-open {\n          margin-left: 60vw !important;\n          width: 40vw !important;\n        }\n        \n        .aipi-mobile-menu-btn {\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n        }\n        \n        .aipi-sidebar-overlay {\n          display: none !important;\n        }\n      }\n      \n      /* Tablet Landscape */\n      @media (min-width: 769px) and (max-width: 1024px) {\n        .aipi-conversations-sidebar {\n          position: fixed !important;\n          top: 0 !important;\n          left: 0 !important;\n          height: 100vh !important;\n          z-index: 1001 !important;\n          transform: translateX(-100%) !important;\n          width: 50vw !important;\n          max-width: 350px !important;\n          box-shadow: 2px 0 15px rgba(0, 0, 0, 0.2) !important;\n        }\n        \n        .aipi-conversations-sidebar.show {\n          transform: translateX(0) !important;\n        }\n        \n        .aipi-chat-main {\n          width: 100% !important;\n          transition: all 0.3s ease !important;\n        }\n        \n        .aipi-chat-main.sidebar-open {\n          margin-left: 50vw !important;\n          width: 50vw !important;\n        }\n        \n        .aipi-mobile-menu-btn {\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n        }\n        \n        .aipi-sidebar-overlay {\n          display: none !important;\n        }\n      }\n      \n      /* Desktop */\n      @media (min-width: 1025px) {\n        .aipi-mobile-menu-btn {\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n        }\n        \n        .aipi-conversations-sidebar {\n          position: fixed !important;\n          top: 0 !important;\n          left: 0 !important;\n          height: 100vh !important;\n          z-index: 1001 !important;\n          transform: translateX(0) !important;\n          width: 300px !important;\n          box-shadow: 2px 0 15px rgba(0, 0, 0, 0.1) !important;\n        }\n        \n        .aipi-conversations-sidebar.hide {\n          transform: translateX(-100%) !important;\n        }\n        \n        .aipi-chat-main {\n          margin-left: 300px !important;\n          width: calc(100% - 300px) !important;\n          transition: all 0.3s ease !important;\n        }\n        \n        .aipi-chat-main.full-width {\n          margin-left: 0 !important;\n          width: 100% !important;\n        }\n        \n        .aipi-sidebar-overlay {\n          display: none !important;\n        }\n      }\n      \n      .aipi-sidebar-header {\n        padding: 20px;\n        border-bottom: 1px solid #e5e7eb;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      \n      .aipi-sidebar-header h3 {\n        margin: 0;\n        font-size: 16px;\n        font-weight: 600;\n        color: #1f2937;\n      }\n      \n      .aipi-new-chat-btn {\n        background: ${config.themeColor};\n        color: white;\n        border: none;\n        padding: 6px 12px;\n        border-radius: 6px;\n        font-size: 12px;\n        cursor: pointer;\n        font-weight: 500;\n      }\n      \n      .aipi-conversations-list {\n        flex: 1;\n        overflow-y: auto;\n        padding: 10px;\n      }\n      \n      .aipi-conversation-item {\n        padding: 12px;\n        margin-bottom: 8px;\n        background: white;\n        border-radius: 8px;\n        cursor: pointer;\n        border: 1px solid #e5e7eb;\n        transition: all 0.2s;\n      }\n      \n      .aipi-conversation-item:hover {\n        background: #f3f4f6;\n      }\n      \n      .aipi-conversation-item.active {\n        background: ${config.themeColor}10;\n        border-color: ${config.themeColor};\n      }\n      \n      .aipi-conversation-title {\n        font-weight: 500;\n        font-size: 14px;\n        color: #1f2937;\n        margin-bottom: 4px;\n      }\n      \n      .aipi-conversation-preview {\n        font-size: 12px;\n        color: #6b7280;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      \n      .aipi-chat-main {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n      }\n      \n      #aipi-input-container {\n        padding: 20px;\n        border-top: 1px solid #e5e7eb;\n        display: flex;\n        gap: 10px;\n        align-items: center;\n        background: white;\n      }\n      \n      #aipi-fullscreen-input {\n        flex: 1;\n        padding: 12px 16px;\n        border: 1px solid #e5e7eb;\n        border-radius: 24px;\n        font-size: 14px;\n        outline: none;\n        font-family: ${getFontFamily()};\n        width: 100%;\n      }\n      \n      #aipi-fullscreen-input:focus {\n        border-color: ${config.themeColor};\n        box-shadow: 0 0 0 2px ${config.themeColor}20;\n      }\n      \n      #aipi-input-container button {\n        padding: 12px;\n        background: ${config.themeColor};\n        color: white;\n        border: none;\n        border-radius: 50%;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s;\n        width: 44px;\n        height: 44px;\n      }\n      \n      #aipi-input-container button:hover {\n        background: ${adjustColor(config.themeColor, -20)};\n        transform: scale(1.05);\n      }\n      \n      #aipi-messages-container {\n        flex: 1;\n        overflow-y: auto;\n        padding: 20px;\n        background: #f8f9fa;\n      }\n    `;\n    \n    document.head.appendChild(fullscreenStyles);\n    \n    chatPanel.style.display = 'flex';\n    isOpen = true;\n\n    // Initialize fullscreen chat with bubble system (no authentication needed)\n    setTimeout(async () => {\n      console.log('AIPPS Debug: Inicializando chat fullscreen con sistema bubble');\n      \n      // Initialize sidebar state for responsive design\n      initializeSidebarState();\n      \n      // Add event listeners after DOM is created\n      const menuBtn = document.getElementById('aipi-mobile-menu-btn');\n      const overlay = document.getElementById('aipi-sidebar-overlay');\n      \n      if (menuBtn) {\n        menuBtn.addEventListener('click', function(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          console.log('AIPPS Debug: Menu button clicked via event listener');\n          window.toggleConversationsSidebar();\n        });\n        console.log('AIPPS Debug: Event listener añadido al botón menú');\n      } else {\n        console.error('AIPPS Debug: No se encontró el botón menú');\n      }\n      \n      if (overlay) {\n        overlay.addEventListener('click', function(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          console.log('AIPPS Debug: Overlay clicked via event listener');\n          window.toggleConversationsSidebar();\n        });\n        console.log('AIPPS Debug: Event listener añadido al overlay');\n      }\n      \n      // NO TOKEN NEEDED - using bubble system directly\n      console.log('AIPPS Debug: Sistema bubble sin autenticación iniciado');\n      \n      // Load user conversations using bubble system endpoints\n      await loadUserConversationsFromDashboard();\n      updateConversationsList();\n      \n      // Load and display user info\n      await loadAndDisplayUserInfo();\n      \n      // Always show welcome message when opening fullscreen\n      if (config.greetingMessage) {\n        console.log('AIPPS Debug: Mostrando mensaje de bienvenida:', config.greetingMessage);\n        addMessage(config.greetingMessage, 'assistant');\n        \n        // Add some spacing after welcome message\n        setTimeout(() => {\n          const messagesContainer = document.getElementById('aipi-messages-container');\n          if (messagesContainer) {\n            messagesContainer.innerHTML += '<div style=\"height: 10px;\"></div>';\n          }\n        }, 100);\n      }\n      \n      // Then load existing conversation if any (but don't overwrite welcome message)\n      if (userConversations.length > 0) {\n        console.log('AIPPS Debug: Cargando conversación existente después del mensaje de bienvenida');\n        // Don't call loadConversation as it clears the messages\n        // Instead, just set the current conversation ID\n        currentConversationId = userConversations[0].id;\n      }\n    }, 100);\n  }\n\n  function renderConversationsList() {\n    if (userConversations.length === 0) {\n      return '<div style=\"text-align: center; color: #6b7280; padding: 20px;\">No hay conversaciones</div>';\n    }\n\n    return userConversations.map(conv => `\n      <div class=\"aipi-conversation-item ${conv.id === currentConversationId ? 'active' : ''}\" \n           onclick=\"window.loadConversation(${conv.id}); console.log('AIPPS Debug: Clicked conversation ${conv.id}');\">\n        <div class=\"aipi-conversation-content\">\n          <div class=\"aipi-conversation-title\">${escapeHTML(conv.title || 'Nueva conversación')}</div>\n          <div class=\"aipi-conversation-preview\">${conv.createdAt ? getRelativeTime(conv.createdAt) : 'Iniciada hace poco'}</div>\n        </div>\n        <button class=\"aipi-delete-conversation-btn\" \n                onclick=\"event.stopPropagation(); showDeleteConfirmation(${conv.id})\"\n                title=\"Eliminar conversación\">\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n            <polyline points=\"3,6 5,6 21,6\"></polyline>\n            <path d=\"M19,6V20a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6M8,6V4a2,2,0,0,1,2-2h4a2,2,0,0,1,2,2V6\"></path>\n            <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\n            <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n          </svg>\n        </button>\n      </div>\n    `).join('');\n  }\n\n  // Function to create new conversation (called from fullscreen button)\n  async function createNewConversation() {\n    console.log('AIPPS Debug: Creando nueva conversación desde botón');\n    \n    // Clear current conversation\n    currentConversationId = null;\n    \n    // Clear messages container\n    const messagesContainer = document.getElementById('aipi-messages-container');\n    if (messagesContainer) {\n      messagesContainer.innerHTML = '';\n    }\n    \n    // Show welcome message\n    if (config.greetingMessage) {\n      addMessage(config.greetingMessage, 'assistant');\n    }\n    \n    // Update conversations list to remove active state\n    updateConversationsList();\n    \n    // Focus on input\n    const input = document.getElementById('aipi-fullscreen-input');\n    if (input) {\n      input.focus();\n    }\n    \n    console.log('AIPPS Debug: Nueva conversación preparada. Se creará al enviar el primer mensaje.');\n  }\n\n  async function createNewConversationForDashboard() {\n    try {\n      const token = getAuthToken();\n      console.log('AIPPS Debug: Creando nueva conversación autenticada');\n      \n      if (!token) {\n        console.log('AIPPS Debug: No auth token found, user needs to login');\n        return null;\n      }\n      \n      const response = await fetch(`${getApiBaseUrl()}/api/widget/${config.apiKey}/conversations/user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          title: 'Nueva conversación'\n        }),\n      });\n\n      console.log('AIPPS Debug: Create authenticated conversation response status:', response.status);\n\n      if (response.ok) {\n        const newConversation = await response.json();\n        console.log('AIPPS Debug: Nueva conversación autenticada creada:', newConversation.id);\n        userConversations.unshift(newConversation);\n        currentConversationId = newConversation.id;\n        updateConversationsList();\n        return newConversation;\n      } else if (response.status === 401) {\n        console.log('AIPPS Debug: Token expired or invalid during conversation creation');\n        // Clear invalid token\n        localStorage.removeItem('aipi_auth_token');\n        if (typeof document !== 'undefined' && document.cookie) {\n          document.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n        }\n        return null;\n      } else {\n        const errorText = await response.text();\n        console.error('Error creating authenticated conversation:', response.status, errorText);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error creating authenticated conversation:', error);\n      return null;\n    }\n  }\n\n  window.loadConversation = async function(conversationId) {\n    try {\n      console.log('AIPPS Debug: === INICIANDO CARGA DE CONVERSACIÓN ===');\n      console.log('AIPPS Debug: Conversation ID recibido:', conversationId, typeof conversationId);\n      \n      // Set current conversation ID\n      currentConversationId = parseInt(conversationId);\n      console.log('AIPPS Debug: Current conversation ID establecido:', currentConversationId);\n      \n      // Clear current messages\n      const messagesContainer = document.getElementById('aipi-messages-container');\n      if (messagesContainer) {\n        messagesContainer.innerHTML = '<div class=\"aipi-message assistant\"><div class=\"aipi-message-content\">Cargando mensajes...</div></div>';\n        console.log('AIPPS Debug: Contenedor de mensajes limpiado y mensaje de carga mostrado');\n      } else {\n        console.error('AIPPS Debug: No se encontró el contenedor de mensajes');\n        return;\n      }\n      \n      // Build API URL\n      const apiUrl = `${getApiBaseUrl()}/api/widget/${config.apiKey}/conversation/${conversationId}/messages`;\n      console.log('AIPPS Debug: URL de API construida:', apiUrl);\n      \n      const response = await fetch(apiUrl, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n\n      console.log('AIPPS Debug: Response status:', response.status);\n      console.log('AIPPS Debug: Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (response.ok) {\n        const messages = await response.json();\n        console.log('AIPPS Debug: Mensajes obtenidos de API:', messages.length);\n        console.log('AIPPS Debug: Primer mensaje:', messages[0]);\n        \n        // Clear loading message\n        messagesContainer.innerHTML = '';\n        \n        // Display messages in correct order\n        if (messages.length > 0) {\n          messages.forEach((message, index) => {\n            console.log(`AIPPS Debug: Procesando mensaje ${index + 1}:`, {\n              role: message.role,\n              contentLength: message.content?.length,\n              contentPreview: message.content?.substring(0, 50) + '...'\n            });\n            addMessage(message.content, message.role === 'user' ? 'user' : 'assistant');\n          });\n          \n          // Scroll to bottom\n          setTimeout(scrollToBottom, 100);\n          console.log('AIPPS Debug: Todos los mensajes cargados y scroll aplicado');\n        } else {\n          messagesContainer.innerHTML = '<div class=\"aipi-message assistant\"><div class=\"aipi-message-content\">Esta conversación no tiene mensajes.</div></div>';\n          console.log('AIPPS Debug: No hay mensajes en esta conversación');\n        }\n        \n        // Update active conversation in sidebar\n        updateConversationsList();\n        console.log('AIPPS Debug: Lista de conversaciones actualizada');\n        \n      } else {\n        const errorText = await response.text();\n        console.error('AIPPS Debug: Error HTTP:', response.status, errorText);\n        messagesContainer.innerHTML = '<div class=\"aipi-message assistant\"><div class=\"aipi-message-content\">Error al cargar los mensajes de esta conversación.</div></div>';\n      }\n      \n      console.log('AIPPS Debug: === CARGA DE CONVERSACIÓN COMPLETADA ===');\n    } catch (error) {\n      console.error('AIPPS Debug: Error en loadConversation:', error);\n      const messagesContainer = document.getElementById('aipi-messages-container');\n      if (messagesContainer) {\n        messagesContainer.innerHTML = '<div class=\"aipi-message assistant\"><div class=\"aipi-message-content\">Error de conexión al cargar la conversación.</div></div>';\n      }\n    }\n  }\n\n  async function displayMessages(conversationId) {\n    const messagesContainer = document.getElementById('aipi-messages-container');\n    if (!messagesContainer) return;\n\n    messagesContainer.innerHTML = '';\n    \n    try {\n      // Get messages using bubble system endpoint\n      const response = await fetch(`${getApiBaseUrl()}/api/widget/${config.apiKey}/conversation/${conversationId}/messages`, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      \n      if (response.ok) {\n        const messages = await response.json();\n        console.log('AIPPS Debug: Mensajes cargados para conversación:', conversationId, messages.length);\n        \n        // Add conversation messages to the display\n        messages.forEach(msg => {\n          addMessage(msg.content, msg.role);\n        });\n        \n        scrollToBottom();\n      } else {\n        console.error('Error loading conversation messages:', response.status);\n      }\n    } catch (error) {\n      console.error('Error in displayMessages:', error);\n    }\n  }\n\n  function updateConversationsList() {\n    const listContainer = document.getElementById('aipi-conversations-list');\n    if (listContainer) {\n      listContainer.innerHTML = renderConversationsList();\n      console.log('AIPPS Debug: Lista de conversaciones actualizada, conversación activa:', currentConversationId);\n    }\n  }\n\n  async function loadAndDisplayUserInfo() {\n    const userInfoContainer = document.getElementById('aipi-user-info');\n    if (!userInfoContainer) return;\n\n    const token = getAuthToken();\n    if (!token) {\n      userInfoContainer.innerHTML = '';\n      return;\n    }\n\n    try {\n      const response = await fetch(`${getApiBaseUrl()}/api/auth/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const user = await response.json();\n        userInfoContainer.innerHTML = `de ${escapeHTML(user.username || user.fullName || user.email || 'Usuario')}`;\n      } else {\n        userInfoContainer.innerHTML = '';\n      }\n    } catch (error) {\n      console.error('Error loading user info:', error);\n      userInfoContainer.innerHTML = '';\n    }\n  }\n\n  // Delete conversation functions\n  function showDeleteConfirmation(conversationId) {\n    const conversation = userConversations.find(conv => conv.id === conversationId);\n    const title = conversation ? (conversation.title || 'Nueva conversación') : 'esta conversación';\n    \n    if (confirm(`¿Estás seguro de eliminar \"${title}\"? Esta acción no se puede deshacer.`)) {\n      deleteConversation(conversationId);\n    }\n  }\n\n  // Expose functions globally for HTML onclick handlers\n  window.showDeleteConfirmation = showDeleteConfirmation;\n  window.createNewConversation = createNewConversation;\n\n  async function deleteConversation(conversationId) {\n    try {\n      console.log(`AIPPS Debug: Eliminando conversación ${conversationId}`);\n      \n      const response = await fetch(`${getApiBaseUrl()}/api/widget/${config.apiKey}/conversation/${conversationId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${getAuthToken()}`\n        }\n      });\n\n      if (response.ok) {\n        console.log(`AIPPS Debug: Conversación ${conversationId} eliminada exitosamente`);\n        \n        // Remover de la lista local\n        userConversations = userConversations.filter(conv => conv.id !== conversationId);\n        \n        // Actualizar la interfaz inmediatamente\n        updateConversationsList();\n        \n        // Recargar conversaciones desde el servidor para asegurar sincronización\n        setTimeout(async () => {\n          await loadUserConversationsFromDashboard();\n          updateConversationsList();\n        }, 500);\n        \n        // Si eliminamos la conversación actual, cargar otra o crear nueva\n        if (currentConversationId === conversationId) {\n          if (userConversations.length > 0) {\n            // Cargar la conversación más reciente\n            await loadConversation(userConversations[0].id);\n          } else {\n            // No hay más conversaciones, crear una nueva\n            await createNewConversationForDashboard();\n          }\n        }\n        \n        // Mostrar mensaje de éxito\n        showSuccessMessage('Conversación eliminada exitosamente');\n        \n      } else {\n        console.error('Error eliminando conversación:', response.status);\n        showErrorMessage('Error al eliminar la conversación. Inténtalo de nuevo.');\n      }\n    } catch (error) {\n      console.error('Error in deleteConversation:', error);\n      showErrorMessage('Error al eliminar la conversación. Inténtalo de nuevo.');\n    }\n  }\n\n  function showSuccessMessage(message) {\n    // Crear o mostrar mensaje de éxito temporal\n    let messageDiv = document.getElementById('aipi-success-message');\n    if (!messageDiv) {\n      messageDiv = document.createElement('div');\n      messageDiv.id = 'aipi-success-message';\n      messageDiv.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #10b981;\n        color: white;\n        padding: 12px 16px;\n        border-radius: 8px;\n        font-size: 14px;\n        z-index: 10000;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      `;\n      document.body.appendChild(messageDiv);\n    }\n    \n    messageDiv.textContent = message;\n    messageDiv.style.display = 'block';\n    \n    setTimeout(() => {\n      messageDiv.style.display = 'none';\n    }, 3000);\n  }\n\n  function showErrorMessage(message) {\n    // Crear o mostrar mensaje de error temporal\n    let messageDiv = document.getElementById('aipi-error-message');\n    if (!messageDiv) {\n      messageDiv = document.createElement('div');\n      messageDiv.id = 'aipi-error-message';\n      messageDiv.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #ef4444;\n        color: white;\n        padding: 12px 16px;\n        border-radius: 8px;\n        font-size: 14px;\n        z-index: 10000;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      `;\n      document.body.appendChild(messageDiv);\n    }\n    \n    messageDiv.textContent = message;\n    messageDiv.style.display = 'block';\n    \n    setTimeout(() => {\n      messageDiv.style.display = 'none';\n    }, 3000);\n  }\n\n  // Dashboard context detection and configuration\n  let dashboardConfig = {\n    isDashboard: false,\n    apiBaseUrl: null,\n    authToken: null\n  };\n\n  // Detect if running in dashboard context\n  function detectDashboardContext() {\n    try {\n      // Check if we're in an iframe and parent is dashboard\n      if (window.parent && window.parent !== window) {\n        const parentUrl = window.parent.location.href;\n        if (parentUrl.includes('replit.dev') && parentUrl.includes('/dashboard')) {\n          dashboardConfig.isDashboard = true;\n          dashboardConfig.apiBaseUrl = `${window.parent.location.protocol}//${window.parent.location.host}`;\n          console.log('AIPPS Debug: Detectado contexto de dashboard Replit');\n          return true;\n        }\n      }\n    } catch (e) {\n      // Cross-origin access blocked, try other methods\n    }\n    \n    // Check for dashboard indicator in URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('dashboard') === 'true' || window.location.href.includes('replit.dev')) {\n      dashboardConfig.isDashboard = true;\n      dashboardConfig.apiBaseUrl = window.location.href.includes('replit.dev') \n        ? `${window.location.protocol}//${window.location.host}`\n        : null;\n      console.log('AIPPS Debug: Detectado contexto de dashboard por URL');\n      return true;\n    }\n    \n    return false;\n  }\n\n function getApiBaseUrl() {\n  // Use production Railway URL\n  const productionUrl = 'https://aipps.ca';\n  console.log('AIPPS Debug: Usando URL de producción Railway:', productionUrl);\n  return productionUrl;\n}\n\n  // Helper function to get authentication token\n  function getAuthToken() {\n    console.log('AIPPS Debug: Iniciando búsqueda de token de autenticación...');\n    \n    // 1. If we have a dashboard token, use it first\n    if (dashboardConfig.authToken) {\n      console.log('AIPPS Debug: Token encontrado en configuración de dashboard:', dashboardConfig.authToken.substring(0, 20) + '...');\n      return dashboardConfig.authToken;\n    }\n    \n    // 2. Try to get token from parent window (dashboard context)\n    if (dashboardConfig.isDashboard) {\n      try {\n        if (window.parent && window.parent !== window) {\n          const parentToken = window.parent.localStorage.getItem('auth_token');\n          if (parentToken) {\n            console.log('AIPPS Debug: Token encontrado en parent window dashboard:', parentToken.substring(0, 20) + '...');\n            dashboardConfig.authToken = parentToken; // Cache it\n            return parentToken;\n          }\n        }\n      } catch (e) {\n        console.log('AIPPS Debug: No se pudo acceder al parent window, intentando postMessage');\n      }\n    }\n    \n    // 3. Try localStorage auth_token\n    let token = localStorage.getItem('auth_token');\n    if (token) {\n      console.log('AIPPS Debug: Autenticación encontrada');\n      return token;\n    }\n    \n    // 3b. Try localStorage aipi_auth_token\n    token = localStorage.getItem('aipi_auth_token');\n    if (token) {\n      console.log('AIPPS Debug: Autenticación alternativa encontrada');\n      return token;\n    }\n    \n    // 4. Try getting from cookies\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; auth_token=`);\n    if (parts.length === 2) {\n      token = parts.pop().split(';').shift();\n      if (token) {\n        console.log('AIPPS Debug: Token encontrado en cookies:', token.substring(0, 20) + '...');\n        return token;\n      }\n    }\n    \n    // 5. Try sessionStorage\n    token = sessionStorage.getItem('auth_token');\n    if (token) {\n      console.log('AIPPS Debug: Token encontrado en sessionStorage:', token.substring(0, 20) + '...');\n      return token;\n    }\n    \n    // Debug: Show what we have in storage\n    console.log('AIPPS Debug: Contenido de localStorage:', {\n      auth_token: localStorage.getItem('auth_token'),\n      aipi_auth_token: localStorage.getItem('aipi_auth_token'),\n      aipi_visitor_id: localStorage.getItem('aipi_visitor_id')\n    });\n    console.log('AIPPS Debug: Contenido de cookies:', document.cookie);\n    console.log('AIPPS Debug: No se encontró token en ninguna fuente');\n    return null;\n  }\n\n  function getRelativeTime(dateString) {\n    const now = new Date();\n    const past = new Date(dateString);\n    const diffInSeconds = Math.floor((now - past) / 1000);\n    \n    if (diffInSeconds < 60) {\n      return 'hace unos segundos';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return `hace ${minutes} minuto${minutes !== 1 ? 's' : ''}`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      return `hace ${hours} hora${hours !== 1 ? 's' : ''}`;\n    } else if (diffInSeconds < 604800) {\n      const days = Math.floor(diffInSeconds / 86400);\n      return `hace ${days} día${days !== 1 ? 's' : ''}`;\n    } else if (diffInSeconds < 2592000) {\n      const weeks = Math.floor(diffInSeconds / 604800);\n      return `hace ${weeks} semana${weeks !== 1 ? 's' : ''}`;\n    } else {\n      const months = Math.floor(diffInSeconds / 2592000);\n      return `hace ${months} mes${months !== 1 ? 'es' : ''}`;\n    }\n  }\n\n  // Check if device is mobile/tablet\n  function isMobileOrTablet() {\n    return window.innerWidth <= 1024;\n  }\n  \n  // Initialize sidebar state based on device type\n  function initializeSidebarState() {\n    const sidebar = document.getElementById('aipi-conversations-sidebar');\n    const overlay = document.getElementById('aipi-sidebar-overlay');\n    const menuBtn = document.getElementById('aipi-mobile-menu-btn');\n    const chatMain = document.querySelector('.aipi-chat-main');\n    \n    if (sidebar && overlay) {\n      sidebar.classList.remove('show');\n      overlay.classList.remove('show');\n      \n      if (isMobileOrTablet()) {\n        // Force mobile/tablet styles - consistent with desktop behavior\n        sidebar.style.position = 'fixed';\n        sidebar.style.top = '0';\n        sidebar.style.left = '0';\n        sidebar.style.height = '100vh';\n        sidebar.style.zIndex = '1001';\n        sidebar.style.transform = 'translateX(-100%)';\n        sidebar.style.boxShadow = '2px 0 15px rgba(0, 0, 0, 0.2)';\n        \n        if (window.innerWidth <= 480) {\n          sidebar.style.width = '75vw';\n          sidebar.style.maxWidth = '280px';\n        } else if (window.innerWidth <= 768) {\n          sidebar.style.width = '60vw';\n          sidebar.style.maxWidth = '320px';\n        } else {\n          sidebar.style.width = '50vw';\n          sidebar.style.maxWidth = '350px';\n        }\n        \n        if (chatMain) {\n          chatMain.style.width = '100%';\n          chatMain.style.transition = 'all 0.3s ease';\n          chatMain.style.marginLeft = '0';\n          chatMain.classList.remove('sidebar-open');\n        }\n        \n        if (menuBtn) {\n          menuBtn.style.display = 'flex';\n          menuBtn.style.alignItems = 'center';\n          menuBtn.style.justifyContent = 'center';\n        }\n        \n        if (overlay) {\n          overlay.style.display = 'none';\n        }\n      } else {\n        // Desktop styles - también mostrar botón hamburguesa\n        sidebar.style.position = 'fixed';\n        sidebar.style.top = '0';\n        sidebar.style.left = '0';\n        sidebar.style.height = '100vh';\n        sidebar.style.zIndex = '1001';\n        sidebar.style.transform = 'translateX(0)';\n        sidebar.style.width = '300px';\n        sidebar.style.boxShadow = '2px 0 15px rgba(0, 0, 0, 0.1)';\n        \n        if (chatMain) {\n          chatMain.style.marginLeft = '300px';\n          chatMain.style.width = 'calc(100% - 300px)';\n          chatMain.style.transition = 'all 0.3s ease';\n        }\n        \n        if (menuBtn) {\n          menuBtn.style.display = 'flex';\n          menuBtn.style.alignItems = 'center';\n          menuBtn.style.justifyContent = 'center';\n        }\n        \n        if (overlay) {\n          overlay.style.display = 'none';\n        }\n      }\n    }\n  }\n\n  // Toggle conversations sidebar for all devices\n  window.toggleConversationsSidebar = function() {\n    console.log('AIPPS Debug: Toggle sidebar clicked');\n    const sidebar = document.getElementById('aipi-conversations-sidebar');\n    const overlay = document.getElementById('aipi-sidebar-overlay');\n    const chatMain = document.querySelector('.aipi-chat-main');\n    \n    if (sidebar) {\n      const isDesktop = window.innerWidth > 1024;\n      let isHidden;\n      \n      if (isDesktop) {\n        isHidden = sidebar.classList.contains('hide');\n        console.log('AIPPS Debug: Desktop sidebar currently hidden:', isHidden);\n        \n        if (isHidden) {\n          sidebar.classList.remove('hide');\n          sidebar.style.transform = 'translateX(0)';\n          if (chatMain) {\n            chatMain.classList.remove('full-width');\n            chatMain.style.marginLeft = '300px';\n            chatMain.style.width = 'calc(100% - 300px)';\n          }\n          console.log('AIPPS Debug: Desktop sidebar shown');\n        } else {\n          sidebar.classList.add('hide');\n          sidebar.style.transform = 'translateX(-100%)';\n          if (chatMain) {\n            chatMain.classList.add('full-width');\n            chatMain.style.marginLeft = '0';\n            chatMain.style.width = '100%';\n          }\n          console.log('AIPPS Debug: Desktop sidebar hidden');\n        }\n      } else {\n        // Mobile/tablet behavior - now consistent with desktop\n        const isShowing = sidebar.classList.contains('show');\n        console.log('AIPPS Debug: Mobile sidebar currently showing:', isShowing);\n        \n        if (isShowing) {\n          sidebar.classList.remove('show');\n          sidebar.style.transform = 'translateX(-100%)';\n          if (chatMain) {\n            chatMain.classList.remove('sidebar-open');\n            chatMain.style.marginLeft = '0';\n            chatMain.style.width = '100%';\n          }\n          console.log('AIPPS Debug: Mobile sidebar hidden');\n        } else {\n          sidebar.classList.add('show');\n          sidebar.style.transform = 'translateX(0)';\n          if (chatMain) {\n            chatMain.classList.add('sidebar-open');\n            if (window.innerWidth <= 480) {\n              chatMain.style.marginLeft = '75vw';\n              chatMain.style.width = '25vw';\n            } else if (window.innerWidth <= 768) {\n              chatMain.style.marginLeft = '60vw';\n              chatMain.style.width = '40vw';\n            } else {\n              chatMain.style.marginLeft = '50vw';\n              chatMain.style.width = '50vw';\n            }\n          }\n          console.log('AIPPS Debug: Mobile sidebar shown');\n        }\n      }\n    } else {\n      console.log('AIPPS Debug: Sidebar not found');\n    }\n  };\n  \n  // Handle window resize\n  window.addEventListener('resize', function() {\n    initializeSidebarState();\n  });\n\n  // Global event handlers for fullscreen mode\n  window.aipiCloseFullscreen = function() {\n    console.log('AIPPS Debug: Close fullscreen triggered');\n    const chatPanel = document.getElementById('aipi-chat-panel');\n    const fullscreenButton = document.getElementById('aipi-fullscreen-button');\n    \n    if (chatPanel) {\n      chatPanel.style.display = 'none';\n    }\n    if (fullscreenButton) {\n      fullscreenButton.style.display = 'flex';\n    }\n    isOpen = false;\n    isAuthenticated = false;\n    currentUser = null;\n    currentConversationId = null;\n  };\n\n  window.aipiSendFullscreenMessage = function() {\n    console.log('AIPPS Debug: Send fullscreen message triggered');\n    const input = document.getElementById('aipi-fullscreen-input');\n    if (input && input.value.trim()) {\n      const message = input.value.trim();\n      input.value = '';\n      \n      // Add user message to chat\n      addMessage(message, 'user');\n      \n      // Send message using the existing sendMessage function\n      sendFullscreenMessage(message);\n    }\n  };\n\n  // Helper function to send fullscreen messages using bubble system\n  async function sendFullscreenMessage(message) {\n    showTypingIndicator(true);\n    \n    try {\n      console.log('AIPPS Debug: Enviando mensaje fullscreen autenticado...');\n      console.log('AIPPS Debug: Mensaje:', message);\n      console.log('AIPPS Debug: Current conversation ID:', currentConversationId);\n      \n      const token = getAuthToken();\n      \n      if (!token) {\n        console.log('AIPPS Debug: No auth token found, user needs to login');\n        addMessage('Sesión expirada. Por favor, inicia sesión nuevamente.', 'assistant');\n        showTypingIndicator(false);\n        return;\n      }\n      \n      // If no current conversation, create a new one first\n      if (!currentConversationId) {\n        console.log('AIPPS Debug: No hay conversación actual, creando nueva autenticada...');\n        const newConversation = await createNewConversationForDashboard();\n        if (newConversation) {\n          currentConversationId = newConversation.id;\n          console.log('AIPPS Debug: Nueva conversación autenticada creada con ID:', currentConversationId);\n        } else {\n          console.error('AIPPS Debug: Error al crear nueva conversación autenticada');\n          addMessage('Error al crear nueva conversación. Por favor, inicia sesión nuevamente.', 'assistant');\n          showTypingIndicator(false);\n          return;\n        }\n      }\n      \n      // Send message to existing conversation using authenticated endpoint\n      const response = await fetch(`${getApiBaseUrl()}/api/widget/${config.apiKey}/conversation/${currentConversationId}/send`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          message: message,\n          currentUrl: window.location.href,\n          pageTitle: document.title\n        })\n      });\n\n      console.log('AIPPS Debug: Send authenticated message response status:', response.status);\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('AIPPS Debug: Authenticated message response data:', data);\n        \n        addMessage(data.response || data.message || 'Respuesta recibida', 'assistant');\n        \n        // Update conversations list to reflect changes\n        await loadUserConversationsFromDashboard();\n        updateConversationsList();\n      } else if (response.status === 401) {\n        console.log('AIPPS Debug: Token expired during message sending');\n        // Clear invalid token\n        localStorage.removeItem('aipi_auth_token');\n        if (typeof document !== 'undefined' && document.cookie) {\n          document.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n        }\n        addMessage('Sesión expirada. Por favor, inicia sesión nuevamente.', 'assistant');\n      } else {\n        const errorData = await response.text();\n        console.error('Error response:', response.status, errorData);\n        addMessage('Lo siento, no pude procesar tu mensaje. Inténtalo de nuevo.', 'assistant');\n      }\n    } catch (error) {\n      console.error('Error sending authenticated message:', error);\n      addMessage('Error de conexión. Por favor, verifica tu conexión a internet.', 'assistant');\n    } finally {\n      showTypingIndicator(false);\n    }\n  }\n\n  // Function to update text colors after config is loaded\n  function updateTextColorsAfterConfig() {\n    console.log('🔧 AIPPS: Recalculando colores después de cargar configuración');\n    console.log('  Color de fondo del asistente:', config.assistantBubbleColor);\n    console.log('  Modo de color de texto:', config.textColorMode);\n    \n    // Calculate text color using new system\n    const bgColor = config.assistantBubbleColor || '#E5E7EB';\n    const textColor = getContrastTextColor(bgColor);\n    \n    console.log('🎨 AIPPS: Recálculo de colores después de config:');\n    console.log('  Color de fondo:', bgColor);\n    console.log('  Modo configurado:', config.textColorMode);\n    console.log('  Color de texto final:', textColor);\n    \n    // Update CSS variables or create new styles\n    const existingStyles = document.querySelector('#aipi-dynamic-colors');\n    if (existingStyles) {\n      existingStyles.remove();\n    }\n    \n    const dynamicStyles = document.createElement('style');\n    dynamicStyles.id = 'aipi-dynamic-colors';\n    dynamicStyles.textContent = `\n      .aipi-assistant-message {\n        background-color: ${bgColor} !important;\n        color: ${textColor} !important;\n      }\n      \n      .aipi-assistant-message * {\n        color: ${textColor} !important;\n      }\n      \n      .aipi-typing-indicator {\n        background-color: ${bgColor} !important;\n        color: ${textColor} !important;\n      }\n      \n      .aipi-typing-indicator * {\n        color: ${textColor} !important;\n      }\n    `;\n    \n    document.head.appendChild(dynamicStyles);\n    console.log('✅ AIPPS: Estilos dinámicos aplicados con color:', textColor);\n  }\n\n  // Expose other functions to global scope\n  window.aipiSendMessage = sendMessage;\n  // Function to update existing welcome messages with correct assistant name\n  function updateExistingWelcomeMessages() {\n    console.log('AIPPS Debug: Actualizando mensajes de bienvenida existentes');\n    \n    // Find existing assistant messages that might be welcome messages\n    const assistantMessages = document.querySelectorAll('.aipi-assistant-message');\n    const assistantName = config.assistantName || config.integrationName || 'tu asistente';\n    \n    assistantMessages.forEach((msg, index) => {\n      if (index === 0) { // Usually the first message is the welcome message\n        const text = msg.textContent || msg.innerText;\n        \n        // Check if this looks like a welcome message with \"AIPPS\"\n        if (text.includes('AIPPS') || text.includes('Soy AIPPS')) {\n          const newMessage = text.replace(/AIPPS/g, assistantName).replace(/Soy AIPPS/g, `Soy ${assistantName}`);\n          \n          if (msg.innerHTML !== newMessage) {\n            console.log('AIPPS Debug: Actualizando mensaje de bienvenida:', text, '→', newMessage);\n            msg.innerHTML = formatAssistantMessage(newMessage);\n          }\n        }\n      }\n    });\n  }\n\n  window.aipiCloseWidget = closeWidget;\n  window.aipiOpenWidget = openWidget;\n  window.aipiMinimizeWidget = minimizeWidget;\n  window.aipiMaximizeWidget = maximizeWidget;\n  window.aipiUpdateTextColors = updateTextColorsAfterConfig; // Para debug\n\n  // Initialize the widget when the DOM is fully loaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n})();\n","size_bytes":178625},"public/form-button.js":{"content":"/**\n * AIPPS Form Button - Botón flotante para formularios AIPPS\n * Este script crea un botón flotante que permite acceder a los formularios AIPPS desde cualquier página web.\n */\n(function() {\n  // Configuración por defecto\n  const DEFAULT_CONFIG = {\n    formId: '',\n    text: 'Abrir formulario',\n    position: 'bottom-center', // Ahora centrado por defecto\n    color: '#4a90e2',\n    type: 'modal',\n    icon: 'form',\n    size: 'medium',\n    radius: '4px',\n    modalWidth: '600px',\n    modalHeight: '800px',\n  };\n\n  // Obtener configuración del script tag\n  const scriptTag = document.getElementById('aipps-form-button');\n  if (!scriptTag) {\n    console.error('No se pudo encontrar la etiqueta script con ID \"aipps-form-button\"');\n    return;\n  }\n\n  // Mezclar la configuración predeterminada con los atributos data- del script\n  const config = {\n    ...DEFAULT_CONFIG,\n    formId: scriptTag.getAttribute('data-form-id') || DEFAULT_CONFIG.formId,\n    text: scriptTag.getAttribute('data-text') || DEFAULT_CONFIG.text,\n    position: scriptTag.getAttribute('data-position') || DEFAULT_CONFIG.position,\n    color: scriptTag.getAttribute('data-color') || DEFAULT_CONFIG.color,\n    type: scriptTag.getAttribute('data-type') || DEFAULT_CONFIG.type,\n    icon: scriptTag.getAttribute('data-icon') || DEFAULT_CONFIG.icon,\n    size: scriptTag.getAttribute('data-size') || DEFAULT_CONFIG.size,\n    radius: scriptTag.getAttribute('data-radius') || DEFAULT_CONFIG.radius,\n    modalWidth: scriptTag.getAttribute('data-modal-width') || DEFAULT_CONFIG.modalWidth,\n    modalHeight: scriptTag.getAttribute('data-modal-height') || DEFAULT_CONFIG.modalHeight,\n  };\n\n  // Si no se proporcionó un ID de formulario, mostrar un error\n  if (!config.formId) {\n    console.error('Se requiere un ID de formulario (data-form-id)');\n    return;\n  }\n\n  // Inicializar cuando el DOM esté listo\n  document.addEventListener('DOMContentLoaded', initialize);\n\n  /**\n   * Inicializar el botón flotante\n   */\n  function initialize() {\n    addStyles();\n    createFloatingButton();\n  }\n\n  /**\n   * Agrega los estilos CSS necesarios para el botón flotante\n   */\n  function addStyles() {\n    const styleElement = document.createElement('style');\n    styleElement.textContent = `\n      /* Estilos para el botón flotante AIPPS (optimizado para móviles) */\n      .aipi-form-button {\n        position: fixed;\n        z-index: 9999;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.15);\n        transition: all 0.3s ease;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n        /* Mejoras para móviles */\n        max-width: calc(100vw - 40px);\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n      }\n\n      .aipi-form-button:hover {\n        transform: translateY(-2px) scale(1.02);\n        box-shadow: 0 4px 14px rgba(0, 0, 0, 0.25);\n        animation: none;\n      }\n\n      @keyframes aipi-form-pulse {\n        0%, 100% {\n          box-shadow: 0 2px 12px rgba(0, 0, 0, 0.15);\n        }\n        50% {\n          box-shadow: 0 2px 12px rgba(0, 0, 0, 0.25), 0 0 0 6px rgba(74, 144, 226, 0.2);\n        }\n      }\n\n      .aipi-form-button {\n        animation: aipi-form-pulse 3s infinite;\n      }\n\n      .aipi-form-button svg {\n        margin-right: 8px;\n        min-width: 16px; /* Evita que el svg se comprima */\n      }\n\n      /* Tamaños */\n      .aipi-form-button.small {\n        padding: 6px 12px;\n        font-size: 14px;\n      }\n\n      .aipi-form-button.medium {\n        padding: 8px 16px;\n        font-size: 16px;\n      }\n\n      .aipi-form-button.large {\n        padding: 12px 24px;\n        font-size: 18px;\n      }\n\n      /* Posiciones */\n      .aipi-form-button.bottom-right {\n        bottom: 16px;\n        right: 16px;\n      }\n\n      .aipi-form-button.bottom-left {\n        bottom: 16px;\n        left: 16px;\n      }\n\n      .aipi-form-button.bottom-center {\n        bottom: 16px;\n        left: 50%;\n        transform: translateX(-50%);\n      }\n\n      .aipi-form-button.top-right {\n        top: 16px;\n        right: 16px;\n      }\n\n      .aipi-form-button.top-left {\n        top: 16px;\n        left: 16px;\n      }\n\n      /* Nuevas posiciones centradas */\n      .aipi-form-button.bottom-center,\n      .aipi-form-button.bottom-center-mobile {\n        bottom: 20px;\n        left: 50% !important;\n        transform: translateX(-50%) !important;\n        margin-left: 0 !important;\n        margin-right: 0 !important;\n        text-align: center !important;\n      }\n\n      .aipi-form-button.top-center,\n      .aipi-form-button.top-center-mobile {\n        top: 20px;\n        left: 50% !important;\n        transform: translateX(-50%) !important;\n        margin-left: 0 !important;\n        margin-right: 0 !important;\n        text-align: center !important;\n      }\n\n      /* Forzar centrado completo en posicionamiento absoluto */\n      [data-mobile-view=\"true\"] {\n        width: auto !important;\n        min-width: 200px !important;\n        max-width: calc(100% - 40px) !important;\n        left: 50% !important;\n        transform: translateX(-50%) !important;\n        text-align: center !important;\n      }\n\n      /* Modal */\n      .aipi-form-modal {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 10000;\n        background-color: rgba(0, 0, 0, 0.5);\n        align-items: center;\n        justify-content: center;\n      }\n\n      .aipi-form-modal-content {\n        background-color: white;\n        border-radius: 8px;\n        width: 600px; /* Mayor ancho para acomodar todos los campos */\n        max-width: 90%; /* Adaptable a pantallas pequeñas (reducido para móviles) */\n        height: auto;\n        min-height: 500px; /* Mayor altura para mostrar más campos */\n        max-height: 90vh; /* Casi toda la altura de la pantalla */\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n        position: relative;\n        overflow: auto; /* Permitir scroll para ver todo el contenido */\n        display: flex;\n        flex-direction: column;\n      }\n\n      /* Panel deslizante completamente optimizado para móviles */\n      .aipi-form-slidein {\n        display: none;\n        position: fixed;\n        top: 0;\n        right: 0;\n        width: 100%;\n        max-width: 450px;\n        height: 100%;\n        z-index: 10000;\n        box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);\n        transform: translateX(100%);\n        transition: transform 0.3s ease;\n        background-color: white;\n      }\n\n      .aipi-form-slidein.active {\n        transform: translateX(0);\n      }\n\n      .aipi-form-slidein-content {\n        background-color: white;\n        width: 100%;\n        height: 100%;\n        overflow: auto;\n        position: relative;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .aipi-form-slidein-close {\n        position: fixed;\n        top: 10px;\n        right: 10px;\n        width: 32px;\n        height: 32px;\n        background: rgba(0, 0, 0, 0.15);\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        z-index: 10001;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n      }\n\n      .aipi-form-slidein-close:hover {\n        background: rgba(0, 0, 0, 0.25);\n      }\n\n      .aipi-form-slidein-header {\n        position: sticky;\n        top: 0;\n        left: 0;\n        width: 100%;\n        padding: 10px;\n        background-color: #f8f9fa;\n        border-bottom: 1px solid #e9ecef;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        z-index: 1;\n      }\n\n      .aipi-form-slidein-title {\n        font-weight: bold;\n        font-size: 16px;\n        margin: 0;\n      }\n\n      /* Iframe mejorado para móviles */\n      .aipi-form-iframe {\n        width: 100%;\n        height: 100%;\n        min-height: 80vh; /* Altura relativa a la pantalla */\n        flex: 1; /* Toma el espacio disponible restante */\n        border: none;\n        display: block;\n      }\n\n      /* Media queries específicas para diferentes dispositivos */\n      @media (max-width: 480px) {\n        .aipi-form-button {\n          font-size: 13px;\n          padding: 8px 14px;\n          max-width: calc(100vw - 20px); /* Más espacio en pantallas muy pequeñas */\n        }\n\n        .aipi-form-slidein {\n          width: 100%;\n          max-width: 100%; /* En móviles ocupa toda la pantalla */\n        }\n\n        .aipi-form-modal-content {\n          max-width: 98%;\n          margin: 0 4px;\n          border-radius: 4px; /* Bordes menos pronunciados */\n        }\n\n        /* Ajuste para TODOS los botones en móviles - SIEMPRE centrados */\n        .aipi-form-button {\n          min-width: 60% !important;\n          max-width: 90% !important;\n          left: 50% !important;\n          right: auto !important;\n          transform: translateX(-50%) !important;\n          white-space: nowrap !important;\n          overflow: hidden !important;\n          text-overflow: ellipsis !important;\n          text-align: center !important;\n        }\n      }\n\n      @media (min-width: 481px) and (max-width: 992px) {\n        .aipi-form-slidein {\n          max-width: 90%; /* En tablets ocupa casi toda la pantalla */\n        }\n\n        .aipi-form-modal-content {\n          width: 550px;\n          max-width: 95%;\n        }\n\n        /* Ajuste para TODOS los botones en tablets - SIEMPRE centrados */\n        .aipi-form-button {\n          min-width: auto !important;\n          max-width: 50% !important;\n          white-space: nowrap !important;\n          left: 50% !important;\n          right: auto !important;\n          transform: translateX(-50%) !important;\n          text-align: center !important;\n        }\n      }\n    `;\n    document.head.appendChild(styleElement);\n  }\n\n  /**\n   * Crea y agrega el botón flotante al DOM\n   */\n  function createFloatingButton() {\n    const button = document.createElement('button');\n\n    // Detectar si estamos en móvil o tablet para forzar posición centrada\n    const isMobileOrTablet = window.innerWidth <= 992; // Umbral más alto para asegurar compatibilidad\n\n    // SIEMPRE aplicar clase para la posición centrada en dispositivos móviles/tablets\n    let positionClass = config.position;\n\n    if (isMobileOrTablet) {\n      // Forzar posición centrada en móviles/tablets, independientemente de la configuración\n      positionClass = config.position.includes('top') ? 'top-center-mobile' : 'bottom-center-mobile';\n      button.setAttribute('data-mobile-view', 'true');\n    }\n\n    button.className = `aipps-form-button ${positionClass} ${config.size}`;\n    button.style.backgroundColor = config.color;\n    button.style.color = scriptTag.getAttribute('data-text-color') || '#FFFFFF';\n    button.style.borderRadius = config.radius;\n\n    // Agregar ícono si se especificó\n    if (config.icon && config.icon !== 'none') {\n      button.innerHTML = getIconSvg(config.icon) + config.text;\n    } else {\n      button.textContent = config.text;\n    }\n\n    // Para dispositivos móviles, aplicar posicionamiento directamente con estilos en línea para asegurar que funcione\n    if (isMobileOrTablet) {\n      button.style.position = 'fixed';\n      button.style.left = '50%';\n      button.style.transform = 'translateX(-50%)';\n      button.style.zIndex = '9999';\n\n      if (positionClass.includes('top')) {\n        button.style.top = '20px';\n      } else {\n        button.style.bottom = '20px';\n      }\n      button.style.maxWidth = 'calc(100% - 40px)';\n      button.style.width = 'auto';\n      button.style.minWidth = '200px';\n      button.style.textAlign = 'center';\n    }\n\n    // Agregar evento de clic\n    button.addEventListener('click', showForm);\n\n    // Agregar al DOM\n    document.body.appendChild(button);\n\n    // Agregar listener para redimensionamiento de ventana\n    window.addEventListener('resize', handleResize);\n\n    function handleResize() {\n      const newIsMobileOrTablet = window.innerWidth <= 992;\n      if (newIsMobileOrTablet !== isMobileOrTablet) {\n        // Si cambió entre móvil/desktop, recargar para actualizar posición\n        window.location.reload();\n      }\n    }\n  }\n\n  /**\n   * Obtiene el SVG para el ícono especificado\n   */\n  function getIconSvg(icon) {\n    const icons = {\n      form: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"9\"></line><line x1=\"9\" y1=\"13\" x2=\"15\" y2=\"13\"></line><line x1=\"9\" y1=\"17\" x2=\"13\" y2=\"17\"></line></svg>',\n      contact: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path></svg>',\n      order: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"9\" cy=\"21\" r=\"1\"></circle><circle cx=\"20\" cy=\"21\" r=\"1\"></circle><path d=\"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6\"></path></svg>',\n      survey: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line><line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line><polygon points=\"10 9 9 9 8 9 9 9\"></polygon></svg>',\n    };\n\n    return icons[icon] || '';\n  }\n\n  /**\n   * Muestra el formulario según el tipo de visualización configurado\n   */\n  function showForm() {\n    switch (config.type) {\n      case 'modal':\n        showModalForm();\n        break;\n      case 'slidein':\n        showSlideInForm();\n        break;\n      case 'redirect':\n        // Comprobar si es posible abrir en una nueva pestaña\n        if (window.confirm('Se abrirá el formulario en una nueva ventana. ¿Continuar?')) {\n          // Intentar abrir en nueva pestaña primero (puede ser bloqueado por el navegador)\n          const newWindow = window.open(getFormUrl(), '_blank');\n\n          // Si fue bloqueado o falló, redirigir en la misma ventana\n          if (!newWindow || newWindow.closed || typeof newWindow.closed === 'undefined') {\n            window.location.href = getFormUrl();\n          }\n        }\n        break;\n      default:\n        showModalForm();\n    }\n  }\n\n  /**\n   * Obtiene la URL del formulario\n   */\n  function getFormUrl() {\n    // Obtener el origen del script para construir la URL completa\n    const scriptSrc = scriptTag.src;\n    const origin = new URL(scriptSrc).origin;\n    return `${origin}/forms/${config.formId}/view`;\n  }\n\n  /**\n   * Muestra el formulario en una ventana modal\n   */\n  function showModalForm() {\n    // Crear el contenedor modal como elemento completamente nuevo\n    // Eliminamos cualquier modal existente para evitar conflictos\n    let existingModal = document.querySelector('.aipi-form-modal');\n    if (existingModal) {\n      existingModal.remove();\n    }\n\n    // Detectar si estamos en móvil o tablet para optimizar la visualización\n    const isMobileOrTablet = window.innerWidth <= 768;\n\n    // Crear nuevo modal desde cero\n    const modal = document.createElement('div');\n    modal.className = 'aipi-form-modal';\n    modal.style.position = 'fixed';\n    modal.style.top = '0';\n    modal.style.left = '0';\n    modal.style.width = '100%';\n    modal.style.height = '100%';\n    modal.style.zIndex = '99999'; // Mayor z-index para asegurar visibilidad\n    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    modal.style.display = 'flex';\n    modal.style.alignItems = 'center';\n    modal.style.justifyContent = 'center';\n\n    // Contenedor del contenido del modal (totalmente responsive)\n    const modalContent = document.createElement('div');\n    modalContent.style.backgroundColor = 'white';\n    modalContent.style.borderRadius = isMobileOrTablet ? '6px' : '8px';\n\n    // En dispositivos móviles y tablets, ignoramos el ancho configurado y usamos un valor óptimo\n    if (isMobileOrTablet) {\n      modalContent.style.width = '98%';\n      modalContent.style.maxWidth = '100%';\n      modalContent.setAttribute('data-mobile-view', 'true');\n    } else {\n      modalContent.style.width = config.modalWidth || '600px';\n      modalContent.style.maxWidth = '94%';\n    }\n\n    modalContent.style.height = 'auto';\n    modalContent.style.maxHeight = isMobileOrTablet ? '98vh' : '90vh'; // Mayor espacio en móviles\n    modalContent.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.15)';\n    modalContent.style.display = 'flex';\n    modalContent.style.flexDirection = 'column';\n    modalContent.style.overflow = 'hidden'; // Evitamos scroll en el contenedor principal\n    modalContent.style.margin = isMobileOrTablet ? '4px' : '10px'; // Margen reducido para dispositivos pequeños\n\n    // Encabezado del modal con título y botón de cierre\n    const modalHeader = document.createElement('div');\n    modalHeader.style.padding = '15px';\n    modalHeader.style.borderBottom = '1px solid #e9ecef';\n    modalHeader.style.display = 'flex';\n    modalHeader.style.justifyContent = 'space-between';\n    modalHeader.style.alignItems = 'center';\n    modalHeader.style.backgroundColor = '#f8f9fa';\n    modalHeader.style.borderTopLeftRadius = '8px';\n    modalHeader.style.borderTopRightRadius = '8px';\n\n    const modalTitle = document.createElement('h3');\n    modalTitle.style.margin = '0';\n    modalTitle.style.fontSize = '16px';\n    modalTitle.style.fontWeight = 'bold';\n    modalTitle.textContent = config.text || 'Formulario';\n\n    const closeButton = document.createElement('button');\n    closeButton.style.background = 'none';\n    closeButton.style.border = 'none';\n    closeButton.style.cursor = 'pointer';\n    closeButton.style.padding = '5px';\n    closeButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>';\n    closeButton.addEventListener('click', closeModal);\n\n    modalHeader.appendChild(modalTitle);\n    modalHeader.appendChild(closeButton);\n\n    // Contenedor del iframe con scroll propio\n    const iframeContainer = document.createElement('div');\n    iframeContainer.style.flex = '1';\n    iframeContainer.style.overflow = 'auto'; // Permitir scroll dentro del contenedor\n    iframeContainer.style.minHeight = '200px'; // Altura mínima para que se vea algo\n\n    // Crear iframe para cargar el formulario (con mejorada responsividad)\n    const iframe = document.createElement('iframe');\n    iframe.src = getFormUrl();\n    iframe.style.width = '100%';\n    iframe.style.border = 'none';\n    // Altura adaptable en móviles: menor en pantallas pequeñas\n    iframe.style.height = window.innerWidth < 600 ? '95vh' : (config.modalHeight || '800px');\n    iframe.style.display = 'block';\n    iframe.setAttribute('frameborder', '0');\n    iframe.setAttribute('allowtransparency', 'true');\n    iframe.setAttribute('scrolling', 'yes'); // Permitir scroll\n    iframe.style.overflow = 'auto'; // Asegurar que tiene scroll\n\n    // Asignar un ID único para fácil acceso\n    const iframeId = 'aipi-form-iframe-' + Date.now();\n    iframe.id = iframeId;\n\n    iframeContainer.appendChild(iframe);\n\n    // Añadir los elementos al DOM\n    modalContent.appendChild(modalHeader);\n    modalContent.appendChild(iframeContainer);\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n\n    // Prevenir scroll del body cuando el modal está abierto\n    document.body.style.overflow = 'hidden';\n\n    // Permitir cerrar el modal al hacer clic fuera\n    modal.addEventListener('click', function(e) {\n      if (e.target === modal) {\n        closeModal();\n      }\n    });\n\n    // Función para cerrar el modal\n    function closeModal() {\n      modal.style.display = 'none';\n      document.body.style.overflow = '';\n      setTimeout(() => {\n        modal.remove(); // Eliminamos completamente el modal del DOM\n      }, 100);\n    }\n\n    // Exponer la función de cierre globalmente para permitir cerrar desde el iframe\n    window.closeAipiFormModal = closeModal;\n  }\n\n  /**\n   * Muestra el formulario en un panel deslizante (completamente reescrito para mejor responsividad)\n   */\n  function showSlideInForm() {\n    // Eliminar cualquier panel deslizante anterior\n    let existingSlideIn = document.querySelector('.aipi-form-slidein');\n    if (existingSlideIn) {\n      existingSlideIn.remove();\n    }\n\n    // Detectar si estamos en móvil o tablet para optimizar la visualización\n    const isMobileOrTablet = window.innerWidth <= 768;\n\n    // Crear nuevo panel deslizante desde cero\n    const slideIn = document.createElement('div');\n    slideIn.className = 'aipi-form-slidein';\n    slideIn.style.position = 'fixed';\n    slideIn.style.top = '0';\n    slideIn.style.right = '0';\n    slideIn.style.bottom = '0';\n    slideIn.style.width = '100%';\n\n    // En móviles, ocupamos toda la pantalla; en tablets y desktop respetamos un ancho máximo\n    if (isMobileOrTablet) {\n      slideIn.style.maxWidth = window.innerWidth < 480 ? '100%' : '90%';\n      slideIn.setAttribute('data-mobile-view', 'true');\n    } else {\n      slideIn.style.maxWidth = '450px'; // Ancho máximo para PC\n    }\n\n    slideIn.style.backgroundColor = 'white';\n    slideIn.style.boxShadow = '-2px 0 10px rgba(0,0,0,0.2)';\n    slideIn.style.transform = 'translateX(100%)';\n    slideIn.style.transition = 'transform 0.3s ease-out';\n    slideIn.style.zIndex = '99998'; // Alto z-index pero inferior al modal\n    slideIn.style.display = 'flex';\n    slideIn.style.flexDirection = 'column';\n    slideIn.style.height = '100%';\n\n    // Encabezado del panel deslizante\n    const slideInHeader = document.createElement('div');\n    slideInHeader.style.padding = '15px';\n    slideInHeader.style.borderBottom = '1px solid #e9ecef';\n    slideInHeader.style.backgroundColor = '#f8f9fa';\n    slideInHeader.style.display = 'flex';\n    slideInHeader.style.justifyContent = 'space-between';\n    slideInHeader.style.alignItems = 'center';\n    slideInHeader.style.position = 'sticky';\n    slideInHeader.style.top = '0';\n    slideInHeader.style.zIndex = '1';\n\n    const slideInTitle = document.createElement('h3');\n    slideInTitle.style.margin = '0';\n    slideInTitle.style.fontSize = '16px';\n    slideInTitle.style.fontWeight = 'bold';\n    slideInTitle.textContent = config.text || 'Formulario';\n\n    const closeButton = document.createElement('button');\n    closeButton.style.background = 'none';\n    closeButton.style.border = 'none';\n    closeButton.style.cursor = 'pointer';\n    closeButton.style.padding = '5px';\n    closeButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>';\n    closeButton.addEventListener('click', closeSlideIn);\n\n    slideInHeader.appendChild(slideInTitle);\n    slideInHeader.appendChild(closeButton);\n\n    // Contenedor del contenido (iframe)\n    const contentContainer = document.createElement('div');\n    contentContainer.style.flex = '1';\n    contentContainer.style.overflow = 'auto';\n    contentContainer.style.position = 'relative';\n\n    // Iframe para el contenido\n    const iframe = document.createElement('iframe');\n    iframe.src = getFormUrl();\n    iframe.style.width = '100%';\n    iframe.style.height = '100%';\n    iframe.style.border = 'none';\n    iframe.style.display = 'block';\n    iframe.setAttribute('frameborder', '0');\n    iframe.setAttribute('allowtransparency', 'true');\n    iframe.setAttribute('scrolling', 'yes');\n\n    // Ensamblar todo\n    contentContainer.appendChild(iframe);\n    slideIn.appendChild(slideInHeader);\n    slideIn.appendChild(contentContainer);\n    document.body.appendChild(slideIn);\n\n    // Crear overlay para cerrar al hacer clic fuera en dispositivos móviles\n    const overlay = document.createElement('div');\n    overlay.style.position = 'fixed';\n    overlay.style.top = '0';\n    overlay.style.left = '0';\n    overlay.style.width = '100%';\n    overlay.style.height = '100%';\n    overlay.style.backgroundColor = 'rgba(0,0,0,0.5)';\n    overlay.style.zIndex = '99997'; // Por debajo del panel\n    overlay.style.opacity = '0';\n    overlay.style.transition = 'opacity 0.3s ease';\n    overlay.style.display = 'none';\n    overlay.addEventListener('click', closeSlideIn);\n    document.body.appendChild(overlay);\n\n    // Mostrar el panel deslizante\n    setTimeout(() => {\n      overlay.style.display = 'block';\n      setTimeout(() => {\n        overlay.style.opacity = '1';\n      }, 10);\n      slideIn.style.transform = 'translateX(0)';\n    }, 10);\n\n    // Restricting el scroll en el body\n    document.body.style.overflow = 'hidden';\n\n    // Función para cerrar\n    function closeSlideIn() {\n      slideIn.style.transform = 'translateX(100%)';\n      overlay.style.opacity = '0';\n      document.body.style.overflow = '';\n\n      setTimeout(() => {\n        overlay.style.display = 'none';\n        // Opcional: eliminar completamente los elementos del DOM\n        setTimeout(() => {\n          slideIn.remove();\n          overlay.remove();\n        }, 300);\n      }, 300);\n    }\n\n    // Exponer globalmente para que se pueda cerrar desde el iframe si es necesario\n    window.closeAipiFormSlideIn = closeSlideIn;\n  }\n})();","size_bytes":26278},"public/fullscreen-embed.js":{"content":"(function() {\n  // AIPI Widget Configuration\n  let config = {\n    apiKey: \"\",\n    themeColor: \"#3B82F6\",\n    assistantName: \"AIPI Assistant\",\n    greetingMessage: \"👋 Hi there! I'm AIPI, your AI assistant. How can I help you today?\",\n    showAvailability: true,\n    userBubbleColor: \"#3B82F6\",\n    assistantBubbleColor: \"#E5E7EB\",\n    font: \"inter\",\n    visitorId: \"\",\n    conversationId: null,\n    customWelcomeMessage: null, // Nuevo campo para mensaje de bienvenida personalizado\n    ignoredSections: [], // Secciones del sitio web a ignorar\n    serverUrl: window.location.origin, // Will be overridden by script URL source\n  };\n  \n  // State variables\n  let chatPanel = null;\n  let widgetButton = null;\n  let isOpen = false;\n  let conversationStarted = false;\n  let messages = [];\n\n  // Initialize widget when DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n\n  // Initialize the widget\n  function init() {\n    console.log('AIPI Fullscreen Widget: Initializing...');\n    try {\n      // Extract the API key from script tag\n      const scriptTags = document.getElementsByTagName('script');\n      let apiKey = null;\n      \n      for (let i = 0; i < scriptTags.length; i++) {\n        const scriptTag = scriptTags[i];\n        const src = scriptTag.src || '';\n        \n        if (src.includes('fullscreen-embed.js')) {\n          try {\n            const url = new URL(src);\n            apiKey = url.searchParams.get('key');\n            config.serverUrl = url.origin;\n            console.log('AIPI: Found API key and server URL', apiKey, config.serverUrl);\n            break;\n          } catch (err) {\n            console.error('AIPI: Error parsing script URL', err);\n          }\n        }\n      }\n      \n      if (!apiKey) {\n        throw new Error('AIPI API key is required. Add it to your script tag: ?key=YOUR_API_KEY');\n      }\n      \n      config.apiKey = apiKey;\n      // config.serverUrl ya se establece en línea 47, no necesitamos reasignarlo aquí\n      \n      // Generate visitor ID if not existing\n      config.visitorId = localStorage.getItem('aipi_visitor_id') || \n        'visitor_' + Math.random().toString(36).substring(2, 15);\n      localStorage.setItem('aipi_visitor_id', config.visitorId);\n      \n      // Load widget configuration\n      loadWidgetConfig();\n    } catch (error) {\n      console.error('AIPI Fullscreen Widget Error:', error);\n    }\n  }\n  \n  // Load widget configuration from server\n  async function loadWidgetConfig() {\n    try {\n      console.log('AIPI Fullscreen Widget: Loading configuration...');\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load widget configuration: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('AIPPS Debug: Server data received:', data);\n      \n      // Update config with server response\n      if (data.integration) {\n        config.themeColor = data.integration.themeColor || config.themeColor;\n        config.ignoredSections = data.integration.ignoredSections || [];\n        \n        // El botBehavior no debe usarse como mensaje de bienvenida\n        // Solo usamos defaultGreeting o welcomeMessage para mostrar al usuario\n      }\n      \n      // Store integration name and text color setting for dynamic messages\n      if (data.integration) {\n        config.integrationName = data.integration.name;\n        config.textColorMode = data.integration.textColor || 'auto';\n      }\n      \n      if (data.settings) {\n        config.assistantName = data.settings.assistantName || config.assistantName;\n      }\n      \n      // Update greeting message with correct assistant name after server config\n      const assistantName = config.assistantName || config.integrationName || 'tu asistente';\n      config.greetingMessage = data.settings?.defaultGreeting || `Hola, soy ${assistantName}. ¿En qué puedo ayudarte?`;\n      \n      // Store user info for personalized greetings (only for authenticated users)\n      console.log('AIPPS Debug: Checking userInfo from server:', data.userInfo);\n      if (data.userInfo && data.userInfo.name) {\n        config.userName = data.userInfo.name;\n        config.greetingMessage = `¡Hola ${config.userName}! Soy ${assistantName}. ¿En qué puedo ayudarte hoy?`;\n        console.log('AIPPS Debug: Personalized greeting set:', config.greetingMessage);\n      }\n      \n      if (data.settings) {\n        config.showAvailability = data.settings.showAvailability !== false;\n        config.userBubbleColor = data.settings.userBubbleColor || config.userBubbleColor;\n        config.assistantBubbleColor = data.settings.assistantBubbleColor || config.assistantBubbleColor;\n        config.font = data.settings.font || config.font;\n        \n        // Solo usar el mensaje de bienvenida personalizado si NO hay usuario autenticado\n        // Si hay usuario autenticado, usar el saludo personalizado con nombre\n        if (data.settings.welcomeMessage && !config.userName) {\n          config.customWelcomeMessage = data.settings.welcomeMessage;\n        }\n      }\n      \n      // Obtener mensaje de bienvenida personalizado del parámetro del script\n      // Solo si NO hay usuario autenticado\n      if (!config.userName) {\n        const scriptTags = document.getElementsByTagName('script');\n        for (let i = 0; i < scriptTags.length; i++) {\n          const scriptTag = scriptTags[i];\n          const src = scriptTag.src || '';\n          \n          if (src.includes('fullscreen-embed.js')) {\n            const welcomeMessage = scriptTag.getAttribute('data-welcome-message');\n            if (welcomeMessage) {\n              config.customWelcomeMessage = welcomeMessage;\n            }\n            break;\n          }\n        }\n      }\n      \n      // Create widget DOM elements\n      createWidget();\n      \n      // Update any existing welcome messages\n      updateExistingWelcomeMessages();\n      \n    } catch (error) {\n      console.error('AIPI Fullscreen Widget Error:', error);\n    }\n  }\n  \n  // Create widget DOM elements\n  function createWidget() {\n    console.log('AIPI Fullscreen Widget: Creating widget...');\n    try {\n      // Create widget button\n      widgetButton = document.createElement('div');\n      widgetButton.id = 'aipi-fs-button';\n      widgetButton.innerHTML = `\n        <div class=\"aipi-fs-button-icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <path d=\"M12 16v-4\"></path>\n            <path d=\"M12 8h.01\"></path>\n          </svg>\n        </div>\n        <div class=\"aipi-fs-button-text\">AIPI Assistant</div>\n      `;\n      \n      // Create chat panel\n      chatPanel = document.createElement('div');\n      chatPanel.id = 'aipi-fs-chat-panel';\n      chatPanel.style.display = 'none';\n      chatPanel.innerHTML = `\n        <div id=\"aipi-fs-chat-header\">\n          <div id=\"aipi-fs-header-info\">\n            <div id=\"aipi-fs-avatar\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n              </svg>\n            </div>\n            <div id=\"aipi-fs-header-text\">\n              <span id=\"aipi-fs-assistant-name\">${escapeHTML(config.assistantName)}</span>\n              ${config.showAvailability ? '<span id=\"aipi-fs-status\">Online</span>' : ''}\n            </div>\n          </div>\n          <div id=\"aipi-fs-header-actions\">\n            <button class=\"aipi-fs-header-button\" id=\"aipi-fs-close-button\" aria-label=\"Close\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n              </svg>\n            </button>\n          </div>\n        </div>\n        <div id=\"aipi-fs-messages-container\"></div>\n        <div id=\"aipi-fs-input-container\">\n          <input type=\"text\" id=\"aipi-fs-input\" placeholder=\"Type your message...\">\n          <button id=\"aipi-fs-send-button\" disabled>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n              <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n            </svg>\n          </button>\n        </div>\n      `;\n      \n      // Create CSS\n      const style = document.createElement('style');\n      style.textContent = `\n        #aipi-fs-button {\n          position: fixed;\n          bottom: 24px;\n          right: 24px;\n          background-color: ${config.themeColor};\n          color: white;\n          display: flex;\n          align-items: center;\n          padding: 12px 20px;\n          border-radius: 50px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n          cursor: pointer !important;\n          z-index: 999999;\n          font-family: Arial, sans-serif;\n          transition: all 0.3s ease;\n          pointer-events: auto !important;\n        }\n        \n        #aipi-fs-button:hover {\n          transform: translateY(-2px);\n          box-shadow: 0 6px 16px rgba(0, 0, 0, 0.25);\n        }\n        \n        .aipi-fs-button-icon {\n          margin-right: 8px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n        \n        .aipi-fs-button-text {\n          font-weight: 600;\n          font-size: 14px;\n        }\n        \n        #aipi-fs-chat-panel {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: white;\n          z-index: 1000000;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        #aipi-fs-chat-header {\n          background-color: ${config.themeColor};\n          color: white;\n          padding: 16px;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        #aipi-fs-header-info {\n          display: flex;\n          align-items: center;\n        }\n        \n        #aipi-fs-avatar {\n          width: 32px;\n          height: 32px;\n          border-radius: 50%;\n          background-color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-right: 12px;\n        }\n        \n        #aipi-fs-avatar svg {\n          width: 20px;\n          height: 20px;\n          color: ${config.themeColor};\n        }\n        \n        #aipi-fs-header-text {\n          display: flex;\n          flex-direction: column;\n        }\n        \n        #aipi-fs-assistant-name {\n          font-weight: 600;\n          font-size: 16px;\n        }\n        \n        #aipi-fs-status {\n          font-size: 12px;\n          opacity: 0.8;\n        }\n        \n        #aipi-fs-header-actions {\n          display: flex;\n        }\n        \n        .aipi-fs-header-button {\n          background: none;\n          border: none;\n          color: white;\n          cursor: pointer;\n          padding: 4px;\n          margin-left: 8px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          opacity: 0.8;\n          transition: opacity 0.2s;\n        }\n        \n        .aipi-fs-header-button:hover {\n          opacity: 1;\n        }\n        \n        #aipi-fs-messages-container {\n          flex: 1;\n          overflow-y: auto;\n          padding: 16px;\n          display: flex;\n          flex-direction: column;\n          gap: 12px;\n          background-color: #f9fafb;\n        }\n        \n        #aipi-fs-input-container {\n          display: flex;\n          padding: 12px;\n          border-top: 1px solid #e5e7eb;\n          background-color: #fff;\n        }\n        \n        #aipi-fs-input {\n          flex: 1;\n          border: 1px solid #d1d5db;\n          border-radius: 20px;\n          padding: 10px 16px;\n          font-size: 14px;\n          outline: none;\n          background-color: #fff;\n          color: #1f2937;\n        }\n        \n        #aipi-fs-input:focus {\n          border-color: ${config.themeColor};\n          box-shadow: 0 0 0 1px ${config.themeColor}20;\n        }\n        \n        #aipi-fs-send-button {\n          background-color: ${config.themeColor};\n          border: none;\n          border-radius: 50%;\n          color: white;\n          width: 38px;\n          height: 38px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          margin-left: 8px;\n          transition: background-color 0.2s;\n        }\n        \n        #aipi-fs-send-button:hover {\n          background-color: ${adjustColor(config.themeColor, -20)};\n        }\n        \n        #aipi-fs-send-button:disabled {\n          background-color: #9ca3af;\n          cursor: not-allowed;\n        }\n        \n        .aipi-fs-message {\n          max-width: 80%;\n          padding: 10px 14px;\n          border-radius: 18px;\n          font-size: 14px;\n          line-height: 1.5;\n          word-wrap: break-word;\n        }\n        \n        .aipi-fs-user-message {\n          background-color: ${config.userBubbleColor};\n          color: white;\n          align-self: flex-end;\n          border-bottom-right-radius: 4px;\n        }\n        \n        .aipi-fs-assistant-message {\n          background-color: ${config.assistantBubbleColor};\n          color: ${(() => {\n            const color = config.assistantBubbleColor || '#E5E7EB';\n            let hex = color.replace('#', '');\n            if (hex.length === 3) hex = hex.split('').map(c => c + c).join('');\n            if (hex.length !== 6) return '#1f2937 !important';\n            \n            const r = parseInt(hex.substr(0, 2), 16);\n            const g = parseInt(hex.substr(2, 2), 16);\n            const b = parseInt(hex.substr(4, 2), 16);\n            const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n            \n            console.log('🎨 AIPPS CSS Debug - Fullscreen:');\n            console.log('  Background color:', color);\n            console.log('  Luminance:', luminance.toFixed(3));\n            console.log('  Threshold: 0.6');\n            console.log('  Is dark background?', luminance < 0.6);\n            \n            // FIXED: Use luminance < 0.6 for better dark detection\n            const textColor = luminance < 0.6 ? '#ffffff' : '#1f2937';\n            console.log('  Selected text color:', textColor);\n            console.log('  Rule applied: luminance < 0.6 ? white : dark');\n            \n            return textColor + ' !important';\n          })()};\n          align-self: flex-start;\n          border-bottom-left-radius: 4px;\n        }\n\n        \n        .aipi-fs-typing-indicator {\n          display: flex;\n          align-items: center;\n          gap: 4px;\n          padding: 10px 14px;\n          background-color: ${config.assistantBubbleColor};\n          color: ${(() => {\n            const color = config.assistantBubbleColor || '#E5E7EB';\n            let hex = color.replace('#', '');\n            if (hex.length === 3) hex = hex.split('').map(c => c + c).join('');\n            if (hex.length !== 6) return '#1f2937 !important';\n            \n            const r = parseInt(hex.substr(0, 2), 16);\n            const g = parseInt(hex.substr(2, 2), 16);\n            const b = parseInt(hex.substr(4, 2), 16);\n            const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n            \n            return luminance < 0.6 ? '#ffffff !important' : '#1f2937 !important';\n          })()};\n          border-radius: 18px;\n          border-bottom-left-radius: 4px;\n          align-self: flex-start;\n          max-width: 80px;\n        }\n        \n        .aipi-fs-typing-dot {\n          width: 8px;\n          height: 8px;\n          background-color: #6b7280;\n          border-radius: 50%;\n          animation: aipi-fs-typing-animation 1.4s infinite ease-in-out;\n        }\n        \n        .aipi-fs-typing-dot:nth-child(1) {\n          animation-delay: 0s;\n        }\n        \n        .aipi-fs-typing-dot:nth-child(2) {\n          animation-delay: 0.2s;\n        }\n        \n        .aipi-fs-typing-dot:nth-child(3) {\n          animation-delay: 0.4s;\n        }\n        \n        @keyframes aipi-fs-typing-animation {\n          0%, 100% {\n            transform: translateY(0);\n          }\n          50% {\n            transform: translateY(-5px);\n          }\n        }\n      `;\n      \n      // Append to document\n      document.head.appendChild(style);\n      \n      // Crear un contenedor para el botón que asegure que los eventos funcionen\n      const widgetContainer = document.createElement('div');\n      widgetContainer.id = 'aipi-fs-container';\n      widgetContainer.style.cssText = 'position: fixed; bottom: 24px; right: 24px; z-index: 999998;';\n      \n      // Append elements to DOM\n      document.body.appendChild(widgetContainer);\n      widgetContainer.appendChild(widgetButton);\n      document.body.appendChild(chatPanel);\n      \n      // Add event listeners with multiple event types para asegurar que se capturen\n      widgetButton.onclick = function(e) {\n        console.log('AIPI Fullscreen Widget: Button clicked (onclick)');\n        e.preventDefault();\n        e.stopPropagation();\n        openChat();\n        return false;\n      };\n      \n      widgetButton.addEventListener('click', function(e) {\n        console.log('AIPI Fullscreen Widget: Button clicked (addEventListener)');\n        e.preventDefault();\n        e.stopPropagation();\n        openChat();\n      }, true);\n      \n      document.getElementById('aipi-fs-close-button').addEventListener('click', function() {\n        console.log('AIPI Fullscreen Widget: Close button clicked');\n        closeChat();\n      });\n      \n      const inputField = document.getElementById('aipi-fs-input');\n      const sendButton = document.getElementById('aipi-fs-send-button');\n      \n      inputField.addEventListener('input', function() {\n        sendButton.disabled = !inputField.value.trim();\n      });\n      \n      inputField.addEventListener('keydown', function(e) {\n        if (e.key === 'Enter' && inputField.value.trim()) {\n          sendMessage();\n        }\n      });\n      \n      sendButton.addEventListener('click', sendMessage);\n      \n      console.log('AIPI Fullscreen Widget: Widget created successfully');\n    } catch (error) {\n      console.error('AIPI Fullscreen Widget Error:', error);\n    }\n  }\n  \n  // Open chat\n  function openChat() {\n    console.log('AIPI Fullscreen Widget: Opening chat...');\n    try {\n      // Ocultar el botón\n      if (widgetButton) {\n        widgetButton.style.display = 'none';\n        \n        // También ocultar el contenedor\n        const container = document.getElementById('aipi-fs-container');\n        if (container) {\n          container.style.display = 'none';\n        }\n      }\n      \n      // Mostrar el panel de chat\n      if (chatPanel) {\n        chatPanel.style.display = 'flex';\n      }\n      \n      isOpen = true;\n      \n      // Start conversation if not already started\n      if (!conversationStarted) {\n        startConversation();\n      }\n      \n      // Focus input\n      setTimeout(function() {\n        const inputField = document.getElementById('aipi-fs-input');\n        if (inputField) {\n          inputField.focus();\n        }\n      }, 300);\n      \n      console.log('AIPI Fullscreen Widget: Chat opened successfully');\n    } catch (error) {\n      console.error('AIPI Fullscreen Widget Error:', error);\n      alert('Error al abrir el chat: ' + error.message);\n    }\n  }\n  \n  // Close chat\n  function closeChat() {\n    console.log('AIPI Fullscreen Widget: Closing chat...');\n    try {\n      // Asegurar que el panel se oculta correctamente\n      if (chatPanel) {\n        chatPanel.style.display = 'none';\n      }\n      \n      // Asegurar que el botón se muestra correctamente\n      if (widgetButton) {\n        widgetButton.style.display = 'flex';\n        \n        // También asegurar que el contenedor esté visible\n        const container = document.getElementById('aipi-fs-container');\n        if (container) {\n          container.style.display = 'block';\n        }\n      }\n      \n      isOpen = false;\n      console.log('AIPI Fullscreen Widget: Chat closed successfully');\n    } catch (error) {\n      console.error('AIPI Fullscreen Widget Error:', error);\n      alert('Error al cerrar el chat: ' + error.message);\n    }\n  }\n  \n  // Start conversation\n  async function startConversation() {\n    console.log('AIPI Fullscreen Widget: Starting conversation...');\n    try {\n      if (!conversationStarted) {\n        // Scan page content\n        const pageTitle = document.title;\n        \n        // Extraer contenido de la página excluyendo secciones ignoradas\n        let pageContent = \"\";\n        try {\n          // Crear una copia del body para manipular\n          const bodyClone = document.body.cloneNode(true);\n          \n          // Eliminar elementos no deseados\n          const elementsToRemove = bodyClone.querySelectorAll(\n            'script, style, link, meta, noscript, iframe, ' + \n            'nav, footer, header, aside'\n          );\n          elementsToRemove.forEach(el => el.remove());\n          \n          // Eliminar secciones ignoradas\n          if (config.ignoredSections && config.ignoredSections.length > 0) {\n            config.ignoredSections.forEach(section => {\n              if (section && section.trim()) {\n                // Buscar secciones por encabezados que contienen el texto\n                bodyClone.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {\n                  if (heading.textContent.toLowerCase().includes(section.toLowerCase())) {\n                    // Eliminar el encabezado y sus contenidos relacionados\n                    heading.parentNode?.removeChild(heading);\n                  }\n                });\n                \n                // Buscar contenedores que puedan contener la sección\n                bodyClone.querySelectorAll(`[id*=\"${section}\"], [class*=\"${section}\"], section, div`).forEach(element => {\n                  const elementText = element.textContent.toLowerCase();\n                  if (elementText.includes(section.toLowerCase())) {\n                    element.parentNode?.removeChild(element);\n                  }\n                });\n              }\n            });\n          }\n          \n          // Extraer el contenido del cuerpo limpio\n          pageContent = bodyClone.innerText.substring(0, 10000); // Limitado a 10k caracteres\n          \n          console.log('AIPI Fullscreen Widget: Contenido de página escaneado con éxito');\n        } catch (error) {\n          console.error('AIPI Fullscreen Widget: Error al escanear contenido', error);\n          // Fallback a la extracción simple\n          pageContent = document.body.innerText.substring(0, 10000);\n        }\n        \n        // Create a new conversation\n        const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/conversation`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            visitorId: config.visitorId,\n            pageContext: {\n              title: pageTitle,\n              url: window.location.href,\n              content: pageContent\n            }\n          }),\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to create conversation');\n        }\n        \n        const data = await response.json();\n        config.conversationId = data.id;\n        conversationStarted = true;\n        \n        // Add initial greeting - usar mensaje personalizado si existe\n        const welcomeMessage = config.customWelcomeMessage || config.greetingMessage;\n        addMessage(welcomeMessage, 'assistant');\n        console.log('AIPI Fullscreen Widget: Conversation started successfully');\n      }\n    } catch (error) {\n      console.error('AIPI Fullscreen Widget Error:', error);\n      addMessage('Sorry, I encountered an error. Please try again later.', 'assistant');\n    }\n  }\n  \n  // Send message\n  async function sendMessage() {\n    const inputField = document.getElementById('aipi-fs-input');\n    const message = inputField.value.trim();\n    \n    if (!message) return;\n    \n    // Clear input\n    inputField.value = '';\n    document.getElementById('aipi-fs-send-button').disabled = true;\n    \n    // Start conversation if not already started\n    if (!conversationStarted) {\n      await startConversation();\n    }\n    \n    // Add user message to UI\n    addMessage(message, 'user');\n    \n    // Show typing indicator\n    showTypingIndicator(true);\n    \n    try {\n      // Send message to server\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          conversationId: config.conversationId,\n          content: message,\n          role: 'user'\n        }),\n      });\n      \n      // Hide typing indicator\n      showTypingIndicator(false);\n      \n      if (!response.ok) {\n        // Show friendly error message in chat\n        if (response.status === 500) {\n          addMessage(\"Lo siento, hay un problema temporal con el servicio. Por favor, intenta de nuevo más tarde o contacta con soporte si el problema persiste.\", 'assistant');\n        } else {\n          addMessage(\"Lo siento, no pude procesar tu mensaje. Por favor, intenta de nuevo.\", 'assistant');\n        }\n        throw new Error(`Failed to send message: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Add AI response to UI\n      if (data.aiMessage) {\n        addMessage(data.aiMessage.content, 'assistant');\n      } else {\n        addMessage(\"Recibí tu mensaje, pero no pude generar una respuesta en este momento.\", 'assistant');\n      }\n    } catch (error) {\n      console.error('AIPI Fullscreen Widget Error:', error);\n      \n      // Hide typing indicator if still showing\n      showTypingIndicator(false);\n    }\n  }\n  \n  // Add message to UI\n  function addMessage(content, role) {\n    console.log('AIPPS Debug: addMessage called with role:', role, 'config.assistantBubbleColor:', config.assistantBubbleColor);\n    \n    const messagesContainer = document.getElementById('aipi-fs-messages-container');\n    const messageElement = document.createElement('div');\n    \n    messageElement.className = `aipi-fs-message aipi-fs-${role}-message`;\n    \n    // FORCE WHITE TEXT for assistant messages with inline styles (override everything)\n    if (role === 'assistant') {\n      const bgColor = config.assistantBubbleColor || '#E5E7EB';\n      \n      // Calculate optimal text color based on background\n      let hex = bgColor.replace('#', '');\n      if (hex.length === 3) hex = hex.split('').map(c => c + c).join('');\n      \n      let textColor = '#1f2937'; // Default dark text\n      if (hex.length === 6) {\n        const r = parseInt(hex.substr(0, 2), 16);\n        const g = parseInt(hex.substr(2, 2), 16);\n        const b = parseInt(hex.substr(4, 2), 16);\n        const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n        \n        console.log('🔧 AIPPS JavaScript Debug - Fullscreen:');\n        console.log('  Background color:', bgColor);\n        console.log('  Luminance:', luminance.toFixed(3));\n        console.log('  Threshold: 0.6');\n        console.log('  Is dark background?', luminance < 0.6);\n        \n        // FIXED: Use luminance < 0.6 for better dark detection\n        textColor = luminance < 0.6 ? '#ffffff' : '#1f2937';\n        console.log('  Selected text color:', textColor);\n        console.log('  Rule applied: luminance < 0.6 ? white : dark');\n      }\n      \n      // Apply styles with calculated contrast\n      messageElement.style.cssText = `\n        background-color: ${bgColor} !important;\n        color: ${textColor} !important;\n        padding: 10px 14px !important;\n        border-radius: 18px !important;\n        margin-bottom: 10px !important;\n        max-width: 80% !important;\n        word-wrap: break-word !important;\n        align-self: flex-start !important;\n        border-bottom-left-radius: 4px !important;\n      `;\n      \n      // Apply same color to all child elements\n      const applyTextColor = () => {\n        messageElement.style.setProperty('color', textColor, 'important');\n        const allChildren = messageElement.querySelectorAll('*');\n        allChildren.forEach(child => {\n          child.style.setProperty('color', textColor, 'important');\n        });\n      };\n      \n      applyTextColor();\n      setTimeout(applyTextColor, 100);\n    }\n    \n    messageElement.innerHTML = formatMessage(content);\n    \n    messagesContainer.appendChild(messageElement);\n    \n    // Store message\n    messages.push({ role, content });\n    \n    // Scroll to bottom\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n  \n  // Show typing indicator\n  function showTypingIndicator(show) {\n    const messagesContainer = document.getElementById('aipi-fs-messages-container');\n    let typingIndicator = document.querySelector('.aipi-fs-typing-indicator');\n    \n    if (show) {\n      if (!typingIndicator) {\n        typingIndicator = document.createElement('div');\n        typingIndicator.className = 'aipi-fs-typing-indicator';\n        typingIndicator.innerHTML = `\n          <div class=\"aipi-fs-typing-dot\"></div>\n          <div class=\"aipi-fs-typing-dot\"></div>\n          <div class=\"aipi-fs-typing-dot\"></div>\n        `;\n        messagesContainer.appendChild(typingIndicator);\n      }\n    } else {\n      if (typingIndicator) {\n        typingIndicator.remove();\n      }\n    }\n    \n    // Scroll to bottom\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n  \n  // Format message with links and line breaks\n  function formatMessage(text) {\n    if (!text) return '';\n    \n    // Replace URLs with links\n    let formattedText = text.replace(/https?:\\/\\/[^\\s]+/g, function(url) {\n      return `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`;\n    });\n    \n    // Replace line breaks with <br>\n    formattedText = formattedText.replace(/\\n/g, '<br>');\n    \n    return formattedText;\n  }\n  \n  // Helper function to escape HTML\n  function escapeHTML(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n  \n  // Función para detectar si un color es oscuro\n  function isColorDark(color) {\n    if (!color || typeof color !== 'string') return false;\n    \n    // Convertir color hex a RGB\n    let hex = color.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    if (hex.length !== 6) return false;\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Calcular luminancia usando la fórmula WCAG\n    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n    \n    // Si la luminancia es menor a 0.5, es un color oscuro\n    return luminance < 0.5;\n  }\n\n  // Función para obtener color de texto con contraste adecuado o forzado\n  function getContrastTextColor(backgroundColor) {\n    // Si hay una configuración específica de color de texto, usarla\n    if (config.textColorMode === 'white') {\n      return '#ffffff';\n    }\n    if (config.textColorMode === 'black') {\n      return '#1f2937';\n    }\n    \n    // Si es 'auto' o no está definido, calcular automáticamente\n    if (!backgroundColor || typeof backgroundColor !== 'string') {\n      return '#1f2937'; // Por defecto texto oscuro\n    }\n    \n    // Convertir a hex limpio\n    let hex = backgroundColor.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    if (hex.length !== 6) {\n      return '#1f2937'; // Por defecto si formato es inválido\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Calcular luminancia relativa usando fórmula WCAG 2.1\n    const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n    \n    // Si la luminancia es menor a 0.6, usar texto blanco (más estricto)\n    return luminance < 0.6 ? '#ffffff' : '#1f2937';\n  }\n\n  // Adjust color shade\n  function adjustColor(color, amount) {\n    // Convert hex to RGB\n    let hex = color.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    \n    // Parse components\n    let r = parseInt(hex.substring(0, 2), 16);\n    let g = parseInt(hex.substring(2, 4), 16);\n    let b = parseInt(hex.substring(4, 6), 16);\n    \n    // Adjust each component\n    r = Math.max(0, Math.min(255, r + amount));\n    g = Math.max(0, Math.min(255, g + amount));\n    b = Math.max(0, Math.min(255, b + amount));\n    \n    // Convert back to hex\n    return '#' + \n      r.toString(16).padStart(2, '0') + \n      g.toString(16).padStart(2, '0') + \n      b.toString(16).padStart(2, '0');\n  }\n\n  // Function to update existing welcome messages with correct assistant name\n  function updateExistingWelcomeMessages() {\n    console.log('AIPPS Debug: Actualizando mensajes de bienvenida existentes (Fullscreen)');\n    \n    // Find existing assistant messages that might be welcome messages\n    const assistantMessages = document.querySelectorAll('.aipi-fs-assistant-message');\n    const assistantName = config.assistantName || config.integrationName || 'tu asistente';\n    \n    assistantMessages.forEach((msg, index) => {\n      if (index === 0) { // Usually the first message is the welcome message\n        const text = msg.textContent || msg.innerText;\n        \n        // Check if this looks like a welcome message with \"AIPPS\"\n        if (text.includes('AIPPS') || text.includes('Soy AIPPS')) {\n          const newMessage = text.replace(/AIPPS/g, assistantName).replace(/Soy AIPPS/g, `Soy ${assistantName}`);\n          \n          if (msg.innerHTML !== newMessage) {\n            console.log('AIPPS Debug: Actualizando mensaje de bienvenida (Fullscreen):', text, '→', newMessage);\n            msg.innerHTML = newMessage;\n          }\n        }\n      }\n    });\n  }\n})();","size_bytes":34973},"public/simple-embed.js":{"content":"/*\n * AIPI Fullscreen Chat Widget (Simple Version)\n * \n * Una versión simplificada y robusta del widget de chat en pantalla completa.\n * Este script crea un botón flotante que al hacer clic abre un chat en pantalla completa.\n */\n(function() {\n  // Función para obtener traducciones según el idioma configurado en la integración\n  function getTranslations(language = null) {\n    // Usar el idioma de la integración, luego el del navegador como fallback\n    const lang = language || config.language || navigator.language.substring(0, 2);\n    const translations = {\n      es: {\n        placeholder: \"Escribe tu mensaje...\",\n        newConversation: \"Nueva conversación\"\n      },\n      en: {\n        placeholder: \"Type your message...\",\n        newConversation: \"New conversation\"\n      },\n      fr: {\n        placeholder: \"Tapez votre message...\",\n        newConversation: \"Nouvelle conversation\"\n      }\n    };\n    return translations[lang] || translations.en;\n  }\n  \n  let t = getTranslations(); // Se actualizará después de cargar la configuración\n\n  // Configuración inicial y datos de estado\n  let config = {\n    apiKey: '',\n    serverUrl: window.location.origin,\n    mainColor: '#4f46e5',\n    title: 'AIPI Assistant',\n    greetingMessage: '¡Hola! Soy un asistente virtual. ¿En qué puedo ayudarte hoy?',\n    position: 'bottom-right'\n  };\n\n  let conversationId = null;\n  let visitorId = localStorage.getItem('aipi_visitor_id') || \n    'visitor_' + Math.random().toString(36).substring(2, 15);\n\n  // Guardar ID de visitante\n  localStorage.setItem('aipi_visitor_id', visitorId);\n\n  // Inicializar widget\n  document.addEventListener('DOMContentLoaded', initialize);\n\n  // Función principal de inicialización\n  function initialize() {\n    console.log('AIPI Widget: Inicializando...');\n\n    try {\n      // Cargar configuración\n      loadConfig();\n\n      // Crear elementos del DOM\n      createWidgetElements();\n\n      // Adjuntar eventos\n      attachEvents();\n\n      console.log('AIPI Widget: Inicializado correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al inicializar el widget AIPI: ' + error.message);\n    }\n  }\n\n  // Cargar configuración desde el script\n  async function loadConfig() {\n    try {\n      // Obtener elemento de script\n      const scripts = document.getElementsByTagName('script');\n      let scriptElement = null;\n\n      // Buscar el script correcto que contiene la clave API\n      for (let i = 0; i < scripts.length; i++) {\n        const src = scripts[i].src || '';\n        if (src.includes('simple-embed.js')) {\n          scriptElement = scripts[i];\n          break;\n        }\n      }\n\n      if (!scriptElement) {\n        throw new Error('No se pudo encontrar el script del widget');\n      }\n\n      // Obtener clave API del src o atributo data\n      const scriptSrc = scriptElement.src;\n      const urlParams = new URLSearchParams(scriptSrc.split('?')[1] || '');\n      config.apiKey = urlParams.get('key') || scriptElement.getAttribute('data-api-key');\n\n      if (!config.apiKey) {\n        throw new Error('Se requiere una clave API');\n      }\n\n      console.log('AIPI Widget: Clave API cargada - ' + config.apiKey);\n\n      // Obtener color del tema\n      const themeColor = scriptElement.getAttribute('data-theme-color');\n      if (themeColor) config.mainColor = themeColor;\n\n      // Obtener posición\n      const position = scriptElement.getAttribute('data-position');\n      if (position) config.position = position;\n\n      // Obtener título\n      const title = scriptElement.getAttribute('data-title');\n      if (title) config.title = title;\n\n      // Obtener mensaje de saludo\n      const greeting = scriptElement.getAttribute('data-greeting');\n      if (greeting) config.greetingMessage = greeting;\n\n      // Cargar datos de integración desde el servidor\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}`);\n      if (!response.ok) {\n        throw new Error(`Error al cargar datos de integración: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      // Sobrescribir configuración con datos del servidor\n      if (data.integration) {\n        if (data.integration.themeColor) {\n          config.mainColor = data.integration.themeColor;\n        }\n\n        if (data.integration.position) {\n          config.position = data.integration.position;\n        }\n\n        if (data.integration.language) {\n          config.language = data.integration.language;\n        }\n\n        // El botBehavior no debe usarse como mensaje de bienvenida\n        // Solo usamos defaultGreeting o welcomeMessage para mostrar al usuario\n      }\n\n      // Actualizar traducciones con el idioma de la integración\n      t = getTranslations(config.language);\n\n      console.log('AIPI Widget: Configuración cargada correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      throw new Error('Error al cargar la configuración: ' + error.message);\n    }\n  }\n\n  // Crear elementos del widget\n  function createWidgetElements() {\n    try {\n      // Crear estilos\n      const styleEl = document.createElement('style');\n      styleEl.textContent = getStylesCSS();\n      document.head.appendChild(styleEl);\n\n      // Crear contenedor del botón\n      const buttonContainer = document.createElement('div');\n      buttonContainer.id = 'aipi-chat-button-container';\n\n      // Calcular posición del botón\n      const positionStyle = getPositionStyle(config.position);\n      buttonContainer.style.position = 'fixed';\n      buttonContainer.style.zIndex = '9998';\n      buttonContainer.style.bottom = positionStyle.bottom;\n      buttonContainer.style.right = positionStyle.right;\n      buttonContainer.style.left = positionStyle.left;\n      buttonContainer.style.top = positionStyle.top;\n\n      // Crear botón\n      const button = document.createElement('button');\n      button.id = 'aipi-chat-button';\n      button.innerHTML = `\n          <span style=\"margin-right: 8px;\">💬</span>\n          <span class=\"button-text\">¡Hablemos!</span>\n          <div style=\"position: absolute; top: -2px; right: -2px; width: 10px; height: 10px; background: #ef4444; border-radius: 50%; border: 2px solid white; animation: bounce 1s infinite;\"></div>\n        `;\n      button.style.backgroundColor = config.mainColor;\n      button.style.color = 'white';\n      button.style.border = 'none';\n      button.style.borderRadius = '25px';\n      button.style.padding = '12px 20px';\n      button.style.fontSize = '14px';\n      button.style.fontWeight = '600';\n      button.style.cursor = 'pointer';\n      button.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';\n      button.style.transition = 'all 0.3s ease';\n      button.style.fontFamily = 'system-ui, -apple-system, sans-serif';\n      button.style.position = 'relative';\n      button.style.overflow = 'hidden';\n\n      buttonContainer.appendChild(button);\n      document.body.appendChild(buttonContainer);\n\n      // Crear panel de chat\n      const chatPanel = document.createElement('div');\n      chatPanel.id = 'aipi-chat-panel';\n      chatPanel.innerHTML = `\n        <div id=\"aipi-chat-header\" style=\"background-color: ${config.mainColor};\">\n          <div id=\"aipi-chat-header-title\">\n            <div id=\"aipi-chat-avatar\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n              </svg>\n            </div>\n            ${config.title}\n          </div>\n          <button id=\"aipi-chat-close\">×</button>\n        </div>\n        <div id=\"aipi-chat-messages\">\n          <!-- Los mensajes se añadirán aquí -->\n        </div>\n        <div id=\"aipi-chat-input-area\">\n          <input type=\"text\" id=\"aipi-chat-input\" placeholder=\"${t.placeholder}\">\n          <button id=\"aipi-chat-send\" disabled style=\"background-color: ${config.mainColor};\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n              <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n            </svg>\n          </button>\n        </div>\n      `;\n\n      document.body.appendChild(chatPanel);\n\n      console.log('AIPI Widget: Elementos creados correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      throw new Error('Error al crear los elementos del widget: ' + error.message);\n    }\n  }\n\n  // Adjuntar eventos a los elementos\n  function attachEvents() {\n    try {\n      // Evento del botón para abrir el chat\n      const chatButton = document.getElementById('aipi-chat-button');\n      if (chatButton) {\n        chatButton.onclick = openChat;\n        console.log('AIPI Widget: Evento de clic adjuntado al botón de chat');\n      }\n\n      // Evento del botón para cerrar el chat\n      const closeButton = document.getElementById('aipi-chat-close');\n      if (closeButton) {\n        closeButton.onclick = closeChat;\n      }\n\n      // Eventos del campo de entrada\n      const inputField = document.getElementById('aipi-chat-input');\n      const sendButton = document.getElementById('aipi-chat-send');\n\n      if (inputField && sendButton) {\n        // Habilitar/deshabilitar botón de envío según el contenido\n        inputField.oninput = function() {\n          sendButton.disabled = !inputField.value.trim();\n        };\n\n        // Enviar mensaje al presionar Enter\n        inputField.onkeydown = function(e) {\n          if (e.key === 'Enter' && inputField.value.trim()) {\n            sendMessage();\n          }\n        };\n\n        // Enviar mensaje al hacer clic en el botón\n        sendButton.onclick = sendMessage;\n      }\n\n      console.log('AIPI Widget: Todos los eventos adjuntados correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al configurar los eventos del widget: ' + error.message);\n    }\n  }\n\n  // Abrir el chat\n  function openChat() {\n    console.log('AIPI Widget: Abriendo chat...');\n    try {\n      // Ocultar botón\n      const buttonContainer = document.getElementById('aipi-chat-button-container');\n      if (buttonContainer) {\n        buttonContainer.style.display = 'none';\n      }\n\n      // Mostrar panel de chat\n      const chatPanel = document.getElementById('aipi-chat-panel');\n      if (chatPanel) {\n        chatPanel.style.display = 'flex';\n      }\n\n      // Iniciar conversación si es necesario\n      if (!conversationId) {\n        startConversation();\n      }\n\n      // Enfocar campo de entrada\n      setTimeout(function() {\n        const input = document.getElementById('aipi-chat-input');\n        if (input) input.focus();\n      }, 300);\n\n      console.log('AIPI Widget: Chat abierto');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al abrir el chat: ' + error.message);\n    }\n  }\n\n  // Cerrar el chat\n  function closeChat() {\n    console.log('AIPI Widget: Cerrando chat...');\n    try {\n      // Ocultar panel de chat\n      const chatPanel = document.getElementById('aipi-chat-panel');\n      if (chatPanel) {\n        chatPanel.style.display = 'none';\n      }\n\n      // Mostrar botón\n      const buttonContainer = document.getElementById('aipi-chat-button-container');\n      if (buttonContainer) {\n        buttonContainer.style.display = 'block';\n      }\n\n      console.log('AIPI Widget: Chat cerrado');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al cerrar el chat: ' + error.message);\n    }\n  }\n\n  // Iniciar conversación\n  async function startConversation() {\n    console.log('AIPI Widget: Iniciando conversación...');\n    try {\n      // Extraer contenido de la página\n      const pageTitle = document.title;\n\n      // Extraer contenido excluyendo secciones ignoradas\n      let pageContent = \"\";\n      try {\n        // Crear una copia del body para manipular\n        const bodyClone = document.body.cloneNode(true);\n\n        // Eliminar elementos no deseados\n        const elementsToRemove = bodyClone.querySelectorAll(\n          'script, style, link, meta, noscript, iframe, ' + \n          'nav, footer, header, aside'\n        );\n        elementsToRemove.forEach(el => el.remove());\n\n        // Eliminar secciones ignoradas\n        if (config.ignoredSections && config.ignoredSections.length > 0) {\n          config.ignoredSections.forEach(section => {\n            if (section && section.trim()) {\n              // Buscar secciones por encabezados que contienen el texto\n              bodyClone.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {\n                if (heading.textContent.toLowerCase().includes(section.toLowerCase())) {\n                  // Eliminar el encabezado y sus contenidos relacionados\n                  heading.parentNode?.removeChild(heading);\n                }\n              });\n\n              // Buscar contenedores que puedan contener la sección\n              bodyClone.querySelectorAll(`[id*=\"${section}\"], [class*=\"${section}\"], section, div`).forEach(element => {\n                const elementText = element.textContent.toLowerCase();\n                if (elementText.includes(section.toLowerCase())) {\n                  element.parentNode?.removeChild(element);\n                }\n              });\n            }\n          });\n        }\n\n        // Extraer el contenido del cuerpo limpio\n        pageContent = bodyClone.innerText.substring(0, 10000); // Limitado a 10k caracteres\n\n        console.log('AIPI Simple Widget: Contenido de página escaneado con éxito');\n      } catch (error) {\n        console.error('AIPI Simple Widget: Error al escanear contenido', error);\n        // Fallback a la extracción simple\n        pageContent = document.body.innerText.substring(0, 10000);\n      }\n\n      // Crear conversación en el servidor\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/conversation`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          visitorId: visitorId,\n          pageContext: {\n            title: pageTitle,\n            url: window.location.href,\n            content: pageContent\n          }\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error al crear conversación: ${response.status}`);\n      }\n\n      const data = await response.json();\n      conversationId = data.id;\n\n      // Añadir mensaje de saludo\n      addMessage(config.greetingMessage, 'assistant');\n\n      console.log('AIPI Widget: Conversación iniciada con ID', conversationId);\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      addMessage('Lo siento, hubo un problema al iniciar la conversación. Por favor, intenta de nuevo más tarde.', 'assistant');\n    }\n  }\n\n  // Enviar mensaje\n  async function sendMessage() {\n    const inputField = document.getElementById('aipi-chat-input');\n    const message = inputField.value.trim();\n\n    if (!message) return;\n\n    // Limpiar campo de entrada\n    inputField.value = '';\n    document.getElementById('aipi-chat-send').disabled = true;\n\n    // Añadir mensaje del usuario a la interfaz\n    addMessage(message, 'user');\n\n    // Mostrar indicador de escritura\n    showTypingIndicator(true);\n\n    try {\n      // Iniciar conversación si es necesario\n      if (!conversationId) {\n        await startConversation();\n      }\n\n      // Enviar mensaje al servidor\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          conversationId: conversationId,\n          content: message,\n          role: 'user'\n        })\n      });\n\n      // Ocultar indicador de escritura\n      showTypingIndicator(false);\n\n      if (!response.ok) {\n        if (response.status === 500) {\n          addMessage('Lo siento, hay un problema temporal con el servicio. Por favor, intenta de nuevo más tarde.', 'assistant');\n        } else {\n          addMessage('Lo siento, no pude procesar tu mensaje. Por favor, intenta de nuevo.', 'assistant');\n        }\n        throw new Error(`Error al enviar mensaje: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      // Añadir respuesta de la IA\n      if (data.aiMessage && data.aiMessage.content) {\n        addMessage(data.aiMessage.content, 'assistant');\n      } else {\n        addMessage('Recibí tu mensaje, pero no pude generar una respuesta en este momento.', 'assistant');\n      }\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n\n      // Asegurar que el indicador de escritura se oculta\n      showTypingIndicator(false);\n    }\n  }\n\n  // Añadir mensaje a la interfaz\n  function addMessage(content, role) {\n    const messagesContainer = document.getElementById('aipi-chat-messages');\n    if (!messagesContainer) return;\n\n    const messageEl = document.createElement('div');\n    messageEl.className = `message ${role}`;\n    \n    // Aplicar contraste automático para mensajes del asistente\n    if (role === 'assistant') {\n      const bgColor = config.mainColor || '#4f46e5';\n      messageEl.style.backgroundColor = bgColor;\n      messageEl.style.color = getContrastTextColor(bgColor);\n    }\n    \n    messageEl.textContent = content;\n\n    messagesContainer.appendChild(messageEl);\n\n    // Desplazar al fondo\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n\n  // Función para obtener color de texto con contraste adecuado\n  function getContrastTextColor(backgroundColor) {\n    if (!backgroundColor || typeof backgroundColor !== 'string') {\n      return '#1f2937';\n    }\n    \n    let hex = backgroundColor.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    if (hex.length !== 6) {\n      return '#1f2937';\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n    \n    return luminance < 0.6 ? '#ffffff' : '#1f2937';\n  }\n\n  // Mostrar/ocultar indicador de escritura\n  function showTypingIndicator(show) {\n    const messagesContainer = document.getElementById('aipi-chat-messages');\n    if (!messagesContainer) return;\n\n    // Eliminar indicador existente si lo hay\n    const existingIndicator = document.getElementById('typing-indicator');\n    if (existingIndicator) {\n      existingIndicator.remove();\n    }\n\n    if (show) {\n      const indicator = document.createElement('div');\n      indicator.id = 'typing-indicator';\n      indicator.className = 'message assistant';\n      indicator.textContent = 'Escribiendo...';\n\n      messagesContainer.appendChild(indicator);\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n  }\n\n  // Obtener estilos CSS como string\n  function getStylesCSS() {\n    return `\n      /* Estilos para el botón flotante */\n      #aipi-chat-button-container {\n        display: block;\n        z-index: 9998;\n      }\n\n      #aipi-chat-button {\n        width: auto;\n        height: auto;\n        border-radius: 50px;\n        color: white;\n        display: flex;\n        align-items: center;\n        cursor: pointer !important;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n        transition: all 0.3s ease;\n        padding: 12px 20px;\n        border: none;\n        outline: none;\n        max-width: calc(100vw - 32px);\n        overflow: visible;\n      }\n\n      #aipi-chat-button:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\n      }\n\n      #aipi-chat-button svg {\n        margin-right: 8px;\n      }\n\n      #aipi-chat-button span {\n        font-family: Arial, sans-serif;\n        font-size: 14px;\n      }\n\n      /* Estilos para el panel de chat */\n      #aipi-chat-panel {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: white;\n        display: none;\n        flex-direction: column;\n        z-index: 9999;\n      }\n\n      #aipi-chat-header {\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      #aipi-chat-header-title {\n        display: flex;\n        align-items: center;\n        font-weight: bold;\n        font-family: Arial, sans-serif;\n      }\n\n      #aipi-chat-avatar {\n        width: 30px;\n        height: 30px;\n        background-color: white;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 10px;\n      }\n\n      #aipi-chat-avatar svg {\n        width: 20px;\n        height: 20px;\n        color: inherit;\n      }\n\n      #aipi-chat-close {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n      }\n\n      #aipi-chat-messages {\n        flex: 1;\n        padding: 20px;\n        overflow-y: auto;\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n        background-color: #f5f7fb;\n      }\n\n      .message {\n        max-width: 80%;\n        padding: 12px 16px;\n        border-radius: 18px;\n        word-break: break-word;\n        font-family: Arial, sans-serif;\n      }\n\n      .message.assistant {\n        align-self: flex-start;\n        background-color: #e5e7eb;\n        color: #1f2937;\n        border-bottom-left-radius: 4px;\n      }\n\n      .message.user {\n        align-self: flex-end;\n        background-color: #3b82f6;\n        color: white;\n        border-bottom-right-radius: 4px;\n      }\n\n      #aipi-chat-input-area {\n        padding: 15px;\n        display: flex;\n        border-top: 1px solid #e5e7eb;\n      }\n\n      #aipi-chat-input {\n        flex: 1;\n        padding: 12px;\n        border: 1px solid #d1d5db;\n        border-radius: 24px;\n        outline: none;\n        font-size: 14px;\n        font-family: Arial, sans-serif;\n      }\n\n      #aipi-chat-send {\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        color: white;\n        border: none;\n        margin-left: 10px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      #aipi-chat-send svg {\n        width: 18px;\n        height: 18px;\n      }\n\n      #aipi-chat-send:disabled {\n        background-color: #d1d5db !important;\n        cursor: not-allowed;\n      }\n\n      #typing-indicator {\n        font-style: italic;\n      }\n      @keyframes bounce {\n        0%, 20%, 50%, 80%, 100% {\n          transform: translateY(0);\n        }\n        40% {\n          transform: translateY(-5px);\n        }\n        60% {\n          transform: translateY(-3px);\n        }\n      }\n    `;\n  }\n\n  // Calcular posición del botón según la configuración\n  function getPositionStyle(position) {\n    const isMobile = window.innerWidth < 768;\n    const offset = isMobile ? '16px' : '20px';\n    \n    const style = {\n      bottom: 'auto',\n      right: 'auto',\n      top: 'auto',\n      left: 'auto',\n      transform: 'none'\n    };\n\n    switch (position) {\n      case 'bottom-right':\n        style.bottom = offset;\n        style.right = offset;\n        break;\n      case 'bottom-left':\n        style.bottom = offset;\n        style.left = offset;\n        break;\n      case 'bottom-center':\n        style.bottom = offset;\n        style.left = '50%';\n        style.transform = 'translateX(-50%)';\n        break;\n      case 'top-right':\n        style.top = offset;\n        style.right = offset;\n        break;\n      case 'top-left':\n        style.top = offset;\n        style.left = offset;\n        break;\n      default:\n        style.bottom = offset;\n        style.right = offset;\n    }\n\n    return style;\n  }\n})();","size_bytes":24272},"server/db.ts":{"content":"import pg from 'pg';\nconst { Pool } = pg;\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\n// Declarar variables para exportar\nlet pool: Pool | null = null;\nlet db: any = null;\n\n// Verificamos si DATABASE_URL está definido\nif (!process.env.DATABASE_URL) {\n  console.warn(\"⚠️ WARNING: DATABASE_URL no está definido. Algunas funciones pueden no estar disponibles.\");\n  console.warn(\"Para solucionar este problema, asegúrate de provisionar una base de datos en Railway\");\n  console.warn(\"y verificar que DATABASE_URL esté correctamente configurado en las variables de entorno.\");\n  \n  // En lugar de lanzar un error, creamos objetos dummy para permitir que la aplicación inicie\n  // pero las operaciones de base de datos fallarán\n  db = {\n    select: () => {\n      console.error(\"Error: Intentando usar la base de datos sin una conexión válida\");\n      return { from: () => ({ where: () => [] }) };\n    },\n    insert: () => {\n      console.error(\"Error: Intentando usar la base de datos sin una conexión válida\");\n      return { values: () => ({ returning: () => [] }) };\n    },\n    update: () => {\n      console.error(\"Error: Intentando usar la base de datos sin una conexión válida\");\n      return { set: () => ({ where: () => [] }) };\n    },\n    delete: () => {\n      console.error(\"Error: Intentando usar la base de datos sin una conexión válida\");\n      return { where: () => [] };\n    }\n  };\n} else {\n  // Si DATABASE_URL está definido, configuramos la conexión normalmente para Railway PostgreSQL\n  pool = new Pool({ \n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n  });\n  db = drizzle(pool, { schema });\n}\n\nexport { pool, db };\n","size_bytes":1788},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nimport rateLimit from 'express-rate-limit';\n\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.set('trust proxy', 1);\n\n// Configurar CORS para widgets embebidos de AIPPS\napp.use((req, res, next) => {\n  const origin = req.headers.origin;\n  \n  // Para widgets embebidos: permitir CUALQUIER origen con credenciales\n  // Esto es seguro porque usamos API keys para autenticación del widget\n  if (origin) {\n    res.header(\"Access-Control-Allow-Origin\", origin);\n    res.header(\"Access-Control-Allow-Credentials\", \"true\");\n  } else {\n    // Para requests sin origen (misma aplicación, Postman, etc.)\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n  }\n  \n  // Headers necesarios para widgets y autenticación\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, x-api-key, Authorization, Cookie\");\n  \n  // Métodos permitidos\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PATCH, DELETE, OPTIONS, PUT\");\n  \n  // Manejo de preflight requests\n  if (req.method === \"OPTIONS\") {\n    return res.status(204).send();\n  }\n  \n  next();\n});\n\n// Middleware de protección contra ataques (AÑADIR AQUÍ)\n// Rate limiting - máximo 100 requests por 15 minutos por IP\n\n// Rate limiting para producción - más permisivo\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutos\n  max: process.env.NODE_ENV === 'production' ? 1000 : 100, // 1000 en producción, 100 en desarrollo\n  standardHeaders: 'draft-8',\n  legacyHeaders: false,\n  message: { \n    error: 'Demasiadas peticiones. Intenta de nuevo en 15 minutos.' \n  },\n  // Solo aplicar a rutas API específicas\n  skip: (req) => !req.path.startsWith('/api') || req.path === '/api/health'\n});\n\n// Rate limiting para autenticación - más permisivo en producción\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutos\n  max: process.env.NODE_ENV === 'production' ? 50 : 5, // 50 en producción, 5 en desarrollo\n  standardHeaders: 'draft-8',\n  legacyHeaders: false,\n  message: { \n    error: 'Demasiados intentos de login. Intenta de nuevo en 15 minutos.' \n  }\n});\n\n// Middleware de seguridad contra bots\nconst securityMiddleware = (req: Request, res: Response, next: NextFunction) => {\n  const url = req.url.toLowerCase();\n  const userAgent = req.get('User-Agent') || '';\n\n  // Patrones de ataque comunes\n  const maliciousPatterns = [\n    '/wp-admin',\n    '/wp-login.php',\n    '/xmlrpc.php',\n    '/wp-config.php',\n    '/wp-includes',\n    '/wp-content',\n    '/.git/',\n    '/phpmyadmin',\n    '/admin.php',\n    '/administrator',\n    '/.env',\n    '/config',\n    '.php'\n  ];\n\n  // Bots maliciosos\n  const botSignatures = [\n    'masscan',\n    'nmap',\n    'sqlmap',\n    'nikto',\n    'wordpress',\n    'wp_is_mobile',\n    'scanner'\n  ];\n\n  // Bloquear patrones maliciosos\n  if (maliciousPatterns.some(pattern => url.includes(pattern))) {\n    console.log(`🚨 Blocked attack attempt from ${req.ip}: ${req.url}`);\n    return res.status(404).end();\n  }\n\n  // Bloquear bots conocidos\n  if (botSignatures.some(sig => userAgent.toLowerCase().includes(sig))) {\n    console.log(`🚨 Blocked bot from ${req.ip}: ${userAgent}`);\n    return res.status(403).end();\n  }\n\n  next();\n};\n\n// Aplicar middlewares de seguridad\napp.use(limiter);\napp.use('/api/auth', authLimiter);\napp.use(securityMiddleware);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Obtener el equivalente a __dirname en ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Servir archivos estáticos desde la carpeta public/static con CORS\nconst staticPath = path.join(__dirname, '../public/static');\nconsole.log(`Sirviendo archivos estáticos desde: ${staticPath}`);\n\napp.use('/static', (req, res, next) => {\n  const origin = req.headers.origin;\n  \n  // Permitir widgets embebidos desde cualquier dominio\n  if (origin) {\n    res.header(\"Access-Control-Allow-Origin\", origin);\n    res.header(\"Access-Control-Allow-Credentials\", \"true\");\n  } else {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n  }\n  \n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n\n  // Establecer tipo de contenido correcto para archivos JS\n  if (req.path.endsWith('.js')) {\n    res.type('application/javascript');\n    // No cache para archivos JS durante desarrollo\n    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.set('Pragma', 'no-cache');\n    res.set('Expires', '0');\n  }\n\n  next();\n}, express.static(staticPath, {\n  // Configuraciones adicionales para servir archivos estáticos\n  setHeaders: (res, path, stat) => {\n    // Asegurar que los archivos JS se sirvan con el tipo correcto\n    if (path.endsWith('.js')) {\n      res.set('Content-Type', 'application/javascript');\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n    } else {\n      // Headers de cache para otros archivos\n      res.set('Cache-Control', 'public, max-age=3600');\n    }\n  }\n}));\n\n// Servir archivo de prueba del widget\napp.get('/test-widget.html', (req, res) => {\n  res.sendFile(path.join(__dirname, '../public/test-widget.html'));\n});\n\n// Servir archivo de prueba de integración externa\napp.get('/test-external-integration.html', (req, res) => {\n  res.sendFile(path.join(__dirname, '../public/test-external-integration.html'));\n});\n\n// Servir página de demostración completa\napp.get('/demo-integration.html', (req, res) => {\n  res.sendFile(path.join(__dirname, '../public/demo-integration.html'));\n});\n\n// Servir página de debug de contraste\napp.get('/debug-contrast.html', (req, res) => {\n  res.sendFile(path.join(__dirname, '../public/debug-contrast.html'));\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    console.error('Error en la aplicación:', err);\n    res.status(status).json({ message });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  // En Replit, siempre usamos la configuración de desarrollo\n  // para evitar problemas de acceso a la aplicación\n  const isReplit = process.env.REPL_ID !== undefined;\n  const isRailway = process.env.RAILWAY_ENVIRONMENT_NAME !== undefined;\n\n  if (app.get(\"env\") === \"development\" || isReplit) {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Usar el puerto proporcionado por Railway o por defecto 5000\n  // this serves both the API and the client.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`Server running at http://0.0.0.0:${port}`);\n  });\n})();\n","size_bytes":7946},"server/pg-storage.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport { IStorage } from './storage';\nimport { \n  User, InsertUser, Integration, InsertIntegration, \n  Conversation, InsertConversation, Message, InsertMessage,\n  Automation, InsertAutomation, Settings, InsertSettings,\n  SiteContent, InsertSiteContent, ConversationAnalytics, IntegrationPerformance,\n  TopProduct, TopTopic, Subscription, InsertSubscription, DiscountCode, InsertDiscountCode,\n  PricingPlan, InsertPricingPlan, Form, InsertForm, FormTemplate, InsertFormTemplate,\n  FormResponse, InsertFormResponse, Appointment, InsertAppointment, CalendarToken, InsertCalendarToken,\n  users, integrations, conversations, messages, automations, settings, sitesContent, \n  subscriptions, discountCodes, pricingPlans, forms, formTemplates, formResponses, appointments,\n  calendarTokens\n} from \"@shared/schema\";\nimport { eq, and, inArray } from 'drizzle-orm';\n\n// Initialize PostgreSQL client\nconst connectionString = process.env.DATABASE_URL;\nconst client = postgres(connectionString as string);\nconst db = drizzle(client);\n\nexport class PgStorage implements IStorage {\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser & { apiKey: string }): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  // Integration methods\n  async getIntegrations(userId: number): Promise<Integration[]> {\n    return await db.select().from(integrations).where(eq(integrations.userId, userId));\n  }\n\n  async getIntegration(id: number): Promise<Integration | undefined> {\n    const result = await db.select().from(integrations).where(eq(integrations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getIntegrationByApiKey(apiKey: string): Promise<Integration | undefined> {\n    const result = await db.select().from(integrations).where(eq(integrations.apiKey, apiKey)).limit(1);\n    return result[0];\n  }\n\n  async createIntegration(integration: InsertIntegration & { apiKey: string }): Promise<Integration> {\n    const result = await db.insert(integrations).values(integration).returning();\n    return result[0];\n  }\n\n  async updateIntegration(id: number, data: Partial<Integration>): Promise<Integration> {\n    const result = await db.update(integrations).set(data).where(eq(integrations.id, id)).returning();\n    return result[0];\n  }\n\n  async incrementVisitorCount(id: number): Promise<void> {\n    const integration = await this.getIntegration(id);\n    if (integration && integration.visitorCount !== null) {\n      await db.update(integrations)\n        .set({ visitorCount: (integration.visitorCount || 0) + 1 })\n        .where(eq(integrations.id, id));\n    }\n  }\n  \n  async deleteIntegration(id: number): Promise<void> {\n    // Verificar si la integración existe\n    const integration = await this.getIntegration(id);\n    if (!integration) {\n      throw new Error(`Integration with id ${id} not found`);\n    }\n    \n    // Obtener conversaciones asociadas a esta integración\n    const integrationConversations = await db.select()\n      .from(conversations)\n      .where(eq(conversations.integrationId, id));\n    \n    const conversationIds = integrationConversations.map(conv => conv.id);\n    \n    // Eliminar mensajes asociados a estas conversaciones\n    if (conversationIds.length > 0) {\n      await db.delete(messages)\n        .where(inArray(messages.conversationId, conversationIds));\n    }\n    \n    // Eliminar las conversaciones\n    await db.delete(conversations)\n      .where(eq(conversations.integrationId, id));\n    \n    // Eliminar contenido de sitio asociado\n    await db.delete(sitesContent)\n      .where(eq(sitesContent.integrationId, id));\n    \n    // Finalmente, eliminar la integración\n    await db.delete(integrations)\n      .where(eq(integrations.id, id));\n  }\n\n  // Conversation methods\n  async getConversations(integrationId: number): Promise<Conversation[]> {\n    return await db.select().from(conversations).where(eq(conversations.integrationId, integrationId));\n  }\n\n  async getConversation(id: number): Promise<Conversation | undefined> {\n    const result = await db.select().from(conversations).where(eq(conversations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const result = await db.insert(conversations).values(conversation).returning();\n    return result[0];\n  }\n\n  async updateConversation(id: number, data: Partial<Conversation>): Promise<Conversation> {\n    const now = new Date();\n    const result = await db.update(conversations)\n      .set({ ...data, updatedAt: now })\n      .where(eq(conversations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteConversation(id: number): Promise<void> {\n    // Eliminar primero todos los mensajes de la conversación\n    await db.delete(messages)\n      .where(eq(messages.conversationId, id));\n    \n    // Luego eliminar la conversación\n    await db.delete(conversations)\n      .where(eq(conversations.id, id));\n  }\n\n  // Message methods\n  async getMessages(conversationId: number): Promise<Message[]> {\n    return await db.select().from(messages).where(eq(messages.conversationId, conversationId));\n  }\n\n  async getConversationMessages(conversationId: number): Promise<Message[]> {\n    return await db.select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.timestamp);\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const result = await db.insert(messages).values(message).returning();\n    return result[0];\n  }\n\n  // Automation methods\n  async getAutomations(userId: number): Promise<Automation[]> {\n    return await db.select().from(automations).where(eq(automations.userId, userId));\n  }\n\n  async getAutomation(id: number): Promise<Automation | undefined> {\n    const result = await db.select().from(automations).where(eq(automations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createAutomation(automation: InsertAutomation): Promise<Automation> {\n    const result = await db.insert(automations).values(automation).returning();\n    return result[0];\n  }\n\n  async updateAutomation(id: number, data: Partial<Automation>): Promise<Automation> {\n    const now = new Date();\n    const result = await db.update(automations)\n      .set({ ...data, lastModified: now })\n      .where(eq(automations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Settings methods\n  async getSettings(userId: number): Promise<Settings> {\n    const result = await db.select().from(settings).where(eq(settings.userId, userId)).limit(1);\n    if (result[0]) {\n      return result[0];\n    }\n    // If settings don't exist, create default settings\n    return this.createSettings({ userId });\n  }\n\n  async updateSettings(userId: number, data: Partial<Settings>): Promise<Settings> {\n    // First, ensure settings exist\n    await this.getSettings(userId);\n    \n    // Then update\n    const result = await db.update(settings)\n      .set(data)\n      .where(eq(settings.userId, userId))\n      .returning();\n    return result[0];\n  }\n\n  async createSettings(settingsData: { userId: number }): Promise<Settings> {\n    // Create with defaults from schema\n    const result = await db.insert(settings)\n      .values(settingsData)\n      .returning();\n    return result[0];\n  }\n\n  // Site content methods\n  async getSiteContent(integrationId: number): Promise<SiteContent[]> {\n    return await db.select()\n      .from(sitesContent)\n      .where(eq(sitesContent.integrationId, integrationId));\n  }\n\n  async getSiteContentByUrl(integrationId: number, url: string): Promise<SiteContent | undefined> {\n    const result = await db.select()\n      .from(sitesContent)\n      .where(\n        and(\n          eq(sitesContent.integrationId, integrationId),\n          eq(sitesContent.url, url)\n        )\n      )\n      .limit(1);\n    return result[0];\n  }\n\n  async createSiteContent(content: InsertSiteContent): Promise<SiteContent> {\n    const result = await db.insert(sitesContent)\n      .values(content)\n      .returning();\n    return result[0];\n  }\n\n  async updateSiteContent(id: number, data: Partial<SiteContent>): Promise<SiteContent> {\n    const now = new Date();\n    const result = await db.update(sitesContent)\n      .set({ ...data, lastUpdated: now })\n      .where(eq(sitesContent.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteSiteContent(id: number): Promise<void> {\n    await db.delete(sitesContent)\n      .where(eq(sitesContent.id, id));\n  }\n\n  // Dashboard methods\n  async getDashboardStats(userId: number): Promise<{\n    totalConversations: number;\n    resolutionRate: number;\n    averageResponseTime: number;\n  }> {\n    // Get all integrations for user\n    const userIntegrations = await this.getIntegrations(userId);\n    const integrationIds = userIntegrations.map(integration => integration.id);\n    \n    // Return defaults if no integrations\n    if (integrationIds.length === 0) {\n      return {\n        totalConversations: 0,\n        resolutionRate: 0,\n        averageResponseTime: 0\n      };\n    }\n    \n    // Count all conversations\n    const allConversations = await db.select()\n      .from(conversations)\n      .where(inArray(conversations.integrationId, integrationIds));\n    \n    const totalConversations = allConversations.length;\n    \n    // Count resolved conversations\n    const resolvedConversations = allConversations.filter(\n      conversation => conversation.resolved === true\n    ).length;\n    \n    // Calculate resolution rate\n    const resolutionRate = totalConversations > 0 \n      ? (resolvedConversations / totalConversations) * 100 \n      : 0;\n    \n    // Calculate average duration (response time)\n    const totalDuration = allConversations.reduce(\n      (sum, conversation) => sum + (conversation.duration || 0), \n      0\n    );\n    \n    const averageResponseTime = totalConversations > 0 \n      ? totalDuration / totalConversations \n      : 0;\n    \n    return {\n      totalConversations,\n      resolutionRate,\n      averageResponseTime\n    };\n  }\n  \n  // Funciones para análisis de conversaciones\n  async getConversationAnalytics(userId: number): Promise<ConversationAnalytics> {\n    // Obtener las integraciones del usuario\n    const userIntegrations = await this.getIntegrations(userId);\n    const integrationIds = userIntegrations.map(integration => integration.id);\n    \n    // Si no hay integraciones, devolver datos vacíos\n    if (integrationIds.length === 0) {\n      return {\n        topProducts: [],\n        topTopics: [],\n        conversationsByDay: [],\n        keywordFrequency: []\n      };\n    }\n    \n    // Obtener todas las conversaciones para las integraciones del usuario\n    const allConversations = await db.select()\n      .from(conversations)\n      .where(inArray(conversations.integrationId, integrationIds));\n    \n    // Obtener todos los mensajes de estas conversaciones\n    const conversationIds = allConversations.map(conv => conv.id);\n    const allMessages = conversationIds.length > 0 \n      ? await db.select()\n          .from(messages)\n          .where(inArray(messages.conversationId, conversationIds))\n      : [];\n    \n    // Filtrar mensajes de usuarios (no del asistente)\n    const userMessages = allMessages.filter(msg => msg.role === 'user');\n    \n    // Generar datos de tendencia de conversaciones\n    const conversationsByDay = this.getConversationTrend(allConversations);\n    \n    // Extraer palabras clave y su frecuencia\n    const keywordFrequency = this.extractKeywords(userMessages);\n    \n    // Identificar productos/servicios mencionados (simulamos extracción de entidades)\n    // En una implementación real, utilizaríamos NLP para extraer entidades\n    const topProducts = this.extractTopProducts(userMessages);\n    \n    // Analizar temas y sentimiento (simulamos análisis de temas)\n    // En una implementación real, utilizaríamos NLP para análisis de temas\n    const topTopics = this.extractTopTopics(userMessages);\n    \n    return {\n      topProducts,\n      topTopics,\n      conversationsByDay,\n      keywordFrequency\n    };\n  }\n  \n  // Función para obtener el rendimiento de integraciones\n  async getIntegrationPerformance(userId: number): Promise<IntegrationPerformance[]> {\n    // Obtener las integraciones del usuario\n    const userIntegrations = await this.getIntegrations(userId);\n    \n    if (userIntegrations.length === 0) return [];\n    \n    // Crear array para almacenar el rendimiento de cada integración\n    const performanceData: IntegrationPerformance[] = [];\n    \n    // Analizar cada integración\n    for (const integration of userIntegrations) {\n      // Obtener conversaciones para esta integración\n      const integrationConversations = await this.getConversations(integration.id);\n      \n      if (integrationConversations.length === 0) {\n        // Si no hay conversaciones, añadir datos con valores predeterminados\n        performanceData.push({\n          integrationId: integration.id,\n          integrationName: integration.name,\n          conversationCount: 0,\n          responseTime: 0,\n          resolutionRate: 0,\n          userSatisfaction: 0\n        });\n        continue;\n      }\n      \n      // Contar conversaciones resueltas\n      const resolvedCount = integrationConversations.filter(conv => conv.resolved).length;\n      \n      // Calcular tasa de resolución\n      const resolutionRate = (resolvedCount / integrationConversations.length) * 100;\n      \n      // Calcular tiempo de respuesta promedio\n      const totalDuration = integrationConversations.reduce(\n        (sum, conv) => sum + (conv.duration || 0), \n        0\n      );\n      const responseTime = totalDuration / integrationConversations.length;\n      \n      // Calcular satisfacción del usuario (simulado)\n      // En una implementación real, esto podría basarse en encuestas o análisis de sentimiento\n      // Para esta simulación, generamos un valor entre 65 y 95\n      const userSatisfaction = Math.floor(Math.random() * 30) + 65;\n      \n      performanceData.push({\n        integrationId: integration.id,\n        integrationName: integration.name,\n        conversationCount: integrationConversations.length,\n        responseTime,\n        resolutionRate,\n        userSatisfaction\n      });\n    }\n    \n    return performanceData;\n  }\n  \n  // Funciones auxiliares para el análisis de datos\n  \n  public getConversationTrend(convs: Conversation[]): { date: string, count: number }[] {\n    // Crear un mapa para contar conversaciones por día\n    const dateCountMap = new Map<string, number>();\n    \n    // Inicializar los últimos 30 días con cero conversaciones\n    const today = new Date();\n    for (let i = 0; i < 30; i++) {\n      const date = new Date();\n      date.setDate(today.getDate() - 29 + i);\n      const dateStr = date.toISOString().split('T')[0]; // formato YYYY-MM-DD\n      dateCountMap.set(dateStr, 0);\n    }\n    \n    // Contar conversaciones por día\n    convs.forEach(conv => {\n      if (conv.createdAt) {\n        const dateStr = new Date(conv.createdAt).toISOString().split('T')[0];\n        if (dateCountMap.has(dateStr)) {\n          dateCountMap.set(dateStr, (dateCountMap.get(dateStr) || 0) + 1);\n        }\n      }\n    });\n    \n    // Convertir a array y ordenar por fecha\n    return Array.from(dateCountMap.entries())\n      .map(([date, count]) => ({ date, count }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n  }\n  \n  public extractKeywords(messages: Message[]): { keyword: string, frequency: number }[] {\n    // Extraer texto de todos los mensajes\n    const allText = messages.map(msg => msg.content).join(' ').toLowerCase();\n    \n    // Lista de palabras de parada en español\n    const stopWords = new Set([\n      'a', 'al', 'algo', 'algunas', 'algunos', 'ante', 'antes', 'como', 'con', 'contra',\n      'cual', 'cuando', 'de', 'del', 'desde', 'donde', 'durante', 'e', 'el', 'ella',\n      'ellas', 'ellos', 'en', 'entre', 'era', 'erais', 'eran', 'eras', 'eres', 'es',\n      'esa', 'esas', 'ese', 'eso', 'esos', 'esta', 'estaba', 'estaban', 'estado',\n      'estais', 'estamos', 'estan', 'estar', 'estas', 'este', 'esto', 'estos', 'estoy',\n      'etc', 'fue', 'fueron', 'fui', 'fuimos', 'han', 'has', 'hay', 'he', 'hemos',\n      'hube', 'hubo', 'la', 'las', 'le', 'les', 'lo', 'los', 'me', 'mi', 'mia',\n      'mias', 'mio', 'mios', 'mis', 'mu', 'muy', 'nada', 'ni', 'no', 'nos', 'nosotras',\n      'nosotros', 'nuestra', 'nuestras', 'nuestro', 'nuestros', 'o', 'os', 'otra',\n      'otras', 'otro', 'otros', 'para', 'pero', 'por', 'porque', 'que', 'quien',\n      'quienes', 'qué', 'se', 'sea', 'seais', 'seamos', 'sean', 'seas', 'ser',\n      'sereis', 'seremos', 'seria', 'seriais', 'seriamos', 'serian', 'serias', 'será',\n      'seran', 'seras', 'seré', 'seréis', 'seríamos', 'si', 'sido', 'siendo', 'sin',\n      'sobre', 'sois', 'somos', 'son', 'soy', 'su', 'sus', 'suya', 'suyas', 'suyo',\n      'suyos', 'sí', 'también', 'tanto', 'te', 'teneis', 'tenemos', 'tener', 'tengo',\n      'ti', 'tiene', 'tienen', 'tienes', 'todo', 'todos', 'tu', 'tus', 'tuve', 'tuvimos',\n      'tuviste', 'tuvisteis', 'tuvo', 'tuvieron', 'tuya', 'tuyas', 'tuyo', 'tuyos',\n      'tú', 'un', 'una', 'uno', 'unos', 'vosotras', 'vosotros', 'vuestra', 'vuestras',\n      'vuestro', 'vuestros', 'y', 'ya', 'yo'\n    ]);\n    \n    // Dividir el texto en palabras\n    const words = allText.split(/\\s+/)\n      .map(word => word.replace(/[.,;!?()]/g, ''))\n      .filter(word => word.length > 3 && !stopWords.has(word));\n    \n    // Contar frecuencia de cada palabra\n    const wordCount = new Map<string, number>();\n    words.forEach(word => {\n      wordCount.set(word, (wordCount.get(word) || 0) + 1);\n    });\n    \n    // Convertir a array, ordenar por frecuencia y tomar las 20 más frecuentes\n    return Array.from(wordCount.entries())\n      .map(([keyword, frequency]) => ({ keyword, frequency }))\n      .sort((a, b) => b.frequency - a.frequency)\n      .slice(0, 20);\n  }\n  \n  public extractTopProducts(messages: Message[]): TopProduct[] {\n    // Extraer productos/servicios mencionados en los mensajes reales\n    const productMentions = new Map<string, number>();\n    \n    // Lista de productos/servicios que podrían mencionarse\n    const productKeywords = {\n      \"Asistencia Técnica\": [\"ayuda\", \"soporte\", \"problema\", \"error\", \"asistencia\", \"técnica\"],\n      \"Plan Premium\": [\"premium\", \"plan\", \"suscripción\", \"upgrade\", \"mejorar\"],\n      \"Facturación\": [\"factura\", \"pago\", \"cobro\", \"precio\", \"costo\", \"billing\"],\n      \"Configuración\": [\"configurar\", \"setup\", \"instalar\", \"configuración\"],\n      \"Integración\": [\"integrar\", \"conectar\", \"api\", \"webhook\", \"embed\"],\n      \"Documentación\": [\"documentación\", \"guía\", \"manual\", \"tutorial\", \"ayuda\"],\n      \"Personalización\": [\"personalizar\", \"customizar\", \"diseño\", \"color\", \"tema\"]\n    };\n    \n    // Analizar cada mensaje\n    messages.forEach(message => {\n      const content = message.content.toLowerCase();\n      \n      Object.entries(productKeywords).forEach(([product, keywords]) => {\n        const mentions = keywords.filter(keyword => content.includes(keyword)).length;\n        if (mentions > 0) {\n          productMentions.set(product, (productMentions.get(product) || 0) + mentions);\n        }\n      });\n    });\n    \n    // Si no hay menciones, retornar array vacío\n    if (productMentions.size === 0) {\n      return [];\n    }\n    \n    // Convertir a array y calcular porcentajes\n    const totalMentions = Array.from(productMentions.values()).reduce((sum, count) => sum + count, 0);\n    \n    return Array.from(productMentions.entries())\n      .map(([name, count]) => ({\n        name,\n        count,\n        percentage: Math.round((count / totalMentions) * 100)\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5); // Top 5 productos\n  }\n  \n  public extractTopTopics(messages: Message[]): TopTopic[] {\n    // Extraer temas reales de los mensajes\n    const topicMentions = new Map<string, { count: number, sentimentSum: number, sentimentCount: number }>();\n    \n    // Palabras clave para diferentes temas\n    const topicKeywords = {\n      \"Estudios Bíblicos\": [\"biblia\", \"estudio\", \"estudiar\", \"versículo\", \"palabra\", \"escritura\", \"libro\"],\n      \"Oraciones y Peticiones\": [\"oración\", \"orar\", \"petición\", \"bendición\", \"intercesión\", \"ruego\"],\n      \"Consultas Espirituales\": [\"espiritual\", \"fe\", \"dios\", \"jesús\", \"cristo\", \"señor\", \"espíritu\"],\n      \"Enseñanzas\": [\"enseñanza\", \"predicación\", \"sermón\", \"mensaje\", \"doctrina\", \"verdad\"],\n      \"Consejos Pastorales\": [\"consejo\", \"pastoral\", \"ayuda\", \"guía\", \"dirección\", \"sabiduría\"],\n      \"Preguntas Generales\": [\"pregunta\", \"duda\", \"consulta\", \"información\", \"explicar\", \"entender\"]\n    };\n    \n    // Palabras que indican sentimiento positivo/negativo\n    const positiveWords = [\"bien\", \"bueno\", \"excelente\", \"gracias\", \"bendición\", \"alegría\", \"paz\", \"amor\"];\n    const negativeWords = [\"problema\", \"dificultad\", \"triste\", \"preocupado\", \"dolor\", \"conflicto\", \"crisis\"];\n    \n    // Analizar cada mensaje\n    messages.forEach(message => {\n      const content = message.content.toLowerCase();\n      \n      // Calcular sentimiento básico del mensaje\n      const positiveCount = positiveWords.filter(word => content.includes(word)).length;\n      const negativeCount = negativeWords.filter(word => content.includes(word)).length;\n      let sentiment = 50; // Neutral\n      \n      if (positiveCount > negativeCount) {\n        sentiment = 70 + (positiveCount * 5);\n      } else if (negativeCount > positiveCount) {\n        sentiment = 30 - (negativeCount * 5);\n      }\n      \n      sentiment = Math.max(0, Math.min(100, sentiment)); // Clamp entre 0-100\n      \n      // Buscar temas en el mensaje\n      Object.entries(topicKeywords).forEach(([topic, keywords]) => {\n        const mentions = keywords.filter(keyword => content.includes(keyword)).length;\n        if (mentions > 0) {\n          const current = topicMentions.get(topic) || { count: 0, sentimentSum: 0, sentimentCount: 0 };\n          topicMentions.set(topic, {\n            count: current.count + mentions,\n            sentimentSum: current.sentimentSum + sentiment,\n            sentimentCount: current.sentimentCount + 1\n          });\n        }\n      });\n    });\n    \n    // Si no hay menciones, retornar array vacío\n    if (topicMentions.size === 0) {\n      return [];\n    }\n    \n    // Convertir a array y calcular sentimiento promedio\n    return Array.from(topicMentions.entries())\n      .map(([topic, data]) => ({\n        topic,\n        frequency: data.count,\n        sentiment: Math.round(data.sentimentSum / data.sentimentCount)\n      }))\n      .sort((a, b) => b.frequency - a.frequency)\n      .slice(0, 5); // Top 5 temas\n  }\n  \n  private distributeRandomly(total: number, parts: number): number[] {\n    const result: number[] = [];\n    let remaining = total;\n    \n    // Distribuir la mayor parte aleatoriamente\n    for (let i = 0; i < parts - 1; i++) {\n      // Asegurar que cada parte reciba al menos 1 y no más del 60% del restante\n      const max = Math.floor(remaining * 0.6);\n      const min = 1;\n      const value = Math.floor(Math.random() * (max - min + 1)) + min;\n      result.push(value);\n      remaining -= value;\n    }\n    \n    // Asignar el restante a la última parte\n    result.push(Math.max(1, remaining));\n    \n    return result;\n  }\n\n  // Subscription methods\n  async getUserSubscriptions(userId: number): Promise<Subscription[]> {\n    return await db.select()\n      .from(subscriptions)\n      .where(eq(subscriptions.userId, userId));\n  }\n\n  async getSubscription(id: number): Promise<Subscription | undefined> {\n    const result = await db.select()\n      .from(subscriptions)\n      .where(eq(subscriptions.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createSubscription(subscription: InsertSubscription): Promise<Subscription> {\n    const result = await db.insert(subscriptions)\n      .values(subscription)\n      .returning();\n    return result[0];\n  }\n\n  async updateSubscription(id: number, data: Partial<Subscription>): Promise<Subscription> {\n    const now = new Date();\n    const result = await db.update(subscriptions)\n      .set({ ...data, updatedAt: now })\n      .where(eq(subscriptions.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async incrementSubscriptionUsage(id: number): Promise<void> {\n    const subscription = await this.getSubscription(id);\n    if (subscription) {\n      await db.update(subscriptions)\n        .set({ interactionsUsed: (subscription.interactionsUsed + 1) })\n        .where(eq(subscriptions.id, id));\n    }\n  }\n\n  async getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined> {\n    const result = await db.select()\n      .from(users)\n      .where(eq(users.stripeCustomerId, stripeCustomerId))\n      .limit(1);\n    return result[0];\n  }\n\n  async updateUserStripeInfo(userId: number, data: { stripeCustomerId: string, stripeSubscriptionId: string }): Promise<User> {\n    const result = await db.update(users)\n      .set(data)\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n  \n  // Métodos para códigos de descuento\n  async getDiscountCodes(): Promise<DiscountCode[]> {\n    return await db.select().from(discountCodes);\n  }\n\n  async getActiveDiscountCodes(): Promise<DiscountCode[]> {\n    return await db.select()\n      .from(discountCodes)\n      .where(eq(discountCodes.isActive, true));\n  }\n\n  async getDiscountCode(id: number): Promise<DiscountCode | undefined> {\n    const result = await db.select()\n      .from(discountCodes)\n      .where(eq(discountCodes.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async getDiscountCodeByCode(code: string): Promise<DiscountCode | undefined> {\n    const result = await db.select()\n      .from(discountCodes)\n      .where(eq(discountCodes.code, code))\n      .limit(1);\n    return result[0];\n  }\n\n  async createDiscountCode(data: InsertDiscountCode): Promise<DiscountCode> {\n    const result = await db.insert(discountCodes)\n      .values(data)\n      .returning();\n    return result[0];\n  }\n\n  async updateDiscountCode(id: number, data: Partial<DiscountCode>): Promise<DiscountCode> {\n    const result = await db.update(discountCodes)\n      .set(data)\n      .where(eq(discountCodes.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async incrementDiscountCodeUsage(id: number): Promise<void> {\n    const discountCode = await this.getDiscountCode(id);\n    if (discountCode) {\n      await db.update(discountCodes)\n        .set({ usageCount: (discountCode.usageCount + 1) })\n        .where(eq(discountCodes.id, id));\n    }\n  }\n\n  async deleteDiscountCode(id: number): Promise<void> {\n    await db.delete(discountCodes)\n      .where(eq(discountCodes.id, id));\n  }\n\n  // Generar un código de descuento aleatorio\n  generateDiscountCode(prefix: string = 'AIPPS'): string {\n    const randomPart = Math.random().toString(36).substring(2, 8).toUpperCase();\n    return `${prefix}-${randomPart}`;\n  }\n  \n  // Pricing Plan methods\n  async getPricingPlans(): Promise<PricingPlan[]> {\n    return await db.select().from(pricingPlans);\n  }\n\n  async getAvailablePricingPlans(): Promise<PricingPlan[]> {\n    return await db.select()\n      .from(pricingPlans)\n      .where(eq(pricingPlans.available, true));\n  }\n\n  async getPricingPlan(id: number): Promise<PricingPlan | undefined> {\n    const result = await db.select()\n      .from(pricingPlans)\n      .where(eq(pricingPlans.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async getPricingPlanByPlanId(planId: string): Promise<PricingPlan | undefined> {\n    const result = await db.select()\n      .from(pricingPlans)\n      .where(eq(pricingPlans.planId, planId))\n      .limit(1);\n    return result[0];\n  }\n\n  async createPricingPlan(data: InsertPricingPlan): Promise<PricingPlan> {\n    const result = await db.insert(pricingPlans)\n      .values(data)\n      .returning();\n    return result[0];\n  }\n\n  async updatePricingPlan(id: number, data: Partial<PricingPlan>): Promise<PricingPlan> {\n    const now = new Date();\n    const result = await db.update(pricingPlans)\n      .set({ ...data, updatedAt: now })\n      .where(eq(pricingPlans.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deletePricingPlan(id: number): Promise<void> {\n    await db.delete(pricingPlans)\n      .where(eq(pricingPlans.id, id));\n  }\n\n  //========== Formularios (Forms) ==========//\n  \n  // Form methods\n  async getForms(userId: number): Promise<Form[]> {\n    return await db.select().from(forms).where(eq(forms.userId, userId));\n  }\n\n  async getForm(id: number): Promise<Form | undefined> {\n    const result = await db.select().from(forms).where(eq(forms.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getFormBySlug(slug: string): Promise<Form | undefined> {\n    const result = await db.select().from(forms).where(eq(forms.slug, slug)).limit(1);\n    return result[0];\n  }\n\n  async createForm(formData: InsertForm): Promise<Form> {\n    const result = await db.insert(forms).values(formData).returning();\n    return result[0];\n  }\n\n  async updateForm(id: number, data: Partial<Form>): Promise<Form> {\n    const now = new Date();\n    \n    // Filtrar campos de fecha que pueden causar problemas de conversión\n    const { createdAt, updatedAt, ...updateData } = data;\n    \n    const result = await db.update(forms)\n      .set({ ...updateData, updatedAt: now })\n      .where(eq(forms.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async incrementFormResponseCount(id: number | null | undefined): Promise<void> {\n    if (!id) return;\n    \n    const form = await this.getForm(id);\n    if (form) {\n      await db.update(forms)\n        .set({ responseCount: (form.responseCount || 0) + 1 })\n        .where(eq(forms.id, id));\n    }\n  }\n\n  async deleteForm(id: number): Promise<void> {\n    // Eliminar todas las respuestas asociadas al formulario\n    await db.delete(formResponses)\n      .where(eq(formResponses.formId, id));\n      \n    // Eliminar el formulario\n    await db.delete(forms)\n      .where(eq(forms.id, id));\n  }\n\n  // Form Template methods\n  async getFormTemplates(): Promise<FormTemplate[]> {\n    return await db.select().from(formTemplates);\n  }\n\n  async getDefaultFormTemplates(): Promise<FormTemplate[]> {\n    return await db.select().from(formTemplates).where(eq(formTemplates.isDefault, true));\n  }\n\n  async getTemplatesByType(type: string): Promise<FormTemplate[]> {\n    return await db.select().from(formTemplates).where(eq(formTemplates.type, type));\n  }\n\n  async getFormTemplate(id: number): Promise<FormTemplate | undefined> {\n    const result = await db.select().from(formTemplates).where(eq(formTemplates.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createFormTemplate(templateData: InsertFormTemplate): Promise<FormTemplate> {\n    const result = await db.insert(formTemplates).values(templateData).returning();\n    return result[0];\n  }\n\n  async updateFormTemplate(id: number, data: Partial<FormTemplate>): Promise<FormTemplate> {\n    const now = new Date();\n    const result = await db.update(formTemplates)\n      .set({ ...data, updatedAt: now })\n      .where(eq(formTemplates.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteFormTemplate(id: number): Promise<void> {\n    await db.delete(formTemplates)\n      .where(eq(formTemplates.id, id));\n  }\n\n  // Form Response methods\n  async getFormResponses(formId: number): Promise<FormResponse[]> {\n    return await db.select()\n      .from(formResponses)\n      .where(eq(formResponses.formId, formId))\n      .orderBy(formResponses.submittedAt);\n  }\n\n  async getFormResponse(id: number): Promise<FormResponse | undefined> {\n    const result = await db.select().from(formResponses).where(eq(formResponses.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createFormResponse(responseData: InsertFormResponse): Promise<FormResponse> {\n    const result = await db.insert(formResponses).values(responseData).returning();\n    \n    // Incrementar el contador de respuestas del formulario\n    if (responseData.formId) {\n      await this.incrementFormResponseCount(responseData.formId);\n    }\n    \n    return result[0];\n  }\n\n  async deleteFormResponse(id: number): Promise<void> {\n    await db.delete(formResponses)\n      .where(eq(formResponses.id, id));\n  }\n\n  async deleteFormResponses(formId: number): Promise<void> {\n    await db.delete(formResponses)\n      .where(eq(formResponses.formId, formId));\n  }\n\n  // Métodos para agendamiento de citas\n  async getAppointments(integrationId: number): Promise<Appointment[]> {\n    return await db.select()\n      .from(appointments)\n      .where(eq(appointments.integrationId, integrationId))\n      .orderBy(appointments.appointmentDate, appointments.appointmentTime);\n  }\n\n  async getAppointmentsByConversation(conversationId: number): Promise<Appointment[]> {\n    return await db.select()\n      .from(appointments)\n      .where(eq(appointments.conversationId, conversationId))\n      .orderBy(appointments.appointmentDate, appointments.appointmentTime);\n  }\n\n  async getAppointment(id: number): Promise<Appointment | undefined> {\n    const result = await db.select()\n      .from(appointments)\n      .where(eq(appointments.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createAppointment(appointmentData: InsertAppointment): Promise<Appointment> {\n    const result = await db.insert(appointments)\n      .values(appointmentData)\n      .returning();\n    return result[0];\n  }\n\n  async updateAppointment(id: number, data: Partial<Appointment>): Promise<Appointment> {\n    const now = new Date();\n    const result = await db.update(appointments)\n      .set({ ...data, updatedAt: now })\n      .where(eq(appointments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateAppointmentStatus(id: number, status: string): Promise<Appointment> {\n    return this.updateAppointment(id, { status });\n  }\n\n  async updateCalendarEventId(id: number, calendarEventId: string, calendarProvider: string): Promise<Appointment> {\n    return this.updateAppointment(id, { calendarEventId, calendarProvider });\n  }\n\n  async markReminderSent(id: number): Promise<Appointment> {\n    return this.updateAppointment(id, { reminderSent: true });\n  }\n\n  async deleteAppointment(id: number): Promise<void> {\n    await db.delete(appointments)\n      .where(eq(appointments.id, id));\n  }\n\n  // Obtener citas próximas para enviar recordatorios\n  async getUpcomingAppointmentsForReminders(): Promise<Appointment[]> {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    return await db.select()\n      .from(appointments)\n      .where(\n        and(\n          eq(appointments.status, 'confirmed'),\n          eq(appointments.reminderSent, false),\n          eq(appointments.appointmentDate, tomorrow.toISOString().split('T')[0])\n        )\n      );\n  }\n\n  // Calendar OAuth Token methods\n  async getCalendarTokens(userId: number): Promise<CalendarToken[]> {\n    return await db.select()\n      .from(calendarTokens)\n      .where(eq(calendarTokens.userId, userId));\n  }\n\n  async getCalendarToken(id: number): Promise<CalendarToken | undefined> {\n    const result = await db.select()\n      .from(calendarTokens)\n      .where(eq(calendarTokens.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async getCalendarTokenByProvider(userId: number, provider: string): Promise<CalendarToken | undefined> {\n    const result = await db.select()\n      .from(calendarTokens)\n      .where(\n        and(\n          eq(calendarTokens.userId, userId),\n          eq(calendarTokens.provider, provider)\n        )\n      )\n      .limit(1);\n    return result[0];\n  }\n\n  async createCalendarToken(tokenData: InsertCalendarToken): Promise<CalendarToken> {\n    const result = await db.insert(calendarTokens)\n      .values(tokenData)\n      .returning();\n    return result[0];\n  }\n\n  async updateCalendarToken(id: number, data: Partial<CalendarToken>): Promise<CalendarToken> {\n    const now = new Date();\n    const result = await db.update(calendarTokens)\n      .set({ ...data, updatedAt: now })\n      .where(eq(calendarTokens.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCalendarToken(id: number): Promise<void> {\n    await db.delete(calendarTokens)\n      .where(eq(calendarTokens.id, id));\n  }\n\n  // Analytics methods\n  async getDashboardStats(userId: number): Promise<{ totalConversations: number; resolutionRate: number; averageResponseTime: number; }> {\n    // Obtener las integraciones del usuario\n    const userIntegrations = await this.getIntegrations(userId);\n    const integrationIds = userIntegrations.map(integration => integration.id);\n    \n    if (integrationIds.length === 0) {\n      return {\n        totalConversations: 0,\n        resolutionRate: 0,\n        averageResponseTime: 0\n      };\n    }\n    \n    // Obtener todas las conversaciones para las integraciones del usuario\n    const allConversations = await db.select()\n      .from(conversations)\n      .where(inArray(conversations.integrationId, integrationIds));\n    \n    const totalConversations = allConversations.length;\n    const resolvedConversations = allConversations.filter(conv => conv.resolved).length;\n    const resolutionRate = totalConversations > 0 ? (resolvedConversations / totalConversations) * 100 : 0;\n    \n    // Calcular tiempo promedio de respuesta\n    const totalDuration = allConversations.reduce((sum, conv) => sum + (conv.duration || 0), 0);\n    const averageResponseTime = totalConversations > 0 ? totalDuration / totalConversations / 60 : 0;\n    \n    return {\n      totalConversations,\n      resolutionRate,\n      averageResponseTime\n    };\n  }\n\n  async getConversationAnalytics(userId: number): Promise<ConversationAnalytics> {\n    // Obtener las integraciones del usuario\n    const userIntegrations = await this.getIntegrations(userId);\n    const integrationIds = userIntegrations.map(integration => integration.id);\n    \n    // Si no hay integraciones, devolver datos vacíos\n    if (integrationIds.length === 0) {\n      return {\n        topProducts: [],\n        topTopics: [],\n        conversationsByDay: [],\n        keywordFrequency: []\n      };\n    }\n    \n    // Obtener todas las conversaciones para las integraciones del usuario\n    const allConversations = await db.select()\n      .from(conversations)\n      .where(inArray(conversations.integrationId, integrationIds));\n    \n    // Obtener todos los mensajes de estas conversaciones\n    const conversationIds = allConversations.map(conv => conv.id);\n    const allMessages = conversationIds.length > 0 \n      ? await db.select()\n          .from(messages)\n          .where(inArray(messages.conversationId, conversationIds))\n      : [];\n    \n    // Filtrar mensajes de usuarios (no del asistente)\n    const userMessages = allMessages.filter(msg => msg.role === 'user');\n    \n    // Generar datos de tendencia de conversaciones\n    const conversationsByDay = this.getConversationTrend(allConversations);\n    \n    // Extraer palabras clave y su frecuencia\n    const keywordFrequency = this.extractKeywords(userMessages);\n    \n    // Identificar productos/servicios mencionados\n    const topProducts = this.extractTopProducts(userMessages);\n    \n    // Analizar temas y sentimiento\n    const topTopics = this.extractTopTopics(userMessages);\n    \n    return {\n      topProducts,\n      topTopics,\n      conversationsByDay,\n      keywordFrequency\n    };\n  }\n\n  async getIntegrationPerformance(userId: number): Promise<IntegrationPerformance[]> {\n    // Obtener las integraciones del usuario\n    const userIntegrations = await this.getIntegrations(userId);\n    \n    if (userIntegrations.length === 0) return [];\n    \n    // Crear array para almacenar el rendimiento de cada integración\n    const performanceData: IntegrationPerformance[] = [];\n    \n    // Analizar cada integración\n    for (const integration of userIntegrations) {\n      // Obtener conversaciones para esta integración\n      const integrationConversations = await this.getConversations(integration.id);\n      \n      if (integrationConversations.length === 0) {\n        // Si no hay conversaciones, añadir datos con valores predeterminados\n        performanceData.push({\n          integrationId: integration.id,\n          integrationName: integration.name,\n          conversationCount: 0,\n          responseTime: 0,\n          resolutionRate: 0,\n          userSatisfaction: 0\n        });\n        continue;\n      }\n      \n      // Contar conversaciones resueltas\n      const resolvedCount = integrationConversations.filter(conv => conv.resolved).length;\n      \n      // Calcular tasa de resolución\n      const resolutionRate = (resolvedCount / integrationConversations.length) * 100;\n      \n      // Calcular tiempo de respuesta promedio\n      const totalDuration = integrationConversations.reduce(\n        (sum, conv) => sum + (conv.duration || 0), \n        0\n      );\n      const responseTime = totalDuration / integrationConversations.length;\n      \n      // Calcular satisfacción del usuario (simulado)\n      const userSatisfaction = Math.floor(Math.random() * 30) + 65;\n      \n      performanceData.push({\n        integrationId: integration.id,\n        integrationName: integration.name,\n        conversationCount: integrationConversations.length,\n        responseTime,\n        resolutionRate,\n        userSatisfaction\n      });\n    }\n    \n    return performanceData;\n  }\n  \n  // Funciones auxiliares para el análisis de datos\n  \n  public getConversationTrend(convs: Conversation[]): { date: string, count: number }[] {\n    // Crear un mapa para contar conversaciones por día\n    const dateCountMap = new Map<string, number>();\n    \n    // Inicializar los últimos 30 días con cero conversaciones\n    const today = new Date();\n    for (let i = 0; i < 30; i++) {\n      const date = new Date();\n      date.setDate(today.getDate() - 29 + i);\n      const dateStr = date.toISOString().split('T')[0];\n      dateCountMap.set(dateStr, 0);\n    }\n    \n    // Contar conversaciones por día\n    convs.forEach(conv => {\n      if (conv.createdAt) {\n        const dateStr = new Date(conv.createdAt).toISOString().split('T')[0];\n        if (dateCountMap.has(dateStr)) {\n          dateCountMap.set(dateStr, (dateCountMap.get(dateStr) || 0) + 1);\n        }\n      }\n    });\n    \n    // Convertir a array y ordenar por fecha\n    return Array.from(dateCountMap.entries())\n      .map(([date, count]) => ({ date, count }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n  }\n  \n  public extractKeywords(userMessages: Message[]): { keyword: string, frequency: number }[] {\n    // Extraer texto de todos los mensajes\n    const allText = userMessages.map(msg => msg.content).join(' ').toLowerCase();\n    \n    // Lista de palabras de parada en español\n    const stopWords = new Set([\n      'a', 'al', 'algo', 'algunas', 'algunos', 'ante', 'antes', 'como', 'con', 'contra',\n      'cual', 'cuando', 'de', 'del', 'desde', 'donde', 'durante', 'e', 'el', 'ella',\n      'ellas', 'ellos', 'en', 'entre', 'era', 'erais', 'eran', 'eras', 'eres', 'es',\n      'esa', 'esas', 'ese', 'eso', 'esos', 'esta', 'estaba', 'estaban', 'estado',\n      'estais', 'estamos', 'estan', 'estar', 'estas', 'este', 'esto', 'estos', 'estoy',\n      'etc', 'fue', 'fueron', 'fui', 'fuimos', 'han', 'has', 'hay', 'he', 'hemos',\n      'hube', 'hubo', 'la', 'las', 'le', 'les', 'lo', 'los', 'me', 'mi', 'mia',\n      'mias', 'mio', 'mios', 'mis', 'mu', 'muy', 'nada', 'ni', 'no', 'nos', 'nosotras',\n      'nosotros', 'nuestra', 'nuestras', 'nuestro', 'nuestros', 'o', 'os', 'otra',\n      'otras', 'otro', 'otros', 'para', 'pero', 'por', 'porque', 'que', 'quien',\n      'quienes', 'qué', 'se', 'sea', 'seais', 'seamos', 'sean', 'seas', 'ser',\n      'sereis', 'seremos', 'seria', 'seriais', 'seriamos', 'serian', 'serias', 'será',\n      'seran', 'seras', 'seré', 'seréis', 'seríamos', 'si', 'sido', 'siendo', 'sin',\n      'sobre', 'sois', 'somos', 'son', 'soy', 'su', 'sus', 'suya', 'suyas', 'suyo',\n      'suyos', 'sí', 'también', 'tanto', 'te', 'teneis', 'tenemos', 'tener', 'tengo',\n      'ti', 'tiene', 'tienen', 'tienes', 'todo', 'todos', 'tu', 'tus', 'tuve', 'tuvimos',\n      'tuviste', 'tuvisteis', 'tuvo', 'tuvieron', 'tuya', 'tuyas', 'tuyo', 'tuyos',\n      'tú', 'un', 'una', 'uno', 'unos', 'vosotras', 'vosotros', 'vuestra', 'vuestras',\n      'vuestro', 'vuestros', 'y', 'ya', 'yo'\n    ]);\n    \n    // Dividir el texto en palabras\n    const words = allText.split(/\\s+/)\n      .map(word => word.replace(/[.,;!?()]/g, ''))\n      .filter(word => word.length > 3 && !stopWords.has(word));\n    \n    // Contar frecuencia de cada palabra\n    const wordCount = new Map<string, number>();\n    words.forEach(word => {\n      wordCount.set(word, (wordCount.get(word) || 0) + 1);\n    });\n    \n    // Convertir a array, ordenar por frecuencia y tomar las 20 más frecuentes\n    return Array.from(wordCount.entries())\n      .map(([keyword, frequency]) => ({ keyword, frequency }))\n      .sort((a, b) => b.frequency - a.frequency)\n      .slice(0, 20);\n  }\n  \n  public extractTopProducts(userMessages: Message[]): TopProduct[] {\n    // En una implementación real, esto usaría NLP para extraer entidades\n    // Para demo, devolvemos datos representativos\n    return [\n      { name: \"Asistencia Técnica\", count: 156, percentage: 42 },\n      { name: \"Plan Premium\", count: 89, percentage: 24 },\n      { name: \"Facturación\", count: 67, percentage: 18 },\n      { name: \"Configuración Inicial\", count: 45, percentage: 12 },\n      { name: \"Sugerencias\", count: 15, percentage: 4 }\n    ];\n  }\n  \n  public extractTopTopics(userMessages: Message[]): TopTopic[] {\n    // En una implementación real, esto usaría análisis de temas y sentimiento\n    // Para demo, devolvemos datos representativos\n    return [\n      { topic: \"Problemas de conexión\", count: 124, sentiment: 35 },\n      { topic: \"Rendimiento del sistema\", count: 98, sentiment: 62 },\n      { topic: \"Funcionalidades nuevas\", count: 76, sentiment: 85 },\n      { topic: \"Precios y facturación\", count: 64, sentiment: 48 },\n      { topic: \"Atención al cliente\", count: 58, sentiment: 75 }\n    ];\n  }\n}","size_bytes":46530},"server/railway.js":{"content":"/**\n * Este script se ejecuta en Railway.app durante la inicialización.\n * Se asegura de establecer NODE_ENV correctamente cuando la app se inicia.\n */\n\n// Establecer NODE_ENV a 'production' si no está definido\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = 'production';\n}\n\n// Importar el archivo principal del servidor\nimport './index.js';","size_bytes":350},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport jwt from \"jsonwebtoken\";\nimport { verifyToken, JWT_SECRET, authenticateJWT, isAdmin as authIsAdmin } from \"./middleware/auth\";\nimport { getInteractionLimitByTier, verifySubscription, incrementInteractionCount, InteractionType, getUserSubscription } from \"./middleware/subscription\";\nimport { checkResourceLimit, checkFeatureAccess, getUserLimitsSummary, requireResourceLimit, LimitableResource, LimitableFeature } from \"./middleware/plan-limits\";\nimport { setupAuth } from './auth';\n// Feature access middleware removed - implementing directly in routes\nimport { generateApiKey } from \"./lib/utils\";\nimport { generateChatCompletion, analyzeSentiment, summarizeText, generateAIPromotionalMessages } from \"./lib/openai\";\n\nimport { buildKnowledgeBase } from \"./lib/content-knowledge\";\nimport { webscraper } from \"./lib/webscraper\";\nimport stripe, { \n  PRODUCTS,\n  ProductInfo,\n  createOrRetrieveProduct,\n  createOrUpdatePrice,\n  createCheckoutSession,\n  createOrUpdateCustomer,\n  retrieveSubscription,\n  updateSubscription,\n  cancelSubscription,\n  handleWebhookEvent\n} from \"./lib/stripe\";\nimport { createOrUpdateStripeProduct, syncPlansWithStripe } from \"./lib/stripe-utils\";\nimport { documentProcessor } from \"./lib/document-processor\";\nimport { \n  createGoogleCalendarEvent, \n  getGoogleAuthUrl,\n  updateGoogleCalendarEvent,\n  exchangeCodeForTokens as exchangeGoogleCodeForTokens,\n  deleteGoogleCalendarEvent as cancelGoogleCalendarEvent\n} from \"./lib/google-calendar\";\nimport { \n  createOutlookCalendarEvent, \n  getOutlookAuthUrl,\n  updateOutlookCalendarEvent,\n  exchangeCodeForTokens as exchangeOutlookCodeForTokens,\n  deleteOutlookCalendarEvent as cancelOutlookCalendarEvent\n} from \"./lib/outlook-calendar\";\nimport { \n  sendAppointmentConfirmation, \n  sendAppointmentReminder,\n  sendAppointmentUpdateNotification,\n  sendAppointmentCancellationNotification\n} from \"./lib/aws-email\";\nimport bcrypt from \"bcrypt\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertIntegrationSchema, insertMessageSchema, insertSitesContentSchema, insertPricingPlanSchema, welcomeMessages, forms } from \"@shared/schema\";\nimport cookieParser from \"cookie-parser\";\nimport OpenAI from 'openai';\nimport { and, eq, gt } from \"drizzle-orm\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport multer from \"multer\";\nimport { fileURLToPath } from 'url';\nimport crypto from 'crypto';\nimport { db, pool } from \"./db\";\n\n\n\n// Función para detectar el idioma del mensaje del usuario\nfunction detectLanguage(message: string): string {\n\n  const text = message.toLowerCase().trim();\n\n  // Palabras comunes en español\n  const spanishWords = [\n    \"hola\", \"gracias\", \"por favor\", \"adiós\", \"sí\", \"no\", \"cómo\", \"qué\", \"dónde\", \"cuándo\",\n    \"quién\", \"por qué\", \"ayuda\", \"información\", \"precio\", \"servicio\", \"empresa\", \"contacto\",\n    \"productos\", \"disponible\", \"horario\", \"ubicación\", \"teléfono\", \"correo\", \"página\",\n    \"necesito\", \"quiero\", \"busco\", \"me interesa\", \"puedo\", \"tienes\", \"tienen\", \"ofrecen\",\n    \"buenos días\", \"buenas tardes\", \"buenas noches\", \"muchas gracias\", \"de nada\", \"está\",\n    \"son\", \"estoy\", \"tengo\", \"puede\", \"hacer\", \"muy\", \"bien\", \"malo\", \"bueno\"\n  ];\n\n  // Palabras comunes en francés\n  const frenchWords = [\n    \"bonjour\", \"merci\", \"au revoir\", \"oui\", \"non\", \"comment\", \"quoi\", \"où\", \"quand\",\n    \"qui\", \"pourquoi\", \"aide\", \"information\", \"prix\", \"service\", \"entreprise\", \"contact\",\n    \"produits\", \"disponible\", \"horaire\", \"emplacement\", \"téléphone\", \"email\", \"page\",\n    \"besoin\", \"veux\", \"cherche\", \"intéresse\", \"puis\", \"avez\", \"offrez\", \"vous\",\n    \"journée\", \"soirée\", \"nuit\", \"beaucoup\", \"rien\", \"salut\", \"est\", \"sont\", \"suis\",\n    \"avoir\", \"être\", \"faire\", \"très\", \"bien\", \"mal\", \"bon\", \"bonne\"\n  ];\n\n  // Palabras comunes en inglés\n  const englishWords = [\n    \"hello\", \"thank\", \"please\", \"goodbye\", \"yes\", \"no\", \"how\", \"what\", \"where\", \"when\",\n    \"who\", \"why\", \"help\", \"information\", \"price\", \"service\", \"company\", \"contact\",\n    \"products\", \"available\", \"schedule\", \"location\", \"phone\", \"email\", \"page\",\n    \"need\", \"want\", \"looking\", \"interested\", \"can\", \"have\", \"offer\", \"you\",\n    \"morning\", \"afternoon\", \"evening\", \"night\", \"much\", \"welcome\", \"hi\", \"are\",\n    \"is\", \"am\", \"do\", \"make\", \"very\", \"good\", \"bad\", \"well\"\n  ];\n\n  let spanishScore = 0;\n  let frenchScore = 0;\n  let englishScore = 0;\n\n  // Contar coincidencias para cada idioma\n  spanishWords.forEach(word => {\n    if (text.includes(word)) {\n      spanishScore++;\n    }\n  });\n\n  frenchWords.forEach(word => {\n    if (text.includes(word)) {\n      frenchScore++;\n    }\n  });\n\n  englishWords.forEach(word => {\n    if (text.includes(word)) {\n      englishScore++;\n    }\n  });\n\n  // Determinar idioma con mayor puntuación\n  if (spanishScore > frenchScore && spanishScore > englishScore) {\n    return \"es\";\n  } else if (frenchScore > spanishScore && frenchScore > englishScore) {\n    return \"fr\";\n  } else if (englishScore > 0) {\n    return \"en\";\n  } else {\n    return \"es\";\n  }\n}\n\n// Función para extraer contenido de documentos\nasync function extractDocumentContent(doc: any): Promise<string> {\n  let content = `Información del archivo: ${doc.originalName || doc.filename}`;\n\n  if (doc.path && fs.existsSync(doc.path)) {\n    try {\n      if (doc.mimetype === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n        try {\n          const mammoth = await import(\"mammoth\");\n          const fileBuffer = fs.readFileSync(doc.path);\n          const result = await mammoth.extractRawText({ buffer: fileBuffer });\n          content = `Documento Word: ${doc.originalName}\\n\\nContenido:\\n${result.value}`;\n        } catch (mammothError) {\n          console.error(`Error extracting DOCX content from ${doc.originalName}:`, mammothError);\n          content = `Documento Word: ${doc.originalName}. Error al extraer contenido automáticamente.`;\n        }\n      } else if (doc.mimetype === \"application/pdf\") {\n        try {\n          const pdfParse = await import(\"pdf-parse\");\n          const fileBuffer = fs.readFileSync(doc.path);\n          const pdfData = await pdfParse.default(fileBuffer);\n          content = `Documento PDF: ${doc.originalName}\\n\\nContenido:\\n${pdfData.text}`;\n        } catch (pdfError) {\n          console.error(`Error extracting PDF content from ${doc.originalName}:`, pdfError);\n          content = `Documento PDF: ${doc.originalName}. Error al extraer contenido automáticamente.`;\n        }\n      } else if (doc.mimetype === \"text/plain\") {\n        content = fs.readFileSync(doc.path, \"utf8\");\n      } else {\n        content = `Archivo ${doc.originalName}: Contiene información relevante sobre su organización.`;\n      }\n    } catch (error) {\n      content = `Documento ${doc.originalName}: Información no disponible para procesamiento automático.`;\n    }\n  }\n\n  return content;\n}\nexport function configureRoutes(app: Express) {\n  // Health check endpoint para Railway - DEBE IR AL INICIO\n  app.get('/health', (req, res) => {\n    res.status(200).json({ \n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      service: 'AIPI',\n      version: '1.0.0',\n      database: pool ? 'connected' : 'disconnected'\n    });\n  });\n\n// Función para extraer contenido de documentos\nasync function extractDocumentContent(doc: any): Promise<string> {\n  let content = `Información del archivo: ${doc.originalName || doc.filename}`;\n\n  if (doc.path && fs.existsSync(doc.path)) {\n    try {\n      if (doc.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        // Word document detected - extract actual content using Mammoth\n        try {\n          const mammoth = await import('mammoth');\n          const fileBuffer = fs.readFileSync(doc.path);\n          const result = await mammoth.extractRawText({ buffer: fileBuffer });\n          content = `Documento Word: ${doc.originalName}\\n\\nContenido:\\n${result.value}`;\n        } catch (mammothError) {\n          console.error(`Error extracting DOCX content from ${doc.originalName}:`, mammothError);\n          content = `Documento Word: ${doc.originalName}. Error al extraer contenido automáticamente.`;\n        }\n      } else if (doc.mimetype === 'application/pdf') {\n        // PDF document detected - extract actual content using pdf-parse\n        try {\n          const pdfParse = await import('pdf-parse');\n          const fileBuffer = fs.readFileSync(doc.path);\n          const pdfData = await pdfParse.default(fileBuffer);\n          content = `Documento PDF: ${doc.originalName}\\n\\nContenido:\\n${pdfData.text}`;\n        } catch (pdfError) {\n          console.error(`Error extracting PDF content from ${doc.originalName}:`, pdfError);\n          content = `Documento PDF: ${doc.originalName}. Error al extraer contenido automáticamente.`;\n        }\n      } else if (doc.mimetype === 'text/plain') {\n        content = fs.readFileSync(doc.path, 'utf8');\n      } else {\n        content = `Archivo ${doc.originalName}: Contiene información relevante sobre su organización.`;\n      }\n    } catch (error) {\n      content = `Documento ${doc.originalName}: Información no disponible para procesamiento automático.`;\n    }\n  }\n\n  return content;\n}\n\n\n\n// Función auxiliar para generar y almacenar mensajes promocionales\nasync function generateAndStorePromotionalMessages(language = 'es') {\n  try {\n    if (!pool) {\n      console.error(\"Database pool not available\");\n      return;\n    }\n\n    // Generar mensajes con IA para el idioma específico\n    const messages = await generateAIPromotionalMessages(language);\n\n    // Limpiar mensajes anteriores del mismo idioma\n    await pool.query(`DELETE FROM promotional_messages WHERE message_type = 'ai_generated' AND language = $1`, [language]);\n\n    // Insertar nuevos mensajes\n    for (const message of messages) {\n      await pool.query(`\n        INSERT INTO promotional_messages (message_text, message_type, display_order, is_active, created_at, language)\n        VALUES ($1, $2, $3, true, NOW(), $4)\n      `, [message.message_text, message.message_type, message.display_order, language]);\n    }\n\n  } catch (error) {\n    console.error(\"Error generating and storing promotional messages:\", error);\n  }\n}\n\n// Configurar multer para manejar subida de archivos\n\n// Función para obtener las características de cada plan según su nivel\n\nfunction getFeaturesByTier(tier: string): string[] {\n  switch (tier) {\n    case 'basic':\n      return [\n        \"Hasta 500 interacciones mensuales\",\n        \"Incluye todas las funcionalidades del Paquete Gratuito\",\n        \"Carga y procesamiento de documentos específicos (PDF, DOCX, Excel)\",\n        \"Captura básica de leads con almacenamiento de información de contacto\",\n        \"Análisis detallados de interacciones y consultas frecuentes\"\n      ];\n    case 'professional':\n      return [\n        \"Hasta 2,000 interacciones mensuales\",\n        \"Incluye todas las funcionalidades del Paquete Básico\",\n        \"Integración en pantalla completa tipo ChatGPT para una experiencia más inmersiva\",\n        \"Automatización de tareas frecuentes y programación de seguimientos\",\n        \"Análisis avanzados con métricas de rendimiento y tendencias\",\n        \"Soporte prioritario\"\n      ];\n    case 'enterprise':\n      return [\n        \"Interacciones ilimitadas\",\n        \"Incluye todas las funcionalidades del Paquete Profesional\",\n        \"Personalización avanzada del asistente virtual (tono, estilo, branding)\",\n        \"Integración con sistemas CRM y otras plataformas empresariales\",\n        \"Análisis personalizados y reportes a medida\",\n        \"Soporte dedicado con gestor de cuenta asignado\"\n      ];\n    case 'free':\n    default:\n      return [\n        \"Hasta 20 interacciones por día\",\n        \"Acceso al widget flotante para integración sencilla en el sitio web\",\n        \"Respuestas basadas en la información disponible públicamente en el sitio web\",\n        \"Sin personalización ni carga de documentos específicos\",\n        \"Sin captura de leads ni seguimiento posterior\",\n        \"Análisis básicos de interacciones\"\n      ];\n  }\n}\n\n// Función para crear una integración interna específica para el sitio web principal\nasync function createInternalWebsiteIntegration() {\n  try {\n    // Verificar si ya existe la integración interna\n    const existingIntegration = await storage.getIntegrationByApiKey(\"aipps_web_internal\");\n\n    if (existingIntegration) {\n      return;\n    }\n\n    // Crear la integración interna como integración compartida (userId: null indica que es compartida)\n    await storage.createIntegration({\n      name: \"AIPPS Web Integration\",\n      url: \"localhost\",\n      userId: 1, // Usar ID del administrador por defecto\n      themeColor: \"#6366f1\",\n      position: \"bottom-right\",\n      botBehavior: \"Eres AIPPS, un asistente integrado en el sitio web principal de AIPPS. Tu objetivo es ayudar a los usuarios a entender cómo funciona la plataforma, sus características y beneficios. Debes ser informativo, profesional y claro en tus respuestas. Brinda ejemplos concretos de cómo se puede utilizar AIPPS en diferentes contextos.\",\n      widgetType: \"floating\",\n      apiKey: \"aipps_web_internal\",\n      documentsData: []\n    });\n\n  } catch (error) {\n    console.error(\"Error al crear integración interna:\", error);\n  }\n}\n\n// Usando el middleware isAdmin desde middleware/auth.ts\n// Definir el middleware isAdmin como función para poder usarlo en las rutas existentes\n\n}\n// Obtener el equivalente a __dirname en ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      // Crear carpeta uploads si no existe\n      const uploadsDir = path.join(__dirname, '../uploads');\n      if (!fs.existsSync(uploadsDir)) {\n        fs.mkdirSync(uploadsDir, { recursive: true });\n      }\n      cb(null, uploadsDir);\n    },\n    filename: (req, file, cb) => {\n      // Generar nombre único para evitar colisiones\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      const ext = path.extname(file.originalname);\n      cb(null, file.fieldname + '-' + uniqueSuffix + ext);\n    }\n  }),\n  // Limitar tipos de archivos aceptados\n  fileFilter: (req, file, cb) => {\n    const allowedMimes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'text/plain'\n    ];\n\n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Tipo de archivo no soportado. Solo se permiten PDF, DOCX, Excel y TXT.'));\n    }\n  },\n  limits: {\n    fileSize: 10 * 1024 * 1024, // Limitar a 10MB por archivo\n  }\n});\n\n\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure cookie parser middleware\n  app.use(cookieParser());\n  const isAdmin = authIsAdmin;\n  // Crear integración interna para el sitio principal\n  // await createInternalWebsiteIntegration(); // Comentado temporalmente para fix Railway\n\n  // Servir archivos estáticos desde la carpeta /static\n  const staticDir = path.join(path.dirname(fileURLToPath(import.meta.url)), '../public/static');\n  app.use('/static', express.static(staticDir));\n\n  // API routes\n  const apiRouter = app.route(\"/api\");\n\n// ================ Health Check Route (for Railway) ================\napp.get(\"/api/health\", (req, res) => {\n  res.status(200).json({ \n    status: \"healthy\", \n    timestamp: new Date().toISOString(),\n    version: \"1.0.0\",\n    environment: process.env.NODE_ENV || \"development\"\n  });\n});\n  // ================ Auth Routes ================\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      // Hash password\n      const saltRounds = 10;\n      const hashedPassword = await bcrypt.hash(validatedData.password, saltRounds);\n\n      // Generate API key\n      const apiKey = generateApiKey();\n\n      // Create user\n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword,\n        apiKey\n      });\n\n      // Create default settings for the user\n      await storage.createSettings({ userId: user.id });\n\n      // Create token for immediate login after registration\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"7d\" });\n\n      // Set cookie\n      res.cookie(\"auth_token\", token, {\n        httpOnly: true,\n        secure: true,\n        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n        sameSite: \"none\",\n        path: \"/\",\n      });\n\n\n      // Return user without password and include token\n      const { password, ...userWithoutPassword } = user;\n      res.status(201).json({\n        ...userWithoutPassword,\n        token: token\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: \"Invalid registration data\" });\n    }\n  });\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      // Validate input\n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      // Get user\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n\n      // Check password\n      const passwordMatch = await bcrypt.compare(password, user.password);\n      if (!passwordMatch) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n\n      // Create token\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"7d\" });\n\n      // Set cookie\n      res.cookie(\"auth_token\", token, {\n        httpOnly: true,\n        secure: true, // Siempre usar secure en entornos de desarrollo Replit\n        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n        sameSite: \"none\", // Usar \"none\" para permitir cookies cross-origin en Replit\n        path: \"/\",\n      });\n\n\n      // Return user without password and también incluir el token en la respuesta\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({\n        ...userWithoutPassword,\n        token: token // Incluimos el token en la respuesta para usarlo como Bearer token\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    res.clearCookie(\"auth_token\", {\n      httpOnly: true,\n      secure: true,\n      sameSite: \"none\",\n      path: \"/\",\n    });\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  // Endpoint para obtener el token actual para debugging\n  app.get(\"/api/auth/token\", verifyToken, (req, res) => {\n    try {\n      const token = jwt.sign({ userId: req.userId }, JWT_SECRET, { expiresIn: \"7d\" });\n      res.json({ token });\n    } catch (error) {\n      console.error(\"Get token error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", verifyToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Return user without password\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // User session endpoint - verifica y devuelve información de sesión\n  app.get(\"/api/user-session\", verifyToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Return user without password - same as /api/auth/me\n      const { password, ...userWithoutPassword } = user;\n      res.json({\n        user: userWithoutPassword,\n        authenticated: true,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(\"Get user session error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ================ Plan Limits Routes ================\n  \n  // Get user limits summary\n  app.get(\"/api/limits/summary\", verifyToken, async (req, res) => {\n    try {\n      if (!req.userId) {\n        return res.status(401).json({ message: 'Usuario no autenticado' });\n      }\n\n      const summary = await getUserLimitsSummary(req.userId);\n      \n      if (!summary) {\n        return res.status(404).json({ message: 'No se encontró información de suscripción' });\n      }\n\n      res.json(summary);\n    } catch (error) {\n      console.error('Error obteniendo resumen de límites:', error);\n      res.status(500).json({ message: 'Error interno del servidor' });\n    }\n  });\n\n  // Check if user can create a resource\n  app.get(\"/api/limits/check-resource/:resourceType\", verifyToken, async (req, res) => {\n    try {\n      if (!req.userId) {\n        return res.status(401).json({ message: 'Usuario no autenticado' });\n      }\n\n      const resourceType = req.params.resourceType as LimitableResource;\n      \n      // Validate resource type\n      const validResources: LimitableResource[] = ['integrations', 'forms', 'conversations'];\n      if (!validResources.includes(resourceType)) {\n        return res.status(400).json({ message: `Tipo de recurso no válido: ${resourceType}` });\n      }\n\n      const result = await checkResourceLimit(req.userId, resourceType);\n      res.json(result);\n    } catch (error) {\n      console.error('Error verificando límite de recurso:', error);\n      res.status(500).json({ message: 'Error interno del servidor' });\n    }\n  });\n\n  // Check if user has access to a feature\n  app.get(\"/api/limits/check-feature/:feature\", verifyToken, async (req, res) => {\n    try {\n      if (!req.userId) {\n        return res.status(401).json({ message: 'Usuario no autenticado' });\n      }\n\n      const feature = req.params.feature as LimitableFeature;\n      \n      // Validate feature\n      const validFeatures: LimitableFeature[] = [\n        'customBranding', 'advancedAnalytics', 'apiAccess', 'basicAutomations',\n        'advancedAutomations', 'webhooks', 'basicExport', 'advancedExport', \n        'dataBackups', 'crmIntegrations', 'calendarIntegrations', 'emailIntegrations',\n        'multiUserAccess', 'teamManagement', 'whiteLabel'\n      ];\n      \n      if (!validFeatures.includes(feature)) {\n        return res.status(400).json({ message: `Funcionalidad no válida: ${feature}` });\n      }\n\n      const result = await checkFeatureAccess(req.userId, feature);\n      res.json(result);\n    } catch (error) {\n      console.error('Error verificando acceso a funcionalidad:', error);\n      res.status(500).json({ message: 'Error interno del servidor' });\n    }\n  });\n\n  // ================ Authenticated Conversations Routes ================\n\n  // Get user conversations specifically for fullscreen widget with apiKey verification\n  app.get(\"/api/widget/:apiKey/conversations/user\", async (req, res) => {\n    try {\n      const { apiKey } = req.params;\n\n      // Validate API key first\n      const integration = await storage.getIntegrationByApiKey(apiKey);\n      if (!integration) {\n        return res.status(404).json({ message: \"Integration not found\" });\n      }\n\n      // Check if user is authenticated via token\n      const token = req.cookies?.auth_token || \n                    (req.headers.authorization && req.headers.authorization.startsWith('Bearer ') \n                     ? req.headers.authorization.slice(7) : null);\n\n      if (!token) {\n        return res.status(401).json({ message: \"Authentication required for fullscreen widget\" });\n      }\n\n      try {\n        const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n\n       // Verify user owns this integration OR it's the demo integration for AIPPS website\n  const isDemoIntegration = integration.apiKey === '57031f04127cd041251b1e9abd678439fd199b2f30b75a1f';\n  // Para widgets externos, permitir acceso si la integración existe y es válida\n  const isExternalWidget = req.headers.origin && !req.headers.origin.includes('aipps.ca');\n  if (!isDemoIntegration && !isExternalWidget && integration.userId !== decoded.userId) {\n  return res.status(403).json({ message: \"Unauthorized access to this integration\" });\n  }\n\n        // Get conversations for this specific integration and user\n        const conversations = await storage.getConversations(integration.id);\n\n        // Filter conversations that belong to this authenticated user\n        // For authenticated users, we use visitorId pattern: `user_${userId}`\n        const userVisitorId = `user_${decoded.userId}`;\n        const userConversations = conversations.filter(conv => \n          conv.visitorId === userVisitorId\n        );\n\n        // Sort by creation date (newest first)\n        userConversations.sort((a, b) => {\n          const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n          const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n          return dateB - dateA;\n        });\n\n\n        res.json(userConversations);\n      } catch (error) {\n        console.error('JWT verification failed:', error);\n        return res.status(401).json({ message: \"Invalid or expired token\" });\n      }\n    } catch (error) {\n      console.error(\"Get fullscreen widget conversations error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get user conversations for fullscreen widget\n  app.get(\"/api/conversations\", authenticateJWT, async (req, res) => {\n    try {\n      // Get user's integrations\n      const integrations = await storage.getIntegrations(req.userId);\n\n      if (integrations.length === 0) {\n        return res.json([]);\n      }\n\n      // Get conversations from all user integrations\n      let allConversations: any[] = [];\n      for (const integration of integrations) {\n        const conversations = await storage.getConversations(integration.id);\n        allConversations = allConversations.concat(conversations);\n      }\n\n      // Sort by creation date (newest first)\n      allConversations.sort((a, b) => {\n        const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n        const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n        return dateB - dateA;\n      });\n\n      res.json(allConversations);\n    } catch (error) {\n      console.error(\"Get conversations error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create new conversation for fullscreen widget with apiKey verification\n  app.post(\"/api/widget/:apiKey/conversations/user\", async (req, res) => {\n    try {\n      const { apiKey } = req.params;\n      const { title, visitorName, visitorEmail } = req.body;\n\n      // Validate API key first\n      const integration = await storage.getIntegrationByApiKey(apiKey);\n      if (!integration) {\n        return res.status(404).json({ message: \"Integration not found\" });\n      }\n\n      // Check if user is authenticated via token\n      const token = req.cookies?.auth_token || \n                    (req.headers.authorization && req.headers.authorization.startsWith('Bearer ') \n                     ? req.headers.authorization.slice(7) : null);\n\n      if (!token) {\n        return res.status(401).json({ message: \"Authentication required for fullscreen widget\" });\n      }\n\n      try {\n        const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n\n        // Verify user owns this integration OR it's the demo integration for AIPPS website\n  const isDemoIntegration = integration.apiKey === '57031f04127cd041251b1e9abd678439fd199b2f30b75a1f';\n  // Para widgets externos, permitir acceso si la integración existe y es válida\n  const isExternalWidget = req.headers.origin && !req.headers.origin.includes('aipps.ca');\n  if (!isDemoIntegration && !isExternalWidget && integration.userId !== decoded.userId) {\n  return res.status(403).json({ message: \"Unauthorized access to this integration\" });\n  }\n\n        // Get authenticated user data for visitor info\n        const authenticatedUser = await storage.getUser(decoded.userId);\n        \n        // Create conversation with authenticated user's visitorId pattern\n        const conversation = await storage.createConversation({\n          integrationId: integration.id,\n          visitorId: `user_${decoded.userId}`,\n          title: title || 'Nueva conversación',\n          visitorName: authenticatedUser?.fullName || authenticatedUser?.username || null,\n          visitorEmail: authenticatedUser?.email || null\n        });\n\n\n        res.status(201).json(conversation);\n      } catch (error) {\n        console.error('JWT verification failed:', error);\n        return res.status(401).json({ message: \"Invalid or expired token\" });\n      }\n    } catch (error) {\n      console.error(\"Create fullscreen widget conversation error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create new conversation for authenticated user\n  app.post(\"/api/conversations\", authenticateJWT, async (req, res) => {\n    try {\n      const { title } = req.body;\n\n      // Get user's first integration (for simplicity, use the first one)\n      const integrations = await storage.getIntegrations(req.userId);\n\n      if (integrations.length === 0) {\n        return res.status(400).json({ message: \"No integrations found for user\" });\n      }\n      \n      // Get authenticated user data for visitor info\n      const authenticatedUser = await storage.getUser(req.userId);\n      \n      const conversation = await storage.createConversation({\n        integrationId: integrations[0].id,\n        visitorId: `user_${req.userId}`,\n        title: title || 'Nueva conversación',\n        visitorName: authenticatedUser?.fullName || authenticatedUser?.username || null,\n        visitorEmail: authenticatedUser?.email || null\n      });\n\n      res.status(201).json(conversation);\n    } catch (error) {\n      console.error(\"Create conversation error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get messages for a specific conversation\n  app.get(\"/api/conversations/:conversationId/messages\", authenticateJWT, async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.conversationId);\n\n      // Verify conversation exists and user has access\n      const conversation = await storage.getConversation(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n\n      // Verify user owns the integration associated with this conversation\n      const integration = await storage.getIntegration(conversation.integrationId);\n      if (!integration || integration.userId !== req.userId) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const messages = await storage.getConversationMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Get conversation messages error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Send message to conversation\n  app.post(\"/api/conversations/:conversationId/messages\", authenticateJWT, async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.conversationId);\n      const { content, role } = req.body;\n\n      if (!content || !role) {\n        return res.status(400).json({ message: \"Content and role are required\" });\n      }\n\n      // Verify conversation exists and user has access\n      const conversation = await storage.getConversation(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n\n      const integration = await storage.getIntegration(conversation.integrationId);\n      if (!integration || integration.userId !== req.userId) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Create user message\n      const message = await storage.createMessage({\n        conversationId,\n        content,\n        role,\n      });\n\n      // If user message, generate AI response\n      if (role === \"user\") {\n        try {\n          // Get conversation messages for context\n          const messages = await storage.getConversationMessages(conversationId);\n\n          // Get site content for context\n          const siteContent = await storage.getSiteContent(integration.id);\n          let context = \"\";\n\n          if (siteContent && siteContent.length > 0) {\n            context = siteContent.map(content => `${content.title || 'Sin título'}: ${content.content}`).join('\\n\\n');\n          }\n\n          // Prepare conversation history\n          const conversationHistory = messages.map(msg => ({\n            role: msg.role,\n            content: msg.content\n          }));\n\n          // Generate AI response\n          const aiResponse = await generateChatCompletion(\n            conversationHistory,\n            context,\n            integration.botBehavior || \"Eres un asistente virtual útil y amigable.\",\n            'es' // Default to Spanish\n          );\n\n          // Save AI response\n          await storage.createMessage({\n            conversationId,\n            content: aiResponse,\n            role: \"assistant\",\n          });\n\n          res.json({ \n            userMessage: message,\n            aiResponse: { content: aiResponse, role: \"assistant\" }\n          });\n        } catch (aiError) {\n          console.error(\"Error generating AI response:\", aiError);\n          res.json({ \n            userMessage: message,\n            error: \"Error generating AI response\"\n          });\n        }\n      } else {\n        res.json({ message });\n      }\n    } catch (error) {\n      console.error(\"Create message error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ================ Dashboard Routes ================\n  app.get(\"/api/dashboard/stats\", verifyToken, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats(req.userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get dashboard stats error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Endpoint para obtener análisis de conversaciones globales del usuario\n  app.get(\"/api/analytics/conversation\", verifyToken, async (req, res) => {\n    try {\n      const conversationAnalytics = await storage.getConversationAnalytics(req.userId);\n      res.json(conversationAnalytics);\n    } catch (error) {\n      console.error(\"Get conversation analytics error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Endpoint para obtener rendimiento de integraciones\n  app.get(\"/api/analytics/integration-performance\", verifyToken, async (req, res) => {\n    try {\n      const integrationPerformance = await storage.getIntegrationPerformance(req.userId);\n      res.json(integrationPerformance);\n    } catch (error) {\n      console.error(\"Get integration performance error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // API para obtener los análisis de conversaciones (con datos reales)\n  // Obtener analíticas para una integración específica\n  app.get(\"/api/analytics/integration/:integrationId\", authenticateJWT, async (req, res) => {\n    try {\n      const integrationId = parseInt(req.params.integrationId);\n\n      // Verificar que la integración pertenece al usuario\n      const integration = await storage.getIntegration(integrationId);\n\n      if (!integration) {\n        return res.status(404).json({ message: \"Integration not found\" });\n      }\n\n      if (integration.userId !== req.userId) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Obtener las conversaciones para esta integración\n      const conversations = await storage.getConversations(integrationId);\n\n      // Calcular estadísticas básicas\n      const totalConversations = conversations.length;\n      const resolvedConversations = conversations.filter(conv => conv.resolved).length;\n      const resolutionRate = totalConversations > 0 ? resolvedConversations / totalConversations : 0;\n\n      // Obtener todos los mensajes de estas conversaciones\n      let allMessages = [];\n      for (const conversation of conversations) {\n        const messages = await storage.getConversationMessages(conversation.id);\n        allMessages.push(...messages);\n      }\n\n      // Filtrar mensajes de usuarios para análisis\n      const userMessages = allMessages.filter(msg => msg.role === 'user');\n\n      // Usar las funciones públicas de PgStorage para analizar datos reales\n      const pgStorage = storage as any;\n\n      // Extraer temas reales de los mensajes de usuarios\n      const topTopics = userMessages.length > 0 ? pgStorage.extractTopTopics(userMessages) : [];\n\n      // Extraer productos/servicios reales mencionados en los mensajes\n      const topProducts = userMessages.length > 0 ? pgStorage.extractTopProducts(userMessages) : [];\n\n      // Generar tendencia real de conversaciones basada en fechas de creación\n      const conversationTrend = conversations.length > 0 ? pgStorage.getConversationTrend(conversations) : [];\n\n      // Extraer palabras clave de los mensajes de usuarios\n      const keywordFrequency = userMessages.length > 0 ? pgStorage.extractKeywords(userMessages) : [];\n\n      res.json({\n        integrationId,\n        integrationName: integration.name,\n        totalConversations,\n        resolvedConversations,\n        resolutionRate,\n        messageCount: allMessages.length,\n        userMessageCount: allMessages.filter(msg => msg.role === 'user').length,\n        assistantMessageCount: allMessages.filter(msg => msg.role === 'assistant').length,\n        topTopics,\n        topProducts,\n        conversationTrend,\n        keywordFrequency\n      });\n    } catch (error) {\n      console.error(\"Error getting integration analytics:\", error);\n      res.status(500).json({ message: \"Error getting integration analytics\" });\n    }\n  });\n\n  app.get(\"/api/analytics/conversation\", verifyToken, async (req, res) => {\n    try {\n      const userId = req.userId;\n\n      // Utilizar la función de análisis de conversaciones que trabaja con datos reales\n      const conversationAnalytics = await storage.getConversationAnalytics(userId);\n\n      res.json(conversationAnalytics);\n    } catch (error) {\n      console.error(\"Error getting conversation analytics:\", error);\n      res.status(500).json({ message: \"Error obteniendo análisis de conversaciones\" });\n    }\n  });\n\n  // API para obtener rendimiento de integraciones (con datos reales)\n  app.get(\"/api/analytics/integration-performance\", verifyToken, async (req, res) => {\n    try {\n      const userId = req.userId;\n\n      // Utilizar la función que calcula el rendimiento de integraciones usando datos reales\n      const performanceData = await storage.getIntegrationPerformance(userId);\n\n      res.json(performanceData);\n    } catch (error) {\n      console.error(\"Error getting integration performance:\", error);\n      res.status(500).json({ message: \"Error obteniendo rendimiento de integraciones\" });\n    }\n  });\n\n  // ================ Automation Routes ================\n  app.get(\"/api/automations\", authenticateJWT, async (req, res) => {\n    try {\n      const automations = await storage.getAutomations(req.userId);\n      res.json(automations);\n    } catch (error) {\n      console.error(\"Get automations error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/automations\", authenticateJWT, async (req, res) => {\n    try {\n      const validatedData = z.object({\n        name: z.string(),\n        description: z.string(),\n        status: z.enum([\"active\", \"inactive\", \"in_testing\"]),\n        config: z.any(),\n      }).parse(req.body);\n\n      const automation = await storage.createAutomation({\n        ...validatedData,\n        userId: req.userId,\n      });\n\n      res.status(201).json(automation);\n    } catch (error) {\n      console.error(\"Create automation error:\", error);\n      res.status(400).json({ message: \"Invalid automation data\" });\n    }\n  });\n   // ================ Integration Routes ================\n    app.get(\"/api/integrations\", verifyToken, async (req, res) => {\n      try {\n        const integrations = await storage.getIntegrations(req.userId);\n        res.json(integrations);\n      } catch (error) {\n        console.error(\"Get integrations error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    app.post(\"/api/integrations\", verifyToken, requireResourceLimit('integrations'), upload.array('documents'), async (req, res) => {\n      try {\n\n        // Comprobar si el usuario está tratando de crear una integración con el nombre restringido\n         //const isPablo = req.userId === 1; // ID del usuario Pablo\n         //const isReservdName = req.body.name === 'Techcolca21';\n\n        // if (isReservdName && !isPablo) {\n          // return res.status(403).json({ \n          //   message: \"No puedes crear una integración con este nombre. Está reservado para el chat principal del sitio web.\" \n         //  });\n       //  }\n\n        // Obtenemos la API key del cuerpo de la solicitud\n        const apiKey = req.body.apiKey || generateApiKey();\n\n        // Extraemos solo los campos necesarios para la base de datos\n        const integrationData = {\n          name: req.body.name,\n          url: req.body.url,\n          themeColor: req.body.themeColor || \"#3B82F6\",\n          position: req.body.position || \"bottom-right\",\n          userId: req.userId,\n          botBehavior: req.body.botBehavior || \"Sé amable y profesional, responde de manera precisa a las preguntas sobre el sitio web.\",\n          widgetType: req.body.widgetType || \"bubble\",\n          ignoredSections: req.body.ignoredSections || [],\n        };\n\n\n        // Preparar la información de los documentos subidos (si hay)\n        const uploadedFiles = req.files as Express.Multer.File[];\n        const documentsData = uploadedFiles ? uploadedFiles.map(file => ({\n          filename: file.filename,\n          originalName: file.originalname,\n          path: file.path,\n          size: file.size,\n          mimetype: file.mimetype,\n          uploadedAt: new Date()\n        })) : [];\n\n\n        // Creamos la integración con los datos del formulario y información de documentos\n        const integration = await storage.createIntegration({\n          ...integrationData,\n          apiKey: apiKey,\n          documentsData: documentsData\n        });\n\n\n        res.status(201).json(integration);\n      } catch (error) {\n        console.error(\"Create integration error:\", error);\n\n        // Si hubo un error, intentar eliminar archivos subidos para no dejar basura\n        try {\n          const uploadedFiles = req.files as Express.Multer.File[];\n          if (uploadedFiles && uploadedFiles.length > 0) {\n            uploadedFiles.forEach(file => {\n              fs.unlinkSync(file.path);\n              console.log(`Archivo temporal eliminado: ${file.path}`);\n            });\n          }\n        } catch (cleanupError) {\n          console.error(\"Error al limpiar archivos temporales:\", cleanupError);\n        }\n\n        // Proporcionar más detalles sobre el error para depuración\n        if (error instanceof Error) {\n          res.status(400).json({ \n            message: \"Invalid integration data\", \n            error: error.message,\n            stack: process.env.NODE_ENV === \"development\" ? error.stack : undefined\n          });\n        } else {\n          res.status(400).json({ message: \"Invalid integration data\" });\n        }\n      }\n    });\n\n    // Obtener una integración específica\n    app.get(\"/api/integrations/:id\", verifyToken, async (req, res) => {\n      try {\n        const integrationId = parseInt(req.params.id);\n        if (isNaN(integrationId)) {\n          return res.status(400).json({ message: \"Invalid integration ID\" });\n        }\n\n        const integration = await storage.getIntegration(integrationId);\n\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Comprobar si es la integración principal (Techcolca21 en este caso) y si el usuario no es Pablo\n         //const isMainWebsiteIntegration = integration.name === 'Techcolca21';\n        // const isPablo = req.userId === 1; // ID del usuario Pablo\n\n         //if (isMainWebsiteIntegration && !isPablo) {\n         //  return res.status(403).json({ message: \"Solo Pablo puede configurar el chat principal del sitio web\" });\n        // }\n\n        // Verificar que el usuario es el propietario de la integración\n        if (integration.userId !== req.userId) {\n          return res.status(403).json({ message: \"Unauthorized\" });\n        }\n\n        res.json(integration);\n      } catch (error) {\n        console.error(\"Get integration error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // Actualizar una integración específica\n    app.patch(\"/api/integrations/:id\", verifyToken, async (req, res) => {\n      try {\n        const integrationId = parseInt(req.params.id);\n        if (isNaN(integrationId)) {\n          return res.status(400).json({ message: \"Invalid integration ID\" });\n        }\n\n        // Verificar que la integración existe\n        const integration = await storage.getIntegration(integrationId);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Comprobar si es la integración principal (Techcolca21 en este caso) y si el usuario no es Pablo\n         //const isMainWebsiteIntegration = integration.name === 'Techcolca21';\n         //const isPablo = req.userId === 1; // ID del usuario Pablo\n\n       // if (isMainWebsiteIntegration && !isPablo) {\n        //   return res.status(403).json({ message: \"Solo Pablo puede configurar el chat principal del sitio web\" });\n       //  }\n\n        // Verificar que el usuario es el propietario de la integración\n        if (integration.userId !== req.userId) {\n          return res.status(403).json({ message: \"Unauthorized\" });\n        }\n\n        // Actualizar los campos de la integración\n        const updatedIntegration = await storage.updateIntegration(integrationId, {\n          name: req.body.name,\n          url: req.body.url,\n          themeColor: req.body.themeColor,\n          ignoredSections: req.body.ignoredSections || [],\n          ignoredSectionsText: req.body.ignoredSectionsText,\n          position: req.body.position,\n          active: req.body.active,\n          widgetType: req.body.widgetType,\n          botBehavior: req.body.botBehavior,\n          description: req.body.description,\n          language: req.body.language,\n          textColor: req.body.textColor,\n          customization: req.body.customization\n        });\n\n        res.json(updatedIntegration);\n      } catch (error) {\n        console.error(\"Update integration error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // Eliminar una integración específica\n    app.delete(\"/api/integrations/:id\", verifyToken, async (req, res) => {\n      try {\n        const integrationId = parseInt(req.params.id);\n        if (isNaN(integrationId)) {\n          return res.status(400).json({ message: \"Invalid integration ID\" });\n        }\n\n        // Verificar que la integración existe\n        const integration = await storage.getIntegration(integrationId);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Comprobar si es la integración principal (Techcolca21 en este caso) y si el usuario no es Pablo\n        // const isMainWebsiteIntegration = integration.name === 'Techcolca21';\n         //const isPablo = req.userId === 1; // ID del usuario Pablo\n\n        // if (isMainWebsiteIntegration && !isPablo) {\n         //  return res.status(403).json({ message: \"Solo Pablo puede eliminar el chat principal del sitio web\" });\n         //}\n\n        // Verificar que el usuario es el propietario de la integración\n        if (integration.userId !== req.userId) {\n          return res.status(403).json({ message: \"Unauthorized\" });\n        }\n\n        // Eliminar la integración\n        await storage.deleteIntegration(integrationId);\n\n        res.json({ message: \"Integration deleted successfully\" });\n      } catch (error) {\n        console.error(\"Delete integration error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // ================ Settings Routes ================\n    app.get(\"/api/settings\", verifyToken, async (req, res) => {\n    try {\n      const settings = await storage.getSettings(req.userId);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Get settings error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n    app.patch(\"/api/settings\", verifyToken, async (req, res) => {\n      try {\n        const settings = await storage.updateSettings(req.userId, req.body);\n        res.json(settings);\n      } catch (error) {\n        console.error(\"Update settings error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // Ruta para obtener configuración del chatbot de la página de bienvenida\n    app.get(\"/api/welcome-chat-settings\", async (req, res) => {\n      try {\n        // Obtener configuración desde una cuenta de administrador\n        // Por defecto usar la configuración del user ID 4 (admin) u obtener el primer usuario admin\n        const adminUserId = 4; // Esta es la cuenta de admin predeterminada\n\n        // Obtener configuración\n        const settings = await storage.getSettings(adminUserId);\n\n        // Devolver solo la configuración relacionada con el chatbot de bienvenida\n        // Nota: Ya no incluimos un mensaje de bienvenida predeterminado en español para permitir que el cliente use i18n\n        res.json({\n          welcomePageChatEnabled: settings?.welcomePageChatEnabled || true,\n          welcomePageChatGreeting: settings?.welcomePageChatGreeting || null, // Permitir que el cliente use su i18n para elegir el mensaje\n          welcomePageChatBubbleColor: settings?.welcomePageChatBubbleColor || '#111827',\n          welcomePageChatTextColor: settings?.welcomePageChatTextColor || '#FFFFFF',\n          welcomePageChatBehavior: settings?.welcomePageChatBehavior || 'Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.',\n          welcomePageChatScrapingEnabled: settings?.welcomePageChatScrapingEnabled || false,\n          welcomePageChatScrapingDepth: settings?.welcomePageChatScrapingDepth || 5,\n          welcomePageChatScrapingData: settings?.welcomePageChatScrapingData || null\n        });\n      } catch (error) {\n        console.error(\"Get welcome chat settings error:\", error);\n        // En caso de error, devolver configuración predeterminada\n        // Permitimos que el cliente elija el mensaje de bienvenida según el idioma\n        res.json({\n          welcomePageChatEnabled: true,\n          welcomePageChatGreeting: null, // Permitir que el cliente use i18n\n          welcomePageChatBubbleColor: '#111827',\n          welcomePageChatTextColor: '#FFFFFF',\n          welcomePageChatBehavior: 'Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.',\n          welcomePageChatScrapingEnabled: false,\n          welcomePageChatScrapingDepth: 5,\n          welcomePageChatScrapingData: null\n        });\n      }\n    });\n\n    // Ruta para actualizar configuración del chatbot de bienvenida\n    app.post(\"/api/welcome-chat-settings\", verifyToken, isAdmin, async (req, res) => {\n      try {\n        const {\n          welcomePageChatEnabled,\n          welcomePageChatGreeting,\n          welcomePageChatBubbleColor,\n          welcomePageChatTextColor,\n          welcomePageChatBehavior,\n          welcomePageChatScrapingEnabled,\n          welcomePageChatScrapingDepth\n        } = req.body;\n\n        // Actualizar configuración del administrador\n        const adminUserId = 4; // Usamos la cuenta admin predeterminada\n        const currentSettings = await storage.getSettings(adminUserId);\n\n        if (!currentSettings) {\n          return res.status(404).json({ message: \"Admin settings not found\" });\n        }\n\n        // Preparar objeto con los campos a actualizar\n        const updateData: any = {};\n\n        if (typeof welcomePageChatEnabled === 'boolean') {\n          updateData.welcomePageChatEnabled = welcomePageChatEnabled;\n        }\n\n        if (welcomePageChatGreeting !== undefined) {\n          updateData.welcomePageChatGreeting = welcomePageChatGreeting;\n        }\n\n        if (welcomePageChatBubbleColor) {\n          updateData.welcomePageChatBubbleColor = welcomePageChatBubbleColor;\n        }\n\n        if (welcomePageChatTextColor) {\n          updateData.welcomePageChatTextColor = welcomePageChatTextColor;\n        }\n\n        if (welcomePageChatBehavior) {\n          updateData.welcomePageChatBehavior = welcomePageChatBehavior;\n        }\n\n        if (typeof welcomePageChatScrapingEnabled === 'boolean') {\n          updateData.welcomePageChatScrapingEnabled = welcomePageChatScrapingEnabled;\n        }\n\n        if (welcomePageChatScrapingDepth) {\n          updateData.welcomePageChatScrapingDepth = welcomePageChatScrapingDepth;\n        }\n\n        // Actualizar settings\n        const updatedSettings = await storage.updateSettings(adminUserId, updateData);\n\n        res.json({\n          success: true,\n          settings: updatedSettings\n        });\n      } catch (error) {\n        console.error(\"Update welcome chat settings error:\", error);\n        res.status(500).json({ \n          message: \"Error updating welcome chat settings\", \n          error: error.message \n        });\n      }\n    });\n\n    // Ruta para ejecutar scraping para el chatbot de bienvenida\n    app.post(\"/api/welcome-chat/scrape\", async (req, res) => {\n      try {\n        // Obtener información de autenticación\n        const token = req.cookies?.auth_token || \n                      (req.headers.authorization && req.headers.authorization.startsWith('Bearer ') \n                       ? req.headers.authorization.slice(7) : null);\n\n        let adminUser = null;\n\n        if (token) {\n          try {\n            // Verificar el token\n            // Token verification (logging removed for security)\n            const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n            console.log(\"Token verificado correctamente\");\n\n            // Obtener los datos completos del usuario\n            adminUser = await storage.getUser(decoded.userId);\n            console.log(\"Usuario para scraping autenticado\");\n\n            if (adminUser?.username !== 'admin') {\n              return res.status(403).json({ message: \"Forbidden: Admin access required\" });\n            }\n          } catch (error) {\n            console.error('Error al verificar token para scraping:', error);\n            return res.status(401).json({ message: 'Invalid token' });\n          }\n        } else {\n          console.log(\"No se encontró token para scraping\");\n          return res.status(401).json({ message: 'Authentication required' });\n        }\n\n        // Datos del scraping\n        const { url, maxPages } = req.body;\n\n        // Asegurarnos de que tenemos una URL válida\n        let siteUrl = url;\n        if (!siteUrl) {\n          // Usar la URL del host como fallback\n          if (req.headers.host) {\n            const protocol = req.headers['x-forwarded-proto'] || 'http';\n            siteUrl = `${protocol}://${req.headers.host}`;\n          } else {\n            // URL de respaldo para Replit\n            siteUrl = \"https://aipps.ca\";\n          }\n        }\n\n        console.log(`Iniciando scraping para chatbot de bienvenida: ${siteUrl}`);\n\n        // Scraper las páginas más importantes primero\n        const pagesLimit = maxPages || 5;\n\n        try {\n          // Realizar el scraping\n          const scrapedData = await webscraper.scrapeSite(siteUrl, pagesLimit);\n          console.log(`Scraping completado: ${scrapedData.pagesProcessed || 1} páginas procesadas`);\n\n          // Asegurar que se muestre al menos 1 página si encontramos datos\n          if ((scrapedData.pagesProcessed === 0 || !scrapedData.pagesProcessed) && \n              (scrapedData.extraData && \n               ((scrapedData.extraData.pricingPlans && scrapedData.extraData.pricingPlans.length > 0) ||\n                scrapedData.extraData.forms || \n                scrapedData.extraData.documentation))) {\n            console.log(\"Ajustando contador: encontramos información relevante pero el contador está en 0\");\n            scrapedData.pagesProcessed = 1;\n          }\n\n          // Obtener los datos de precios actuales\n          const pricingPlans = await storage.getAvailablePricingPlans();\n\n          // Crear una estructura de datos con información de precios\n          const pricingData = pricingPlans.map(plan => ({\n            name: plan.name,\n            tier: plan.tier,\n            price: plan.price,\n            currency: plan.currency || 'USD',\n            interval: plan.interval || 'month',\n            description: plan.description,\n            features: plan.features || getFeaturesByTier(plan.tier),\n            interactionsLimit: plan.interactionsLimit\n          }));\n\n          // Añadir datos de precios al resultado del scraping\n          scrapedData.extraData = {\n            pricingPlans: pricingData\n          };\n\n          // Actualizar configuración del administrador con los datos extraídos\n          const adminUserId = adminUser?.id || 4; // Usamos la cuenta admin (ID 4 como fallback)\n          const currentSettings = await storage.getSettings(adminUserId);\n\n          if (!currentSettings) {\n            return res.status(404).json({ message: \"Admin settings not found\" });\n          }\n\n          // Verificar los datos obtenidos\n          if (!scrapedData || !scrapedData.pages || scrapedData.pages.length === 0) {\n            console.warn(\"No se encontró contenido durante el scraping\");\n\n            // Crear un dato mínimo para que el chatbot tenga algo de contexto\n            scrapedData.pages = [{\n              url: siteUrl,\n              title: \"AIPPS - Plataforma de IA Conversacional\",\n              content: \"AIPPS es una plataforma de IA conversacional que permite a las empresas integrar asistentes virtuales en sus sitios web. Ofrecemos diversos planes adaptados a diferentes necesidades empresariales.\"\n            }];\n\n            // Asegurarnos de reportar al menos 1 página procesada\n            scrapedData.pagesProcessed = 1;\n          } else if (scrapedData.pagesProcessed === 0) {\n            // Si encontramos contenido pero el contador es 0, asignar al menos 1 página\n            console.log(\"Ajustando contador: se encontró contenido pero el contador estaba en 0\");\n            scrapedData.pagesProcessed = Math.max(1, scrapedData.pages.length);\n          }\n\n          // Transformar los datos a un formato más útil para el chatbot\n          const processedData = {\n            sitemap: scrapedData.pages.map(page => ({\n              url: page.url,\n              title: page.title\n            })),\n            pricing: scrapedData.extraData?.pricingPlans || [],\n            forms: scrapedData.extraData?.forms || {},\n            content: scrapedData.pages.reduce((acc, page) => {\n              acc[page.url] = {\n                title: page.title,\n                content: page.content\n              };\n              return acc;\n            }, {}),\n            pagesProcessed: scrapedData.pagesProcessed,\n            timestamp: new Date().toISOString()\n          };\n\n          console.log(`Scraping procesado: ${processedData.pagesProcessed} páginas, ${processedData.pricing.length} planes de precios, info de formularios incluida`);\n\n          // Guardar datos procesados\n          const scrapingDataString = JSON.stringify(processedData);\n          console.log(`Tamaño de los datos de scraping: ${scrapingDataString.length} caracteres`);\n\n          // Actualizar settings con la información de scraping\n          await storage.updateSettings(adminUserId, {\n            welcomePageChatScrapingEnabled: true,\n            welcomePageChatScrapingData: scrapingDataString,\n            welcomePageChatScrapingDepth: maxPages || 5\n          });\n\n          // Devolver los datos de scraping\n          res.json({\n            success: true,\n            scrapedData: processedData\n          });\n        } catch (scrapeError) {\n          console.error(\"Error durante el scraping:\", scrapeError);\n          res.status(500).json({ \n            message: \"Error durante el proceso de scraping\", \n            error: scrapeError.message \n          });\n        }\n      } catch (error) {\n        console.error(\"Error en la autenticación para scraping:\", error);\n        res.status(500).json({ \n          message: \"Error durante el proceso de autenticación para scraping\", \n          error: error.message \n        });\n      }\n    });\n\n    // ================ Site Content Routes ================\n    // Ruta para extracción de contenido del sitio (alias de scrape)\n    app.post(\"/api/site-content/extract\", verifyToken, async (req, res) => {\n      try {\n        const { url, integrationId, maxPages } = req.body;\n\n        if (!url || !integrationId) {\n          return res.status(400).json({ \n            success: false,\n            message: \"URL and integrationId are required\" \n          });\n        }\n\n        // Verificar que la integración existe y pertenece al usuario\n        const integration = await storage.getIntegration(parseInt(integrationId));\n        if (!integration) {\n          return res.status(404).json({ \n            success: false,\n            message: \"Integration not found\" \n          });\n        }\n\n        if (integration.userId !== req.userId) {\n          return res.status(403).json({ \n            success: false,\n            message: \"Unauthorized\" \n          });\n        }\n\n        console.log(`Iniciando extracción de contenido: ${url} para integrationId: ${integrationId}`);\n\n        // Realizar el scraping\n        const scrapedData = await webscraper.scrapeSite(url, maxPages || 5);\n\n        // Guardar el contenido extraído en la base de datos\n        const savedContent = [];\n\n        for (const pageContent of scrapedData.pages) {\n          // Verificar si ya existe contenido para esta URL\n          const existingContent = await storage.getSiteContentByUrl(integration.id, pageContent.url);\n\n          if (existingContent) {\n            // Actualizar contenido existente\n            const updatedContent = await storage.updateSiteContent(existingContent.id, {\n              content: pageContent.content,\n              title: pageContent.title,\n              lastUpdated: new Date()\n            });\n            savedContent.push(updatedContent);\n          } else {\n            // Crear nuevo contenido\n            const newContent = await storage.createSiteContent({\n              url: pageContent.url,\n              content: pageContent.content,\n              title: pageContent.title,\n              integrationId: integration.id\n            });\n            savedContent.push(newContent);\n          }\n        }\n\n        // Asegurar que reportamos al menos 1 página si tenemos contenido\n        const reportedPageCount = scrapedData.pagesProcessed > 0 ? \n                                 scrapedData.pagesProcessed : \n                                 (savedContent.length > 0 ? savedContent.length : 1);\n\n        res.json({\n          success: true,\n          message: \"Extracción completada con éxito\",\n          pagesProcessed: reportedPageCount,\n          savedContent\n        });\n      } catch (error) {\n        console.error(\"Error en extracción de contenido:\", error);\n        res.status(500).json({ \n          success: false,\n          message: \"Error durante la extracción del contenido del sitio\", \n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    });\n\n    // Ruta para scraping de sitio web\n    app.post(\"/api/scrape\", verifyToken, async (req, res) => {\n      try {\n        const { url, integrationId, maxPages } = req.body;\n\n        if (!url || !integrationId) {\n          return res.status(400).json({ message: \"URL and integrationId are required\" });\n        }\n\n        // Verificar que la integración existe y pertenece al usuario\n        const integration = await storage.getIntegration(parseInt(integrationId));\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        if (integration.userId !== req.userId) {\n          return res.status(403).json({ message: \"Unauthorized\" });\n        }\n\n        console.log(`Iniciando scraping de sitio web: ${url} para integrationId: ${integrationId}`);\n\n        // Realizar el scraping\n        const scrapedData = await webscraper.scrapeSite(url, maxPages || 5);\n\n        // Guardar el contenido extraído en la base de datos\n        const savedContent = [];\n\n        for (const pageContent of scrapedData.pages) {\n          // Verificar si ya existe contenido para esta URL\n          const existingContent = await storage.getSiteContentByUrl(integration.id, pageContent.url);\n\n          if (existingContent) {\n            // Actualizar contenido existente\n            const updatedContent = await storage.updateSiteContent(existingContent.id, {\n              content: pageContent.content,\n              title: pageContent.title,\n              lastUpdated: new Date()\n            });\n            savedContent.push(updatedContent);\n          } else {\n            // Crear nuevo contenido\n            const newContent = await storage.createSiteContent({\n              url: pageContent.url,\n              content: pageContent.content,\n              title: pageContent.title,\n              integrationId: integration.id\n            });\n            savedContent.push(newContent);\n          }\n        }\n          // Asegurar que reportamos al menos 1 página si tenemos contenido\n              const reportedPageCount = scrapedData.pagesProcessed > 0 ? \n                                       scrapedData.pagesProcessed : \n                                       (savedContent.length > 0 ? savedContent.length : 1);\n\n              res.json({\n                message: \"Scraping completado con éxito\",\n                pagesProcessed: reportedPageCount,\n                savedContent\n              });\n            } catch (error) {\n              console.error(\"Error in scraping:\", error);\n              res.status(500).json({ \n                message: \"Error durante el scraping del sitio\", \n                error: error instanceof Error ? error.message : String(error)\n              });\n            }\n          });\n\n          // Obtener todo el contenido del sitio para una integración\n          app.get(\"/api/site-content/:integrationId\", verifyToken, async (req, res) => {\n            try {\n              const integrationId = parseInt(req.params.integrationId);\n\n              if (isNaN(integrationId)) {\n                return res.status(400).json({ message: \"Invalid integration ID\" });\n              }\n\n              // Verificar que la integración existe y pertenece al usuario\n              const integration = await storage.getIntegration(integrationId);\n              if (!integration) {\n                return res.status(404).json({ message: \"Integration not found\" });\n              }\n\n              if (integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"Unauthorized\" });\n              }\n\n              const content = await storage.getSiteContent(integrationId);\n              res.json(content);\n            } catch (error) {\n              console.error(\"Error getting site content:\", error);\n              res.status(500).json({ message: \"Internal server error\" });\n            }\n          });\n\n          // Eliminar contenido del sitio por ID\n          app.delete(\"/api/site-content/:id\", verifyToken, async (req, res) => {\n            try {\n              const contentId = parseInt(req.params.id);\n\n              if (isNaN(contentId)) {\n                return res.status(400).json({ message: \"Invalid content ID\" });\n              }\n\n              // Verificar que el contenido existe\n              const content = await storage.updateSiteContent(contentId, {});\n              if (!content) {\n                return res.status(404).json({ message: \"Content not found\" });\n              }\n\n              // Verificar que la integración pertenece al usuario\n              const integration = await storage.getIntegration(content.integrationId);\n              if (!integration || integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"Unauthorized\" });\n              }\n\n              await storage.deleteSiteContent(contentId);\n              res.json({ message: \"Content deleted successfully\" });\n            } catch (error) {\n              console.error(\"Error deleting site content:\", error);\n              res.status(500).json({ message: \"Internal server error\" });\n            }\n          });\n\n         // ================ Marketing Routes ================\n        // Endpoint para obtener mensajes promocionales dinámicos generados por IA\n        app.get(\"/api/marketing/promotional-messages\", async (req, res) => {\n          try {\n            // ✅ VERIFICAR POOL ANTES DE USAR\n            if (!pool) {\n              console.error(\"Database pool not available\");\n              return res.status(500).json({ \n                message: \"Database connection not available\",\n                fallback: []\n              });\n            }\n\n            const language = req.query.lang as string || 'es';\n\n            // Verificar si necesitamos generar nuevos mensajes (cada 7 días)\n            const lastGenerated = await pool.query(`\n              SELECT created_at FROM promotional_messages \n              WHERE message_type = 'ai_generated' \n              AND language = $1\n              ORDER BY created_at DESC \n              LIMIT 1\n            `, [language]);\n\n            const needsRegen = !lastGenerated.rows[0] || \n              (Date.now() - new Date(lastGenerated.rows[0].created_at).getTime()) > (7 * 24 * 60 * 60 * 1000);\n\n            if (needsRegen) {\n              console.log(`Generando nuevos mensajes promocionales con IA para idioma: ${language}...`);\n              await generateAndStorePromotionalMessages(language);\n            }\n\n            // Obtener mensajes generados por IA para el idioma específico\n            const result = await pool.query(`\n              SELECT pm.message_text, pm.message_type, pm.display_order, pm.language\n              FROM promotional_messages pm\n              WHERE pm.message_type = 'ai_generated'\n              AND pm.is_active = true\n              AND pm.language = $1\n              ORDER BY pm.display_order ASC\n            `, [language]);\n\n            res.json(result.rows);\n          } catch (error) {\n            console.error(\"Error getting promotional messages:\", error);\n\n            // ✅ VERIFICAR POOL EN FALLBACK TAMBIÉN\n            if (!pool) {\n              return res.status(500).json({ \n                message: \"Database connection error\", \n                fallback: [] \n              });\n            }\n\n            try {\n              // Fallback a mensajes estáticos si falla la IA\n              const fallbackResult = await pool.query(`\n                SELECT pm.message_text, pm.message_type, pm.display_order\n                FROM promotional_messages pm\n                JOIN marketing_campaigns mc ON pm.campaign_id = mc.id\n                WHERE mc.is_active = true \n                AND pm.message_type != 'ai_generated'\n                AND pm.is_active = true\n                ORDER BY pm.display_order ASC\n              `);\n\n              res.json(fallbackResult.rows);\n            } catch (fallbackError) {\n              console.error(\"Error in fallback query:\", fallbackError);\n              res.status(500).json({ message: \"Database error\", fallback: [] });\n            }\n          }\n        });\n\n          // Endpoint para obtener información de campaña activa\n          app.get(\"/api/marketing/active-campaign\", async (req, res) => {\n            try {\n              const result = await pool.query(`\n                SELECT \n                  name,\n                  description,\n                  max_subscribers,\n                  current_subscribers,\n                  (max_subscribers - current_subscribers) as remaining_spots,\n                  end_date\n                FROM marketing_campaigns \n                WHERE is_active = true \n                AND start_date <= NOW() \n                AND (end_date IS NULL OR end_date >= NOW())\n                AND current_subscribers < max_subscribers\n                LIMIT 1\n              `);\n\n              if (result.rows.length > 0) {\n                res.json(result.rows[0]);\n              } else {\n                res.json(null);\n              }\n            } catch (error) {\n              console.error(\"Error getting active campaign:\", error);\n              res.status(500).json({ message: \"Internal server error\" });\n            }\n          });\n\n          // Endpoint para forzar regeneración de mensajes promocionales (admin)\n          app.post(\"/api/marketing/regenerate-messages\", authenticateJWT, async (req, res) => {\n            try {\n              console.log(\"Regenerando mensajes promocionales manualmente...\");\n              const newMessages = await generateAIPromotionalMessages(pool);\n              res.json({ \n                message: \"Mensajes regenerados exitosamente\", \n                count: newMessages.length,\n                messages: newMessages \n              });\n            } catch (error) {\n              console.error(\"Error regenerating messages:\", error);\n              res.status(500).json({ message: \"Error regenerando mensajes\" });\n            }\n          });\n\n          // Endpoint de prueba para generar mensajes (sin autenticación)\n          app.get(\"/api/test-generate-messages\", async (req, res) => {\n            try {\n              console.log(\"Generando mensajes de prueba...\");\n              const newMessages = await generateAIPromotionalMessages(pool);\n              res.json({ \n                success: true,\n                count: newMessages.length,\n                messages: newMessages \n              });\n            } catch (error) {\n              console.error(\"Error en prueba de generación:\", error);\n              res.status(500).json({ error: error.message });\n            }\n          });\n\n          // ================ Feature Access Routes ================\n          app.post(\"/api/features/check-access\", authenticateJWT, async (req, res) => {\n            try {\n              const { feature } = req.body;\n\n              if (!feature) {\n                return res.status(400).json({ message: \"Feature parameter is required\" });\n              }\n\n              // Obtener suscripción del usuario\n              const subscription = await getUserSubscription(req.userId);\n              const userPlan = subscription?.tier || 'basic';\n\n              // Importar funciones de verificación de características\n              const { hasFeatureAccess, getNextPlanForFeature, PLAN_NAMES, getUpgradeMessage } = await import('../shared/feature-permissions');\n\n              // Verificar si tiene acceso a la característica\n              const hasAccess = hasFeatureAccess(userPlan, feature as any);\n\n              if (!hasAccess) {\n                const requiredPlan = getNextPlanForFeature(userPlan, feature as any);\n                const upgradeMessage = getUpgradeMessage(userPlan, feature);\n\n                return res.json({\n                  hasAccess: false,\n                  currentPlan: userPlan,\n                  requiredPlan: requiredPlan,\n                  requiredPlanName: PLAN_NAMES[requiredPlan || 'professional'] || 'Plan Superior',\n                  upgradeMessage: upgradeMessage,\n                  feature: feature\n                });\n              }\n\n              res.json({\n                hasAccess: true,\n                currentPlan: userPlan,\n                feature: feature\n              });\n            } catch (error) {\n              console.error(\"Error checking feature access:\", error);\n              res.status(500).json({ message: \"Internal server error\" });\n            }\n          });\n\n          // ================ OpenAI Routes ================\n          app.post(\"/api/openai/completion\", async (req, res) => {\n            try {\n              const { messages, context, language } = req.body;\n\n              if (!messages || !Array.isArray(messages)) {\n                return res.status(400).json({ message: \"Invalid messages format\" });\n              }\n\n              // Corregido para manejar el nuevo parámetro de idioma\n              const completion = await generateChatCompletion(messages, context, language as string | undefined);\n              res.json(completion);\n            } catch (error) {\n              console.error(\"OpenAI completion error:\", error);\n              res.status(500).json({ message: \"Error generating completion\" });\n            }\n          });\n\n          app.post(\"/api/openai/sentiment\", async (req, res) => {\n            try {\n              const { text } = req.body;\n\n              if (!text) {\n                return res.status(400).json({ message: \"Text is required\" });\n              }\n\n              const sentiment = await analyzeSentiment(text);\n              res.json(sentiment);\n            } catch (error) {\n              console.error(\"OpenAI sentiment analysis error:\", error);\n              res.status(500).json({ message: \"Error analyzing sentiment\" });\n            }\n          });\n\n          app.post(\"/api/openai/summarize\", async (req, res) => {\n            try {\n              const { text } = req.body;\n\n              if (!text) {\n                return res.status(400).json({ message: \"Text is required\" });\n              }\n\n              const summary = await summarizeText(text);\n              res.json({ summary });\n            } catch (error) {\n              console.error(\"OpenAI summarize error:\", error);\n              res.status(500).json({ message: \"Error summarizing text\" });\n            }\n          });\n\n          // ================ Stripe Routes ================\n          // No necesitamos inicializar los productos de Stripe aquí\n          // Los productos se crean según sea necesario cuando alguien intenta suscribirse\n\n          // Helper function to get translated plan information (name, description, features)\n          function getTranslatedPlanInfo(planId: string, language: string = 'es') {\n            const planTranslations: { [key: string]: { [lang: string]: { name: string, description: string, features: string[] } } } = {\n              'basic': {\n                'es': {\n                  name: 'Básico',\n                  description: 'Plan básico para sitios web pequeños',\n                  features: [\n                    '500 conversaciones/mes',\n                    '1 formulario personalizable (2 plantillas disponibles)',\n                    'Widget de chat tipo burbuja únicamente',\n                    'Integración en 1 sitio web',\n                    'Procesamiento básico de documentos (PDF, DOCX)',\n                    'Captura básica de leads',\n                    'Análisis básicos de conversaciones',\n                    'Soporte por email',\n                    'Personalización limitada de branding'\n                  ]\n                },\n                'en': {\n                  name: 'Basic',\n                  description: 'Basic plan for small websites',\n                  features: [\n                    '500 conversations/month',\n                    '1 customizable form (2 templates available)',\n                    'Bubble chat widget only',\n                    'Integration on 1 website',\n                    'Basic document processing (PDF, DOCX)',\n                    'Basic lead capture',\n                    'Basic conversation analytics',\n                    'Email support',\n                    'Limited branding customization'\n                  ]\n                },\n                'fr': {\n                  name: 'Basique',\n                  description: 'Plan de base pour petits sites web',\n                  features: [\n                    '500 conversations/mois',\n                    '1 formulaire personnalisable (2 modèles disponibles)',\n                    'Widget de chat bulle uniquement',\n                    'Intégration sur 1 site web',\n                    'Traitement de base des documents (PDF, DOCX)',\n                    'Capture de leads de base',\n                    'Analyses de base des conversations',\n                    'Support par email',\n                    'Personnalisation limitée du branding'\n                  ]\n                }\n              },\n              'startup': {\n                'es': {\n                  name: 'Startup',\n                  description: 'Perfecto para negocios en crecimiento',\n                  features: [\n                    '2.000 conversaciones/mes',\n                    '5 formularios personalizables (todas las plantillas)',\n                    'Widget chat + modo pantalla completa tipo ChatGPT',\n                    'Integración en hasta 3 sitios web',\n                    'Procesamiento avanzado de documentos',\n                    'Base de conocimiento personalizada',\n                    'Captura y seguimiento de leads',\n                    'Análisis avanzados con métricas',\n                    'Personalización completa de branding',\n                    'Soporte prioritario por email y chat',\n                    'Exportación básica de datos'\n                  ]\n                },\n                'en': {\n                  name: 'Startup',\n                  description: 'Perfect for growing businesses',\n                  features: [\n                    '2,000 conversations/month',\n                    '5 customizable forms (all templates)',\n                    'Chat widget + fullscreen ChatGPT mode',\n                    'Integration on up to 3 websites',\n                    'Advanced document processing',\n                    'Custom knowledge base',\n                    'Lead capture and tracking',\n                    'Advanced analytics with metrics',\n                    'Complete branding customization',\n                    'Priority email and chat support',\n                    'Basic data export'\n                  ]\n                },\n                'fr': {\n                  name: 'Startup',\n                  description: 'Parfait pour les entreprises en croissance',\n                  features: [\n                    '2 000 conversations/mois',\n                    '5 formulaires personnalisables (tous les modèles)',\n                    'Widget chat + mode plein écran ChatGPT',\n                    'Intégration sur jusqu\\'à 3 sites web',\n                    'Traitement avancé des documents',\n                    'Base de connaissances personnalisée',\n                    'Capture et suivi des leads',\n                    'Analyses avancées avec métriques',\n                    'Personnalisation complète du branding',\n                    'Support prioritaire par email et chat',\n                    'Exportation de base des données'\n                  ]\n                }\n              },\n              'professional': {\n                'es': {\n                  name: 'Profesional',\n                  description: 'Para empresas profesionales',\n                  features: [\n                    '10.000 conversaciones/mes',\n                    'Formularios ilimitados',\n                    'Todas las funciones del plan Profesional',\n                    'Integración en sitios web ilimitados',\n                    'Automatizaciones básicas (respuestas automáticas)',\n                    'Integración con CRM (Salesforce, HubSpot)',\n                    'API del desarrollador acceso',\n                    'Análisis avanzados con reportes personalizados',\n                    'Exportación de datos en múltiples formatos',\n                    'Respaldos automáticos',\n                    'Gestión de equipos (hasta 5 usuarios)',\n                    'Soporte por email, chat y teléfono',\n                    'Onboarding personalizado'\n                  ]\n                },\n                'en': {\n                  name: 'Professional',\n                  description: 'For professional companies',\n                  features: [\n                    '10,000 conversations/month',\n                    'Unlimited forms',\n                    'All Professional plan features',\n                    'Unlimited website integrations',\n                    'Basic automations (automatic responses)',\n                    'CRM integration (Salesforce, HubSpot)',\n                    'Developer API access',\n                    'Advanced analytics with custom reports',\n                    'Multi-format data export',\n                    'Automatic backups',\n                    'Team management (up to 5 users)',\n                    'Email, chat and phone support',\n                    'Custom onboarding'\n                  ]\n                },\n                'fr': {\n                  name: 'Professionnel',\n                  description: 'Pour les entreprises professionnelles',\n                  features: [\n                    '10 000 conversations/mois',\n                    'Formulaires illimités',\n                    'Toutes les fonctionnalités du plan Professionnel',\n                    'Intégrations de sites web illimitées',\n                    'Automatisations de base (réponses automatiques)',\n                    'Intégration CRM (Salesforce, HubSpot)',\n                    'Accès API développeur',\n                    'Analyses avancées avec rapports personnalisés',\n                    'Exportation de données multi-formats',\n                    'Sauvegardes automatiques',\n                    'Gestion d\\'équipe (jusqu\\'à 5 utilisateurs)',\n                    'Support par email, chat et téléphone',\n                    'Intégration personnalisée'\n                  ]\n                }\n              },\n              'enterprise': {\n                'es': {\n                  name: 'Empresarial',\n                  description: 'Plan completo con IA automatizada',\n                  features: [\n                    'Conversaciones ilimitadas',\n                    'Formularios ilimitados',\n                    'Todas las funciones disponibles',\n                    'Integración en sitios web ilimitados',\n                    'Automatizaciones completas con IA',\n                    'IA local vs IA normal',\n                    'Integración con todos los CRM',\n                    'API completa con capacidades avanzadas',\n                    'Análisis empresariales avanzados',\n                    'Exportación de datos ilimitada',\n                    'Respaldos automáticos diarios',\n                    'Gestión de equipos ilimitada',\n                    'Soporte 24/7 dedicado',\n                    'Gerente de cuenta dedicado',\n                    'SLA garantizado'\n                  ]\n                },\n                'en': {\n                  name: 'Enterprise',\n                  description: 'Complete plan with automated AI',\n                  features: [\n                    'Unlimited conversations',\n                    'Unlimited forms',\n                    'All available features',\n                    'Unlimited website integrations',\n                    'Complete AI automations',\n                    'Local AI vs normal AI',\n                    'Integration with all CRMs',\n                    'Complete API with advanced capabilities',\n                    'Advanced enterprise analytics',\n                    'Unlimited data export',\n                    'Daily automatic backups',\n                    'Unlimited team management',\n                    '24/7 dedicated support',\n                    'Dedicated account manager',\n                    'Guaranteed SLA'\n                  ]\n                },\n                'fr': {\n                  name: 'Entreprise',\n                  description: 'Plan complet avec IA automatisée',\n                  features: [\n                    'Conversations illimitées',\n                    'Formulaires illimités',\n                    'Toutes les fonctionnalités disponibles',\n                    'Intégrations de sites web illimitées',\n                    'Automatisations IA complètes',\n                    'IA locale vs IA normale',\n                    'Intégration avec tous les CRM',\n                    'API complète avec capacités avancées',\n                    'Analyses d\\'entreprise avancées',\n                    'Exportation de données illimitée',\n                    'Sauvegardes automatiques quotidiennes',\n                    'Gestion d\\'équipe illimitée',\n                    'Support dédié 24/7',\n                    'Gestionnaire de compte dédié',\n                    'SLA garanti'\n                  ]\n                }\n              }\n            };\n\n            const defaultPlan = { name: planId, description: '', features: [] };\n            return planTranslations[planId]?.[language] || planTranslations[planId]?.['es'] || defaultPlan;\n          }\n\n          function getTranslatedFeatures(planId: string, language: string = 'es') {\n            return getTranslatedPlanInfo(planId, language).features;\n          }\n\n          // Obtener los planes disponibles con promociones activas\n          app.get(\"/api/pricing/plans\", async (req, res) => {\n            try {\n              const language = req.query.lang as string || 'es';\n\n              // Obtener campaña activa\n              const campaignResult = await pool.query(`\n                SELECT * FROM marketing_campaigns \n                WHERE is_active = true \n                AND start_date <= NOW() \n                AND (end_date IS NULL OR end_date >= NOW())\n                AND current_subscribers < max_subscribers\n                LIMIT 1\n              `);\n\n              const activeCampaign = campaignResult.rows[0];\n\n              // Obtener los planes de precios de la base de datos\n              const pricingPlans = await storage.getAvailablePricingPlans();\n\n              let products = [];\n\n              // Si hay campaña activa, aplicar descuentos\n              if (activeCampaign) {\n                const discountsResult = await pool.query(`\n                  SELECT * FROM campaign_discounts \n                  WHERE campaign_id = $1\n                `, [activeCampaign.id]);\n\n                const discounts = discountsResult.rows;\n\n                products = pricingPlans.map(plan => {\n                  const discount = discounts.find(d => d.plan_id === plan.planId.toLowerCase());\n                  const planVariants = [];\n                  const translatedInfo = getTranslatedPlanInfo(plan.planId.toLowerCase(), language);\n\n                  // Plan mensual\n                  const monthlyPlan = {\n                    id: plan.planId.toLowerCase(),\n                    name: translatedInfo.name,\n                    description: translatedInfo.description,\n                    price: plan.price,\n                    currency: plan.currency || \"usd\",\n                    interval: plan.interval,\n                    features: Array.isArray(plan.features) ? plan.features : [],\n                    tier: plan.tier,\n                    interactionsLimit: plan.interactionsLimit,\n                    isAnnual: false,\n                    discount: discount ? discount.monthly_discount_percent : 0,\n                    originalPrice: plan.price,\n                    promotionalPrice: discount && discount.monthly_discount_percent > 0 \n                      ? Math.round(plan.price * (1 - discount.monthly_discount_percent / 100))\n                      : plan.price,\n                    campaignInfo: activeCampaign ? {\n                      name: activeCampaign.name,\n                      remainingSpots: activeCampaign.max_subscribers - activeCampaign.current_subscribers,\n                      maxSubscribers: activeCampaign.max_subscribers,\n                      promotionalMonths: discount ? discount.promotional_months : 0\n                    } : null\n                  };\n\n                  planVariants.push(monthlyPlan);\n\n                  // Plan anual\n                  const annualDiscount = discount ? discount.annual_discount_percent : 0;\n                  const annualPrice = plan.price * 12;\n                  const annualPlan = {\n                    id: plan.planId.toLowerCase() + '_annual',\n                    name: translatedInfo.name,\n                    description: translatedInfo.description,\n                    price: annualDiscount > 0 \n                      ? Math.round(annualPrice * (1 - annualDiscount / 100))\n                      : Math.round(annualPrice * 0.85), // 15% descuento estándar anual\n                    currency: plan.currency || \"usd\",\n                    interval: 'year',\n                    features: Array.isArray(plan.features) ? plan.features : [],\n                    tier: plan.tier,\n                    interactionsLimit: plan.interactionsLimit,\n                    originalPrice: annualPrice,\n                    promotionalPrice: annualDiscount > 0 \n                      ? Math.round(annualPrice * (1 - annualDiscount / 100))\n                      : Math.round(annualPrice * 0.85),\n                    isAnnual: true,\n                    discount: annualDiscount > 0 ? annualDiscount : 15,\n                    campaignInfo: activeCampaign ? {\n                      name: activeCampaign.name,\n                      remainingSpots: activeCampaign.max_subscribers - activeCampaign.current_subscribers,\n                      maxSubscribers: activeCampaign.max_subscribers,\n                      promotionalMonths: 12\n                    } : null\n                  };\n\n                  planVariants.push(annualPlan);\n\n                  return planVariants;\n                });\n              } else {\n                // Sin campaña activa, transformar planes normalmente usando los planes reales de la DB\n                products = pricingPlans.map(plan => {\n                  const translatedInfo = getTranslatedPlanInfo(plan.planId.toLowerCase(), language);\n                  return {\n                    id: plan.planId.toLowerCase(),\n                    name: translatedInfo.name,\n                    description: translatedInfo.description,\n                    price: plan.price,\n                    priceDisplay: plan.priceDisplay || `$${plan.price}/${plan.interval === 'year' ? 'año' : 'mes'}`,\n                    currency: plan.currency || \"usd\",\n                    interval: plan.interval,\n                    features: Array.isArray(plan.features) ? plan.features : [],\n                    tier: plan.tier,\n                    interactionsLimit: plan.interactionsLimit,\n                    isAnnual: plan.interval === 'year',\n                    discount: 0\n                  };\n                });\n              }\n\n              // Si no hay planes en la base de datos, utilizamos los planes predefinidos\n              if (products.length === 0) {\n                console.log(\"No hay planes en la base de datos, utilizando planes predefinidos\");\n\n                // Añadir todos los planes desde nuestras constantes PRODUCTS (como fallback)\n                for (const [key, product] of Object.entries(PRODUCTS)) {\n                  if (product.available) {\n                    products.push({\n                      id: key.toLowerCase(),\n                      name: product.name,\n                      description: product.description,\n                      price: product.price / 100, // Convertir centavos a dólares para mostrar\n                      currency: product.currency || \"cad\", // Dólares canadienses por defecto\n                      interval: product.interval || \"month\", // Por defecto mensual\n                      features: product.features || getFeaturesByTier(key.toLowerCase()),\n                      tier: product.tier,\n                      interactionsLimit: product.interactionsLimit,\n                      isAnnual: product.isAnnual || false,\n                      discount: product.discount\n                    });\n                  }\n                }\n              }\n\n              res.json(products);\n            } catch (error) {\n              console.error(\"Error obteniendo planes:\", error);\n              res.status(500).json({ message: \"Error obteniendo planes de precios\" });\n            }\n          });\n\n          // Iniciar proceso de checkout para un plan\n          app.post(\"/api/pricing/checkout\", verifyToken, async (req, res) => {\n            try {\n              const { planId, billingType } = req.body;\n\n              if (!planId) {\n                return res.status(400).json({ message: \"ID del plan es requerido\" });\n              }\n\n              // Verificar si se ha seleccionado facturación anual o mensual\n              const isAnnual = billingType === 'annual';\n\n              // Si es el plan gratuito, activarlo directamente\n              if (planId === \"free\") {\n                // Obtener o crear suscripción gratuita para el usuario\n                // TODO: Implementar lógica para suscripción gratuita\n                return res.json({ \n                  success: true, \n                  message: \"Plan gratuito activado\", \n                  redirectUrl: \"/dashboard\" \n                });\n              }\n\n              // Obtener información del usuario\n              const user = await storage.getUser(req.userId);\n              if (!user) {\n                return res.status(404).json({ message: \"Usuario no encontrado\" });\n              }\n\n              // Encontrar el producto correspondiente al plan seleccionado\n              let priceId = \"\";\n              let selectedProduct: ProductInfo | null = null;\n              let productKey = planId.toLowerCase();\n\n              // Si seleccionó facturación anual pero el planId no contiene 'annual', \n              // buscamos la versión anual del mismo plan\n              if (isAnnual && !productKey.includes('annual')) {\n                productKey = `${productKey}-annual`;\n              }\n\n              for (const [key, product] of Object.entries(PRODUCTS)) {\n                if (key.toLowerCase() === productKey) {\n                  selectedProduct = product;\n                  break;\n                }\n              }\n\n              if (!selectedProduct) {\n                return res.status(404).json({ message: \"Plan no encontrado\" });\n              }\n\n              // Verificar si Stripe está disponible\n              if (!stripe) {\n                console.warn(\"API de Stripe no disponible. Redirigiendo a página de contacto.\");\n                return res.status(503).json({ \n                  success: false, \n                  message: \"El sistema de pagos no está disponible en este momento. Por favor contacte al administrador.\",\n                  redirectUrl: \"/contact\" \n                });\n              }\n\n              // Crear o recuperar producto en Stripe\n              const stripeProduct = await createOrRetrieveProduct(selectedProduct);\n              if (!stripeProduct) {\n                return res.status(500).json({ message: \"Error creando producto en Stripe\" });\n              }\n\n              // Crear o actualizar precio en Stripe\n              const price = await createOrUpdatePrice(\n                stripeProduct, \n                selectedProduct.price, \n                selectedProduct.interval as 'month' | 'year' || 'month'\n              );\n              if (!price || !price.id) {\n                return res.status(500).json({ message: \"Error creando precio en Stripe\" });\n              }\n\n              // Crear sesión de checkout\n              const successUrl = `${req.protocol}://${req.get('host')}/dashboard/subscription/success?session_id={CHECKOUT_SESSION_ID}`;\n              const cancelUrl = `${req.protocol}://${req.get('host')}/dashboard/subscription/cancel`;\n\n              let session;\n              try {\n                session = await createCheckoutSession(\n                  user.stripeCustomerId || undefined,\n                  price.id,\n                  successUrl,\n                  cancelUrl\n                );\n\n                if (!session) {\n                  throw new Error(\"No se pudo crear la sesión de checkout\");\n                }\n              } catch (sessionError) {\n                console.error(\"Error creando la sesión de checkout:\", sessionError);\n                return res.status(500).json({ \n                  success: false, \n                  message: \"Error al crear la sesión de pago. Por favor intente más tarde.\"\n                });\n              }\n\n              res.json({ \n                success: true, \n                sessionId: session.id,\n                sessionUrl: session.url\n              });\n            } catch (error) {\n              console.error(\"Error creando sesión de checkout:\", error);\n              res.status(500).json({ message: \"Error procesando la solicitud de pago\" });\n            }\n          });\n\n          // Verificar status de suscripción después de un pago exitoso\n          app.get(\"/api/subscription/verify\", verifyToken, async (req, res) => {\n            try {\n              const sessionId = req.query.session_id as string;\n\n              if (!sessionId) {\n                return res.status(400).json({ success: false, message: \"Se requiere ID de sesión\" });\n              }\n\n              const user = await storage.getUser(req.userId);\n              if (!user) {\n                return res.status(404).json({ success: false, message: \"Usuario no encontrado\" });\n              }\n\n              // Verificar la sesión con Stripe\n              if (!stripe) {\n                console.warn(\"API de Stripe no configurada. No se puede verificar la suscripción.\");\n                return res.status(503).json({ \n                  success: false, \n                  message: \"El servicio de pagos no está disponible actualmente. Contacte al administrador.\",\n                  code: \"STRIPE_NOT_CONFIGURED\" \n                });\n              }\n\n              let session;\n              try {\n                session = await stripe.checkout.sessions.retrieve(sessionId);\n              } catch (stripeError) {\n                console.error(\"Error recuperando sesión de Stripe:\", stripeError);\n                return res.status(404).json({ \n                  success: false, \n                  message: \"No se pudo recuperar la información de la sesión de pago\" \n                });\n              }\n\n              if (!session) {\n                return res.status(404).json({ success: false, message: \"Sesión no encontrada\" });\n              }\n\n              // Si la sesión fue exitosa y tiene una suscripción\n              if (session.status === \"complete\" && session.subscription) {\n                const subscriptionId = session.subscription as string;\n\n                // Recuperar los detalles de la suscripción\n                const subscription = await retrieveSubscription(subscriptionId);\n\n                if (!subscription) {\n                  return res.status(404).json({ success: false, message: \"Suscripción no encontrada\" });\n                }\n\n                // Actualizar los datos del usuario en nuestra base de datos\n                await storage.updateUserStripeInfo(user.id, {\n                  stripeCustomerId: session.customer as string,\n                  stripeSubscriptionId: subscriptionId\n                });\n\n                // Retornar información de la suscripción\n                const planItem = subscription.items.data[0];\n                const productId = planItem.price.product as string;\n\n                let product;\n                try {\n                  product = await stripe.products.retrieve(productId);\n                } catch (productError) {\n                  console.error(\"Error recuperando producto de Stripe:\", productError);\n                  // Continuar con datos parciales en caso de error\n                  product = { name: \"Plan desconocido\" };\n                }\n\n                const transformedSubscription = {\n                  id: subscription.id,\n                  status: subscription.status,\n                  plan: product.name,\n                  interval: planItem.plan.interval,\n                  amount: planItem.price.unit_amount / 100, // Convertir de centavos a unidades\n                  currency: planItem.price.currency,\n                  currentPeriodStart: subscription.current_period_start * 1000, // Convertir a milisegundos\n                  currentPeriodEnd: subscription.current_period_end * 1000, // Convertir a milisegundos\n                };\n\n                return res.json({ success: true, subscription: transformedSubscription });\n              } else {\n                return res.status(400).json({ success: false, message: \"La sesión no fue completada exitosamente\" });\n              }\n            } catch (error: any) {\n              console.error(\"Error verificando suscripción:\", error);\n              res.status(500).json({ success: false, message: error.message || \"Error verificando el estado de la suscripción\" });\n            }\n          });\n\n          // Webhook para eventos de Stripe\n          app.post(\"/api/webhook/stripe\", express.raw({ type: 'application/json' }), async (req, res) => {\n            try {\n              const signature = req.headers['stripe-signature'] as string;\n\n              // Verificar que la petición es legítima de Stripe\n              let event;\n              try {\n                const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n                // Si no hay webhook secret configurado, omitir verificación en desarrollo\n                if (!webhookSecret && process.env.NODE_ENV !== 'production') {\n                  event = req.body;\n                } else if (webhookSecret && stripe) {\n                  event = stripe.webhooks.constructEvent(\n                    req.body,\n                    signature,\n                    webhookSecret\n                  );\n                } else {\n                  return res.status(400).send('Webhook secret requerido en producción o Stripe no está configurado');\n                }\n              } catch (err: any) {\n                console.error(`Error verificando webhook: ${err.message}`);\n                return res.status(400).send(`Webhook Error: ${err.message}`);\n              }\n\n              // Procesar el evento utilizando nuestra función en lib/stripe\n              await handleWebhookEvent(event);\n\n              res.json({ received: true });\n            } catch (error) {\n              console.error('Error en webhook de Stripe:', error);\n              res.status(500).json({ message: \"Error procesando webhook\" });\n            }\n          });\n\n          // ================ Document Management Routes ================\n\n          // Ruta para subir documentos adicionales a una integración existente\n          app.post('/api/documents/upload', authenticateJWT, upload.array('documents'), async (req, res) => {\n            try {\n              const { integrationId } = req.body;\n\n              if (!integrationId) {\n                return res.status(400).json({ message: 'ID de integración no proporcionado' });\n              }\n\n              // Obtener la integración\n              const integration = await storage.getIntegration(parseInt(integrationId));\n\n              if (!integration) {\n                return res.status(404).json({ message: 'Integración no encontrada' });\n              }\n\n              // Verificar que el usuario autenticado sea dueño de la integración\n              const user = req.user as { id: number };\n              if (integration.userId !== user.id) {\n                return res.status(403).json({ message: 'No tienes permiso para modificar esta integración' });\n              }\n\n              const uploadedFiles = req.files as Express.Multer.File[];\n\n              if (!uploadedFiles || uploadedFiles.length === 0) {\n                return res.status(400).json({ message: 'No se subieron archivos' });\n              }\n\n              console.log(`Subiendo ${uploadedFiles.length} documentos a la integración ${integrationId}`);\n\n              // Preparar la información de los documentos subidos\n              const documentsData = uploadedFiles.map(file => ({\n                id: crypto.randomUUID(),  // Asignar un ID único a cada documento\n                filename: file.originalname,\n                path: file.path,\n                mimetype: file.mimetype,\n                size: file.size,\n                originalName: file.originalname,\n              }));\n\n              // Actualizar documentsData en la integración\n              const currentDocs = Array.isArray(integration.documentsData) ? integration.documentsData : [];\n              const updatedDocs = [...currentDocs, ...documentsData];\n\n              console.log(`Actualizando integración ${integrationId} con ${updatedDocs.length} documentos`);\n\n              // Actualizar la integración con los nuevos documentos\n              const updatedIntegration = await storage.updateIntegration(integration.id, {\n                documentsData: updatedDocs\n              });\n\n              console.log(`Integración actualizada correctamente. Nuevos documentos añadidos: ${documentsData.length}`);\n\n              res.json({ \n                success: true, \n                message: `${documentsData.length} documentos subidos correctamente`,\n                documents: documentsData,\n                integration: updatedIntegration\n              });\n            } catch (error) {\n              console.error('Error en carga de documentos:', error);\n              res.status(500).json({ \n                message: 'Error al procesar la carga de documentos',\n                error: error instanceof Error ? error.message : String(error)\n              });\n            }\n          });\n   // Ruta para eliminar un documento específico de una integración\n    app.delete('/api/documents/:id', authenticateJWT, async (req, res) => {\n      try {\n        const documentId = req.params.id;\n        console.log(`Intentando eliminar documento con ID: ${documentId}`);\n\n        if (!documentId) {\n          return res.status(400).json({ message: 'ID de documento no proporcionado' });\n        }\n\n        // Como necesitamos buscar en todas las integraciones del usuario para encontrar el documento,\n        // primero obtenemos todas las integraciones del usuario autenticado\n        const user = req.user as { id: number };\n        const integrations = await storage.getIntegrations(user.id);\n\n        // Buscar la integración que contiene el documento\n        let foundIntegration = null;\n        let foundDocumentIndex = -1;\n\n        for (const integration of integrations) {\n          if (Array.isArray(integration.documentsData)) {\n            const docIndex = integration.documentsData.findIndex(doc => doc.id === documentId);\n            if (docIndex !== -1) {\n              foundIntegration = integration;\n              foundDocumentIndex = docIndex;\n              break;\n            }\n          }\n        }\n\n        if (!foundIntegration || foundDocumentIndex === -1) {\n          return res.status(404).json({ message: 'Documento no encontrado' });\n        }\n\n        // Eliminar el archivo físico si existe\n        const doc = foundIntegration.documentsData[foundDocumentIndex];\n        if (doc.path && fs.existsSync(doc.path)) {\n          fs.unlinkSync(doc.path);\n        }\n\n        // Eliminar el documento de la lista de documentos\n        const updatedDocs = [...foundIntegration.documentsData];\n        updatedDocs.splice(foundDocumentIndex, 1);\n\n        console.log(`Actualizando integración ${foundIntegration.id} después de eliminar documento. Documentos restantes: ${updatedDocs.length}`);\n\n        // Actualizar la integración con la lista de documentos actualizada\n        await storage.updateIntegration(foundIntegration.id, {\n          documentsData: updatedDocs\n        });\n\n        res.json({ \n          success: true, \n          message: 'Documento eliminado correctamente',\n          integrationId: foundIntegration.id\n        });\n      } catch (error) {\n        console.error('Error al eliminar documento:', error);\n        res.status(500).json({ \n          message: 'Error al eliminar el documento',\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    });\n\n    // ================ Subscription Routes ================\n\n    // Obtener el estado de la suscripción del usuario\n    app.get(\"/api/subscription/status\", verifyToken, async (req, res) => {\n      try {\n        const userId = req.userId;\n\n        // Obtener todas las suscripciones del usuario\n        const subscriptions = await storage.getUserSubscriptions(userId);\n\n        // Si no hay suscripciones, devolver el plan gratuito por defecto\n        if (!subscriptions || subscriptions.length === 0) {\n          return res.json({\n            tier: \"free\",\n            status: \"active\",\n            interactionsLimit: getInteractionLimitByTier(\"free\"),\n            interactionsUsed: 0,\n            expiresAt: null\n          });\n        }\n\n        // Encontrar la suscripción activa más reciente (ordenadas por fecha de creación descendente)\n        const activeSubscription = subscriptions\n          .filter(sub => sub.status === \"active\")\n          .sort((a, b) => new Date(b.createdAt || new Date()).getTime() - new Date(a.createdAt || new Date()).getTime())[0];\n\n        if (!activeSubscription) {\n          return res.json({\n            tier: \"free\",\n            status: \"active\",\n            interactionsLimit: getInteractionLimitByTier(\"free\"),\n            interactionsUsed: 0,\n            expiresAt: null\n          });\n        }\n\n        // Si hay una suscripción activa con Stripe, verificar su estado actual\n        if (activeSubscription.stripeSubscriptionId) {\n          try {\n            const stripeSubscription = await retrieveSubscription(activeSubscription.stripeSubscriptionId);\n\n            // Actualizar el estado si ha cambiado en Stripe\n            if (stripeSubscription && stripeSubscription.status !== activeSubscription.status) {\n              await storage.updateSubscription(activeSubscription.id, {\n                status: stripeSubscription.status\n              });\n              activeSubscription.status = stripeSubscription.status;\n            }\n          } catch (stripeError) {\n            console.error(\"Error verificando suscripción en Stripe:\", stripeError);\n            // Continuar con los datos que tenemos almacenados localmente\n          }\n        }\n\n        // Devolver información de la suscripción activa\n        res.json({\n          id: activeSubscription.id,\n          tier: activeSubscription.tier,\n          status: activeSubscription.status,\n          interactionsLimit: activeSubscription.interactionsLimit,\n          interactionsUsed: activeSubscription.interactionsUsed,\n          startDate: activeSubscription.startDate,\n          endDate: activeSubscription.endDate,\n          stripeCustomerId: activeSubscription.stripeCustomerId,\n          stripeSubscriptionId: activeSubscription.stripeSubscriptionId\n        });\n      } catch (error) {\n        console.error(\"Error obteniendo estado de suscripción:\", error);\n        res.status(500).json({ message: \"Error obteniendo estado de suscripción\" });\n      }\n    });\n\n    // Obtener los planes disponibles\n    app.get(\"/api/subscription/plans\", async (req, res) => {\n      try {\n        // Obtener los planes de precios disponibles desde la base de datos\n        const pricingPlans = await storage.getAvailablePricingPlans();\n\n        // Transformar los planes para que coincidan con el formato que espera el frontend\n        const plans = pricingPlans.map(plan => ({\n          id: plan.planId,\n          tier: plan.tier,\n          name: plan.name,\n          description: plan.description,\n          price: plan.price * 100, // Convertir a centavos para mantener compatibilidad con el formato existente\n          priceDisplay: plan.priceDisplay,\n          features: Array.isArray(plan.features) ? plan.features : getFeaturesByTier(plan.tier),\n          interactionsLimit: plan.interactionsLimit,\n          popular: plan.popular,\n          available: plan.available,\n          currency: plan.currency,\n          interval: plan.interval,\n          isAnnual: plan.isAnnual,\n          discount: plan.discount,\n          metadata: {\n            tier: plan.tier,\n            interactions: plan.interactionsLimit,\n            isAnnual: plan.isAnnual\n          }\n        }));\n\n        // Si no hay planes en la base de datos, utilizamos los planes predefinidos\n        if (plans.length === 0) {\n          console.log(\"No hay planes en la base de datos, utilizando planes predefinidos\");\n\n          const fallbackPlans = Object.entries(PRODUCTS)\n            .filter(([_, plan]) => plan.available)\n            .map(([id, plan]) => ({\n              id,\n              ...plan\n            }));\n\n          return res.json(fallbackPlans);\n        }\n\n        res.json(plans);\n      } catch (error) {\n        console.error(\"Error obteniendo planes:\", error);\n        res.status(500).json({ message: \"Error obteniendo planes disponibles\" });\n      }\n    });\n\n    // Crear una nueva suscripción o actualizar la existente\n    app.post(\"/api/subscription/checkout\", verifyToken, async (req, res) => {\n      try {\n        const { planId, billingType } = req.body;\n        if (!planId) {\n          return res.status(400).json({ message: \"Se requiere un ID de plan\" });\n        }\n\n        // Verificar si se ha seleccionado facturación anual o mensual\n        const isAnnual = billingType === 'annual';\n\n        // Obtener el usuario actual\n        const user = await storage.getUser(req.userId);\n        if (!user) {\n          return res.status(404).json({ message: \"Usuario no encontrado\" });\n        }\n\n        // Construir la clave del producto según el plan y tipo de facturación\n        let productKey = planId.toLowerCase();\n\n        // Si seleccionó facturación anual pero el planId no contiene 'annual', \n        // buscamos la versión anual del mismo plan\n        if (isAnnual && !productKey.includes('annual')) {\n          productKey = `${productKey}-annual`;\n        }\n\n        // Encontrar el producto correspondiente al plan seleccionado\n        const productInfo = PRODUCTS[productKey];\n        if (!productInfo) {\n          return res.status(404).json({ message: \"Plan no encontrado\" });\n        }\n\n        // Si es plan gratuito, crear una suscripción sin pasar por Stripe\n        if (planId === 'free' || productInfo.price === 0) {\n          // Revisar si ya existe una suscripción activa gratuita\n          const existingSubs = await storage.getUserSubscriptions(req.userId);\n          const activeFree = existingSubs.find(sub => \n            sub.tier === 'free' && sub.status === 'active'\n          );\n\n          if (activeFree) {\n            return res.json({\n              success: true,\n              subscription: activeFree,\n              message: \"Ya tienes un plan gratuito activo\"\n            });\n          }\n\n          // Crear nueva suscripción gratuita\n          const newSub = await storage.createSubscription({\n            userId: req.userId,\n            tier: 'free',\n            status: 'active',\n            interactionsLimit: getInteractionLimitByTier('free'),\n            interactionsUsed: 0,\n            startDate: new Date(),\n            // El plan gratuito no tiene fecha de finalización\n          });\n\n          return res.json({\n            success: true,\n            subscription: newSub,\n            message: \"Plan gratuito activado con éxito\"\n          });\n        }\n\n        // Para planes pagos, procesar con Stripe\n        // 1. Crear o recuperar producto en Stripe\n        const product = await createOrRetrieveProduct(productInfo);\n        if (!product) {\n          return res.status(500).json({ message: \"Error creando producto en Stripe\" });\n        }\n\n        // 2. Crear o actualizar precio en Stripe\n        const price = await createOrUpdatePrice(\n          product, \n          productInfo.price,\n          productInfo.interval as 'month' | 'year' || 'month'\n        );\n        if (!price) {\n          return res.status(500).json({ message: \"Error creando precio en Stripe\" });\n        }\n\n        // 3. Crear o actualizar cliente en Stripe si el usuario tiene un email\n        let customerId = user.stripeCustomerId;\n        if (user.email) {\n          const customer = await createOrUpdateCustomer(user.email, user.fullName || user.username, user.stripeCustomerId || undefined);\n          if (customer) {\n            customerId = customer.id;\n\n            // Actualizar ID de cliente en la base de datos si es nuevo\n            if (!user.stripeCustomerId) {\n              // Esta función debería estar implementada en storage\n              await storage.updateUserStripeInfo(user.id, {\n                stripeCustomerId: customer.id,\n                stripeSubscriptionId: user.stripeSubscriptionId || ''\n              });\n            }\n          }\n        }\n\n        // 4. Crear sesión de checkout\n        const successUrl = `${req.protocol}://${req.get('host')}/dashboard/subscription/success?session_id={CHECKOUT_SESSION_ID}`;\n        const cancelUrl = `${req.protocol}://${req.get('host')}/dashboard/subscription/cancel`;\n\n        const session = await createCheckoutSession(\n          customerId || undefined,\n          price.id,\n          successUrl,\n          cancelUrl\n        );\n\n        if (!session) {\n          return res.status(500).json({ message: \"Error creando sesión de checkout\" });\n        }\n\n        res.json({ \n          success: true, \n          sessionId: session.id,\n          sessionUrl: session.url,\n          message: \"Sesión de checkout creada con éxito\"\n        });\n      } catch (error) {\n        console.error(\"Error creando sesión de checkout:\", error);\n        res.status(500).json({ message: \"Error procesando la solicitud de pago\" });\n      }\n    });\n\n    // Cancelar una suscripción activa\n    app.post(\"/api/subscription/cancel\", verifyToken, async (req, res) => {\n      try {\n        const userId = req.userId;\n        const { subscriptionId } = req.body;\n\n        if (!subscriptionId) {\n          return res.status(400).json({ message: \"Se requiere ID de suscripción\" });\n        }\n\n        // Verificar que la suscripción existe y pertenece al usuario\n        const subscription = await storage.getSubscription(subscriptionId);\n\n        if (!subscription) {\n          return res.status(404).json({ message: \"Suscripción no encontrada\" });\n        }\n\n        if (subscription.userId !== userId) {\n          return res.status(403).json({ message: \"No tienes permiso para cancelar esta suscripción\" });\n        }\n\n        // Cancelar en Stripe si tiene ID de suscripción de Stripe\n        if (subscription.stripeSubscriptionId) {\n          try {\n            await cancelSubscription(subscription.stripeSubscriptionId);\n          } catch (stripeError) {\n            console.error(\"Error cancelando suscripción en Stripe:\", stripeError);\n            // Continuar con la cancelación local incluso si falló en Stripe\n          }\n        }\n\n        // Actualizar estado en nuestra base de datos\n        const updated = await storage.updateSubscription(subscriptionId, {\n          status: \"canceled\",\n          endDate: new Date()\n        });\n\n        res.json({\n          success: true,\n          subscription: updated,\n          message: \"Suscripción cancelada con éxito\"\n        });\n      } catch (error) {\n        console.error(\"Error cancelando suscripción:\", error);\n        res.status(500).json({ message: \"Error procesando la solicitud de cancelación\" });\n      }\n    });\n\n    // ================ Widget Routes ================\n    app.get(\"/api/widget/:apiKey\", async (req, res) => {\n      try {\n        const { apiKey } = req.params;\n\n        // Validate API key and get integration\n        const integration = await storage.getIntegrationByApiKey(apiKey);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Verificar si es la integración del sitio principal y restringir acceso\n        // Las IDs son diferentes en tu entorno, en la estructura original el sitio web principal usa ID 0\n        // const isMainIntegration = integration.name === 'Techcolca21';\n        // const isPablo = req.userId === 1; // ID del usuario Pablo\n\n        // Si es la integración principal y el usuario no es Pablo, verificar la operación\n        // if (isMainIntegration && req.path.includes('/edit') && !isPablo) {\n       //    return res.status(403).json({ message: \"Solo Pablo puede configurar el chat principal del sitio web\" });\n     //    }\n\n        // Get user settings\n        const settings = await storage.getSettings(integration.userId);\n\n        // Update visitor count\n        await storage.incrementVisitorCount(integration.id);\n\n        // Use integration-specific customization if available, fallback to global settings\n        const customization = integration.customization || {};\n\n        // Check if request is authenticated to provide user info\n        const token = req.cookies?.auth_token || \n                      (req.headers.authorization && req.headers.authorization.startsWith('Bearer ') \n                       ? req.headers.authorization.slice(7) : null);\n\n        let userInfo = null;\n        if (token) {\n          try {\n            const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n            const authenticatedUser = await storage.getUser(decoded.userId);\n            if (authenticatedUser) {\n              userInfo = {\n                name: authenticatedUser.fullName || authenticatedUser.username\n              };\n            }\n          } catch (error) {\n            console.error(\"Error getting user info for widget:\", error);\n          }\n        }\n\n        // Return widget configuration\n        res.json({\n          integration: {\n            id: integration.id,\n            name: integration.name,\n            url: integration.url,\n            themeColor: integration.themeColor,\n            position: integration.position,\n            active: integration.active,\n            visitorCount: integration.visitorCount,\n            botBehavior: integration.botBehavior,\n            widgetType: integration.widgetType || 'bubble',\n            description: integration.description,\n            ignoredSectionsText: integration.ignoredSectionsText,\n            language: integration.language || 'es',\n            textColor: integration.textColor || 'auto',\n            // No enviamos datos sensibles como userId o apiKey al cliente\n          },\n          settings: {\n            assistantName: customization.assistantName || (settings as any)?.assistantName || integration.name,\n            defaultGreeting: customization.defaultGreeting || (settings as any)?.defaultGreeting || `Hola, soy ${integration.name}. ¿En qué puedo ayudarte?`,\n            showAvailability: customization.showAvailability !== undefined ? customization.showAvailability : (settings as any)?.showAvailability,\n            userBubbleColor: customization.userBubbleColor || (settings as any)?.userBubbleColor,\n            assistantBubbleColor: customization.assistantBubbleColor || (settings as any)?.assistantBubbleColor,\n            font: customization.font || (settings as any)?.font,\n            conversationStyle: customization.conversationStyle || (settings as any)?.conversationStyle,\n                  },\n          userInfo: userInfo, // Include user info for personalized greetings\n        });\n      } catch (error) {\n        console.error(\"Get widget error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // New endpoint for getting visitor conversations (supports fullscreen mode)\n    app.get(\"/api/widget/:apiKey/conversations/:visitorId\", async (req, res) => {\n      try {\n        const { apiKey, visitorId } = req.params;\n\n        // Validate API key and get integration\n        const integration = await storage.getIntegrationByApiKey(apiKey);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Get conversations for this visitor\n        const conversations = await storage.getConversations(integration.id);\n        const visitorConversations = conversations.filter(conv => \n          conv.visitorId === visitorId\n        );\n\n        res.json(visitorConversations);\n      } catch (error) {\n        console.error(\"Get visitor conversations error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // New endpoint for getting messages from a specific conversation (supports fullscreen mode)\n    app.get(\"/api/widget/:apiKey/conversation/:conversationId/messages\", async (req, res) => {\n      try {\n        const { apiKey, conversationId } = req.params;\n\n        // Validate API key and get integration\n        const integration = await storage.getIntegrationByApiKey(apiKey);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Get conversation and verify it belongs to this integration\n        const conversation = await storage.getConversation(parseInt(conversationId));\n        if (!conversation || conversation.integrationId !== integration.id) {\n          return res.status(404).json({ message: \"Conversation not found\" });\n        }\n\n        // Get messages for this conversation\n        const messages = await storage.getConversationMessages(parseInt(conversationId));\n\n        res.json(messages);\n      } catch (error) {\n        console.error(\"Get conversation messages error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    app.post(\"/api/widget/:apiKey/conversation\", async (req, res) => {\n      try {\n        const { apiKey } = req.params;\n        const { visitorId, visitorName, visitorEmail } = req.body;\n\n        // Validate API key and get integration\n        const integration = await storage.getIntegrationByApiKey(apiKey);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Create conversation\n        const conversation = await storage.createConversation({\n          integrationId: integration.id,\n          visitorId,\n          visitorName: visitorName || null,\n          visitorEmail: visitorEmail || null,\n        });\n\n        res.status(201).json(conversation);\n      } catch (error) {\n        console.error(\"Create conversation error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // New endpoint for bubble widget system\n    app.post(\"/api/widget/:apiKey/send\", async (req, res) => {\n      try {\n        const { apiKey } = req.params;\n        const { message, visitorId, currentUrl, pageTitle, visitorName, visitorEmail } = req.body;\n\n        // Validate input\n        if (!message || !visitorId) {\n          return res.status(400).json({ message: \"message and visitorId are required\" });\n        }\n\n        // Validate API key and get integration\n        const integration = await storage.getIntegrationByApiKey(apiKey);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Find or create conversation for this visitor\n        const conversations = await storage.getConversations(integration.id);\n        let conversation = conversations.find(conv => conv.visitorId === visitorId);\n\n        if (!conversation) {\n          // Create new conversation\n          conversation = await storage.createConversation({\n            integrationId: integration.id,\n            visitorId,\n            visitorName: visitorName || null,\n            visitorEmail: visitorEmail || null,\n            title: message.substring(0, 50) + \"...\"\n          });\n        }\n\n        // Create user message\n        await storage.createMessage({\n          conversationId: conversation.id,\n          content: message,\n          role: \"user\",\n        });\n\n        // Get all messages for context\n        const messages = await storage.getConversationMessages(conversation.id);\n\n        // Get site content for context (same logic as working endpoint)\n        let context = \"\";\n        const siteContent = await storage.getSiteContent(integration.id);\n        if (siteContent.length > 0) {\n          context = siteContent.map(content => \n            `URL: ${content.url}\\nTitle: ${content.title || 'N/A'}\\nContent: ${content.content.substring(0, 500)}...`\n          ).join('\\n\\n');\n        }\n\n        // Get user settings only for greeting (if needed)\n        const userSettings = await storage.getSettings(integration.userId);\n\n        // Prepare bot configuration using INTEGRATION-SPECIFIC settings\n        const botConfig = {\n          assistantName: integration.name, // Use integration name\n          defaultGreeting: userSettings?.defaultGreeting || `Hola, soy ${integration.name}. ¿En qué puedo ayudarte?`,\n          conversationStyle: integration.botBehavior, // Use integration's specific bot behavior\n          description: integration.description,\n          isWidget: true // Marca este bot como widget para aplicar restricciones\n        };\n\n        console.log('AIPPS Debug: Integration-specific bot configuration prepared for AI:', {\n          integrationName: integration.name,\n          assistantName: botConfig.assistantName,\n          conversationStyle: botConfig.conversationStyle?.substring(0, 100) + '...',\n          hasIntegrationBehavior: !!integration.botBehavior\n        });\n\n        // Get documents and site content for knowledge base  \n        let documents = [];\n        let siteContentItems = [];\n\n\n        // Load site content items\n        try {\n          siteContentItems = await storage.getSiteContent(integration.id);\n        } catch (error) {\n          console.error('Error loading site content:', error);\n          siteContentItems = [];\n        }\n\n        // Extract and process documents from integration's documentsData\n        if (integration.documentsData && Array.isArray(integration.documentsData)) {\n          for (const doc of integration.documentsData) {\n            const content = await extractDocumentContent(doc);\n\n            documents.push({\n              original_name: doc.originalName || doc.filename,\n              filename: doc.filename,\n              content: content,\n              path: doc.path\n            });\n          }\n        }\n\n\n        // Build enhanced context with knowledge base\n        const knowledgeBase = buildKnowledgeBase(integration, documents, siteContentItems);\n        const enhancedContext = context + \"\\n\\n\" + knowledgeBase;\n\n\n        // Detect language and generate AI response with bot configuration\n        const detectedLanguage = detectLanguage(message);\n\n\n\n        // Add timeout wrapper for OpenAI call\n  const completionPromise = generateChatCompletion(\n    messages.map(m => ({ role: m.role, content: m.content })),\n    enhancedContext,\n    detectedLanguage,\n    botConfig\n  );\n\n  const timeoutPromise = new Promise((_, reject) =>\n    setTimeout(() => reject(new Error('OpenAI timeout')), 25000)\n  );\n\n  const completion = await Promise.race([completionPromise, timeoutPromise]);\n\n        // Validate completion response\n        if (!completion || !completion.message || !completion.message.content) {\n          console.error(\"AI completion returned null or empty content:\", completion);\n          throw new Error(\"Failed to generate AI response\");\n        }\n\n        // Create assistant message\n        await storage.createMessage({\n          conversationId: conversation.id,\n          content: completion.message.content,\n          role: \"assistant\",\n        });\n\n        // Generate conversation title if needed (after 1st or 2nd user message)\n        const allMessages = await storage.getConversationMessages(conversation.id);\n        const userMessages = allMessages.filter(m => m.role === 'user');\n\n\n        if ((!conversation.title || conversation.title === null || conversation.title === \"null\" || conversation.title === \"Nueva conversación\" || conversation.title === \"New conversation\" || conversation.title === \"Nouvelle conversation\") && userMessages.length >= 1) {\n          try {\n            const { generateConversationTitle } = await import('./lib/openai');\n            const firstMessage = userMessages[0].content;\n            const secondMessage = userMessages[1]?.content;\n\n            const title = await generateConversationTitle(\n              firstMessage,\n              secondMessage,\n              detectedLanguage\n            );\n\n            await storage.updateConversation(conversation.id, { title });\n          } catch (error) {\n            console.error(\"Error generating conversation title:\", error);\n          }\n        }\n\n        res.status(201).json({\n          response: completion.message.content,\n          conversationId: conversation.id,\n          success: true\n        });\n      } catch (error) {\n        console.error(\"Widget send message error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n  // New endpoint for sending messages to specific conversations (supports both bubble and authenticated modes)\n    app.post(\"/api/widget/:apiKey/conversation/:conversationId/send\", async (req, res) => {\n      try {\n        console.log(`🚀 POST /api/widget/.../conversation/.../send iniciado`);\n      console.log(`Request body:`, req.body);\n      console.log(`Params:`, req.params);\n        const { apiKey, conversationId } = req.params;\n        const { message, visitorId, currentUrl, pageTitle, visitorName, visitorEmail } = req.body;\n\n        // Check if this is an authenticated request (fullscreen widget)\n        const token = req.cookies?.auth_token || \n                      (req.headers.authorization && req.headers.authorization.startsWith('Bearer ') \n                       ? req.headers.authorization.slice(7) : null);\n\n        let isAuthenticated = false;\n        let authenticatedUserId = null;\n\n        if (token) {\n          try {\n            const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n            isAuthenticated = true;\n            authenticatedUserId = decoded.userId;\n          } catch (error) {\n            console.error('JWT verification failed:', error);\n            return res.status(401).json({ message: \"Invalid or expired token\" });\n          }\n        }\n\n        // Validate input based on authentication mode\n        if (!message) {\n          return res.status(400).json({ message: \"message is required\" });\n        }\n\n        if (!isAuthenticated && !visitorId) {\n          return res.status(400).json({ message: \"visitorId is required for anonymous access\" });\n        }\n\n        const conversationIdNum = parseInt(conversationId);\n        if (isNaN(conversationIdNum)) {\n          return res.status(400).json({ message: \"Invalid conversation ID\" });\n        }\n\n        // Validate API key and get integration\n        const integration = await storage.getIntegrationByApiKey(apiKey);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Verify conversation exists and belongs to this integration\n        const conversation = await storage.getConversation(conversationIdNum);\n        if (!conversation || conversation.integrationId !== integration.id) {\n          return res.status(404).json({ message: \"Conversation not found\" });\n        }\n\n        // Additional security check for authenticated users\n        if (isAuthenticated) {\n          // Verify user owns this integration OR it's the demo integration for AIPPS website\n         const isDemoIntegration = integration.apiKey === '57031f04127cd041251b1e9abd678439fd199b2f30b75a1f';\n  // Para widgets externos, permitir acceso si la integración existe y es válida\n  const isExternalWidget = req.headers.origin && !req.headers.origin.includes('aipps.ca');\n  if (!isDemoIntegration && !isExternalWidget && integration.userId !== authenticatedUserId) {\n    return res.status(403).json({ message: \"Unauthorized access to this integration\" });\n  }\n\n          // Verify conversation belongs to this authenticated user\n          const expectedVisitorId = `user_${authenticatedUserId}`;\n          if (conversation.visitorId !== expectedVisitorId) {\n            return res.status(403).json({ message: \"Unauthorized access to this conversation\" });\n          }\n\n        }\n\n        // Create user message\n        await storage.createMessage({\n          conversationId: conversationIdNum,\n          content: message,\n          role: \"user\",\n        });\n\n        // Get all messages for context\n        const messages = await storage.getConversationMessages(conversationIdNum);\n\n        // Get site content for context\n        let context = \"\";\n        const siteContent = await storage.getSiteContent(integration.id);\n        if (siteContent.length > 0) {\n          context = siteContent.map(content => \n            `URL: ${content.url}\\nTitle: ${content.title || 'N/A'}\\nContent: ${content.content.substring(0, 500)}...`\n          ).join('\\n\\n');\n        }\n\n        // Get user settings\n        const userSettings = await storage.getSettings(integration.userId);\n\n        // Get authenticated user information for personalization\n        let userContext = \"\";\n        if (isAuthenticated && authenticatedUserId) {\n          try {\n            const authenticatedUser = await storage.getUser(authenticatedUserId);\n            if (authenticatedUser) {\n              const userName = authenticatedUser.fullName || authenticatedUser.username;\n\n              // Get user's conversation history to understand context\n              const allConversations = await storage.getConversations(integration.id);\n              const userConversations = allConversations.filter(conv => \n                conv.visitorId === `user_${authenticatedUserId}`\n              );\n\n              let conversationHistory = \"\";\n              if (userConversations.length > 1) {\n                // Get recent conversation titles for context\n\n                  const recentTitles = userConversations\n    .sort((a, b) => {\n      const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n      const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n      return dateB - dateA;\n    })\n    .slice(0, 3)\n                  .map(conv => conv.title)\n                  .filter(title => title && title !== 'Nueva conversación')\n                  .join(', ');\n\n                if (recentTitles) {\n                  conversationHistory = `\\n\\nCONTEXTO DE CONVERSACIONES ANTERIORES: ${userName} ha hablado contigo antes sobre estos temas: ${recentTitles}. Úsalo como contexto para ser más natural y evitar preguntas repetitivas.`;\n                }\n              }\n\n              userContext = `\\n\\nNOTA IMPORTANTE: El usuario que te está escribiendo se llama ${userName}. Puedes dirigirte a él por su nombre para hacer la conversación más personal y cercana. Sé natural y amigable, no repitas siempre las mismas preguntas sobre problemas o proyectos.${conversationHistory}`;\n            }\n          } catch (error) {\n            console.error(\"Error getting authenticated user info:\", error);\n          }\n        }\n\n        // Prepare bot configuration using integration-specific settings\n        const botConfig = {\n          assistantName: integration.name,\n          defaultGreeting: userSettings?.defaultGreeting || `Hola, soy ${integration.name}. ¿En qué puedo ayudarte?`,\n          conversationStyle: integration.botBehavior + userContext,\n          description: integration.description,\n          isWidget: true // Marca este bot como widget para aplicar restricciones\n        };\n\n        console.log('AIPPS Debug: Sending message to specific conversation:', {\n          conversationId: conversationIdNum,\n          integrationName: integration.name,\n          messagePreview: message.substring(0, 50) + '...'\n        });\n\n             // Detect language from user message\n        const detectedLanguage = detectLanguage(message);\n\n        // Get documents and site content for knowledge base\n        let documents = [];\n        let siteContentItems = [];\n\n        // Extract documents from integration\n        if (integration.documentsData && Array.isArray(integration.documentsData)) {\n          for (const doc of integration.documentsData) {\n            const content = await extractDocumentContent(doc);\n            documents.push({\n              original_name: doc.originalName || doc.filename,\n              filename: doc.filename,\n              content: content,\n              path: doc.path\n            });\n          }\n        }\n\n        // Get site content\n        try {\n          siteContentItems = await storage.getSiteContent(integration.id);\n        } catch (error) {\n          console.error('Error loading site content:', error);\n          siteContentItems = [];\n        }\n\n        // Build enhanced context with knowledge base\n        const knowledgeBase = buildKnowledgeBase(integration, documents, siteContentItems);\n        const enhancedContext = context + userContext + \"\\n\\n\" + knowledgeBase;\n\n\n  // Add timeout wrapper for OpenAI call\n  const completionPromise = generateChatCompletion(\n          messages.map(m => ({ role: m.role, content: m.content })),\n          enhancedContext,\n          detectedLanguage,\n          botConfig\n        );\n\n  const timeoutPromise = new Promise((_, reject) =>\n    setTimeout(() => reject(new Error('OpenAI timeout')), 25000)\n  );\n\n  const completion = await Promise.race([completionPromise, timeoutPromise]);\n\n        // Validate completion response\n        if (!completion || !completion.message || !completion.message.content) {\n          console.error(\"AI completion returned null or empty content:\", completion);\n          throw new Error(\"Failed to generate AI response\");\n        }\n\n        // Create assistant message\n        await storage.createMessage({\n          conversationId: conversationIdNum,\n          content: completion.message.content,\n          role: \"assistant\",\n        });\n\n        // Generate conversation title if needed (after 1st or 2nd user message)\n        const allMessages = await storage.getConversationMessages(conversationIdNum);\n        const userMessages = allMessages.filter(m => m.role === 'user');\n\n\n        if ((!conversation.title || conversation.title === null || conversation.title === \"null\" || conversation.title === \"Nueva conversación\" || conversation.title === \"New conversation\" || conversation.title === \"Nouvelle conversation\") && userMessages.length >= 1) {\n          try {\n            const { generateConversationTitle } = await import('./lib/openai');\n            const firstMessage = userMessages[0].content;\n            const secondMessage = userMessages[1]?.content;\n\n            const title = await generateConversationTitle(\n              firstMessage,\n              secondMessage,\n              detectedLanguage\n            );\n\n            await storage.updateConversation(conversationIdNum, { title: title || \"Nueva conversación\" });\n          } catch (error) {\n            console.error(\"Error generating conversation title:\", error);\n          }\n        }\n\n        res.status(201).json({\n          response: completion.message.content,\n          conversationId: conversationIdNum,\n          success: true\n              });\n      } catch (error) {\n        console.error(\"🚨 Widget specific conversation send error:\", {\n          error: error.message,\n          stack: error.stack,\n          apiKey: req.params.apiKey,\n          conversationId: req.params.conversationId,\n          timestamp: new Date().toISOString()\n        });\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    app.post(\"/api/widget/:apiKey/message\", async (req, res) => {\n      try {\n        const { apiKey } = req.params;\n        const { conversationId, content, role, pageContext, language } = req.body;\n\n        // Validate input\n        if (!conversationId || !content || !role) {\n          return res.status(400).json({ message: \"conversationId, content, and role are required\" });\n        }\n\n        // Validate API key and get integration\n        const integration = await storage.getIntegrationByApiKey(apiKey);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Create message\n        const message = await storage.createMessage({\n          conversationId,\n          content,\n          role,\n        });\n\n        // If user message, generate AI response\n        if (role === \"user\") {\n          // Get conversation messages\n          const messages = await storage.getConversationMessages(conversationId);\n\n          // Get site content for context\n          let context = \"\";\n\n          // First check if there's page context from current page\n          if (pageContext && pageContext.content) {\n            console.log(`Recibido contenido de página actual: ${pageContext.url}`);\n\n            // Store the current page content in the database for future use\n            try {\n              const existingContent = await storage.getSiteContentByUrl(integration.id, pageContext.url);\n\n              if (existingContent) {\n                // Update existing record\n                await storage.updateSiteContent(existingContent.id, {\n                  content: pageContext.content,\n                  title: pageContext.title || null,\n                  // El campo lastUpdated se actualizará automáticamente en la base de datos\n                });\n                console.log(`Actualizado contenido existente para: ${pageContext.url}`);\n              } else {\n                // Create new record\n                await storage.createSiteContent({\n                  integrationId: integration.id,\n                  url: pageContext.url,\n                  title: pageContext.title || null,\n                  content: pageContext.content,\n                  // Nota: lastUpdated se establece automáticamente como valor predeterminado en el esquema\n                });\n                console.log(`Almacenado nuevo contenido para: ${pageContext.url}`);\n              }\n            } catch (error) {\n              console.error(\"Error al guardar contenido de página:\", error);\n              // Continúa con la ejecución incluso si hay error en el almacenamiento\n            }\n\n            // Use the current page content as context\n            context = `Información de la página actual (${pageContext.url}):\\nTítulo: ${pageContext.title || 'Sin título'}\\n${pageContext.content}\\n\\nResponde basándote en esta información cuando sea relevante.`;\n          } else {\n            // If no current page context, use stored site content\n            const siteContent = await storage.getSiteContent(integration.id);\n\n            if (siteContent && siteContent.length > 0) {\n              // Limitar la cantidad de contenido para no exceder tokens de OpenAI\n              const combinedContent = siteContent\n                .map(page => `Página: ${page.url}\\nTítulo: ${page.title || 'Sin título'}\\n${page.content}`)\n                .join('\\n\\n')\n                .slice(0, 10000); // Limitar a ~10k caracteres\n\n              context = `Información del sitio web:\\n${combinedContent}\\n\\nResponde usando esta información cuando sea relevante.`;\n            }\n          }\n\n          // Procesar el contenido de los documentos, si existen\n          let documentsContext = '';\n          if (integration.documentsData && Array.isArray(integration.documentsData) && integration.documentsData.length > 0) {\n            console.log(`Procesando ${integration.documentsData.length} documentos para contexto...`);\n\n            try {\n              // Procesar todos los documentos y extraer su contenido\n              const processedDocs = await documentProcessor.processDocuments(integration.documentsData);\n\n              if (processedDocs.length > 0) {\n                // Crear contexto con el contenido de los documentos, limitando el tamaño total\n                let totalContent = '';\n                const maxContentLength = 8000; // Limitar a aproximadamente 8000 caracteres en total para no exceder límites de tokens\n\n                for (const doc of processedDocs) {\n                  const docContent = `Documento: ${doc.originalName}\\nContenido:\\n${doc.content.substring(0, Math.min(doc.content.length, 2000))}${doc.content.length > 2000 ? '...(continúa)' : ''}`;\n\n                  // Si agregar este documento excedería el límite, paramos\n                  if (totalContent.length + docContent.length > maxContentLength) {\n                    totalContent += `\\n\\n[Hay ${processedDocs.length - totalContent.split('Documento:').length + 1} documentos más que no se incluyen por limitaciones de espacio]`;\n                    break;\n                  }\n\n                  totalContent += (totalContent ? '\\n\\n' : '') + docContent;\n                }\n\n                const docsContent = totalContent;\n\n                documentsContext = `\\n\\nInformación de documentos cargados:\\n${docsContent}\\n\\n`;\n                console.log(`Procesados ${processedDocs.length} documentos para incluir en respuesta.`);\n              }\n            } catch (error) {\n              console.error(\"Error al procesar documentos:\", error);\n              // Si hay error, incluimos solo los nombres como antes\n              const docsInfo = integration.documentsData.map((doc: any) => \n                `Documento: ${doc.originalName} (${doc.mimetype})`\n              ).join('\\n');\n\n              documentsContext = `\\n\\nInformación de documentos disponibles:\\n${docsInfo}\\n\\n`;\n            }\n          }\n\n          // Agregar comportamiento del bot al contexto, si existe\n          if (integration.botBehavior) {\n            const botBehaviorContext = `Instrucciones de comportamiento: ${integration.botBehavior}\\n\\n`;\n            context = botBehaviorContext + (context || '');\n          }\n\n          // Añadir el contexto de los documentos\n          if (documentsContext) {\n            context = (context || '') + documentsContext;\n          }\n\n          console.log(`Generando respuesta con ${context ? 'contexto del sitio web y documentos' : 'sin contexto'}`);\n\n          // Detect language from user message - ALWAYS use detection, ignore external language parameter\n          const detectedLanguage = detectLanguage(content);\n          console.log(`Idioma detectado del mensaje \"${content}\": ${detectedLanguage}`);\n          console.log(`Parámetro de idioma recibido (ignorado): ${language}`);\n\n          // ALWAYS use detected language, ignore any external language parameter\n          const responseLanguage = detectedLanguage;\n\n          // Prepare bot configuration for widget with restrictions\n          const userSettings = await storage.getSettings(integration.userId);\n          const botConfig = {\n            assistantName: integration.name,\n            defaultGreeting: userSettings?.defaultGreeting || `Hola, soy ${integration.name}. ¿En qué puedo ayudarte?`,\n            conversationStyle: integration.botBehavior,\n            description: integration.description,\n            isWidget: true // Marca este bot como widget para aplicar restricciones\n          };\n\n          // Get documents and site content for knowledge base\n          let widgetDocuments = [];\n          let widgetSiteContent = [];\n\n          // Extract and process documents from integration's documentsData\n          if (integration.documentsData && Array.isArray(integration.documentsData)) {\n            for (const doc of integration.documentsData) {\n              const content = await extractDocumentContent(doc);\n\n              widgetDocuments.push({\n                original_name: doc.originalName || doc.filename,\n                filename: doc.filename,\n                content: content,\n                path: doc.path\n              });\n            }\n          }\n\n\n          // Build enhanced context with knowledge base\n          const knowledgeBase = buildKnowledgeBase(integration, widgetDocuments, widgetSiteContent);\n          const enhancedContext = context + \"\\n\\n\" + knowledgeBase;\n\n          // Generate AI response with detected language support and widget restrictions\n          console.log(`Generating response in language: ${responseLanguage}`);\n          const completion = await generateChatCompletion(\n            messages.map(msg => ({ role: msg.role, content: msg.content || '' })),\n            enhancedContext,\n            responseLanguage,\n            botConfig\n          );\n\n          // Save AI response\n          const aiMessage = await storage.createMessage({\n            conversationId,\n            content: completion.message.content,\n            role: \"assistant\",\n          });\n\n          // Return both messages\n          res.status(201).json({\n            userMessage: message,\n            aiMessage,\n          });\n        } else {\n          // Return the message\n          res.status(201).json(message);\n        }\n      } catch (error) {\n        console.error(\"Create message error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // ================ Conversation Routes ================\n    // Get all conversations for a user (from all their integrations)\n    app.get(\"/api/conversations\", authenticateJWT, async (req, res) => {\n      try {\n        // Obtener todas las integraciones del usuario\n        const integrations = await storage.getIntegrations(req.userId);\n\n        if (!integrations || integrations.length === 0) {\n          return res.json([]);\n        }\n\n        // Obtener IDs de integraciones\n        const integrationIds = integrations.map(integration => integration.id);\n\n        // Array para almacenar todas las conversaciones\n        let allConversations = [];\n\n        // Obtener conversaciones para cada integración\n        for (const integrationId of integrationIds) {\n          const conversations = await storage.getConversations(integrationId);\n          if (conversations && conversations.length > 0) {\n            // Añadir información de la integración a cada conversación\n            const integration = integrations.find(i => i.id === integrationId);\n            const conversationsWithIntegration = conversations.map(conv => ({\n              ...conv,\n              integrationName: integration?.name || \"Unknown Integration\",\n              integrationUrl: integration?.url || \"\"\n            }));\n\n            allConversations = [...allConversations, ...conversationsWithIntegration];\n          }\n        }\n\n        // Ordenar por fecha de creación (más reciente primero)\n        allConversations.sort((a, b) => {\n          const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n          const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n          return dateB - dateA;\n        });\n\n        res.json(allConversations);\n      } catch (error) {\n        console.error(\"Get conversations error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // Get one conversation by ID\n    app.get(\"/api/conversations/:id\", authenticateJWT, async (req, res) => {\n      try {\n        const conversationId = parseInt(req.params.id);\n\n        if (isNaN(conversationId)) {\n          return res.status(400).json({ message: \"Invalid conversation ID\" });\n        }\n\n        // Get conversation\n        const conversation = await storage.getConversation(conversationId);\n\n        if (!conversation) {\n          return res.status(404).json({ message: \"Conversation not found\" });\n        }\n\n        // Verify that user owns the integration this conversation belongs to\n        const integration = await storage.getIntegration(conversation.integrationId);\n\n        if (!integration || integration.userId !== req.userId) {\n          return res.status(403).json({ message: \"Unauthorized to view this conversation\" });\n        }\n\n        // Get integration details to add to response\n        const integrationData = {\n          name: integration.name,\n          url: integration.url\n        };\n\n        // Get message count for this conversation\n        const messages = await storage.getConversationMessages(conversationId);\n        const messageCount = messages.length;\n\n        // Enhance the conversation with additional data\n        const enhancedConversation = {\n          ...conversation,\n          integrationName: integration.name,\n          integrationUrl: integration.url,\n          messageCount\n        };\n\n        res.json(enhancedConversation);\n      } catch (error) {\n        console.error(\"Get conversation error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // Get conversations for a specific integration\n    app.get(\"/api/integrations/:integrationId/conversations\", authenticateJWT, async (req, res) => {\n      try {\n        const { integrationId } = req.params;\n\n        // Verificar que la integración pertenece al usuario\n        const integration = await storage.getIntegration(parseInt(integrationId));\n\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        if (integration.userId !== req.userId) {\n          return res.status(403).json({ message: \"Unauthorized\" });\n        }\n\n        const conversations = await storage.getConversations(parseInt(integrationId));\n        res.json(conversations);\n      } catch (error) {\n        console.error(\"Get integration conversations error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // Get messages for a specific conversation\n    app.get(\"/api/conversations/:conversationId/messages\", authenticateJWT, async (req, res) => {\n      try {\n        const conversationId = parseInt(req.params.conversationId);\n\n        // Verificar que la conversación existe\n        const conversation = await storage.getConversation(conversationId);\n        if (!conversation) {\n          return res.status(404).json({ message: \"Conversation not found\" });\n        }\n\n        // Verificar que el usuario tiene acceso a esta conversación\n        const integration = await storage.getIntegration(conversation.integrationId);\n        if (!integration || integration.userId !== req.userId) {\n          return res.status(403).json({ message: \"Unauthorized\" });\n        }\n\n        const messages = await storage.getConversationMessages(conversationId);\n        res.json(messages);\n      } catch (error) {\n        console.error(\"Get conversation messages error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // Delete conversation endpoint\n    app.delete(\"/api/widget/:apiKey/conversation/:conversationId\", async (req, res) => {\n      try {\n        const { apiKey, conversationId } = req.params;\n        const conversationIdNum = parseInt(conversationId);\n\n        // Validar que conversationId es un número válido\n        if (isNaN(conversationIdNum)) {\n          return res.status(400).json({ message: \"Invalid conversation ID\" });\n        }\n\n        // Obtener la integración por API key\n        const integration = await storage.getIntegrationByApiKey(apiKey);\n        if (!integration) {\n          return res.status(404).json({ message: \"Integration not found\" });\n        }\n\n        // Verificar que la conversación existe y pertenece a esta integración\n        const conversation = await storage.getConversation(conversationIdNum);\n        if (!conversation) {\n          return res.status(404).json({ message: \"Conversation not found\" });\n        }\n\n        if (conversation.integrationId !== integration.id) {\n          return res.status(403).json({ message: \"Unauthorized\" });\n        }\n\n        // Para modo fullscreen, verificar autenticación de usuario\n        if (req.headers.authorization) {\n          const token = req.headers.authorization.replace('Bearer ', '');\n          try {\n            const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n\n            // Verify user owns this integration OR it's the demo integration for AIPPS website\n            const isDemoIntegration = integration.apiKey === '57031f04127cd041251b1e9abd678439fd199b2f30b75a1f';\n            if (!isDemoIntegration && integration.userId !== decoded.userId) {\n              return res.status(403).json({ message: \"Unauthorized access to this integration\" });\n            }\n\n            // Verify conversation belongs to this authenticated user\n            const expectedVisitorId = `user_${decoded.userId}`;\n            if (conversation.visitorId !== expectedVisitorId) {\n              return res.status(403).json({ message: \"Unauthorized access to this conversation\" });\n            }\n          } catch (jwtError) {\n            return res.status(401).json({ message: \"Invalid authentication token\" });\n          }\n        }\n\n        // Eliminar la conversación\n        await storage.deleteConversation(conversationIdNum);\n\n        res.json({ success: true, message: \"Conversation deleted successfully\" });\n\n      } catch (error) {\n        console.error(\"Delete conversation error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    });\n\n    // Serve the embed script\n    app.get(\"/embed.js\", (req, res) => {\n      // Use import.meta.url instead of __dirname (which is not available in ES modules)\n      const currentDir = path.dirname(new URL(import.meta.url).pathname);\n      const embedScriptPath = path.resolve(currentDir, '../public/embed.js');\n\n      // Check if file exists\n      if (fs.existsSync(embedScriptPath)) {\n        res.setHeader(\"Content-Type\", \"application/javascript\");\n        res.sendFile(embedScriptPath);\n      } else {\n        res.status(404).json({ message: \"Embed script not found\" });\n      }\n    });\n\n    // Serve the form embed script with cache busting\n    app.get(\"/static/form-embed.js\", (req, res) => {\n      const currentDir = path.dirname(new URL(import.meta.url).pathname);\n      const formEmbedPath = path.resolve(currentDir, '../public/static/form-embed.js');\n\n      if (fs.existsSync(formEmbedPath)) {\n        // Add cache control headers to force fresh downloads\n        res.setHeader(\"Content-Type\", \"application/javascript\");\n        res.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n        res.setHeader(\"Pragma\", \"no-cache\");\n        res.setHeader(\"Expires\", \"0\");\n        res.sendFile(formEmbedPath);\n      } else {\n        res.status(404).json({ message: \"Form embed script not found\" });\n      }\n    });\n\n    // Serve the fullscreen embed script\n    app.get(\"/fullscreen-embed.js\", (req, res) => {\n      const currentDir = path.dirname(new URL(import.meta.url).pathname);\n      const embedScriptPath = path.resolve(currentDir, '../public/fullscreen-embed.js');\n\n      if (fs.existsSync(embedScriptPath)) {\n        res.setHeader(\"Content-Type\", \"application/javascript\");\n        res.sendFile(embedScriptPath);\n      } else {\n        res.status(404).json({ message: \"Fullscreen embed script not found\" });\n      }\n    });\n\n    // Serve test HTML file\n    app.get(\"/test-fullscreen.html\", (req, res) => {\n      const currentDir = path.dirname(new URL(import.meta.url).pathname);\n      const testFilePath = path.resolve(currentDir, '../test-fullscreen.html');\n\n      if (fs.existsSync(testFilePath)) {\n        res.setHeader(\"Content-Type\", \"text/html\");\n        res.sendFile(testFilePath);\n      } else {\n        res.status(404).json({ message: \"Test file not found\" });\n      }\n    });\n\n    // Serve new test HTML file\n    app.get(\"/test-fullscreen-new.html\", (req, res) => {\n      const currentDir = path.dirname(new URL(import.meta.url).pathname);\n      const testFilePath = path.resolve(currentDir, '../public/test-fullscreen-new.html');\n\n      if (fs.existsSync(testFilePath)) {\n        res.setHeader(\"Content-Type\", \"text/html\");\n        res.sendFile(testFilePath);\n      } else {\n        res.status(404).json({ message: \"New test file not found\" });\n      }\n    });\n\n    // Serve simple fullscreen HTML file\n    app.get(\"/simple-fullscreen.html\", (req, res) => {\n      const currentDir = path.dirname(new URL(import.meta.url).pathname);\n      const testFilePath = path.resolve(currentDir, '../public/simple-fullscreen.html');\n\n      if (fs.existsSync(testFilePath)) {\n        res.setHeader(\"Content-Type\", \"text/html\");\n        res.sendFile(testFilePath);\n      } else {\n        res.status(404).json({ message: \"Simple fullscreen file not found\" });\n      }\n    });\n\n    // ================ Admin Routes ================\n    // Obtener todos los usuarios con sus suscripciones (solo admin)\n    app.get(\"/api/admin/users\", authenticateJWT, isAdmin, async (req, res) => {\n      try {\n        // Obtener todos los usuarios con sus suscripciones en una sola consulta\n        const queryResult = await pool.query(\n          `SELECT \n            u.id, u.username, u.email, u.full_name, u.created_at, u.api_key, \n            u.stripe_customer_id, u.stripe_subscription_id,\n            s.id as subscription_id, s.tier, s.interactions_limit, s.interactions_used, \n            s.status, s.start_date, s.end_date  \n          FROM users u\n          LEFT JOIN subscriptions s ON u.id = s.user_id\n          ORDER BY u.id ASC`\n        );\n\n        // Transformar el resultado plano en una estructura anidada\n        const userMap = new Map();\n\n        // Agrupar usuarios con sus suscripciones\n        queryResult.rows.forEach(row => {\n          if (!userMap.has(row.id)) {\n            // Extraer datos del usuario\n            userMap.set(row.id, {\n              id: row.id,\n              username: row.username,\n              email: row.email,\n              full_name: row.full_name,\n              created_at: row.created_at,\n              api_key: row.api_key,\n              stripe_customer_id: row.stripe_customer_id,\n              stripe_subscription_id: row.stripe_subscription_id,\n              subscriptions: []\n            });\n          }\n\n          // Añadir suscripción si existe\n          if (row.subscription_id) {\n            const user = userMap.get(row.id);\n            user.subscriptions.push({\n              id: row.subscription_id,\n              tier: row.tier,\n              status: row.status,\n              interactions_limit: row.interactions_limit,\n              interactions_used: row.interactions_used,\n              start_date: row.start_date,\n              end_date: row.end_date\n            });\n          }\n        });\n\n        // Convertir Map a Array\n        const users = Array.from(userMap.values());\n        console.log(`Encontrados ${users.length} usuarios con sus suscripciones`);\n\n        res.json(users);\n      } catch (error) {\n        console.error(\"Error getting all users:\", error);\n        res.status(500).json({ message: \"Error al obtener usuarios\" });\n      }\n    });\n\n    // Obtener detalles de un usuario específico (solo admin)\n    app.get(\"/api/admin/users/:id\", authenticateJWT, isAdmin, async (req, res) => {\n      try {\n        const userId = parseInt(req.params.id);\n        if (isNaN(userId)) {\n          return res.status(400).json({ message: \"ID de usuario inválido\" });\n        }\n\n        // Obtener usuario\n        const userResult = await pool.query(\n          `SELECT id, username, email, full_name, created_at, \n            api_key, stripe_customer_id, stripe_subscription_id \n          FROM users WHERE id = $1`, \n          [userId]\n        );\n\n        if (userResult.rows.length === 0) {\n          return res.status(404).json({ message: \"Usuario no encontrado\" });\n        }\n\n        const user = userResult.rows[0];\n\n        // Obtener suscripciones del usuario\n        const subscriptionsResult = await pool.query(\n          `SELECT id, tier, status, interactions_limit, interactions_used, \n            created_at, start_date, end_date \n          FROM subscriptions \n          WHERE user_id = $1 \n          ORDER BY created_at DESC`, \n          [userId]\n        );\n\n        // Obtener integraciones del usuario\n        const integrationsResult = await pool.query(\n          `SELECT id, name, url, theme_color, position, active, \n            api_key, visitor_count, created_at, bot_behavior, widget_type \n          FROM integrations \n          WHERE user_id = $1 \n          ORDER BY created_at DESC`, \n          [userId]\n        );\n\n        // Obtener conversaciones del usuario a través de sus integraciones\n        const conversationsResult = await pool.query(\n          `SELECT c.id, c.integration_id, c.visitor_id, c.resolved, c.duration, \n            c.created_at, c.updated_at, i.name as integration_name \n          FROM conversations c \n          JOIN integrations i ON c.integration_id = i.id \n          WHERE i.user_id = $1 \n          ORDER BY c.created_at DESC \n          LIMIT 100`, \n          [userId]\n        );\n\n        // Obtener estadísticas de uso\n        const statsResult = await pool.query(\n          `SELECT \n            COUNT(DISTINCT c.id) as total_conversations,\n            COUNT(DISTINCT m.id) as total_messages,\n            SUM(CASE WHEN c.resolved = true THEN 1 ELSE 0 END) as resolved_conversations,\n            SUM(CASE WHEN m.role = 'assistant' THEN 1 ELSE 0 END) as assistant_messages,\n            SUM(CASE WHEN m.role = 'user' THEN 1 ELSE 0 END) as user_messages\n          FROM integrations i\n          LEFT JOIN conversations c ON i.id = c.integration_id\n          LEFT JOIN messages m ON c.id = m.conversation_id\n          WHERE i.user_id = $1`,\n          [userId]\n        );\n\n        // Calcular tokens aproximados (estimación básica)\n        // Promedio de 4 caracteres por token para mensajes en español\n        const messagesResult = await pool.query(\n          `SELECT m.content \n          FROM messages m\n          JOIN conversations c ON m.conversation_id = c.id\n          JOIN integrations i ON c.integration_id = i.id\n          WHERE i.user_id = $1\n          AND m.role = 'assistant'`,\n          [userId]\n        );\n\n        let totalTokensEstimation = 0;\n        if (messagesResult.rows.length > 0) {\n          // Estimación de tokens usados basada en el contenido de los mensajes\n          messagesResult.rows.forEach(msg => {\n            if (msg.content) {\n              // Estimación aproximada: 1 token ≈ 4 caracteres en español\n              totalTokensEstimation += Math.ceil(msg.content.length / 4);\n            }\n          });\n        }\n\n        // Construir la respuesta\n        const response = {\n          user,\n          subscriptions: subscriptionsResult.rows,\n          integrations: integrationsResult.rows,\n          recentConversations: conversationsResult.rows,\n          usage: {\n            ...statsResult.rows[0],\n            estimated_tokens: totalTokensEstimation\n          }\n        };\n\n        res.json(response);\n      } catch (error) {\n        console.error(\"Error getting user details:\", error);\n        res.status(500).json({ message: \"Error al obtener detalles del usuario\" });\n      }\n    });\n\n    // Crear un nuevo usuario (solo admin)\n    app.post(\"/api/admin/users\", authenticateJWT, isAdmin, async (req, res) => {\n      try {\n        const { username, password, email, fullName, tier } = req.body;\n\n        // Validar datos\n        if (!username || !password || !email) {\n          return res.status(400).json({ \n            message: \"Se requieren username, password y email\" \n          });\n        }\n\n        // Verificar si el usuario ya existe\n        const checkUserResult = await pool.query(\n          \"SELECT id FROM users WHERE username = $1 OR email = $2\",\n          [username, email]\n        );\n\n        if (checkUserResult.rows.length > 0) {\n          return res.status(400).json({ \n            message: \"El nombre de usuario o email ya están en uso\" \n          });\n        }\n\n        // Generar API key y hash de contraseña\n        const apiKey = 'aipi_' + crypto.randomBytes(16).toString('hex');\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n        // Insertar usuario\n        const insertUserResult = await pool.query(\n          `INSERT INTO users \n           (username, password, email, full_name, api_key, created_at) \n           VALUES ($1, $2, $3, $4, $5, NOW())\n           RETURNING id, username, email, full_name, api_key, created_at`,\n          [username, hashedPassword, email, fullName, apiKey]\n        );\n\n        const newUser = insertUserResult.rows[0];\n\n        // Crear suscripción según el tier especificado\n        let interactions_limit = 20;\n        let end_date = null;\n\n        switch(tier) {\n          case 'basic':\n            interactions_limit = 500;\n            // 30 días a partir de hoy\n            end_date = new Date(new Date().setDate(new Date().getDate() + 30));\n            break;\n          case 'professional':\n            interactions_limit = 2000;\n            // 30 días a partir de hoy\n            end_date = new Date(new Date().setDate(new Date().getDate() + 30));\n            break;\n          case 'enterprise':\n            interactions_limit = 99999;\n            // 365 días a partir de hoy\n            end_date = new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n            break;\n          default: // free\n            interactions_limit = 20;\n            // Sin fecha de expiración (o usar null)\n            end_date = null;\n        }\n\n        await pool.query(\n          `INSERT INTO subscriptions \n           (user_id, tier, status, interactions_limit, interactions_used, \n            created_at, updated_at, start_date, end_date)\n           VALUES ($1, $2, $3, $4, $5, NOW(), NOW(), NOW(), $6)`,\n          [newUser.id, tier || 'free', 'active', interactions_limit, 0, end_date]\n        );\n\n        res.status(201).json({\n          message: \"Usuario creado exitosamente\",\n          user: newUser\n        });\n      } catch (error) {\n        console.error(\"Error creating user:\", error);\n        res.status(500).json({ message: \"Error al crear usuario\" });\n      }\n    });\n\n    // Modificar un usuario existente (solo admin)\n    app.patch(\"/api/admin/users/:id\", authenticateJWT, isAdmin, async (req, res) => {\n      try {\n        const userId = parseInt(req.params.id);\n        if (isNaN(userId)) {\n          return res.status(400).json({ message: \"ID de usuario inválido\" });\n        }\n\n        // Verificar que el usuario existe\n        const checkUser = await pool.query(\n          \"SELECT id FROM users WHERE id = $1\",\n          [userId]\n        );\n\n        if (checkUser.rows.length === 0) {\n          return res.status(404).json({ message: \"Usuario no encontrado\" });\n        }\n\n        const { username, email, fullName, password } = req.body;\n\n        // Construir la consulta dinámicamente basada en los campos proporcionados\n        let updateQuery = \"UPDATE users SET \";\n        const updateValues = [];\n        const updateFields = [];\n\n        let paramIndex = 1;\n\n        if (username) {\n          updateFields.push(`username = $${paramIndex}`);\n          updateValues.push(username);\n          paramIndex++;\n        }\n\n        if (email) {\n          updateFields.push(`email = $${paramIndex}`);\n          updateValues.push(email);\n          paramIndex++;\n        }\n\n        if (fullName) {\n          updateFields.push(`full_name = $${paramIndex}`);\n          updateValues.push(fullName);\n          paramIndex++;\n        }\n\n        if (password) {\n          const saltRounds = 10;\n          const hashedPassword = await bcrypt.hash(password, saltRounds);\n          updateFields.push(`password = $${paramIndex}`);\n          updateValues.push(hashedPassword);\n          paramIndex++;\n        }\n\n        // Si no hay campos para actualizar, devolver error\n        if (updateFields.length === 0) {\n          return res.status(400).json({ \n            message: \"No se proporcionaron campos para actualizar\" \n          });\n        }\n\n        updateQuery += updateFields.join(\", \");\n        updateQuery += ` WHERE id = $${paramIndex} RETURNING id, username, email, full_name, created_at`;\n        updateValues.push(userId);\n\n        // Ejecutar la actualización\n        const updateResult = await pool.query(updateQuery, updateValues);\n\n        res.json({\n          message: \"Usuario actualizado exitosamente\",\n          user: updateResult.rows[0]\n        });\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n        res.status(500).json({ message: \"Error al actualizar usuario\" });\n      }\n    });\n\n    // Modificar la suscripción de un usuario (solo admin)\n    app.patch(\"/api/admin/users/:id/subscription\", authenticateJWT, isAdmin, async (req, res) => {\n      try {\n        const userId = parseInt(req.params.id);\n        if (isNaN(userId)) {\n          return res.status(400).json({ message: \"ID de usuario inválido\" });\n        }\n\n        const { tier, status, interactionsLimit, endDate } = req.body;\n\n        // Verificar que el usuario existe\n        const checkUser = await pool.query(\n          \"SELECT id FROM users WHERE id = $1\",\n          [userId]\n        );\n\n        if (checkUser.rows.length === 0) {\n          return res.status(404).json({ message: \"Usuario no encontrado\" });\n        }\n\n        // Buscar la suscripción activa del usuario\n        const subResult = await pool.query(\n          \"SELECT id FROM subscriptions WHERE user_id = $1 AND status = 'active'\",\n          [userId]\n        );\n\n        let subscriptionId;\n\n        if (subResult.rows.length > 0) {\n          // Actualizar suscripción existente\n          subscriptionId = subResult.rows[0].id;\n\n          // Construir la consulta dinámicamente\n          let updateQuery = \"UPDATE subscriptions SET updated_at = NOW()\";\n          const updateValues = [];\n          let paramIndex = 1;\n\n          if (tier) {\n            updateQuery += `, tier = $${paramIndex}`;\n            updateValues.push(tier);\n            paramIndex++;\n          }\n\n          if (status) {\n            updateQuery += `, status = $${paramIndex}`;\n            updateValues.push(status);\n            paramIndex++;\n          }\n\n          if (interactionsLimit !== undefined) {\n            updateQuery += `, interactions_limit = $${paramIndex}`;\n            updateValues.push(interactionsLimit);\n            paramIndex++;\n          }\n\n          if (endDate) {\n            updateQuery += `, end_date = $${paramIndex}`;\n            updateValues.push(new Date(endDate));\n            paramIndex++;\n          }\n\n          updateQuery += ` WHERE id = $${paramIndex} RETURNING *`;\n          updateValues.push(subscriptionId);\n\n          const updateResult = await pool.query(updateQuery, updateValues);\n\n          res.json({\n            message: \"Suscripción actualizada exitosamente\",\n            subscription: updateResult.rows[0]\n          });\n        } else {\n          // Crear nueva suscripción\n          let interactions_limit = interactionsLimit || 20;\n          let end_date = endDate ? new Date(endDate) : null;\n\n          // Si se especifica tier, usar valores por defecto según el tier\n          if (tier) {\n            switch(tier) {\n              case 'basic':\n                interactions_limit = 500;\n                // 30 días a partir de hoy si no se especifica endDate\n                if (!endDate) end_date = new Date(new Date().setDate(new Date().getDate() + 30));\n                break;\n              case 'professional':\n                interactions_limit = 2000;\n                // 30 días a partir de hoy si no se especifica endDate\n                if (!endDate) end_date = new Date(new Date().setDate(new Date().getDate() + 30));\n                break;\n              case 'enterprise':\n                interactions_limit = 99999;\n                // 365 días a partir de hoy si no se especifica endDate\n                if (!endDate) end_date = new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n                break;\n              default: // free\n                interactions_limit = 20;\n                // Sin fecha de expiración (o usar null)\n                end_date = null;\n            }\n          }\n\n          const insertResult = await pool.query(\n            `INSERT INTO subscriptions \n             (user_id, tier, status, interactions_limit, interactions_used, \n              created_at, updated_at, start_date, end_date)\n             VALUES ($1, $2, $3, $4, $5, NOW(), NOW(), NOW(), $6)\n             RETURNING *`,\n            [userId, tier || 'free', status || 'active', interactions_limit, 0, end_date]\n          );\n\n          res.json({\n            message: \"Nueva suscripción creada exitosamente\",\n            subscription: insertResult.rows[0]\n          });\n        }\n      } catch (error) {\n        console.error(\"Error updating subscription:\", error);\n        res.status(500).json({ message: \"Error al actualizar suscripción\" });\n      }\n    });\n  // Obtener estadísticas globales para administrador\n  app.get(\"/api/admin/stats\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      // Estadísticas de usuarios\n      const usersResult = await pool.query(\n        `SELECT COUNT(*) AS total_users,\n         (SELECT COUNT(*) FROM users WHERE created_at > NOW() - INTERVAL '7 days') AS new_users_last_7_days\n         FROM users`\n      );\n\n      // Estadísticas de conversaciones\n      const convsResult = await pool.query(\n        `SELECT \n         COUNT(*) AS total_conversations,\n         (SELECT COUNT(*) FROM conversations WHERE created_at > NOW() - INTERVAL '7 days') AS new_conversations_last_7_days,\n         COUNT(CASE WHEN conversations.resolved = true THEN 1 END) AS resolved_conversations,\n         ROUND(AVG(COALESCE(conversations.duration, 0))::numeric, 2)::float AS avg_duration\n        FROM conversations`\n      );\n\n      // Estadísticas de mensajes y estimación de tokens\n      const msgsResult = await pool.query(\n        `SELECT \n         COUNT(*) AS total_messages,\n         COUNT(CASE WHEN role = 'assistant' THEN 1 END) AS assistant_messages,\n         COUNT(CASE WHEN role = 'user' THEN 1 END) AS user_messages,\n         (SELECT COUNT(*) FROM messages WHERE timestamp > NOW() - INTERVAL '7 days') AS new_messages_last_7_days\n         FROM messages`\n      );\n\n      // Calcular tokens aproximados (estimación)\n      const tokensResult = await pool.query(\n        `SELECT SUM(LENGTH(content)) AS total_content_length FROM messages WHERE role = 'assistant'`\n      );\n\n      const totalContentLength = parseInt(tokensResult.rows[0].total_content_length) || 0;\n      // Estimación aproximada: 1 token ≈ 4 caracteres en español\n      const estimatedTokensUsed = Math.ceil(totalContentLength / 4);\n\n      // Estadísticas de suscripciones\n      const subsResult = await pool.query(\n        `SELECT \n         COUNT(*) AS total_subscriptions,\n         COUNT(CASE WHEN tier = 'free' THEN 1 END) AS free_subscriptions,\n         COUNT(CASE WHEN tier = 'basic' THEN 1 END) AS basic_subscriptions,\n         COUNT(CASE WHEN tier = 'professional' THEN 1 END) AS professional_subscriptions,\n         COUNT(CASE WHEN tier = 'enterprise' THEN 1 END) AS enterprise_subscriptions,\n         COUNT(CASE WHEN status = 'active' THEN 1 END) AS active_subscriptions\n         FROM subscriptions`\n      );\n\n      // Usuarios que se acercan a su límite (>80% de uso)\n      const nearLimitResult = await pool.query(\n        `SELECT \n         COUNT(*) AS users_near_limit\n         FROM subscriptions\n         WHERE interactions_limit > 0\n         AND interactions_used > (interactions_limit * 0.8)`\n      );\n\n      // Usuarios que están por encima de su límite\n      const overLimitResult = await pool.query(\n        `SELECT \n         COUNT(*) AS users_over_limit\n         FROM subscriptions\n         WHERE interactions_limit > 0\n         AND interactions_used > interactions_limit`\n      );\n\n      // Construir respuesta con todas las estadísticas\n      const response = {\n        users: {\n          ...usersResult.rows[0]\n        },\n        conversations: {\n          ...convsResult.rows[0]\n        },\n        messages: {\n          ...msgsResult.rows[0]\n        },\n        subscriptions: {\n          ...subsResult.rows[0]\n        },\n        tokens: {\n          estimated_tokens_used: estimatedTokensUsed,\n          // Dependiendo del modelo usado, calcular el costo aproximado (GPT-4o-mini = $5 por millón de tokens de salida)\n          estimated_cost_usd: (estimatedTokensUsed / 1000000) * 5\n        },\n        limits: {\n          users_near_limit: parseInt(nearLimitResult.rows[0].users_near_limit),\n          users_over_limit: parseInt(overLimitResult.rows[0].users_over_limit)\n        }\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error getting admin stats:\", error);\n      res.status(500).json({ message: \"Error al obtener estadísticas de administración\" });\n    }\n  });\n\n  // Obtener lista de usuarios cercanos a su límite\n  app.get(\"/api/admin/users/near-limit\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const result = await pool.query(\n        `SELECT u.id, u.username, u.email, u.full_name,\n         s.tier, s.interactions_limit, s.interactions_used,\n         s.end_date, s.status,\n         ROUND((s.interactions_used::float / s.interactions_limit::float) * 100, 2) AS usage_percentage\n         FROM subscriptions s\n         JOIN users u ON s.user_id = u.id\n         WHERE s.interactions_limit > 0\n         AND s.interactions_used > (s.interactions_limit * 0.8)\n         ORDER BY usage_percentage DESC`\n      );\n\n      res.json(result.rows);\n    } catch (error) {\n      console.error(\"Error getting users near limit:\", error);\n      res.status(500).json({ message: \"Error al obtener usuarios cercanos al límite\" });\n    }\n  });\n\n  // ================ Discount Code Routes ================\n\n  // Obtener todos los códigos de descuento (solo admin)\n  app.get(\"/api/discount-codes\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const codes = await storage.getDiscountCodes();\n      res.json(codes);\n    } catch (error) {\n      console.error(\"Error al obtener códigos de descuento:\", error);\n      res.status(500).json({ message: \"Error del servidor\" });\n    }\n  });\n\n  // Obtener un código de descuento específico por código\n  app.get(\"/api/discount-codes/:code\", async (req, res) => {\n    try {\n      const { code } = req.params;\n      const discountCode = await storage.getDiscountCodeByCode(code);\n\n      if (!discountCode) {\n        return res.status(404).json({ message: \"Código de descuento no encontrado\" });\n      }\n\n      if (!discountCode.isActive) {\n        return res.status(400).json({ message: \"Este código de descuento ya no está activo\" });\n      }\n\n      // Verificar si el código ha expirado\n      if (discountCode.expiresAt && new Date(discountCode.expiresAt) < new Date()) {\n        return res.status(400).json({ message: \"Este código de descuento ha expirado\" });\n      }\n\n      // Verificar si se ha alcanzado el límite de uso\n      if (discountCode.usageLimit && discountCode.usageCount >= discountCode.usageLimit) {\n        return res.status(400).json({ message: \"Este código de descuento ha alcanzado su límite de uso\" });\n      }\n\n      res.json({\n        code: discountCode.code,\n        name: discountCode.name,\n        discountPercentage: discountCode.discountPercentage,\n        applicableTier: discountCode.applicableTier\n      });\n    } catch (error) {\n      console.error(\"Error al obtener código de descuento:\", error);\n      res.status(500).json({ message: \"Error del servidor\" });\n    }\n  });\n\n  // Crear un nuevo código de descuento (solo admin)\n  app.post(\"/api/discount-codes\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const { name, discountPercentage, applicableTier, expiresAt, usageLimit } = req.body;\n\n      // Validaciones básicas\n      if (!name || typeof discountPercentage !== 'number' || !applicableTier) {\n        return res.status(400).json({ message: \"Faltan campos requeridos o son inválidos\" });\n      }\n\n      // Validar porcentaje de descuento\n      if (discountPercentage <= 0 || discountPercentage > 100) {\n        return res.status(400).json({ message: \"El porcentaje de descuento debe estar entre 1 y 100\" });\n      }\n\n      // Validar tier aplicable\n      const validTiers = ['basic', 'professional', 'enterprise', 'all'];\n      if (!validTiers.includes(applicableTier)) {\n        return res.status(400).json({ \n          message: \"Nivel inválido. Debe ser uno de: \" + validTiers.join(', ')\n        });\n      }\n\n      // Generar código único\n      const code = storage.generateDiscountCode(name.substring(0, 4).toUpperCase());\n\n      // Crear nuevo código de descuento\n      const newDiscountCode = await storage.createDiscountCode({\n        code,\n        name,\n        discountPercentage,\n        applicableTier,\n        isActive: true,\n        expiresAt: expiresAt ? new Date(expiresAt) : null,\n        usageLimit: usageLimit || null\n      });\n\n      res.status(201).json(newDiscountCode);\n    } catch (error) {\n      console.error(\"Error al crear código de descuento:\", error);\n      res.status(500).json({ message: \"Error del servidor\" });\n    }\n  });\n\n  // Actualizar un código de descuento (solo admin)\n  app.put(\"/api/discount-codes/:id\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { name, discountPercentage, applicableTier, isActive, expiresAt, usageLimit } = req.body;\n\n      // Verificar que el código existe\n      const existingCode = await storage.getDiscountCode(parseInt(id));\n      if (!existingCode) {\n        return res.status(404).json({ message: \"Código de descuento no encontrado\" });\n      }\n\n      // Validar porcentaje de descuento si se proporciona\n      if (discountPercentage !== undefined) {\n        if (discountPercentage <= 0 || discountPercentage > 100) {\n          return res.status(400).json({ message: \"El porcentaje de descuento debe estar entre 1 y 100\" });\n        }\n      }\n\n      // Validar tier aplicable si se proporciona\n      if (applicableTier !== undefined) {\n        const validTiers = ['basic', 'professional', 'enterprise', 'all'];\n        if (!validTiers.includes(applicableTier)) {\n          return res.status(400).json({ \n            message: \"Nivel inválido. Debe ser uno de: \" + validTiers.join(', ')\n          });\n        }\n      }\n\n      // Actualizar código de descuento\n      const updatedDiscountCode = await storage.updateDiscountCode(parseInt(id), {\n        name,\n        discountPercentage,\n        applicableTier,\n        isActive,\n        expiresAt: expiresAt ? new Date(expiresAt) : undefined,\n        usageLimit\n      });\n\n      res.json(updatedDiscountCode);\n    } catch (error) {\n      console.error(\"Error al actualizar código de descuento:\", error);\n      res.status(500).json({ message: \"Error del servidor\" });\n    }\n  });\n\n  // Eliminar un código de descuento (solo admin)\n  app.delete(\"/api/discount-codes/:id\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // Verificar que el código existe\n      const existingCode = await storage.getDiscountCode(parseInt(id));\n      if (!existingCode) {\n        return res.status(404).json({ message: \"Código de descuento no encontrado\" });\n      }\n\n      // Eliminar código de descuento\n      await storage.deleteDiscountCode(parseInt(id));\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error al eliminar código de descuento:\", error);\n      res.status(500).json({ message: \"Error del servidor\" });\n    }\n  });\n\n  // Validar y aplicar código de descuento\n  app.post(\"/api/discount-codes/validate\", async (req, res) => {\n    try {\n      const { code, tier } = req.body;\n\n      if (!code || !tier) {\n        return res.status(400).json({ message: \"Se requiere código y nivel\" });\n      }\n\n      const discountCode = await storage.getDiscountCodeByCode(code);\n\n      if (!discountCode) {\n        return res.status(404).json({ message: \"Código de descuento no encontrado\" });\n      }\n\n      if (!discountCode.isActive) {\n        return res.status(400).json({ message: \"Este código de descuento ya no está activo\" });\n      }\n\n      // Verificar si el código ha expirado\n      if (discountCode.expiresAt && new Date(discountCode.expiresAt) < new Date()) {\n        return res.status(400).json({ message: \"Este código de descuento ha expirado\" });\n      }\n\n      // Verificar si se ha alcanzado el límite de uso\n      if (discountCode.usageLimit && discountCode.usageCount >= discountCode.usageLimit) {\n        return res.status(400).json({ message: \"Este código de descuento ha alcanzado su límite de uso\" });\n      }\n\n      // Verificar si es aplicable al nivel solicitado\n      if (discountCode.applicableTier !== 'all' && discountCode.applicableTier !== tier) {\n        return res.status(400).json({ \n          message: `Este código de descuento solo es válido para el nivel ${discountCode.applicableTier}` \n        });\n      }\n\n      // Todo correcto, devolver información del descuento\n      res.json({\n        valid: true,\n        code: discountCode.code,\n        discountPercentage: discountCode.discountPercentage,\n        name: discountCode.name\n      });\n    } catch (error) {\n      console.error(\"Error al validar código de descuento:\", error);\n      res.status(500).json({ message: \"Error del servidor\" });\n    }\n  });\n\n  // Aplicar código de descuento (incrementa el contador de uso)\n  app.post(\"/api/discount-codes/:code/apply\", verifyToken, async (req, res) => {\n    try {\n      const { code } = req.params;\n\n      const discountCode = await storage.getDiscountCodeByCode(code);\n\n      if (!discountCode) {\n        return res.status(404).json({ message: \"Código de descuento no encontrado\" });\n      }\n\n      // Incrementar contador de uso\n      await storage.incrementDiscountCodeUsage(discountCode.id);\n\n      res.json({ success: true, message: \"Código de descuento aplicado correctamente\" });\n    } catch (error) {\n      console.error(\"Error al aplicar código de descuento:\", error);\n      res.status(500).json({ message: \"Error del servidor\" });\n    }\n  });\n\n  // ================ Pricing Plan Routes ================\n  // GET todos los planes de precios (públicos y disponibles)\n  app.get(\"/api/pricing-plans\", async (req, res) => {\n    try {\n      const pricingPlans = await storage.getAvailablePricingPlans();\n      res.json(pricingPlans);\n    } catch (error) {\n      console.error(\"Error getting pricing plans:\", error);\n      res.status(500).json({ message: \"Error al obtener los planes de precio\" });\n    }\n  });\n\n  // GET todos los planes de precios (admin, incluye no disponibles)\n  app.get(\"/api/admin/pricing-plans\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const pricingPlans = await storage.getPricingPlans();\n      res.json(pricingPlans);\n    } catch (error) {\n      console.error(\"Error getting all pricing plans:\", error);\n      res.status(500).json({ message: \"Error al obtener todos los planes de precio\" });\n    }\n  });\n\n  // GET un plan de precios específico por ID\n  app.get(\"/api/admin/pricing-plans/:id\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"ID de plan inválido\" });\n      }\n\n      const pricingPlan = await storage.getPricingPlan(id);\n      if (!pricingPlan) {\n        return res.status(404).json({ message: \"Plan de precio no encontrado\" });\n      }\n\n      res.json(pricingPlan);\n    } catch (error) {\n      console.error(\"Error getting pricing plan:\", error);\n      res.status(500).json({ message: \"Error al obtener el plan de precio\" });\n    }\n  });\n\n  // POST crear un nuevo plan de precios (admin)\n  app.post(\"/api/admin/pricing-plans\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertPricingPlanSchema.parse(req.body);\n\n      // Verificar si ya existe un plan con el mismo planId\n      if (validatedData.planId) {\n        const existingPlan = await storage.getPricingPlanByPlanId(validatedData.planId);\n        if (existingPlan) {\n          return res.status(400).json({ \n            message: \"Ya existe un plan con el mismo ID de plan (planId)\" \n          });\n        }\n      }\n\n      let pricingPlan = await storage.createPricingPlan(validatedData);\n\n      // Sincronizar con Stripe - Crear producto y precio correspondiente\n      try {\n        const stripeInfo = await createOrUpdateStripeProduct(pricingPlan);\n\n        // Actualizar el plan con los IDs de Stripe\n        pricingPlan = await storage.updatePricingPlan(pricingPlan.id, {\n          stripeProductId: stripeInfo.stripeProductId,\n          stripePriceId: stripeInfo.stripePriceId\n        });\n\n        console.log(\"Plan sincronizado con Stripe:\", pricingPlan.name);\n      } catch (stripeError) {\n        console.error(\"Error sincronizando con Stripe:\", stripeError);\n        // Continuamos sin error fatal, pero registramos el problema\n      }\n\n      res.status(201).json(pricingPlan);\n    } catch (error) {\n      console.error(\"Error creating pricing plan:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Datos de plan inválidos\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Error al crear el plan de precio\" });\n    }\n  });\n\n  // PUT actualizar un plan de precios existente (admin)\n  app.put(\"/api/admin/pricing-plans/:id\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"ID de plan inválido\" });\n      }\n\n      // Verificar si el plan existe\n      const existingPlan = await storage.getPricingPlan(id);\n      if (!existingPlan) {\n        return res.status(404).json({ message: \"Plan de precio no encontrado\" });\n      }\n\n      // Si se está cambiando el planId, verificar que no exista otro plan con ese planId\n      if (req.body.planId && req.body.planId !== existingPlan.planId) {\n        const planWithSameId = await storage.getPricingPlanByPlanId(req.body.planId);\n        if (planWithSameId && planWithSameId.id !== id) {\n          return res.status(400).json({ \n            message: \"Ya existe otro plan con el mismo ID de plan (planId)\" \n          });\n        }\n      }\n\n      // Actualizar el plan en la base de datos\n      const updatedPlan = await storage.updatePricingPlan(id, req.body);\n\n      // Sincronizar con Stripe - Actualizar producto y precio correspondiente\n      try {\n        if (updatedPlan) {\n          const stripeInfo = await createOrUpdateStripeProduct(updatedPlan);\n\n          // Si los IDs de Stripe no coinciden con los que ya teníamos, actualizamos el plan\n          if (stripeInfo.stripeProductId !== updatedPlan.stripeProductId || \n              stripeInfo.stripePriceId !== updatedPlan.stripePriceId) {\n\n            await storage.updatePricingPlan(id, {\n              stripeProductId: stripeInfo.stripeProductId,\n              stripePriceId: stripeInfo.stripePriceId\n            });\n\n            // Actualizar el objeto del plan con los nuevos IDs de Stripe\n            updatedPlan.stripeProductId = stripeInfo.stripeProductId;\n            updatedPlan.stripePriceId = stripeInfo.stripePriceId;\n          }\n          console.log(\"Plan sincronizado con Stripe:\", updatedPlan.name);\n        }\n      } catch (stripeError) {\n        console.error(\"Error sincronizando con Stripe:\", stripeError);\n        // Continuamos sin error fatal, pero registramos el problema\n      }\n\n      res.json(updatedPlan);\n    } catch (error) {\n      console.error(\"Error updating pricing plan:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Datos de actualización inválidos\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Error al actualizar el plan de precio\" });\n    }\n  });\n\n  // DELETE eliminar un plan de precios (admin)\n  app.delete(\"/api/admin/pricing-plans/:id\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"ID de plan inválido\" });\n      }\n\n      // Verificar si el plan existe\n      const existingPlan = await storage.getPricingPlan(id);\n      if (!existingPlan) {\n        return res.status(404).json({ message: \"Plan de precio no encontrado\" });\n      }\n\n      // Para Stripe no eliminamos productos, solo los marcamos como inactivos en nuestra BD\n      // Stripe maneja esto de forma separada con archivado de productos\n\n      await storage.deletePricingPlan(id);\n      res.json({ message: \"Plan de precio eliminado correctamente\" });\n    } catch (error) {\n      console.error(\"Error deleting pricing plan:\", error);\n      res.status(500).json({ message: \"Error al eliminar el plan de precio\" });\n    }\n  });\n\n  // Sincronizar todos los planes con Stripe (admin)\n  app.post(\"/api/admin/pricing-plans/sync-with-stripe\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      // Obtener todos los planes de precios\n      const pricingPlans = await storage.getPricingPlans();\n\n      // Sincronizar todos los planes con Stripe\n      const syncedPlans = await syncPlansWithStripe(pricingPlans);\n\n      // Responder con los planes sincronizados\n      res.json({\n        message: `${syncedPlans.length} planes sincronizados con Stripe`,\n        plans: syncedPlans\n      });\n    } catch (error) {\n      console.error(\"Error synchronizing plans with Stripe:\", error);\n      res.status(500).json({ message: \"Error al sincronizar planes con Stripe\" });\n    }\n  });\n\n  // Forms API endpoints\n  app.get(\"/api/forms\", authenticateJWT, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const forms = await storage.getForms(userId);\n      res.json(forms);\n    } catch (error) {\n      console.error(\"Error getting forms:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/forms/:id\", authenticateJWT, async (req, res) => {\n    try {\n      const formId = parseInt(req.params.id);\n\n      // Consultar directamente PostgreSQL para obtener todos los campos incluyendo 'language'\n      const result = await db.select().from(forms).where(eq(forms.id, formId));\n\n      if (result.length === 0) {\n        return res.status(404).json({ error: \"Form not found\" });\n      }\n\n      const form = result[0];\n\n      // Verificar que el usuario es propietario del formulario\n      if (form.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Unauthorized access to this form\" });\n      }\n\n      res.json(form);\n    } catch (error) {\n      console.error(\"Error getting form:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Función auxiliar para traducir campos de plantillas\n  const translateTemplateFields = (structure: any, language: string) => {\n    // Diccionario completo de traducciones\n    const fieldTranslations: Record<string, Record<string, string>> = {\n      // CAMPOS BÁSICOS\n      'Nombre': { en: 'Name', fr: 'Nom', es: 'Nombre' },\n      'Nombre completo': { en: 'Full name', fr: 'Nom complet', es: 'Nombre completo' },\n      'Correo electrónico': { en: 'Email', fr: 'Email', es: 'Correo electrónico' },\n      'Tu correo electrónico': { en: 'Your email', fr: 'Votre email', es: 'Tu correo electrónico' },\n      'Teléfono': { en: 'Phone', fr: 'Téléphone', es: 'Teléfono' },\n      'Empresa': { en: 'Company', fr: 'Entreprise', es: 'Empresa' },\n      'Mensaje': { en: 'Message', fr: 'Message', es: 'Mensaje' },\n      'Asunto': { en: 'Subject', fr: 'Sujet', es: 'Asunto' },\n\n      // CAMPOS DE ENCUESTA DE SATISFACCIÓN\n      '¿Cómo calificarías tu experiencia con nosotros?': { en: 'How would you rate your experience with us?', fr: 'Comment évalueriez-vous votre expérience avec nous?', es: '¿Cómo calificarías tu experiencia con nosotros?' },\n      '¿Qué servicio has utilizado?': { en: 'Which service have you used?', fr: 'Quel service avez-vous utilisé?', es: '¿Qué servicio has utilizado?' },\n      '¿Qué podríamos mejorar?': { en: 'What could we improve?', fr: 'Que pourrions-nous améliorer?', es: '¿Qué podríamos mejorar?' },\n      '¿Podemos contactarte para seguimiento?': { en: 'Can we contact you for follow-up?', fr: 'Pouvons-nous vous contacter pour un suivi?', es: '¿Podemos contactarte para seguimiento?' },\n\n      // CAMPOS DE SOLICITUD DE PRESUPUESTO\n      'Nombre de la empresa': { en: 'Company name', fr: 'Nom de l\\'entreprise', es: 'Nombre de la empresa' },\n      'Nombre de contacto': { en: 'Contact name', fr: 'Nom de contact', es: 'Nombre de contacto' },\n      'Tipo de servicio': { en: 'Service type', fr: 'Type de service', es: 'Tipo de servicio' },\n      'Detalles del proyecto': { en: 'Project details', fr: 'Détails du projet', es: 'Detalles del proyecto' },\n      'Presupuesto estimado (€)': { en: 'Estimated budget (€)', fr: 'Budget estimé (€)', es: 'Presupuesto estimado (€)' },\n      'Fecha límite': { en: 'Deadline', fr: 'Date limite', es: 'Fecha límite' },\n\n      // CAMPOS DE REGISTRO WEBINAR\n      'Cargo': { en: 'Job title', fr: 'Poste', es: 'Cargo' },\n      '¿Cómo nos encontraste?': { en: 'How did you find us?', fr: 'Comment nous avez-vous trouvés?', es: '¿Cómo nos encontraste?' },\n      '¿Cómo te enteraste de nosotros?': { en: 'How did you hear about us?', fr: 'Comment avez-vous entendu parler de nous?', es: '¿Cómo te enteraste de nosotros?' },\n      'Comment avez-vous entendu parler de nous?': { en: 'How did you hear about us?', fr: 'Comment avez-vous entendu parler de nous?', es: '¿Cómo te enteraste de nosotros?' },\n      'Quiero recibir un recordatorio por email 24h antes del evento': { en: 'I want to receive an email reminder 24h before the event', fr: 'Je veux recevoir un rappel par email 24h avant l\\'événement', es: 'Quiero recibir un recordatorio por email 24h antes del evento' },\n      'Acepto recibir emails sobre futuros webinars y contenido relacionado': { en: 'I accept to receive emails about future webinars and related content', fr: 'J\\'accepte de recevoir des emails sur les futurs webinaires et contenus connexes', es: 'Acepto recibir emails sobre futuros webinars y contenido relacionado' },\n\n      // CAMPOS DE FORMULARIO DE PEDIDO\n      'Nombre del cliente': { en: 'Customer name', fr: 'Nom du client', es: 'Nombre del cliente' },\n      'Dirección de envío': { en: 'Shipping address', fr: 'Adresse de livraison', es: 'Dirección de envío' },\n      'Producto': { en: 'Product', fr: 'Produit', es: 'Producto' },\n      'Cantidad': { en: 'Quantity', fr: 'Quantité', es: 'Cantidad' },\n      'Método de pago': { en: 'Payment method', fr: 'Méthode de paiement', es: 'Método de pago' },\n      'Notas adicionales': { en: 'Additional notes', fr: 'Notes supplémentaires', es: 'Notas adicionales' },\n\n      // CAMPOS DE EVALUACIÓN DE EVENTO\n      'Nombre (opcional)': { en: 'Name (optional)', fr: 'Nom (optionnel)', es: 'Nombre (opcional)' },\n      'Selecciona el evento': { en: 'Select the event', fr: 'Sélectionnez l\\'événement', es: 'Selecciona el evento' },\n      'Valoración general del evento': { en: 'Overall event rating', fr: 'Évaluation générale de l\\'événement', es: 'Valoración general del evento' },\n      'Calidad del contenido': { en: 'Content quality', fr: 'Qualité du contenu', es: 'Calidad del contenido' },\n      'Ponentes': { en: 'Speakers', fr: 'Intervenants', es: 'Ponentes' },\n      'Organización': { en: 'Organization', fr: 'Organisation', es: 'Organización' },\n      '¿Qué fue lo mejor del evento?': { en: 'What was the best part of the event?', fr: 'Qu\\'est-ce qui était le mieux dans l\\'événement?', es: '¿Qué fue lo mejor del evento?' },\n      'Me gustaría recibir información sobre futuros eventos': { en: 'I would like to receive information about future events', fr: 'J\\'aimerais recevoir des informations sur les futurs événements', es: 'Me gustaría recibir información sobre futuros eventos' },\n\n      // CAMPOS ADICIONALES EVALUACIÓN EVENTO\n      'Tu evaluación': { en: 'Your evaluation', fr: 'Votre évaluation', es: 'Tu evaluación' },\n      'Valoración del contenido': { en: 'Content rating', fr: 'Évaluation du contenu', es: 'Valoración del contenido' },\n      'Valoración de ponentes': { en: 'Speakers rating', fr: 'Évaluation des intervenants', es: 'Valoración de ponentes' },\n      'Valoración de la organización': { en: 'Organization rating', fr: 'Évaluation de l\\'organisation', es: 'Valoración de la organización' },\n      'Comentarios adicionales': { en: 'Additional comments', fr: 'Commentaires supplémentaires', es: 'Comentarios adicionales' },\n      'Aspectos destacados': { en: 'Highlights', fr: 'Points forts', es: 'Aspectos destacados' },\n      'Área de mejora': { en: 'Improvement areas', fr: 'Domaines d\\'amélioration', es: 'Área de mejora' },\n\n      // CAMPOS DE SOLICITUD DE EMPLEO\n      'Puesto al que aplicas': { en: 'Position you are applying for', fr: 'Poste auquel vous postulez', es: 'Puesto al que aplicas' },\n      'Experiencia relevante': { en: 'Relevant experience', fr: 'Expérience pertinente', es: 'Experiencia relevante' },\n      'Adjunta tu CV': { en: 'Attach your CV', fr: 'Joignez votre CV', es: 'Adjunta tu CV' },\n      'Portfolio (opcional)': { en: 'Portfolio (optional)', fr: 'Portfolio (optionnel)', es: 'Portfolio (opcional)' },\n      'Perfil de LinkedIn': { en: 'LinkedIn profile', fr: 'Profil LinkedIn', es: 'Perfil de LinkedIn' },\n      'Disponibilidad': { en: 'Availability', fr: 'Disponibilité', es: 'Disponibilidad' },\n      'Doy mi consentimiento para el tratamiento de mis datos personales según la política de privacidad': { en: 'I give my consent for the processing of my personal data according to the privacy policy', fr: 'Je donne mon consentement pour le traitement de mes données personnelles selon la politique de confidentialité', es: 'Doy mi consentimiento para el tratamiento de mis datos personales según la política de privacidad' },\n\n      // CAMPOS DE NEWSLETTER\n      'Temas de interés': { en: 'Topics of interest', fr: 'Sujets d\\'intérêt', es: 'Temas de interés' },\n      'Frecuencia de envío preferida': { en: 'Preferred sending frequency', fr: 'Fréquence d\\'envoi préférée', es: 'Frecuencia de envío preferida' },\n      'Acepto recibir comunicaciones comerciales': { en: 'I accept to receive commercial communications', fr: 'J\\'accepte de recevoir des communications commerciales', es: 'Acepto recibir comunicaciones comerciales' },\n      'Acepto los términos y condiciones': { en: 'I accept the terms and conditions', fr: 'J\\'accepte les termes et conditions', es: 'Acepto los términos y condiciones' },\n\n      // CAMPOS DE ENCUESTA DE OPINIÓN\n      'Producto/Servicio evaluado': { en: 'Product/Service evaluated', fr: 'Produit/Service évalué', es: 'Producto/Servicio evaluado' },\n      'Valoración general': { en: 'Overall rating', fr: 'Évaluation générale', es: 'Valoración general' },\n      'Aspectos positivos': { en: 'Positive aspects', fr: 'Aspects positifs', es: 'Aspectos positivos' },\n      'Aspectos a mejorar': { en: 'Aspects to improve', fr: 'Aspects à améliorer', es: 'Aspectos a mejorar' },\n      'Probabilidad de recomendación': { en: 'Likelihood of recommendation', fr: 'Probabilité de recommandation', es: 'Probabilidad de recomendación' },\n\n      // PLACEHOLDERS Y TEXTOS ESPECÍFICOS\n      'Tu nombre placeholder': { en: 'Your name', fr: 'Votre nom', es: 'Tu nombre' },\n      'Tu nombre completo placeholder': { en: 'Your full name', fr: 'Votre nom complet', es: 'Tu nombre completo' },\n      'email placeholder': { en: 'you@email.com', fr: 'vous@email.com', es: 'tu@email.com' },\n      'Nombre de tu empresa placeholder': { en: 'Your company name', fr: 'Nom de votre entreprise', es: 'Nombre de tu empresa' },\n      'Describe tu proyecto...': { en: 'Describe your project...', fr: 'Décrivez votre projet...', es: 'Describe tu proyecto...' },\n      'Cuéntanos tu experiencia': { en: 'Tell us about your experience', fr: 'Parlez-nous de votre expérience', es: 'Cuéntanos tu experiencia' },\n      'Comparte lo que más te gustó': { en: 'Share what you liked most', fr: 'Partagez ce que vous avez le plus aimé', es: 'Comparte lo que más te gustó' },\n      'Tus sugerencias son importantes': { en: 'Your suggestions are important', fr: 'Vos suggestions sont importantes', es: 'Tus sugerencias son importantes' },\n\n      // BOTONES DE ENVÍO\n      'Enviar btn': { en: 'Submit', fr: 'Envoyer', es: 'Enviar' },\n      'Enviar solicitud btn': { en: 'Submit request', fr: 'Envoyer la demande', es: 'Enviar solicitud' },\n      'Registrarse btn': { en: 'Register', fr: 'S\\'inscrire', es: 'Registrarse' },\n      'Realizar pedido btn': { en: 'Place order', fr: 'Passer commande', es: 'Realizar pedido' },\n      'Enviar evaluación btn': { en: 'Submit evaluation', fr: 'Envoyer l\\'évaluation', es: 'Enviar evaluación' },\n      'Postular btn': { en: 'Apply', fr: 'Postuler', es: 'Postular' },\n      'Suscribirse btn': { en: 'Subscribe', fr: 'S\\'abonner', es: 'Suscribirse' },\n      'Enviar opinión btn': { en: 'Submit opinion', fr: 'Envoyer l\\'avis', es: 'Enviar opinión' },\n\n      // OPCIONES MÚLTIPLES COMUNES\n      'Redes sociales': { en: 'Social media', fr: 'Réseaux sociaux', es: 'Redes sociales' },\n      'Búsqueda en Google': { en: 'Google search', fr: 'Recherche Google', es: 'Búsqueda en Google' },\n      'Recomendación': { en: 'Recommendation', fr: 'Recommandation', es: 'Recomendación' },\n      'Email': { en: 'Email', fr: 'Email', es: 'Email' },\n      'Otro': { en: 'Other', fr: 'Autre', es: 'Otro' },\n\n      // OPCIONES DE SERVICIOS\n      'Atención al cliente': { en: 'Customer service', fr: 'Service client', es: 'Atención al cliente' },\n      'Ventas': { en: 'Sales', fr: 'Ventes', es: 'Ventas' },\n      'Soporte técnico': { en: 'Technical support', fr: 'Support technique', es: 'Soporte técnico' },\n      'Otros': { en: 'Others', fr: 'Autres', es: 'Otros' },\n\n      // OPCIONES DE TIPO DE SERVICIO\n      'Desarrollo web': { en: 'Web development', fr: 'Développement web', es: 'Desarrollo web' },\n      'Diseño gráfico': { en: 'Graphic design', fr: 'Design graphique', es: 'Diseño gráfico' },\n      'Marketing digital': { en: 'Digital marketing', fr: 'Marketing numérique', es: 'Marketing digital' },\n      'Consultoría': { en: 'Consulting', fr: 'Conseil', es: 'Consultoría' },\n\n      // OPCIONES DE CARGO\n      'Director/a': { en: 'Director', fr: 'Directeur/trice', es: 'Director/a' },\n      'Gerente': { en: 'Manager', fr: 'Responsable', es: 'Gerente' },\n      'Técnico/a': { en: 'Technical', fr: 'Technicien/ne', es: 'Técnico/a' },\n      'Estudiante': { en: 'Student', fr: 'Étudiant/e', es: 'Estudiante' },\n\n      // OPCIONES DE PRODUCTOS\n      'Producto A - 29.99€': { en: 'Product A - €29.99', fr: 'Produit A - 29,99€', es: 'Producto A - 29.99€' },\n      'Producto B - 49.99€': { en: 'Product B - €49.99', fr: 'Produit B - 49,99€', es: 'Producto B - 49.99€' },\n      'Producto C - 99.99€': { en: 'Product C - €99.99', fr: 'Produit C - 99,99€', es: 'Producto C - 99.99€' },\n      'Pack Completo - 149.99€': { en: 'Complete Pack - €149.99', fr: 'Pack Complet - 149,99€', es: 'Pack Completo - 149.99€' },\n\n      // OPCIONES DE PAGO\n      'Tarjeta de crédito': { en: 'Credit card', fr: 'Carte de crédit', es: 'Tarjeta de crédito' },\n      'PayPal': { en: 'PayPal', fr: 'PayPal', es: 'PayPal' },\n      'Transferencia bancaria': { en: 'Bank transfer', fr: 'Virement bancaire', es: 'Transferencia bancaria' },\n\n      // OPCIONES DE PUESTOS DE TRABAJO\n      'Desarrollador/a Frontend': { en: 'Frontend Developer', fr: 'Développeur/se Frontend', es: 'Desarrollador/a Frontend' },\n      'Desarrollador/a Backend': { en: 'Backend Developer', fr: 'Développeur/se Backend', es: 'Desarrollador/a Backend' },\n      'Diseñador/a UX/UI': { en: 'UX/UI Designer', fr: 'Designer UX/UI', es: 'Diseñador/a UX/UI' },\n      'Project Manager': { en: 'Project Manager', fr: 'Chef de projet', es: 'Project Manager' },\n\n      // OPCIONES DE DISPONIBILIDAD\n      'Inmediata': { en: 'Immediate', fr: 'Immédiate', es: 'Inmediata' },\n      'En 2 semanas': { en: 'In 2 weeks', fr: 'Dans 2 semaines', es: 'En 2 semanas' },\n      'En 1 mes': { en: 'In 1 month', fr: 'Dans 1 mois', es: 'En 1 mes' },\n      'Más de 1 mes': { en: 'More than 1 month', fr: 'Plus d\\'1 mois', es: 'Más de 1 mes' },\n\n      // OPCIONES DE TEMAS DE INTERÉS\n      'Tecnología': { en: 'Technology', fr: 'Technologie', es: 'Tecnología' },\n      'Marketing': { en: 'Marketing', fr: 'Marketing', es: 'Marketing' },\n      'Negocios': { en: 'Business', fr: 'Affaires', es: 'Negocios' },\n      'Diseño': { en: 'Design', fr: 'Design', es: 'Diseño' },\n\n      // OPCIONES DE FRECUENCIA\n      'Semanal': { en: 'Weekly', fr: 'Hebdomadaire', es: 'Semanal' },\n      'Quincenal': { en: 'Bi-weekly', fr: 'Bimensuel', es: 'Quincenal' },\n      'Mensual': { en: 'Monthly', fr: 'Mensuel', es: 'Mensual' },\n\n      // PLACEHOLDERS\n      'Tu nombre': { en: 'Your name', fr: 'Votre nom', es: 'Tu nombre' },\n      'Tu nombre completo': { en: 'Your full name', fr: 'Votre nom complet', es: 'Tu nombre completo' },\n      'tu@email.com': { en: 'you@email.com', fr: 'vous@email.com', es: 'tu@email.com' },\n      'correo@ejemplo.com': { en: 'email@example.com', fr: 'email@exemple.com', es: 'correo@ejemplo.com' },\n      'Tu empresa': { en: 'Your company', fr: 'Votre entreprise', es: 'Tu empresa' },\n      'Nombre de tu empresa': { en: 'Your company name', fr: 'Nom de votre entreprise', es: 'Nombre de tu empresa' },\n      '+34 600000000': { en: '+1 555000000', fr: '+33 600000000', es: '+34 600000000' },\n      'Tu opinión es muy importante para nosotros': { en: 'Your opinion is very important to us', fr: 'Votre opinion est très importante pour nous', es: 'Tu opinión es muy importante para nosotros' },\n      'Describe tu proyecto y necesidades específicas': { en: 'Describe your project and specific needs', fr: 'Décrivez votre projet et besoins spécifiques', es: 'Describe tu proyecto y necesidades específicas' },\n      'Describe brevemente tu experiencia relacionada con el puesto': { en: 'Briefly describe your experience related to the position', fr: 'Décrivez brièvement votre expérience liée au poste', es: 'Describe brevemente tu experiencia relacionada con el puesto' },\n      'https://linkedin.com/in/tu-perfil': { en: 'https://linkedin.com/in/your-profile', fr: 'https://linkedin.com/in/votre-profil', es: 'https://linkedin.com/in/tu-perfil' },\n      'Dirección completa incluyendo código postal': { en: 'Complete address including postal code', fr: 'Adresse complète y compris le code postal', es: 'Dirección completa incluyendo código postal' },\n      'Instrucciones especiales para el pedido': { en: 'Special instructions for the order', fr: 'Instructions spéciales pour la commande', es: 'Instrucciones especiales para el pedido' },\n      'Comparte lo que más te gustó': { en: 'Share what you liked most', fr: 'Partagez ce que vous avez le plus aimé', es: 'Comparte lo que más te gustó' },\n      'Tus sugerencias son importantes': { en: 'Your suggestions are important', fr: 'Vos suggestions sont importantes', es: 'Tus sugerencias son importantes' },\n      '1000': { en: '1000', fr: '1000', es: '1000' },\n\n      // BOTONES DE ENVÍO\n      'Enviar': { en: 'Submit', fr: 'Soumettre', es: 'Enviar' },\n      'Enviar encuesta': { en: 'Submit survey', fr: 'Envoyer l\\'enquête', es: 'Enviar encuesta' },\n      'Solicitar presupuesto': { en: 'Request quote', fr: 'Demander un devis', es: 'Solicitar presupuesto' },\n      'Confirmar registro': { en: 'Confirm registration', fr: 'Confirmer l\\'inscription', es: 'Confirmar registro' },\n      'Confirmar Pedido': { en: 'Confirm Order', fr: 'Confirmer la Commande', es: 'Confirmar Pedido' },\n      'Enviar evaluación': { en: 'Submit evaluation', fr: 'Envoyer l\\'évaluation', es: 'Enviar evaluación' },\n      'Enviar solicitud': { en: 'Submit application', fr: 'Envoyer la candidature', es: 'Enviar solicitud' },\n      'Suscribirse': { en: 'Subscribe', fr: 'S\\'abonner', es: 'Suscribirse' },\n      'Enviar opinión': { en: 'Submit opinion', fr: 'Envoyer l\\'avis', es: 'Enviar opinión' },\n\n      // OPCIONES DE EVENTOS ESPECÍFICOS\n      'Conferencia anual 2025': { en: 'Annual Conference 2025', fr: 'Conférence annuelle 2025', es: 'Conferencia anual 2025' },\n      'Taller práctico - Mayo': { en: 'Practical Workshop - May', fr: 'Atelier pratique - Mai', es: 'Taller práctico - Mayo' },\n      'Webinar técnico - Junio': { en: 'Technical Webinar - June', fr: 'Webinaire technique - Juin', es: 'Webinar técnico - Junio' },\n\n      // CAMPOS ADICIONALES CRÍTICOS\n      'Unirme a la lista de espera': { en: 'Join waitlist', fr: 'Rejoindre la liste d\\'attente', es: 'Unirme a la lista de espera' },\n      'Gracias por tu envío': { en: 'Thank you for your submission', fr: 'Merci pour votre soumission', es: 'Gracias por tu envío' },\n      'Votre nom': { en: 'Your name', fr: 'Votre nom', es: 'Tu nombre' },\n      'vous@email.com': { en: 'you@email.com', fr: 'vous@email.com', es: 'tu@email.com' },\n      'Prénom': { en: 'First name', fr: 'Prénom', es: 'Nombre' },\n\n      // CAMPOS ESPECÍFICOS DE LISTA DE ESPERA\n      'Liste d\\'Attente Webinar Premium': { en: 'Premium Webinar Waitlist', fr: 'Liste d\\'Attente Webinar Premium', es: 'Lista de Espera Webinar Premium' },\n      'Votre email': { en: 'Your email', fr: 'Votre email', es: 'Tu email' },\n      'Name': { en: 'Name', fr: 'Nom', es: 'Nombre' },\n\n      // MENSAJES DE ÉXITO\n      '¡Gracias por tu feedback!': { en: 'Thank you for your feedback!', fr: 'Merci pour vos commentaires!', es: '¡Gracias por tu feedback!' },\n      '¡Hemos recibido tu solicitud! Te contactaremos en breve.': { en: 'We have received your request! We will contact you shortly.', fr: 'Nous avons reçu votre demande! Nous vous contacterons bientôt.', es: '¡Hemos recibido tu solicitud! Te contactaremos en breve.' },\n      '¡Registro completado! Recibirás un email de confirmación.': { en: 'Registration completed! You will receive a confirmation email.', fr: 'Inscription terminée! Vous recevrez un email de confirmation.', es: '¡Registro completado! Recibirás un email de confirmación.' },\n      '¡Pedido recibido! Recibirás un email de confirmación con los detalles.': { en: 'Order received! You will receive a confirmation email with the details.', fr: 'Commande reçue! Vous recevrez un email de confirmation avec les détails.', es: '¡Pedido recibido! Recibirás un email de confirmación con los detalles.' },\n      '¡Gracias por tu evaluación! Tu feedback nos ayuda a mejorar.': { en: 'Thank you for your evaluation! Your feedback helps us improve.', fr: 'Merci pour votre évaluation! Vos commentaires nous aident à nous améliorer.', es: '¡Gracias por tu evaluación! Tu feedback nos ayuda a mejorar.' },\n      '¡Hemos recibido tu solicitud! Revisaremos tu perfil y te contactaremos en caso de avanzar en el proceso.': { en: 'We have received your application! We will review your profile and contact you if we move forward in the process.', fr: 'Nous avons reçu votre candidature! Nous examinerons votre profil et vous contacterons si nous avançons dans le processus.', es: '¡Hemos recibido tu solicitud! Revisaremos tu perfil y te contactaremos en caso de avanzar en el proceso.' },\n      '¡Bienvenido/a a nuestro newsletter!': { en: 'Welcome to our newsletter!', fr: 'Bienvenue dans notre newsletter!', es: '¡Bienvenido/a a nuestro newsletter!' },\n      '¡Gracias por compartir tu opinión!': { en: 'Thank you for sharing your opinion!', fr: 'Merci de partager votre avis!', es: '¡Gracias por compartir tu opinión!' }\n    };\n\n    const translateText = (text: string, targetLanguage: string): string => {\n      if (!text) return text;\n      const translation = fieldTranslations[text];\n      if (translation && translation[targetLanguage]) {\n        console.log(`Traduciendo campo \"${text}\" a ${targetLanguage}: \"${translation[targetLanguage]}\"`);\n        return translation[targetLanguage];\n      }\n      return text;\n    };\n\n    if (structure && structure.fields) {\n      structure.fields = structure.fields.map((field: any) => {\n        // Traducir la etiqueta del campo\n        const translatedLabel = translateText(field.label, language);\n\n        // Traducir el placeholder si existe\n        const translatedPlaceholder = field.placeholder ? translateText(field.placeholder, language) : field.placeholder;\n\n        // Traducir las opciones si es un campo select, radio, etc.\n        let translatedOptions = field.options;\n        if (field.options && Array.isArray(field.options)) {\n          translatedOptions = field.options.map((option: string) => translateText(option, language));\n        }\n\n        return {\n          ...field,\n          label: translatedLabel,\n          placeholder: translatedPlaceholder,\n          options: translatedOptions\n        };\n      });\n\n      // Traducir el texto del botón de envío\n      if (structure.submitButtonText) {\n        structure.submitButtonText = translateText(structure.submitButtonText, language);\n      }\n    }\n\n    return structure;\n  };\n\n  app.post(\"/api/forms\", verifyToken, requireResourceLimit('forms'), async (req, res) => {\n    try {\n      const userId = req.userId;\n      const { templateId, language = 'es', ...formData } = req.body;\n\n      // Si se proporciona templateId, crear formulario basado en plantilla\n      if (templateId) {\n        // Obtener la plantilla\n        const template = await storage.getFormTemplate(templateId);\n\n        if (!template) {\n          return res.status(404).json({ error: \"Template not found\" });\n        }\n\n        // Traducir el título y descripción de la plantilla\n        const templateTranslations: Record<string, Record<string, string>> = {\n          'Formulario de Contacto': { en: 'Contact Form', fr: 'Formulaire de Contact', es: 'Formulario de Contacto' },\n          'Lista de Espera': { en: 'Waitlist', fr: 'Liste d\\'Attente', es: 'Lista de Espera' },\n          'Encuesta de Satisfacción': { en: 'Satisfaction Survey', fr: 'Enquête de Satisfaction', es: 'Encuesta de Satisfacción' },\n          'Solicitud de Presupuesto': { en: 'Quote Request', fr: 'Demande de Devis', es: 'Solicitud de Presupuesto' },\n          'Registro para Webinar': { en: 'Webinar Registration', fr: 'Inscription au Webinaire', es: 'Registro para Webinar' },\n          'Formulario de Pedido': { en: 'Order Form', fr: 'Formulaire de Commande', es: 'Formulario de Pedido' },\n\n          'Plantilla estándar para formularios de contacto': { en: 'Standard template for contact forms', fr: 'Modèle standard pour formulaires de contact', es: 'Plantilla estándar para formularios de contacto' },\n          'Plantilla para capturar usuarios en lista de espera': { en: 'Template to capture users for waitlist', fr: 'Modèle pour capturer des utilisateurs en liste d\\'attente', es: 'Plantilla para capturar usuarios en lista de espera' },\n          'Encuesta para medir la satisfacción del cliente': { en: 'Survey to measure customer satisfaction', fr: 'Enquête pour mesurer la satisfaction client', es: 'Encuesta para medir la satisfacción del cliente' },\n          'Formulario para solicitar presupuestos personalizados para tus clientes': { en: 'Form to request personalized quotes for your clients', fr: 'Formulaire pour demander des devis personnalisés pour vos clients', es: 'Formulario para solicitar presupuestos personalizados para tus clientes' },\n          'Formulario optimizado para registrar asistentes a eventos virtuales': { en: 'Optimized form to register attendees for virtual events', fr: 'Formulaire optimisé pour inscrire des participants à des événements virtuels', es: 'Formulario optimizado para registrar asistentes a eventos virtuales' },\n          'Perfecto para tomar pedidos online de manera organizada.': { en: 'Perfect for taking online orders in an organized way.', fr: 'Parfait pour prendre des commandes en ligne de manière organisée.', es: 'Perfecto para tomar pedidos online de manera organizada.' },\n\n          // Plantillas adicionales\n          'Evaluación de Evento': { en: 'Event Evaluation', fr: 'Évaluation d\\'Événement', es: 'Evaluación de Evento' },\n          'Solicitud de Empleo': { en: 'Job Application', fr: 'Demande d\\'Emploi', es: 'Solicitud de Empleo' },\n          'Registro a Newsletter': { en: 'Newsletter Registration', fr: 'Inscription à la Newsletter', es: 'Registro a Newsletter' },\n          'Encuesta de Opinión': { en: 'Opinion Survey', fr: 'Enquête d\\'Opinion', es: 'Encuesta de Opinión' },\n\n          // Descripciones adicionales\n          'Recopila feedback detallado sobre tus eventos y conferencias.': { en: 'Collect detailed feedback about your events and conferences.', fr: 'Recueillez des commentaires détaillés sur vos événements et conférences.', es: 'Recopila feedback detallado sobre tus eventos y conferencias.' },\n          'Optimizado para reclutar candidatos y revisar solicitudes de empleo.': { en: 'Optimized to recruit candidates and review job applications.', fr: 'Optimisé pour recruter des candidats et examiner les demandes d\\'emploi.', es: 'Optimizado para reclutar candidatos y revisar solicitudes de empleo.' },\n          'Forma sencilla para capturar suscriptores a tu boletín informativo.': { en: 'Simple form to capture subscribers to your newsletter.', fr: 'Formulaire simple pour capturer les abonnés à votre newsletter.', es: 'Forma sencilla para capturar suscriptores a tu boletín informativo.' },\n          'Recopila opiniones y valoraciones sobre productos o servicios.': { en: 'Collect opinions and ratings about products or services.', fr: 'Recueillez des opinions et des évaluations sur les produits ou services.', es: 'Recopila opiniones y valoraciones sobre productos o servicios.' }\n        };\n\n        const translateTemplateText = (text: string, targetLanguage: string): string => {\n          const translation = templateTranslations[text];\n          if (translation && translation[targetLanguage]) {\n            console.log(`Traduciendo título/descripción \"${text}\" a ${targetLanguage}: \"${translation[targetLanguage]}\"`);\n            return translation[targetLanguage];\n          }\n          return text;\n        };\n\n        // Traducir título y descripción\n        const translatedName = translateTemplateText(template.name, language);\n        const translatedDescription = translateTemplateText(template.description, language);\n\n        // Crear un título para el formulario basado en la plantilla traducida\n        const title = `${translatedName} ${new Date().toLocaleDateString('es-ES')}`;\n\n        // Generar slug único basado en el título\n        const slug = title.toLowerCase()\n          .replace(/\\s+/g, '-')\n          .replace(/[^\\w\\-]+/g, '')\n          .replace(/\\-\\-+/g, '-')\n          .replace(/^-+/, '')\n          .replace(/-+$/, '');\n\n        // Verificar si ya existe un formulario con ese slug\n        const existingForm = await storage.getFormBySlug(slug);\n\n        const finalSlug = existingForm \n          ? `${slug}-${Math.floor(Math.random() * 1000)}` \n          : slug;\n\n        // Traducir la estructura de campos según el idioma seleccionado\n        const translatedStructure = translateTemplateFields(JSON.parse(JSON.stringify(template.structure)), language);\n\n        console.log(`Creando formulario con idioma ${language}:`, {\n          title,\n          description: translatedDescription,\n          structure: translatedStructure\n        });\n\n        // Crear el nuevo formulario con datos de la plantilla traducidos\n        const newForm = await storage.createForm({\n          title,\n          slug: finalSlug,\n          description: translatedDescription,\n          type: template.type,\n          published: false,\n          language: language, // Guardar el idioma del formulario\n          structure: translatedStructure,\n          styling: template.styling,\n          settings: template.settings,\n          userId\n        });\n\n        return res.status(201).json(newForm);\n      }\n\n      // Caso normal - crear formulario desde datos proporcionados\n      // Generar slug único basado en el nombre del formulario\n      const slug = formData.title.toLowerCase()\n        .replace(/\\s+/g, '-')        // Reemplazar espacios con guiones\n        .replace(/[^\\w\\-]+/g, '')    // Eliminar caracteres especiales\n        .replace(/\\-\\-+/g, '-')      // Eliminar guiones múltiples\n        .replace(/^-+/, '')          // Eliminar guiones del inicio\n        .replace(/-+$/, '');         // Eliminar guiones del final\n\n      // Verificar si ya existe un formulario con ese slug\n      const existingForm = await storage.getFormBySlug(slug);\n\n      const finalSlug = existingForm \n        ? `${slug}-${Math.floor(Math.random() * 1000)}` \n        : slug;\n\n      const newForm = await storage.createForm({\n        ...formData,\n        userId,\n        slug: finalSlug\n      });\n\n      res.status(201).json(newForm);\n    } catch (error) {\n      console.error(\"Error creating form:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/forms/:id\", authenticateJWT, async (req, res) => {\n    try {\n      const formId = parseInt(req.params.id);\n      const formData = req.body;\n\n      console.log(\"Usuario autenticado\");\n\n      // Verificar que el formulario existe\n      const existingForm = await storage.getForm(formId);\n\n      if (!existingForm) {\n        return res.status(404).json({ error: \"Form not found\" });\n      }\n\n      // Verificar que el usuario es propietario del formulario\n      if (existingForm.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Unauthorized access to this form\" });\n      }\n\n      const updatedForm = await storage.updateForm(formId, formData);\n      res.json(updatedForm);\n    } catch (error) {\n      console.error(\"Error updating form:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/forms/:id\", authenticateJWT, async (req, res) => {\n    try {\n      const formId = parseInt(req.params.id);\n\n      // Verificar que el formulario existe\n      const existingForm = await storage.getForm(formId);\n\n      if (!existingForm) {\n        return res.status(404).json({ error: \"Form not found\" });\n      }\n\n      // Verificar que el usuario es propietario del formulario\n      if (existingForm.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Unauthorized access to this form\" });\n      }\n\n      await storage.deleteForm(formId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting form:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Form Templates API endpoints\n  app.get(\"/api/form-templates\", async (req, res) => {\n    try {\n      const templates = await storage.getFormTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error getting form templates:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/form-templates/default\", async (req, res) => {\n    try {\n      const templates = await storage.getDefaultFormTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error getting default form templates:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/form-templates/type/:type\", async (req, res) => {\n    try {\n      const type = req.params.type;\n      const templates = await storage.getTemplatesByType(type);\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error getting form templates by type:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/form-templates/:id\", async (req, res) => {\n    try {\n      const templateId = parseInt(req.params.id);\n      const template = await storage.getFormTemplate(templateId);\n\n      if (!template) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error getting form template:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Solo permitir crear/editar/eliminar templates a administradores\n  app.post(\"/api/form-templates\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const templateData = req.body;\n      const newTemplate = await storage.createFormTemplate(templateData);\n      res.status(201).json(newTemplate);\n    } catch (error) {\n      console.error(\"Error creating form template:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/form-templates/:id\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const templateId = parseInt(req.params.id);\n      const templateData = req.body;\n\n      // Verificar que el template existe\n      const existingTemplate = await storage.getFormTemplate(templateId);\n\n      if (!existingTemplate) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n\n      const updatedTemplate = await storage.updateFormTemplate(templateId, templateData);\n      res.json(updatedTemplate);\n    } catch (error) {\n      console.error(\"Error updating form template:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/form-templates/:id\", authenticateJWT, isAdmin, async (req, res) => {\n    try {\n      const templateId = parseInt(req.params.id);\n\n      // Verificar que el template existe\n      const existingTemplate = await storage.getFormTemplate(templateId);\n\n      if (!existingTemplate) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n\n      await storage.deleteFormTemplate(templateId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting form template:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Public Form API endpoints\n  app.get(\"/api/forms/public/:slug\", async (req, res) => {\n    try {\n      const slug = req.params.slug;\n\n      // Obtener el formulario por su slug\n      const form = await storage.getFormBySlug(slug);\n\n      if (!form) {\n        return res.status(404).json({ error: \"Form not found\" });\n      }\n\n      // Detectar idioma del formulario basado en los campos\n      let detectedLanguage = 'fr'; // Por defecto francés\n      if (form.structure?.fields) {\n        const sampleText = form.structure.fields[0]?.label || form.title || '';\n        if (sampleText.match(/\\b(nombre|email|selecciona|enviar|gracias)\\b/i)) {\n          detectedLanguage = 'es';\n        } else if (sampleText.match(/\\b(name|email|select|submit|thank)\\b/i)) {\n          detectedLanguage = 'en';\n        } else if (sampleText.match(/\\b(nom|email|sélectionnez|envoyer|merci)\\b/i)) {\n          detectedLanguage = 'fr';\n        }\n      }\n\n      // Textos por defecto según el idioma detectado\n      const defaultTexts = {\n        'fr': {\n          submitButtonText: 'Envoyer',\n          successMessage: 'Merci ! Votre information a été envoyée avec succès.'\n        },\n        'es': {\n          submitButtonText: 'Enviar',\n          successMessage: '¡Gracias! Tu información ha sido enviada correctamente.'\n        },\n        'en': {\n          submitButtonText: 'Submit',\n          successMessage: 'Thank you! Your information has been sent successfully.'\n        }\n      };\n\n      const defaults = defaultTexts[detectedLanguage] || defaultTexts['fr'];\n\n      // Devolver solo la información pública necesaria para renderizar el formulario\n      // Excluimos información sensible\n      const publicFormData = {\n        id: form.id,\n        slug: form.slug,\n        title: form.title,\n        description: form.description,\n        language: detectedLanguage,\n        buttonColor: form.structure?.buttonColor || form.settings?.buttonColor || '#2563EB',\n        submitButtonText: form.structure?.submitButtonText || form.settings?.submitButtonText || defaults.submitButtonText,\n        successMessage: form.structure?.successMessage || form.settings?.successMessage || defaults.successMessage,\n        successUrl: form.settings?.successRedirectUrl,\n        structure: form.structure,\n        settings: form.settings\n      };\n\n      res.json(publicFormData);\n    } catch (error) {\n      console.error(\"Error getting public form:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // El endpoint de envío de formularios ya existe como \"/api/public/form/:slug/submit\"\n\n  // Form Responses API endpoints\n  app.get(\"/api/forms/:formId/responses\", authenticateJWT, async (req, res) => {\n    try {\n      const formId = parseInt(req.params.formId);\n\n      // Verificar que el formulario existe\n      const existingForm = await storage.getForm(formId);\n\n      if (!existingForm) {\n        return res.status(404).json({ error: \"Form not found\" });\n      }\n\n      // Verificar que el usuario es propietario del formulario\n      if (existingForm.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Unauthorized access to this form's responses\" });\n      }\n\n      const responses = await storage.getFormResponses(formId);\n      res.json(responses);\n    } catch (error) {\n      console.error(\"Error getting form responses:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Endpoint público para enviar respuestas de formulario\n  app.post(\"/api/public/form/:slug/submit\", async (req, res) => {\n    try {\n      const slug = req.params.slug;\n      const responseData = req.body;\n\n\n      // Verificar que el formulario existe\n      const form = await storage.getFormBySlug(slug);\n\n      if (!form) {\n        return res.status(404).json({ error: \"Form not found\" });\n      }\n\n      // Verificar que el formulario está activo (publicado es suficiente)\n      if (!form.published) {\n        return res.status(403).json({ error: \"This form is not published\" });\n      }\n\n      // Los datos pueden venir directamente en responseData o en responseData.data\n      const formData = responseData.data || responseData;\n\n      // Validar los datos de la respuesta según la estructura del formulario\n      const requiredFields = form.structure.fields\n        .filter(field => field.required)\n        .map(field => field.id);\n\n      for (const field of requiredFields) {\n        if (!formData[field]) {\n          return res.status(400).json({ \n            error: \"Missing required fields\", \n            missingFields: requiredFields.filter(f => !formData[f])\n          });\n        }\n      }\n\n      // Crear la respuesta\n      const newResponse = await storage.createFormResponse({\n        formId: form.id,\n        data: formData,\n        metadata: responseData.metadata || {}\n      });\n\n      res.status(201).json({ \n        success: true, \n        message: form.structure.successMessage || \"Form submitted successfully\" \n      });\n    } catch (error) {\n      console.error(\"Error submitting form response:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/forms/:formId/responses/:responseId\", authenticateJWT, async (req, res) => {\n    try {\n      const formId = parseInt(req.params.formId);\n      const responseId = parseInt(req.params.responseId);\n\n      // Verificar que el formulario existe\n      const existingForm = await storage.getForm(formId);\n\n      if (!existingForm) {\n        return res.status(404).json({ error: \"Form not found\" });\n      }\n\n      // Verificar que el usuario es propietario del formulario\n      if (existingForm.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Unauthorized access to this form's responses\" });\n      }\n\n      // Verificar que la respuesta existe y pertenece a este formulario\n      const existingResponse = await storage.getFormResponse(responseId);\n\n      if (!existingResponse || existingResponse.formId !== formId) {\n        return res.status(404).json({ error: \"Response not found for this form\" });\n      }\n\n      await storage.deleteFormResponse(responseId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting form response:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/forms/:formId/responses\", authenticateJWT, async (req, res) => {\n    try {\n      const formId = parseInt(req.params.formId);\n\n      // Verificar que el formulario existe\n      const existingForm = await storage.getForm(formId);\n\n      if (!existingForm) {\n        return res.status(404).json({ error: \"Form not found\" });\n      }\n\n      // Verificar que el usuario es propietario del formulario\n      if (existingForm.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Unauthorized access to this form's responses\" });\n      }\n\n      await storage.deleteFormResponses(formId);\n\n      // Restaurar el contador de respuestas\n      await storage.updateForm(formId, { responseCount: 0 });\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting all form responses:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Ruta para la vista pública del formulario (página completa)\n  app.get(\"/forms/:id/view\", async (req, res) => {\n    try {\n      const formId = parseInt(req.params.id);\n\n      // Obtener el formulario\n      const form = await storage.getForm(formId);\n\n      if (!form) {\n        return res.status(404).send('Formulario no encontrado');\n      }\n\n      // Renderizar una página HTML completa para ver el formulario\n      const html = `\n        <!DOCTYPE html>\n        <html lang=\"es\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>${form.title || 'Formulario AIPI'}</title>\n          <style>\n            body {\n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n              margin: 0;\n              padding: 0;\n              color: #333;\n              background-color: #f5f5f5;\n              min-height: 100vh;\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-content: center;\n            }\n\n            .branding {\n              font-size: 0.8rem;\n              text-align: center;\n              margin-top: 2rem;\n              color: #888;\n            }\n\n            .branding a {\n              color: #666;\n              text-decoration: none;\n            }\n\n            .branding a:hover {\n              text-decoration: underline;\n            }\n\n            .container {\n              width: 100%;\n              max-width: 600px;\n              margin: 2rem auto;\n              padding: 2rem;\n              background-color: white;\n              border-radius: 8px;\n              box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            }\n\n            h1 {\n              font-size: 1.8rem;\n              margin-bottom: 1rem;\n              color: #333;\n            }\n\n            p {\n              margin-bottom: 1.5rem;\n              color: #666;\n            }\n\n            .form-container {\n              max-width: 100%;\n            }\n\n            form {\n              display: flex;\n              flex-direction: column;\n              gap: 1rem;\n            }\n\n            label {\n              font-weight: 500;\n              margin-bottom: 0.25rem;\n              display: block;\n            }\n\n            input, textarea, select {\n              width: 100%;\n              padding: 0.75rem;\n              border: 1px solid #ddd;\n              border-radius: 4px;\n              font-size: 1rem;\n              font-family: inherit;\n              box-sizing: border-box;\n            }\n\n            button {\n              background-color: ${form.styling?.primaryColor || '#3B82F6'};\n              color: white;\n              border: none;\n              padding: 0.75rem 1rem;\n              border-radius: 4px;\n              font-size: 1rem;\n              cursor: pointer;\n              font-weight: 500;\n              margin-top: 0.5rem;\n              transition: background-color 0.2s;\n            }\n\n            button:hover {\n              opacity: 0.9;\n            }\n\n            .required:after {\n              content: \" *\";\n              color: #e53e3e;\n            }\n\n            .form-field {\n              margin-bottom: 1rem;\n            }\n\n            @media (max-width: 640px) {\n              .container {\n                padding: 1.5rem;\n                margin: 1rem;\n                width: auto;\n              }\n\n              h1 {\n                font-size: 1.5rem;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"form-container\">\n              <h1>${form.title || 'Formulario'}</h1>\n              ${form.description ? `<p>${form.description}</p>` : ''}\n\n              <form id=\"aipi-form\">\n                ${form.structure.fields.map(field => `\n                  <div class=\"form-field\">\n                    <label for=\"${field.name}\" class=\"${field.required ? 'required' : ''}\">${field.label}</label>\n                    ${field.type === 'text' ? `\n                      <input type=\"text\" id=\"${field.name}\" name=\"${field.name}\" placeholder=\"${field.placeholder || ''}\" ${field.required ? 'required' : ''}>\n                    ` : field.type === 'email' ? `\n                      <input type=\"email\" id=\"${field.name}\" name=\"${field.name}\" placeholder=\"${field.placeholder || ''}\" ${field.required ? 'required' : ''}>\n                    ` : field.type === 'number' ? `\n                      <input type=\"number\" id=\"${field.name}\" name=\"${field.name}\" placeholder=\"${field.placeholder || ''}\" ${field.required ? 'required' : ''}>\n                    ` : field.type === 'textarea' ? `\n                      <textarea id=\"${field.name}\" name=\"${field.name}\" placeholder=\"${field.placeholder || ''}\" rows=\"4\" ${field.required ? 'required' : ''}></textarea>\n                    ` : field.type === 'select' ? `\n                      <select id=\"${field.name}\" name=\"${field.name}\" ${field.required ? 'required' : ''}>\n                        <option value=\"\">Selecciona una opción</option>\n                        ${field.options && field.options.map(option => {\n                          const optionValue = typeof option === 'string' ? option : option.value || option.label;\n                          const optionLabel = typeof option === 'string' ? option : option.label;\n                          return `<option value=\"${optionValue}\">${optionLabel}</option>`;\n                        }).join('')}\n                      </select>\n                    ` : `\n                      <input type=\"text\" id=\"${field.name}\" name=\"${field.name}\" placeholder=\"${field.placeholder || ''}\" ${field.required ? 'required' : ''}>\n                    `}\n                  </div>\n                `).join('')}\n\n                <button type=\"submit\">${form.structure.submitButtonText || 'Enviar'}</button>\n              </form>\n\n              <div id=\"success-message\" style=\"display: none; margin-top: 1rem; padding: 1rem; background-color: #f0fff4; color: #2f855a; border-radius: 4px; border: 1px solid #c6f6d5;\">\n                ${form.settings?.successMessage || '¡Gracias! Tu información ha sido enviada correctamente.'}\n              </div>\n            </div>\n          </div>\n\n          <div class=\"branding\">\n            Formulario creado con <a href=\"${req.protocol}://${req.get('host')}/\" target=\"_blank\">AIPI Forms</a>\n          </div>\n\n          <script>\n            document.getElementById('aipi-form').addEventListener('submit', async function(e) {\n              e.preventDefault();\n\n              const formData = new FormData(this);\n              const formDataObj = Object.fromEntries(formData.entries());\n\n              try {\n                const response = await fetch('/api/form-responses', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({\n                    formId: ${formId},\n                    data: formDataObj\n                  })\n                });\n                if (response.ok) {\n                  // Mostrar mensaje de éxito\n                  document.getElementById('aipi-form').style.display = 'none';\n                  document.getElementById('success-message').style.display = 'block';\n\n                  // Si hay URL de redirección configurada, redirigir después de un breve retraso\n                  ${form.settings?.redirectUrl ? `\n                    setTimeout(() => {\n                      window.location.href = \"${form.settings.redirectUrl}\";\n                    }, 3000);\n                  ` : ''}\n                } else {\n                  alert('Ocurrió un error al enviar el formulario. Por favor, inténtalo de nuevo.');\n                }\n                } catch (error) {\n                console.error('Error al enviar el formulario:', error);\n                alert('Ocurrió un error al enviar el formulario. Por favor, inténtalo de nuevo.');\n                }\n                });\n                </script>\n                </body>\n                </html>\n                `;\n\n                res.setHeader('Content-Type', 'text/html');\n                res.send(html);\n                } catch (error) {\n                console.error(\"Error al renderizar la vista pública del formulario:\", error);\n                res.status(500).send('Error interno del servidor');\n                }\n                });\n\n                // Función auxiliar para escapar HTML\n                function escapeHtml(text: string): string {\n                if (!text) return '';\n                const map: Record<string, string> = {\n                '&': '&amp;',\n                '<': '&lt;',\n                '>': '&gt;',\n                '\"': '&quot;',\n                \"'\": '&#039;'\n                };\n                return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\n                }\n\n                // Función para obtener traducciones del formulario\n                function getFormTranslations(language: string) {\n                const translations = {\n                es: {\n                completeInfo: 'Por favor complete la información solicitada para comenzar.',\n                selectOption: 'Selecciona una opción',\n                submit: 'Enviar',\n                sending: 'Enviando...',\n                successTitle: '¡Formulario enviado correctamente!',\n                successMessage: 'Gracias por tu información. Te contactaremos pronto.',\n                errorMessage: 'Ocurrió un error al enviar el formulario. Por favor, inténtalo de nuevo.',\n                // Traducciones específicas de campos comunes\n                name: 'Nombre',\n                fullName: 'Nombre completo',\n                email: 'Email',\n                phone: 'Teléfono',\n                message: 'Mensaje',\n                company: 'Empresa',\n                acceptTerms: 'Acepto los términos y condiciones',\n                // Frases problemáticas específicas\n                pleaseComplete: 'Por favor complete la información solicitada para comenzar.',\n                iAcceptTerms: 'Acepto los términos y condiciones'\n                },\n                en: {\n                completeInfo: 'Please complete the requested information to get started.',\n                selectOption: 'Select an option',\n                submit: 'Submit',\n                sending: 'Sending...',\n                successTitle: 'Form submitted successfully!',\n                successMessage: 'Thank you for your information. We will contact you soon.',\n                errorMessage: 'An error occurred while submitting the form. Please try again.',\n                // Traducciones específicas de campos comunes\n                name: 'Name',\n                fullName: 'Full name',\n                email: 'Email', \n                phone: 'Phone',\n                message: 'Message',\n                company: 'Company',\n                acceptTerms: 'I accept the terms and conditions',\n                // Frases problemáticas específicas\n                pleaseComplete: 'Please complete the requested information to get started.',\n                iAcceptTerms: 'I accept the terms and conditions'\n                },\n                fr: {\n                completeInfo: 'Veuillez compléter les informations demandées pour commencer.',\n                selectOption: 'Sélectionnez une option',\n                submit: 'Envoyer',\n                sending: 'Envoi en cours...',\n                successTitle: 'Formulaire envoyé avec succès!',\n                successMessage: 'Merci pour vos informations. Nous vous contacterons bientôt.',\n                errorMessage: 'Une erreur s\\'est produite lors de l\\'envoi du formulaire. Veuillez réessayer.',\n                // Traducciones específicas de campos comunes\n                name: 'Nom',\n                fullName: 'Nom complet',\n                email: 'Email',\n                phone: 'Téléphone', \n                message: 'Message',\n                company: 'Entreprise',\n                acceptTerms: 'J\\'accepte les termes et conditions',\n                // Frases problemáticas específicas\n                pleaseComplete: 'Veuillez compléter les informations demandées pour commencer.',\n                iAcceptTerms: 'J&apos;accepte les termes et conditions'\n                }\n                };\n\n                return translations[language as keyof typeof translations] || translations.es;\n                }\n\n                // Función de traducción inteligente universal\n                function smartTranslate(text: string, language: string): string {\n                if (!text) return text;\n\n                const t = getFormTranslations(language);\n\n                // Si ya está en el idioma correcto, no traducir\n                if (language === 'es') return text;\n\n                // Diccionario completo de traducciones exactas con debug\n                const exactTranslations: Record<string, string> = {\n                // Frases problemáticas específicas\n                'Por favor complete la información solicitada para comenzar.': t.pleaseComplete,\n                'Acepto los términos y condiciones': t.iAcceptTerms,\n                'Complete la información solicitada para comenzar.': t.pleaseComplete,\n\n                // Campos comunes - coincidencias exactas\n                'Nombre': t.name,\n                'Nombre completo': t.fullName,\n                'Nom complet': t.fullName,\n                'Nom': t.name,\n                'Email': t.email,\n                'Teléfono': t.phone,\n                'Mensaje': t.message,\n                'Empresa': t.company,\n                'Entreprise': t.company,\n\n                // Botones y acciones\n                'Enviar': t.submit,\n                'Enviando...': t.sending,\n                'Selecciona una opción': t.selectOption,\n                'Sélectionnez une option': t.selectOption\n                };\n\n                // Buscar traducción exacta primero\n                if (exactTranslations[text]) {\n                return exactTranslations[text];\n                }\n\n                // Traducción por patrones para casos especiales\n                const textLower = text.toLowerCase();\n                if (textLower.includes('acepto') && textLower.includes('términos')) {\n                return t.iAcceptTerms;\n                }\n\n                if (textLower.includes('complete') && textLower.includes('información')) {\n                return t.pleaseComplete;\n                }\n\n                return text;\n                }\n\n                // Función para traducir etiquetas de campo automáticamente\n                function translateFieldLabel(label: string, language: string): string {\n                return smartTranslate(label, language);\n                }\n\n                // Ruta para la vista embebida de formularios con diseño moderno de dos columnas\n                app.get(\"/forms/:id/embed\", async (req, res) => {\n                try {\n                const formId = parseInt(req.params.id);\n\n                // Obtener el formulario\n                const form = await storage.getForm(formId);\n\n                if (!form) {\n                return res.status(404).send('Formulario no encontrado');\n                }\n\n                // Detectar idioma de múltiples fuentes\n                const acceptLanguage = req.headers['accept-language'] || '';\n                const formTitle = form.title || '';\n                const formDescription = form.description || '';\n\n                let detectedLanguage = 'es'; // Default español\n\n                // 1. Detectar por contenido del formulario\n                const frenchWords = ['liste', 'attente', 'utilisateurs', 'modèle', 'rejoindre', 'français'];\n                const englishWords = ['list', 'wait', 'users', 'template', 'join', 'english', 'name', 'email'];\n                const spanishWords = ['lista', 'espera', 'usuarios', 'plantilla', 'unirse', 'español', 'nombre', 'correo'];\n\n                const textToAnalyze = (formTitle + ' ' + formDescription).toLowerCase();\n\n                let frenchScore = 0;\n                let englishScore = 0;\n                let spanishScore = 0;\n\n                frenchWords.forEach(word => {\n                if (textToAnalyze.includes(word)) frenchScore++;\n                });\n\n                englishWords.forEach(word => {\n                if (textToAnalyze.includes(word)) englishScore++;\n                });\n\n                spanishWords.forEach(word => {\n                if (textToAnalyze.includes(word)) spanishScore++;\n                });\n\n                // 2. Determinar idioma por puntuación del contenido\n                if (frenchScore > englishScore && frenchScore > spanishScore) {\n                detectedLanguage = 'fr';\n                } else if (englishScore > frenchScore && englishScore > spanishScore) {\n                detectedLanguage = 'en';\n                } else {\n                // 3. Fallback a Accept-Language header\n                if (acceptLanguage.includes('fr')) {\n                detectedLanguage = 'fr';\n                } else if (acceptLanguage.includes('en')) {\n                detectedLanguage = 'en';\n                }\n                }\n\n\n                const t = getFormTranslations(detectedLanguage);\n\n\n\n                // Generar HTML con diseño moderno de dos columnas\n                const html = `\n                <!DOCTYPE html>\n                <html lang=\"es\">\n                <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>${form.title || 'Formulario AIPI'}</title>\n                <style>\n                * {\n                margin: 0;\n                padding: 0;\n                box-sizing: border-box;\n                }\n\n                body {\n                font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n                line-height: 1.6;\n                background: #f8fafc;\n                margin: 0;\n                padding: 1rem;\n                }\n\n                .modern-form-wrapper {\n                max-width: 900px;\n                margin: 0 auto;\n                background: white;\n                border-radius: 16px;\n                box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n                overflow: hidden;\n                display: grid;\n                grid-template-columns: 1fr 1fr;\n                min-height: 600px;\n                }\n\n                .form-hero {\n                background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 50%, #0f172a 100%);\n                padding: 3rem 2.5rem;\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                position: relative;\n                overflow: hidden;\n                }\n\n                .form-hero::before {\n                content: '';\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(147, 51, 234, 0.1) 100%);\n                opacity: 0.7;\n                }\n\n                .form-hero-content {\n                position: relative;\n                z-index: 1;\n                }\n\n                .form-hero h1 {\n                color: white;\n                font-size: 2.25rem;\n                font-weight: 700;\n                line-height: 1.2;\n                margin: 0 0 1.5rem 0;\n                text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                }\n\n                .form-hero p {\n                color: rgba(255, 255, 255, 0.9);\n                font-size: 1.125rem;\n                line-height: 1.7;\n                margin: 0;\n                font-weight: 400;\n                }\n\n                .form-content {\n                padding: 3rem 2.5rem;\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                background: white;\n                }\n\n                .form-header {\n                margin-bottom: 2rem;\n                }\n\n                .form-subtitle {\n                font-size: 1.125rem;\n                color: #6b7280;\n                margin: 0;\n                font-weight: 400;\n                line-height: 1.6;\n                }\n\n                .form-field {\n                margin-bottom: 1.5rem;\n                }\n\n                .form-label {\n                display: block;\n                font-size: 0.875rem;\n                font-weight: 500;\n                color: #374151;\n                margin-bottom: 0.5rem;\n                letter-spacing: 0.025em;\n                }\n\n                .form-input, .form-select, .form-textarea {\n                width: 100%;\n                padding: 0.75rem 0;\n                font-size: 1rem;\n                color: #111827;\n                background: transparent;\n                border: none;\n                border-bottom: 2px solid #e5e7eb;\n                outline: none;\n                transition: all 0.3s ease;\n                font-family: inherit;\n                box-sizing: border-box;\n                }\n\n                .form-input:focus, .form-select:focus, .form-textarea:focus {\n                border-bottom-color: #3b82f6;\n                background: rgba(59, 130, 246, 0.02);\n                }\n\n                .form-input::placeholder, .form-textarea::placeholder {\n                color: #9ca3af;\n                opacity: 1;\n                }\n\n                .form-select {\n                cursor: pointer;\n                appearance: none;\n                background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\n                background-position: right 0.5rem center;\n                background-repeat: no-repeat;\n                background-size: 1.5em 1.5em;\n                padding-right: 2.5rem;\n                }\n\n                .form-textarea {\n                resize: vertical;\n                min-height: 100px;\n                }\n\n                .checkbox-field {\n                display: flex;\n                align-items: flex-start;\n                gap: 0.75rem;\n                margin: 1.5rem 0;\n                }\n\n                .checkbox {\n                width: 1.25rem;\n                height: 1.25rem;\n                margin-top: 0.125rem;\n                accent-color: #3b82f6;\n                cursor: pointer;\n                }\n\n                .checkbox-label {\n                font-size: 0.875rem;\n                color: #6b7280;\n                cursor: pointer;\n                flex: 1;\n                }\n\n                .submit-button {\n                width: 100%;\n                background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n                color: white;\n                border: none;\n                padding: 0.875rem 1.5rem;\n                font-size: 1rem;\n                font-weight: 600;\n                border-radius: 8px;\n                cursor: pointer;\n                transition: all 0.3s ease;\n                margin-top: 1rem;\n                letter-spacing: 0.025em;\n                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n                }\n\n                .submit-button:hover {\n                background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);\n                transform: translateY(-1px);\n                box-shadow: 0 6px 12px -2px rgba(0, 0, 0, 0.15);\n                }\n\n                .submit-button:active {\n                transform: translateY(0);\n                }\n\n                .submit-button:disabled {\n                opacity: 0.6;\n                cursor: not-allowed;\n                transform: none;\n                }\n\n                .required:after {\n                content: \" *\";\n                color: #ef4444;\n                font-weight: 500;\n                }\n\n                .success-message {\n                text-align: center;\n                padding: 2rem;\n                color: #059669;\n                }\n\n                .success-icon {\n                font-size: 3rem;\n                margin-bottom: 1rem;\n                }\n\n                .success-title {\n                margin: 0 0 1rem 0;\n                color: #047857;\n                font-size: 1.5rem;\n                font-weight: 600;\n                }\n\n                .success-text {\n                margin: 0;\n                color: #6b7280;\n                }\n\n                /* Responsive Design */\n                @media (max-width: 768px) {\n                body {\n                padding: 0.5rem;\n                }\n\n                .modern-form-wrapper {\n                grid-template-columns: 1fr;\n                border-radius: 12px;\n                }\n\n                .form-hero {\n                padding: 2rem 1.5rem;\n                min-height: 200px;\n                }\n\n                .form-hero h1 {\n                font-size: 1.875rem;\n                }\n\n                .form-content {\n                padding: 2rem 1.5rem;\n                }\n                }\n\n                @media (max-width: 480px) {\n                .form-hero, .form-content {\n                padding: 1.5rem 1rem;\n                }\n                }\n                </style>\n                </head>\n                <body>\n                <div class=\"modern-form-wrapper\">\n                <div class=\"form-hero\">\n                <div class=\"form-hero-content\">\n                <h1>${escapeHtml(form.title) || 'Formulario'}</h1>\n                <p>${escapeHtml(smartTranslate(form.description || 'Por favor complete la información solicitada para comenzar.', detectedLanguage))}</p>\n                </div>\n                </div>\n\n                <div class=\"form-content\">\n                <div class=\"form-header\">\n                <p class=\"form-subtitle\">${detectedLanguage === 'fr' ? 'Veuillez compléter les informations demandées pour commencer.' : detectedLanguage === 'en' ? 'Please complete the requested information to get started.' : t.completeInfo}</p>\n                </div>\n\n                <form id=\"modern-form\" method=\"POST\">\n                ${(form.structure as any)?.fields?.map((field: any) => {\n                  const fieldId = `field_${field.name}`;\n                  let fieldHTML = `<div class=\"form-field\">`;\n\n                  // Traducir la etiqueta del campo automáticamente\n                  const translatedLabel = translateFieldLabel(field.label, detectedLanguage);\n\n                  switch (field.type) {\n                    case 'text':\n                    case 'email':\n                    case 'tel':\n                    case 'url':\n                    case 'number':\n                      fieldHTML += `\n                        <label for=\"${fieldId}\" class=\"form-label ${field.required ? 'required' : ''}\">\n                          ${escapeHtml(translatedLabel)}\n                        </label>\n                        <input\n                          type=\"${field.type}\"\n                          id=\"${fieldId}\"\n                          name=\"${field.name}\"\n                          class=\"form-input\"\n                          placeholder=\"${escapeHtml(field.placeholder || '')}\"\n                          ${field.required ? 'required' : ''}\n                        >\n                      `;\n                      break;\n\n                    case 'textarea':\n                      fieldHTML += `\n                        <label for=\"${fieldId}\" class=\"form-label ${field.required ? 'required' : ''}\">\n                          ${escapeHtml(translatedLabel)}\n                        </label>\n                        <textarea\n                          id=\"${fieldId}\"\n                          name=\"${field.name}\"\n                          class=\"form-textarea\"\n                          placeholder=\"${escapeHtml(field.placeholder || '')}\"\n                          ${field.required ? 'required' : ''}\n                        ></textarea>\n                      `;\n                      break;\n\n                    case 'select':\n                      fieldHTML += `\n                        <label for=\"${fieldId}\" class=\"form-label ${field.required ? 'required' : ''}\">\n                          ${escapeHtml(translatedLabel)}\n                        </label>\n                        <select id=\"${fieldId}\" name=\"${field.name}\" class=\"form-select\" ${field.required ? 'required' : ''}>\n                          <option value=\"\">${t.selectOption}</option>\n                      `;\n\n                      if (field.options && Array.isArray(field.options)) {\n                        field.options.forEach(option => {\n                          const optionValue = typeof option === 'string' ? option : option.value || option.label;\n                          const optionLabel = typeof option === 'string' ? option : option.label;\n                          fieldHTML += `<option value=\"${optionValue}\">${optionLabel}</option>`;\n                        });\n                      }\n\n                      fieldHTML += `</select>`;\n                      break;\n\n                    case 'checkbox':\n                      fieldHTML += `\n                        <div class=\"checkbox-field\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"${fieldId}\"\n                            name=\"${field.name}\"\n                            class=\"checkbox\"\n                            value=\"1\"\n                            ${field.required ? 'required' : ''}\n                          >\n                          <label for=\"${fieldId}\" class=\"checkbox-label\">\n                            ${escapeHtml(detectedLanguage === 'fr' && field.label.toLowerCase().includes('acepto') ? 'J&apos;accepte les termes et conditions' : detectedLanguage === 'en' && field.label.toLowerCase().includes('acepto') ? 'I accept the terms and conditions' : translatedLabel)}\n                          </label>\n                        </div>\n                      `;\n                      break;\n\n                    default:\n                      fieldHTML += `\n                        <label for=\"${fieldId}\" class=\"form-label ${field.required ? 'required' : ''}\">\n                          ${field.label}\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"${fieldId}\"\n                          name=\"${field.name}\"\n                          class=\"form-input\"\n                          placeholder=\"${field.placeholder || ''}\"\n                          ${field.required ? 'required' : ''}\n                        >\n                      `;\n                  }\n\n                  fieldHTML += `</div>`;\n                  return fieldHTML;\n                }).join('')}\n\n                <button type=\"submit\" class=\"submit-button\">\n                  ${(form.structure as any)?.submitButtonText || t.submit}\n                </button>\n                </form>\n                </div>\n                </div>\n\n                <script>\n                // Variables de traducción\n                const translations = {\n                sending: '${t.sending}',\n                successTitle: '${t.successTitle}',\n                successMessage: '${t.successMessage}',\n                errorMessage: '${t.errorMessage}',\n                submitText: '${(form.structure as any)?.submitButtonText || t.submit}'\n                };\n\n                document.getElementById('modern-form').addEventListener('submit', async function(e) {\n                e.preventDefault();\n\n                const submitButton = this.querySelector('.submit-button');\n                submitButton.disabled = true;\n                submitButton.textContent = translations.sending;\n\n                const formData = new FormData(this);\n                const formDataObj = Object.fromEntries(formData.entries());\n\n                try {\n                const response = await fetch('/api/form-responses', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({\n                    formId: ${formId},\n                    data: formDataObj\n                  })\n                });\n\n                if (response.ok) {\n                  // Mostrar mensaje de éxito\n                  this.innerHTML = \\`\n                    <div class=\"success-message\">\n                      <div class=\"success-icon\">✓</div>\n                      <h3 class=\"success-title\">\\${translations.successTitle}</h3>\n                      <p class=\"success-text\">\\${translations.successMessage}</p>\n                    </div>\n                  \\`;\n\n                  // Si hay URL de redirección configurada, redirigir después de un breve retraso\n                  ${(form.settings as any)?.redirectUrl ? `\n                    setTimeout(() => {\n                      window.top.location.href = \"${(form.settings as any).redirectUrl}\";\n                    }, 3000);\n                  ` : ''}\n                } else {\n                  throw new Error('Error en el servidor');\n                }\n                } catch (error) {\n                console.error('Error al enviar el formulario:', error);\n\n                // Restaurar el botón\n                submitButton.disabled = false;\n                submitButton.textContent = translations.submitText;\n\n                alert(translations.errorMessage);\n                }\n                });\n                </script>\n                </body>\n                </html>\n                `;\n\n                res.setHeader('Content-Type', 'text/html');\n                res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n                res.setHeader('Pragma', 'no-cache');\n                res.setHeader('Expires', '0');\n                res.send(html);\n                } catch (error) {\n                console.error(\"Error al renderizar el formulario embebido:\", error);\n                res.status(500).send('Error interno del servidor');\n                }\n                });\n\n                // Ruta para manejar las respuestas de formularios\n                app.post(\"/api/form-responses\", async (req, res) => {\n                try {\n                const { formId, data } = req.body;\n\n                if (!formId || !data) {\n                return res.status(400).json({ error: \"Faltan datos requeridos\" });\n                }\n\n                // Validar que el formulario existe\n                const form = await storage.getForm(parseInt(formId));\n\n                if (!form) {\n                return res.status(404).json({ error: \"Formulario no encontrado\" });\n                }\n\n                // Crear la respuesta del formulario\n                const response = await storage.createFormResponse({\n                formId: parseInt(formId),\n                data: data,\n                createdAt: new Date(),\n                });\n\n                // Incrementar el contador de respuestas del formulario\n                await storage.incrementFormResponseCount(parseInt(formId));\n\n                res.status(201).json({ success: true, responseId: response.id });\n                } catch (error) {\n                console.error(\"Error al procesar la respuesta del formulario:\", error);\n                res.status(500).json({ error: \"Error interno del servidor\" });\n                }\n                });\n\n                const httpServer = createServer(app);\n\n                // ================ Appointment Routes ================\n                // GET appointments for an integration\n                app.get(\"/api/appointments/integration/:integrationId\", authenticateJWT, async (req, res) => {\n                try {\n                const integrationId = parseInt(req.params.integrationId);\n\n                // Verificar que la integración pertenece al usuario\n                const integration = await storage.getIntegration(integrationId);\n                if (!integration || integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"No tienes permiso para acceder a esta integración\" });\n                }\n\n                const appointments = await storage.getAppointments(integrationId);\n                res.json(appointments);\n                } catch (error) {\n                console.error(\"Error al obtener citas:\", error);\n                res.status(500).json({ message: \"Error al obtener citas\" });\n                }\n                });\n\n                // GET appointments for a specific conversation\n                app.get(\"/api/appointments/conversation/:conversationId\", authenticateJWT, async (req, res) => {\n                try {\n                const conversationId = parseInt(req.params.conversationId);\n\n                // Verificar que la conversación pertenece a una integración del usuario\n                const conversation = await storage.getConversation(conversationId);\n                if (!conversation) {\n                return res.status(404).json({ message: \"Conversación no encontrada\" });\n                }\n\n                const integration = await storage.getIntegration(conversation.integrationId);\n                if (!integration || integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"No tienes permiso para acceder a esta conversación\" });\n                }\n\n                const appointments = await storage.getAppointmentsByConversation(conversationId);\n                res.json(appointments);\n                } catch (error) {\n                console.error(\"Error al obtener citas por conversación:\", error);\n                res.status(500).json({ message: \"Error al obtener citas por conversación\" });\n                }\n                });\n\n                // GET specific appointment\n                app.get(\"/api/appointments/:id\", authenticateJWT, async (req, res) => {\n                try {\n                const appointmentId = parseInt(req.params.id);\n                const appointment = await storage.getAppointment(appointmentId);\n\n                if (!appointment) {\n                return res.status(404).json({ message: \"Cita no encontrada\" });\n                }\n\n                // Verificar que la cita está asociada a una integración del usuario\n                const integration = await storage.getIntegration(appointment.integrationId);\n                if (!integration || integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"No tienes permiso para acceder a esta cita\" });\n                }\n\n                res.json(appointment);\n                } catch (error) {\n                console.error(\"Error al obtener detalles de la cita:\", error);\n                res.status(500).json({ message: \"Error al obtener detalles de la cita\" });\n                }\n                });\n\n                // POST create new appointment\n                app.post(\"/api/appointments\", authenticateJWT, async (req, res) => {\n                try {\n                const {\n                integrationId,\n                conversationId,\n                visitorName,\n                visitorEmail,\n                appointmentDate,\n                appointmentTime,\n                duration,\n                purpose,\n                notes,\n                status,\n                calendarProvider\n                } = req.body;\n\n                // Validar datos mínimos requeridos\n                if (!integrationId || !visitorName || !visitorEmail || !appointmentDate || !appointmentTime || !purpose) {\n                return res.status(400).json({ message: \"Faltan datos obligatorios para crear la cita\" });\n                }\n\n                // Verificar que la integración pertenece al usuario\n                const integration = await storage.getIntegration(integrationId);\n                if (!integration || integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"No tienes permiso para crear citas en esta integración\" });\n                }\n\n                // Crear la cita\n                const newAppointment = await storage.createAppointment({\n                integrationId,\n                conversationId: conversationId || null,\n                visitorName,\n                visitorEmail,\n                appointmentDate,\n                appointmentTime,\n                duration: duration || 30, // Duración predeterminada de 30 minutos\n                purpose,\n                notes: notes || null,\n                status: status || 'pending',\n                calendarProvider: calendarProvider || null,\n                calendarEventId: null,\n                reminderSent: false,\n                createdAt: new Date()\n                });\n\n                // Obtener la configuración del usuario para las notificaciones\n                const settings = await storage.getSettings(req.userId);\n\n                // Sincronizar con el servicio de calendario si se especificó un proveedor\n                if (calendarProvider) {\n                try {\n                let calendarEventId = null;\n\n                // Aquí simularíamos la obtención del token de OAuth del usuario.\n                // En una implementación real, esto vendría de una tabla de tokens OAuth o similar\n                const mockAccessToken = \"mock_access_token\";\n\n                if (calendarProvider === 'google') {\n                calendarEventId = await createGoogleCalendarEvent(\n                newAppointment, \n                integration.userId.toString(), \n                mockAccessToken\n                );\n                } else if (calendarProvider === 'outlook') {\n                calendarEventId = await createOutlookCalendarEvent(\n                newAppointment, \n                integration.userId.toString(), \n                mockAccessToken\n                );\n                }\n\n                if (calendarEventId) {\n                // Actualizar la cita con el ID del evento del calendario\n                await storage.updateCalendarEventId(newAppointment.id, calendarEventId, calendarProvider);\n                newAppointment.calendarEventId = calendarEventId;\n                }\n                } catch (calendarError) {\n                console.error(\"Error al sincronizar con el calendario:\", calendarError);\n                // Continuamos aunque falle la sincronización del calendario\n                }\n                }\n\n                // Enviar confirmación por correo electrónico si están configuradas las credenciales AWS\n                if (process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY) {\n                try {\n                const fromEmail = settings.emailNotificationAddress || 'info@example.com';\n\n                // Enviar confirmación por email usando AWS SES\n                await sendAppointmentConfirmation(newAppointment, fromEmail, settings);\n                } catch (emailError) {\n                console.error(\"Error al enviar confirmación por correo:\", emailError);\n                // Continuamos aunque falle el envío del correo\n                }\n                } else {\n                }\n\n                res.status(201).json(newAppointment);\n                } catch (error) {\n                console.error(\"Error al crear cita:\", error);\n                res.status(500).json({ message: \"Error al crear cita\" });\n                }\n                });\n\n                // PATCH update appointment \n                app.patch(\"/api/appointments/:id\", authenticateJWT, async (req, res) => {\n                try {\n                const appointmentId = parseInt(req.params.id);\n                const appointment = await storage.getAppointment(appointmentId);\n\n                if (!appointment) {\n                return res.status(404).json({ message: \"Cita no encontrada\" });\n                }\n\n                // Verificar que la cita está asociada a una integración del usuario\n                const integration = await storage.getIntegration(appointment.integrationId);\n                if (!integration || integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"No tienes permiso para modificar esta cita\" });\n                }\n\n                // Actualizar la cita\n                const updatedAppointment = await storage.updateAppointment(appointmentId, req.body);\n\n                // Si hay cambios en la fecha o la hora y existe un ID de evento de calendario, actualizar el evento\n                if ((req.body.appointmentDate || req.body.appointmentTime) && appointment.calendarEventId && appointment.calendarProvider) {\n                try {\n                // Aquí simularíamos la obtención del token de OAuth del usuario.\n                const mockAccessToken = \"mock_access_token\";\n\n                if (appointment.calendarProvider === 'google') {\n                await updateGoogleCalendarEvent(\n                updatedAppointment, \n                appointment.calendarEventId, \n                mockAccessToken\n                );\n                } else if (appointment.calendarProvider === 'outlook') {\n                await updateOutlookCalendarEvent(\n                updatedAppointment, \n                appointment.calendarEventId, \n                mockAccessToken\n                );\n                }\n                } catch (calendarError) {\n                console.error(\"Error al actualizar evento en el calendario:\", calendarError);\n                // Continuamos aunque falle la actualización del calendario\n                }\n                }\n\n                res.json(updatedAppointment);\n                } catch (error) {\n                console.error(\"Error al actualizar cita:\", error);\n                res.status(500).json({ message: \"Error al actualizar cita\" });\n                }\n                });\n\n                // PATCH update appointment status\n                app.patch(\"/api/appointments/:id/status\", authenticateJWT, async (req, res) => {\n                try {\n                const appointmentId = parseInt(req.params.id);\n                const { status } = req.body;\n\n                if (!status || !['pending', 'confirmed', 'cancelled', 'completed'].includes(status)) {\n                return res.status(400).json({ message: \"Estado no válido\" });\n                }\n\n                const appointment = await storage.getAppointment(appointmentId);\n\n                if (!appointment) {\n                return res.status(404).json({ message: \"Cita no encontrada\" });\n                }\n\n                // Verificar que la cita está asociada a una integración del usuario\n                const integration = await storage.getIntegration(appointment.integrationId);\n                if (!integration || integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"No tienes permiso para modificar esta cita\" });\n                }\n\n                // Actualizar el estado de la cita\n                const updatedAppointment = await storage.updateAppointmentStatus(appointmentId, status);\n\n                // Si se cancela la cita y existe un ID de evento de calendario, cancelar el evento\n                if (status === 'cancelled' && appointment.calendarEventId && appointment.calendarProvider) {\n                try {\n                // Aquí simularíamos la obtención del token de OAuth del usuario.\n                const mockAccessToken = \"mock_access_token\";\n\n                if (appointment.calendarProvider === 'google') {\n                await cancelGoogleCalendarEvent(\n                appointment.calendarEventId, \n                mockAccessToken\n                );\n                } else if (appointment.calendarProvider === 'outlook') {\n                await cancelOutlookCalendarEvent(\n                appointment.calendarEventId, \n                mockAccessToken\n                );\n                }\n                } catch (calendarError) {\n                console.error(\"Error al cancelar evento en el calendario:\", calendarError);\n                // Continuamos aunque falle la cancelación en el calendario\n                }\n                }\n\n                res.json(updatedAppointment);\n                } catch (error) {\n                console.error(\"Error al actualizar estado de la cita:\", error);\n                res.status(500).json({ message: \"Error al actualizar estado de la cita\" });\n                }\n                });\n\n                // DELETE appointment\n                app.delete(\"/api/appointments/:id\", authenticateJWT, async (req, res) => {\n                try {\n                const appointmentId = parseInt(req.params.id);\n                const appointment = await storage.getAppointment(appointmentId);\n\n                if (!appointment) {\n                return res.status(404).json({ message: \"Cita no encontrada\" });\n                }\n\n                // Verificar que la cita está asociada a una integración del usuario\n                const integration = await storage.getIntegration(appointment.integrationId);\n                if (!integration || integration.userId !== req.userId) {\n                return res.status(403).json({ message: \"No tienes permiso para eliminar esta cita\" });\n                }\n\n                // Si existe un ID de evento de calendario, cancelar el evento\n                if (appointment.calendarEventId && appointment.calendarProvider) {\n                try {\n                // Aquí simularíamos la obtención del token de OAuth del usuario.\n                const mockAccessToken = \"mock_access_token\";\n\n                if (appointment.calendarProvider === 'google') {\n                await cancelGoogleCalendarEvent(\n                appointment.calendarEventId, \n                mockAccessToken\n                );\n                } else if (appointment.calendarProvider === 'outlook') {\n                await cancelOutlookCalendarEvent(\n                appointment.calendarEventId, \n                mockAccessToken\n                );\n                }\n                } catch (calendarError) {\n                console.error(\"Error al cancelar evento en el calendario:\", calendarError);\n                // Continuamos aunque falle la cancelación en el calendario\n                }\n                }\n\n                // Eliminar la cita\n                await storage.deleteAppointment(appointmentId);\n\n                res.status(204).end();\n                } catch (error) {\n                console.error(\"Error al eliminar cita:\", error);\n                res.status(500).json({ message: \"Error al eliminar cita\" });\n                }\n                });\n\n                // Endpoint para enviar recordatorios de citas (a ejecutar por un cronjob)\n                app.post(\"/api/appointments/send-reminders\", async (req, res) => {\n                try {\n                // Verificar que la solicitud proviene de un origen autorizado\n                // En una implementación real, deberíamos verificar algún tipo de secreto o auth\n                // para este endpoint que se ejecutaría como un cronjob\n\n                // Obtener todas las citas programadas para mañana que no han recibido recordatorio\n                const upcomingAppointments = await storage.getUpcomingAppointmentsForReminders();\n                let sentCount = 0;\n\n                if (upcomingAppointments.length === 0) {\n                return res.json({ message: \"No hay recordatorios pendientes para enviar\" });\n                }\n\n                for (const appointment of upcomingAppointments) {\n                // Obtener la integración y los ajustes correspondientes\n                const integration = await storage.getIntegration(appointment.integrationId);\n                if (!integration) continue;\n\n                const settings = await storage.getSettings(integration.userId);\n\n                // Enviar el recordatorio por correo electrónico usando AWS SES\n                if (process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY) {\n                try {\n                const fromEmail = settings.emailNotificationAddress || 'info@example.com';\n\n                // Enviar recordatorio por email usando AWS SES\n                await sendAppointmentReminder(appointment, fromEmail);\n\n                // Marcar que se ha enviado el recordatorio\n                await storage.markReminderSent(appointment.id);\n                sentCount++;\n                } catch (emailError) {\n                console.error(`Error al enviar recordatorio para cita ${appointment.id}:`, emailError);\n                }\n                } else {\n                break;\n                }\n                }\n\n                res.json({ \n                message: `Se enviaron ${sentCount} recordatorios de citas`, \n                sent: sentCount, \n                total: upcomingAppointments.length \n                });\n                } catch (error) {\n                console.error(\"Error al enviar recordatorios de citas:\", error);\n                res.status(500).json({ message: \"Error al enviar recordatorios de citas\" });\n                }\n                });\n\n                // ================ Calendar OAuth Routes ================\n\n                // Ruta de diagnóstico para obtener información sobre las variables de entorno\n                app.get(\"/api/debug/environment\", authenticateJWT, (req, res) => {\n                // Recopilamos información del entorno sin exponer secretos\n                const envInfo = {\n                host: req.headers.host,\n                origin: req.headers.origin,\n                replit: {\n                slug: process.env.REPL_SLUG || 'no disponible',\n                owner: process.env.REPL_OWNER || 'no disponible',\n                id: process.env.REPL_ID || 'no disponible'\n                },\n                redirectUrl: {\n                google: process.env.APP_URL ? \n                `${process.env.APP_URL}/api/auth/google-calendar/callback` : \n                process.env.REPL_ID ? \n                `https://${process.env.REPL_ID}-00.picard.replit.dev/api/auth/google-calendar/callback` :\n                'https://localhost:5000/api/auth/google-calendar/callback'\n                },\n                authConfigured: {\n                google: !!process.env.GOOGLE_CLIENT_ID && !!process.env.GOOGLE_CLIENT_SECRET,\n                outlook: !!process.env.MS_CLIENT_ID && !!process.env.MS_CLIENT_SECRET\n                }\n                };\n\n                res.json(envInfo);\n                });\n                // Google Calendar Auth - URL endpoint\n                app.get(\"/api/auth/google-calendar-url\", authenticateJWT, async (req, res) => {\n                try {\n                const userId = req.userId;\n\n                // Verificar si se proporciona una URL personalizada\n                const customRedirectUrl = req.query.customRedirectUrl as string;\n\n                // Pasar la solicitud para obtener la URL correcta (con URL personalizada si está disponible)\n                const authUrl = getGoogleAuthUrl(userId, undefined, req, customRedirectUrl);\n\n                // Loguear información para verificar\n\n                res.json({ authUrl });\n                } catch (error) {\n                console.error(\"Error al obtener URL de autenticación con Google Calendar:\", error);\n                res.status(500).json({ message: \"Error al obtener URL de autenticación\" });\n                }\n                });\n\n                // Google Calendar Auth - Direct endpoint (deprecado pero mantenido por compatibilidad)\n                app.get(\"/api/auth/google-calendar\", authenticateJWT, async (req, res) => {\n                try {\n                const userId = req.userId;\n\n                // Verificar si se proporciona una URL personalizada\n                const customRedirectUrl = req.query.customRedirectUrl as string;\n\n                // Usar req para obtener la URL de redirección correcta\n                const authUrl = getGoogleAuthUrl(userId, undefined, req, customRedirectUrl);\n                res.redirect(authUrl);\n                } catch (error) {\n                console.error(\"Error al iniciar la autenticación con Google Calendar:\", error);\n                res.redirect(\"/dashboard?tab=settings&error=google_auth_failed\");\n                }\n                });\n\n                // Google Calendar Auth Callback\n                app.get(\"/api/auth/google-calendar/callback\", async (req, res) => {\n                try {\n                const { code, state } = req.query;\n\n                if (!code) {\n                throw new Error(\"No se recibió el código de autorización\");\n                }\n\n                // Extraer el ID de usuario del estado\n                const stateStr = state as string;\n                const userIdMatch = stateStr.match(/user_id=(\\d+)/);\n\n                if (!userIdMatch || !userIdMatch[1]) {\n                throw new Error(\"No se pudo identificar al usuario\");\n                }\n\n                const userId = parseInt(userIdMatch[1]);\n\n                // Intercambiar el código por tokens\n                const tokens = await exchangeGoogleCodeForTokens(code as string);\n\n                // Calcular la fecha de expiración del token\n                const expiresAt = new Date();\n                expiresAt.setSeconds(expiresAt.getSeconds() + tokens.expires_in);\n\n                // Verificar si ya existe un token para este usuario y proveedor\n                const existingToken = await storage.getCalendarTokenByProvider(userId, 'google');\n\n                if (existingToken) {\n                // Actualizar el token existente\n                await storage.updateCalendarToken(existingToken.id, {\n                accessToken: tokens.access_token,\n                refreshToken: tokens.refresh_token || existingToken.refreshToken,\n                expiresAt\n                });\n                } else {\n                // Crear un nuevo registro de token\n                await storage.createCalendarToken({\n                userId,\n                provider: 'google',\n                accessToken: tokens.access_token,\n                refreshToken: tokens.refresh_token,\n                expiresAt\n                });\n                }\n\n                // Redirigir al usuario de vuelta a la página de configuración\n                res.redirect(\"/dashboard?tab=settings&success=google_calendar_connected\");\n                } catch (error) {\n                console.error(\"Error en el callback de Google Calendar:\", error);\n                res.redirect(\"/dashboard?tab=settings&error=google_auth_callback_failed\");\n                }\n                });\n\n                // Outlook Calendar Auth - URL endpoint\n                app.get(\"/api/auth/outlook-calendar-url\", authenticateJWT, async (req, res) => {\n                try {\n                const userId = req.userId;\n                const authUrl = getOutlookAuthUrl(userId);\n                res.json({ authUrl });\n                } catch (error) {\n                console.error(\"Error al obtener URL de autenticación con Outlook Calendar:\", error);\n                res.status(500).json({ message: \"Error al obtener URL de autenticación\" });\n                }\n                });\n\n                // Outlook Calendar Auth - Direct endpoint (deprecado pero mantenido por compatibilidad)\n                app.get(\"/api/auth/outlook-calendar\", authenticateJWT, async (req, res) => {\n                try {\n                const userId = req.userId;\n                const authUrl = getOutlookAuthUrl(userId);\n                res.redirect(authUrl);\n                } catch (error) {\n                console.error(\"Error al iniciar la autenticación con Outlook Calendar:\", error);\n                res.redirect(\"/dashboard?tab=settings&error=outlook_auth_failed\");\n                }\n                });\n\n                // Outlook Calendar Auth Callback\n                app.get(\"/api/auth/outlook-calendar/callback\", async (req, res) => {\n                try {\n                const { code, state } = req.query;\n\n                if (!code) {\n                throw new Error(\"No se recibió el código de autorización\");\n                }\n\n                // Extraer el ID de usuario del estado\n                const stateStr = state as string;\n                const userIdMatch = stateStr.match(/user_id=(\\d+)/);\n\n                if (!userIdMatch || !userIdMatch[1]) {\n                throw new Error(\"No se pudo identificar al usuario\");\n                }\n\n                const userId = parseInt(userIdMatch[1]);\n\n                // Intercambiar el código por tokens\n                const tokens = await exchangeOutlookCodeForTokens(code as string);\n\n                // Calcular la fecha de expiración del token\n                const expiresAt = new Date();\n                expiresAt.setSeconds(expiresAt.getSeconds() + tokens.expires_in);\n\n                // Verificar si ya existe un token para este usuario y proveedor\n                const existingToken = await storage.getCalendarTokenByProvider(userId, 'outlook');\n\n                if (existingToken) {\n                // Actualizar el token existente\n                await storage.updateCalendarToken(existingToken.id, {\n                accessToken: tokens.access_token,\n                refreshToken: tokens.refresh_token || existingToken.refreshToken,\n                expiresAt\n                });\n                } else {\n                // Crear un nuevo registro de token\n                await storage.createCalendarToken({\n                userId,\n                provider: 'outlook',\n                accessToken: tokens.access_token,\n                refreshToken: tokens.refresh_token,\n                expiresAt\n                });\n                }\n\n                // Redirigir al usuario de vuelta a la página de configuración\n                res.redirect(\"/dashboard?tab=settings&success=outlook_calendar_connected\");\n                } catch (error) {\n                console.error(\"Error en el callback de Outlook Calendar:\", error);\n                res.redirect(\"/dashboard?tab=settings&error=outlook_auth_callback_failed\");\n                }\n                });\n\n                // Calendar Token Management\n                app.get(\"/api/calendar-tokens\", authenticateJWT, async (req, res) => {\n                try {\n                const tokens = await storage.getCalendarTokens(req.userId);\n                res.json(tokens);\n                } catch (error) {\n                console.error(\"Error al obtener tokens de calendario:\", error);\n                res.status(500).json({ message: \"Error al obtener tokens de calendario\" });\n                }\n                });\n\n                app.delete(\"/api/calendar-tokens/:id\", authenticateJWT, async (req, res) => {\n                try {\n                const tokenId = parseInt(req.params.id);\n                const token = await storage.getCalendarToken(tokenId);\n\n                if (!token) {\n                return res.status(404).json({ message: \"Token no encontrado\" });\n                }\n\n                if (token.userId !== req.userId) {\n                return res.status(403).json({ message: \"No tienes permiso para eliminar este token\" });\n                }\n\n                await storage.deleteCalendarToken(tokenId);\n                res.status(204).end();\n                } catch (error) {\n                console.error(\"Error al eliminar token de calendario:\", error);\n                res.status(500).json({ message: \"Error al eliminar token de calendario\" });\n                }\n                });\n\n                // API para mensajes de bienvenida rotativos con soporte multiidioma\n                app.get(\"/api/welcome-messages\", async (req, res) => {\n                try {\n                // Obtener idioma del query parameter, por defecto español\n                const language = req.query.lang || 'es';\n\n                // Usar la misma conexión que otras rutas\n                const result = await db.select().from(welcomeMessages)\n                .where(and(\n                eq(welcomeMessages.isActive, true),\n                gt(welcomeMessages.expiresAt, new Date())\n                ))\n                .orderBy(welcomeMessages.orderIndex);\n\n                if (result.length === 0) {\n                // Si no hay mensajes válidos, devolver mensajes por defecto según idioma\n                const getDefaultMessages = (lang: string) => {\n                switch (lang) {\n                case 'fr':\n                return [\n                {\n                  message_text: \"Bienvenue dans AIPPS - La plateforme conversationnelle alimentée par l'IA pour une communication intelligente sur votre site web\",\n                  message_type: \"welcome\",\n                  order_index: 1\n                },\n                {\n                  message_text: \"Automatisez votre service client avec une IA avancée - Réponses intelligentes 24/7 sans intervention manuelle\",\n                  message_type: \"automation\",\n                  order_index: 2\n                }\n                ];\n                case 'en':\n                return [\n                {\n                  message_text: \"Welcome to AIPPS - The AI-powered conversational platform for intelligent communication on your website\",\n                  message_type: \"welcome\",\n                  order_index: 1\n                },\n                {\n                  message_text: \"Automate your customer service with advanced AI - Intelligent 24/7 responses without manual intervention\",\n                  message_type: \"automation\",\n                  order_index: 2\n                }\n                ];\n                default: // español\n                return [\n                {\n                  message_text: \"Bienvenido a AIPPS - La plataforma conversacional con IA para una comunicación inteligente en tu sitio web\",\n                  message_type: \"welcome\",\n                  order_index: 1\n                },\n                {\n                  message_text: \"Automatiza tu atención al cliente con IA avanzada - Respuestas inteligentes 24/7 sin intervención manual\",\n                  message_type: \"automation\",\n                  order_index: 2\n                }\n                ];\n                }\n                };\n\n                return res.json(getDefaultMessages(language as string));\n                }\n\n                // Mapear mensajes según el idioma solicitado\n                const messages = result.map(msg => {\n                let messageText = msg.messageText; // Por defecto español\n\n                if (language === 'fr' && msg.messageTextFr) {\n                messageText = msg.messageTextFr;\n                } else if (language === 'en' && msg.messageTextEn) {\n                messageText = msg.messageTextEn;\n                }\n\n                return {\n                message_text: messageText,\n                message_type: msg.messageType,\n                order_index: msg.orderIndex\n                };\n                });\n\n                res.json(messages);\n                } catch (error) {\n                console.error(\"Error al obtener mensajes de bienvenida:\", error);\n                res.status(500).json({ message: \"Error al obtener mensajes de bienvenida\" });\n                }\n                });\n                setupAuth(app);\n                return httpServer;\n                }\n","size_bytes":319748},"server/storage.ts":{"content":"import { \n  User, InsertUser, Integration, InsertIntegration, \n  Conversation, InsertConversation, Message, InsertMessage,\n  Automation, InsertAutomation, Settings, InsertSettings,\n  SiteContent, InsertSiteContent, ConversationAnalytics, IntegrationPerformance,\n  TopProduct, TopTopic, Subscription, InsertSubscription,\n  DiscountCode, InsertDiscountCode, PricingPlan, InsertPricingPlan,\n  Form, InsertForm, FormTemplate, InsertFormTemplate, FormResponse, InsertFormResponse,\n  Appointment, InsertAppointment, CalendarToken, InsertCalendarToken\n} from \"@shared/schema\";\nimport { generateApiKey } from \"./lib/utils\";\nimport fs from \"fs\";\n// Interface for storage methods\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser & { apiKey: string }): Promise<User>;\n\n  // Integration methods\n  getIntegrations(userId: number): Promise<Integration[]>;\n  getIntegration(id: number): Promise<Integration | undefined>;\n  getIntegrationByApiKey(apiKey: string): Promise<Integration | undefined>;\n  createIntegration(integration: InsertIntegration & { apiKey: string }): Promise<Integration>;\n  updateIntegration(id: number, data: Partial<Integration>): Promise<Integration>;\n  deleteIntegration(id: number): Promise<void>;\n  incrementVisitorCount(id: number): Promise<void>;\n  // Conversation methods\n  getConversations(integrationId: number): Promise<Conversation[]>;\n  getConversation(id: number): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: number, data: Partial<Conversation>): Promise<Conversation>;\n  deleteConversation(id: number): Promise<void>;\n\n  // Message methods\n  getMessages(conversationId: number): Promise<Message[]>;\n  getConversationMessages(conversationId: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n\n  // Automation methods\n  getAutomations(userId: number): Promise<Automation[]>;\n  getAutomation(id: number): Promise<Automation | undefined>;\n  createAutomation(automation: InsertAutomation): Promise<Automation>;\n  updateAutomation(id: number, data: Partial<Automation>): Promise<Automation>;\n\n  // Settings methods\n  getSettings(userId: number): Promise<Settings>;\n  updateSettings(userId: number, data: Partial<Settings>): Promise<Settings>;\n  createSettings(settings: { userId: number }): Promise<Settings>;\n\n  // Document methods\n  getDocuments(integrationId: number): Promise<any[]>;\n  createDocument(doc: any): Promise<any>;\n  deleteDocument(id: number): Promise<void>;\n\n  // Site content methods\n  getSiteContent(integrationId: number): Promise<any[]>;\n  createSiteContent(content: any): Promise<any>;\n  updateSiteContent(integrationId: number, url: string, data: any): Promise<any>;\n\n  // Dashboard methods\n  getDashboardStats(userId: number): Promise<{\n    totalConversations: number;\n    resolutionRate: number;\n    averageResponseTime: number;\n  }>;\n\n  // Analytics methods\n  getConversationAnalytics(userId: number): Promise<ConversationAnalytics>;\n  getIntegrationPerformance(userId: number): Promise<IntegrationPerformance[]>;\n\n  // Site content methods\n  getSiteContent(integrationId: number): Promise<SiteContent[]>;\n  getSiteContentByUrl(integrationId: number, url: string): Promise<SiteContent | undefined>;\n  createSiteContent(content: InsertSiteContent): Promise<SiteContent>;\n  updateSiteContent(id: number, data: Partial<SiteContent>): Promise<SiteContent>;\n  deleteSiteContent(id: number): Promise<void>;\n\n  // Subscription methods\n  getUserSubscriptions(userId: number): Promise<Subscription[]>;\n  getSubscription(id: number): Promise<Subscription | undefined>;\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  updateSubscription(id: number, data: Partial<Subscription>): Promise<Subscription>;\n  incrementSubscriptionUsage(id: number): Promise<void>;\n  getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined>;\n  updateUserStripeInfo(userId: number, data: { stripeCustomerId: string, stripeSubscriptionId: string }): Promise<User>;\n\n  // Discount code methods\n  getDiscountCodes(): Promise<DiscountCode[]>;\n  getActiveDiscountCodes(): Promise<DiscountCode[]>;\n  getDiscountCode(id: number): Promise<DiscountCode | undefined>;\n  getDiscountCodeByCode(code: string): Promise<DiscountCode | undefined>;\n  createDiscountCode(data: InsertDiscountCode): Promise<DiscountCode>;\n  updateDiscountCode(id: number, data: Partial<DiscountCode>): Promise<DiscountCode>;\n  incrementDiscountCodeUsage(id: number): Promise<void>;\n  deleteDiscountCode(id: number): Promise<void>;\n  generateDiscountCode(prefix?: string): string;\n  // Pricing plan methods\n  getPricingPlans(): Promise<PricingPlan[]>;\n  getAvailablePricingPlans(): Promise<PricingPlan[]>;\n  getPricingPlan(id: number): Promise<PricingPlan | undefined>;\n  getPricingPlanByPlanId(planId: string): Promise<PricingPlan | undefined>;\n  createPricingPlan(data: InsertPricingPlan): Promise<PricingPlan>;\n  updatePricingPlan(id: number, data: Partial<PricingPlan>): Promise<PricingPlan>;\n  deletePricingPlan(id: number): Promise<void>;\n\n  // Form methods\n  getForms(userId: number): Promise<Form[]>;\n  getForm(id: number): Promise<Form | undefined>;\n  getFormBySlug(slug: string): Promise<Form | undefined>;\n  createForm(formData: InsertForm): Promise<Form>;\n  updateForm(id: number, data: Partial<Form>): Promise<Form>;\n  incrementFormResponseCount(id: number): Promise<void>;\n  deleteForm(id: number): Promise<void>;\n\n  // Form Template methods\n  getFormTemplates(): Promise<FormTemplate[]>;\n  getDefaultFormTemplates(): Promise<FormTemplate[]>;\n  getTemplatesByType(type: string): Promise<FormTemplate[]>;\n  getFormTemplate(id: number): Promise<FormTemplate | undefined>;\n  createFormTemplate(templateData: InsertFormTemplate): Promise<FormTemplate>;\n  updateFormTemplate(id: number, data: Partial<FormTemplate>): Promise<FormTemplate>;\n  deleteFormTemplate(id: number): Promise<void>;\n\n  // Form Response methods\n  getFormResponses(formId: number): Promise<FormResponse[]>;\n  getFormResponse(id: number): Promise<FormResponse | undefined>;\n  createFormResponse(responseData: InsertFormResponse): Promise<FormResponse>;\n  deleteFormResponse(id: number): Promise<void>;\n  deleteFormResponses(formId: number): Promise<void>;\n\n  // Appointment methods\n  getAppointments(integrationId: number): Promise<Appointment[]>;\n  getAppointmentsByConversation(conversationId: number): Promise<Appointment[]>;\n  getAppointment(id: number): Promise<Appointment | undefined>;\n  createAppointment(appointmentData: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: number, data: Partial<Appointment>): Promise<Appointment>;\n  updateAppointmentStatus(id: number, status: string): Promise<Appointment>;\n  updateCalendarEventId(id: number, calendarEventId: string, calendarProvider: string): Promise<Appointment>;\n  markReminderSent(id: number): Promise<Appointment>;\n  deleteAppointment(id: number): Promise<void>;\n  getUpcomingAppointmentsForReminders(): Promise<Appointment[]>;      //  Calendar OAuth Token methods\n    getCalendarTokens(userId: number): Promise<CalendarToken[]>;\n    getCalendarToken(id: number): Promise<CalendarToken | undefined>;\n    getCalendarTokenByProvider(userId: number, provider: string): Promise<CalendarToken | undefined>;\n    createCalendarToken(tokenData: InsertCalendarToken): Promise<CalendarToken>;\n    updateCalendarToken(id: number, data: Partial<CalendarToken>): Promise<CalendarToken>;\n    deleteCalendarToken(id: number): Promise<void>;\n  }\n\n//In-memory storage implementation\n  export class MemStorage implements IStorage {\n    private users: Map<number, User>;\n    private integrations: Map<number, Integration>;\n    private conversations: Map<number, Conversation>;\n    private messages: Map<number, Message>;\n    private automations: Map<number, Automation>;\n    private settings: Map<number, Settings>;\n    private siteContents: Map<number, SiteContent>;\n    private subscriptions: Map<number, Subscription>;\n    private discountCodes: Map<number, DiscountCode>;\n    private pricingPlans: Map<number, PricingPlan>;\n    private forms: Map<number, Form>;\n    private formTemplates: Map<number, FormTemplate>;\n    private formResponses: Map<number, FormResponse>;\n    private appointments: Map<number, Appointment>;\n    private calendarTokens: Map<number, CalendarToken>;\n\n    private userIdCounter: number;\n    private integrationIdCounter: number;\n    private conversationIdCounter: number;\n    private messageIdCounter: number;\n    private automationIdCounter: number;\n    private settingsIdCounter: number;\n    private siteContentIdCounter: number;\n    private subscriptionIdCounter: number;\n    private discountCodeIdCounter: number;\n    private pricingPlanIdCounter: number;\n    private formIdCounter: number;\n    private formTemplateIdCounter: number;\n    private formResponseIdCounter: number;\n    private appointmentIdCounter: number;\n    private calendarTokenIdCounter: number;\n\n    constructor() {\n      this.users = new Map();\n      this.integrations = new Map();\n      this.conversations = new Map();\n      this.messages = new Map();\n      this.automations = new Map();\n      this.settings = new Map();\n      this.siteContents = new Map();\n      this.subscriptions = new Map();\n      this.discountCodes = new Map();\n      this.pricingPlans = new Map();\n      this.forms = new Map();\n      this.formTemplates = new Map();\n      this.formResponses = new Map();\n      this.appointments = new Map();\n      this.calendarTokens = new Map();\n      this.userIdCounter = 1;\n        this.integrationIdCounter = 1;\n        this.conversationIdCounter = 1;\n        this.messageIdCounter = 1;\n        this.automationIdCounter = 1;\n        this.settingsIdCounter = 1;\n        this.siteContentIdCounter = 1;\n        this.subscriptionIdCounter = 1;\n        this.discountCodeIdCounter = 1;\n        this.pricingPlanIdCounter = 1;\n        this.formIdCounter = 1;\n        this.formTemplateIdCounter = 1;\n        this.formResponseIdCounter = 1;\n        this.appointmentIdCounter = 1;\n        this.calendarTokenIdCounter = 1;\n\n        // Initialize with some demo data\n        this.initializeDemoData();\n      }\n\n      private initializeDemoData() {\n        // Add a demo user with the hashed password for \"password123\"\n        const demoUser: User = {\n          id: this.userIdCounter++,\n          username: \"demo\",\n          password: \"$2b$10$3euPj1KDKAKEJemQaPStEOouJXRNzALZX/Kvtmvh9RyJL35MR1hky\", // hashed \"password123\"\n          email: \"demo@example.com\",\n          fullName: \"Demo User\",\n          apiKey: generateApiKey(),\n          createdAt: new Date(),\n          stripeCustomerId: null,\n          stripeSubscriptionId: null\n        };\n        this.users.set(demoUser.id, demoUser);\n\n        // Add demo settings\n        const demoSettings: Settings = {\n          id: this.settingsIdCounter++,\n          userId: demoUser.id,\n          assistantName: \"AIPPS Assistant\",\n          defaultGreeting: \"👋 Hi there! I'm AIPPS, your AI assistant. How can I help you today?\",\n          showAvailability: true,\n          avatarUrl: null,\n          userBubbleColor: \"#3B82F6\",\n          assistantBubbleColor: \"#E5E7EB\",\n          font: \"inter\",\n          conversationStyle: \"professional\",\n          knowledgeBase: \"default\",\n          enableLearning: true,\n          emailNotificationAddress: \"notifications@example.com\",\n          welcomePageChatEnabled: true,\n          welcomePageChatGreeting: \"👋 ¡Hola! Soy AIPPS, tu asistente de IA. ¿En qué puedo ayudarte hoy?\",\n          welcomePageChatBubbleColor: \"#111827\",\n          welcomePageChatTextColor: \"#FFFFFF\",\n          welcomePageChatBehavior: \"Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.\",\n          welcomePageChatScrapingEnabled: false,\n          welcomePageChatScrapingDepth: 5,\n          welcomePageChatScrapingData: null\n        };\n        this.settings.set(demoSettings.id, demoSettings);\n        // Add demo integrations\n        const demoIntegration1: Integration = {\n          id: this.integrationIdCounter++,\n          userId: demoUser.id,\n          name: \"Main Company Website\",\n          url: \"www.example.com\",\n          apiKey: generateApiKey(),\n          themeColor: \"#3B82F6\",\n          position: \"bottom-right\",\n          active: true,\n          createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000), // 60 days ago\n          visitorCount: 2845,\n          language: \"es\",\n          botBehavior: \"Sé amable y profesional, responde de manera precisa a las preguntas sobre el sitio web.\",\n          documentsData: [],\n          widgetType: \"bubble\",\n          ignoredSections: [],\n          description: null,\n          ignoredSectionsText: null,\n          customization: null,\n          textColor: \"auto\"\n        };\n        this.integrations.set(demoIntegration1.id, demoIntegration1);\n\n        const demoIntegration2: Integration = {\n          id: this.integrationIdCounter++,\n          userId: demoUser.id,\n          name: \"Support Portal\",\n          url: \"support.example.com\",\n          apiKey: generateApiKey(),\n          themeColor: \"#3B82F6\",\n          position: \"bottom-right\",\n          active: true,\n          createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000), // 45 days ago\n          visitorCount: 5231,\n          language: \"es\",\n          botBehavior: \"Sé amable y profesional, responde de manera precisa a las preguntas sobre el sitio web.\",\n          documentsData: [],\n          widgetType: \"bubble\",\n          ignoredSections: [],\n          description: null,\n          ignoredSectionsText: null,\n          customization: null,\n          textColor: \"auto\"\n        };\n        this.integrations.set(demoIntegration2.id, demoIntegration2);\n\n        // Update all existing integrations to include language field if missing\n        for (const [id, integration] of this.integrations.entries()) {\n          if (!integration.language) {\n            const updatedIntegration = { ...integration, language: \"es\" };\n            this.integrations.set(id, updatedIntegration);\n          }\n        }\n\n        // Add demo automations\n        const demoAutomation1: Automation = {\n          id: this.automationIdCounter++,\n          userId: demoUser.id,\n          name: \"Customer Inquiry Response\",\n          description: \"Automates responses to common customer questions\",\n          status: \"active\",\n          config: { \n            triggers: [\"pricing\", \"features\", \"support\"],\n            responses: {\n              pricing: \"Our pricing starts at $29/month. Would you like to see our full pricing details?\",\n              features: \"AIPPS offers conversational AI, task automation, real-time assistance, and seamless website integration.\",\n              support: \"Our support team is available 24/7. You can reach them at support@example.com.\"\n            }\n          },\n          processedCount: 328,\n          createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n          lastModified: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)\n        };\n        this.automations.set(demoAutomation1.id, demoAutomation1);\n\n        const demoAutomation2: Automation = {\n          id: this.automationIdCounter++,\n          userId: demoUser.id,\n          name: \"Lead Qualification\",\n          description: \"Qualifies leads based on conversation patterns\",\n          status: \"active\",\n          config: {\n            qualificationCriteria: [\"budget\", \"timeline\", \"authority\"],\n            scoreThreshold: 7\n          },\n          processedCount: 142,\n          createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\n          lastModified: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n        };\n        this.automations.set(demoAutomation2.id, demoAutomation2);\n\n        const demoAutomation3: Automation = {\n          id: this.automationIdCounter++,\n          userId: demoUser.id,\n          name: \"Appointment Scheduling\",\n          description: \"Handles calendar scheduling through conversation\",\n          status: \"in_testing\",\n          config: {\n            calendarIntegration: \"google_calendar\",\n            availableSlots: [\"morning\", \"afternoon\", \"evening\"],\n            confirmationRequired: true\n          },\n          processedCount: 27,\n          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n          lastModified: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)\n        };\n        this.automations.set(demoAutomation3.id, demoAutomation3);\n\n        // Add some demo conversations and messages\n        const demoConversation1: Conversation = {\n          id: this.conversationIdCounter++,\n          integrationId: demoIntegration1.id,\n          visitorId: \"visitor123\",\n          title: \"Consulta sobre precios\",\n          resolved: true,\n          duration: 222, // 3m 42s\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        this.conversations.set(demoConversation1.id, demoConversation1);\n\n        const demoConversation2: Conversation = {\n          id: this.conversationIdCounter++,\n          integrationId: demoIntegration2.id,\n          visitorId: \"visitor456\",\n          title: \"Soporte técnico\",\n          resolved: false,\n          duration: 495, // 8m 15s\n          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n          updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)\n        };\n        this.conversations.set(demoConversation2.id, demoConversation2);\n\n        const demoConversation3: Conversation = {\n          id: this.conversationIdCounter++,\n          integrationId: demoIntegration1.id,\n          visitorId: \"visitor789\",\n          title: \"Información de servicios\",\n          resolved: true,\n          duration: 290, // 4m 50s\n          createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n          updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)\n        };\n        this.conversations.set(demoConversation3.id, demoConversation3);\n\n        // Add demo form templates\n        const formTemplates = [\n          {\n            id: this.formTemplateIdCounter++,\n            name: \"Lista de Espera\",\n            type: \"waitlist\",\n            description: \"Formulario básico para lista de espera de productos o servicios\",\n            structure: {\n              fields: [\n                { name: \"nombre\", label: \"Nombre\", type: \"text\", required: true },\n                { name: \"email\", label: \"Email\", type: \"email\", required: true },\n                { name: \"interes\", label: \"Interés\", type: \"select\", options: [\"Producto A\", \"Producto B\", \"Servicio C\"], required: true }\n              ],\n              submitButton: \"Únete a la lista de espera\"\n            },\n            isDefault: true,\n            createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n            updatedAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n          },\n          {\n            id: this.formTemplateIdCounter++,\n            name: \"Contacto\",\n            type: \"contact\",\n            description: \"Formulario de contacto para clientes potenciales\",\n            structure: {\n              fields: [\n                { name: \"nombre\", label: \"Nombre\", type: \"text\", required: true },\n                { name: \"email\", label: \"Email\", type: \"email\", required: true },\n                { name: \"telefono\", label: \"Teléfono\", type: \"tel\", required: false },\n                { name: \"mensaje\", label: \"Mensaje\", type: \"textarea\", required: true }\n              ],\n              submitButton: \"Enviar mensaje\"\n            },\n            isDefault: true,\n            createdAt: new Date(Date.now() - 29 * 24 * 60 * 60 * 1000), // 29 days ago\n            updatedAt: new Date(Date.now() - 29 * 24 * 60 * 60 * 1000)\n          },\n          {\n            id: this.formTemplateIdCounter++,\n            name: \"Registro para Webinar\",\n            type: \"event\",\n            description: \"Formulario para registrarse en un webinar o evento\",\n            structure: {\n              fields: [\n                { name: \"nombre\", label: \"Nombre completo\", type: \"text\", required: true },\n                { name: \"email\", label: \"Email\", type: \"email\", required: true },\n                { name: \"empresa\", label: \"Empresa\", type: \"text\", required: false },\n                { name: \"cargo\", label: \"Cargo\", type: \"text\", required: false },\n                { name: \"fechaPreferida\", label: \"Fecha preferida\", type: \"select\", options: [\"Martes 15:00\", \"Jueves 17:00\", \"Viernes 10:00\"], required: true }\n              ],\n              submitButton: \"Registrarse ahora\"\n            },\n            isDefault: true,\n            createdAt: new Date(Date.now() - 28 * 24 * 60 * 60 * 1000), // 28 days ago\n            updatedAt: new Date(Date.now() - 28 * 24 * 60 * 60 * 1000)\n          }\n        ];\n        for (const template of formTemplates) {\n          this.formTemplates.set(template.id, template as FormTemplate);\n        }\n\n        // Add demo forms (created from templates)\n        const demoForm1: Form = {\n          id: this.formIdCounter++,\n          userId: demoUser.id,\n          title: \"Waitlist para Beta\",\n          slug: \"waitlist-beta\",\n          type: \"waitlist\",\n          published: true,\n          structure: {\n            fields: [\n              { name: \"nombre\", label: \"Nombre\", type: \"text\", required: true },\n              { name: \"email\", label: \"Email\", type: \"email\", required: true },\n              { name: \"empresa\", label: \"Empresa\", type: \"text\", required: false },\n              { name: \"interes\", label: \"¿Qué características te interesan más?\", type: \"select\", options: [\"Chat AI\", \"Automaciones\", \"Análisis de datos\"], required: true }\n            ],\n            submitButton: \"Registrarme para la beta\",\n            successMessage: \"¡Gracias por tu registro! Te contactaremos pronto.\"\n          },\n          styling: null,\n          settings: null,\n          language: \"es\",\n          description: \"Formulario para registrarse en la lista de espera del beta\",\n          responseCount: 24,\n          createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000), // 15 days ago\n          updatedAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000)\n        };\n        this.forms.set(demoForm1.id, demoForm1);\n\n        const demoForm2: Form = {\n          id: this.formIdCounter++,\n          userId: demoUser.id,\n          title: \"Solicitud de Demo\",\n          slug: \"solicitud-demo\",\n          type: \"lead\",\n          published: true,\n          structure: {\n            fields: [\n              { name: \"nombre\", label: \"Nombre completo\", type: \"text\", required: true },\n              { name: \"email\", label: \"Email corporativo\", type: \"email\", required: true },\n              { name: \"telefono\", label: \"Teléfono\", type: \"tel\", required: true },\n              { name: \"empresa\", label: \"Empresa\", type: \"text\", required: true },\n              { name: \"tamanoEmpresa\", label: \"Tamaño de empresa\", type: \"select\", options: [\"1-10\", \"11-50\", \"51-200\", \"201+\"], required: true },\n              { name: \"mensaje\", label: \"¿Qué te gustaría ver en la demo?\", type: \"textarea\", required: false }\n            ],\n            submitButton: \"Solicitar una demo\",\n            successMessage: \"Hemos recibido tu solicitud. Un representante te contactará en 24-48 horas.\"\n          },\n          styling: null,\n          settings: null,\n          language: \"es\",\n          description: \"Formulario para solicitar una demostración del producto\",\n          responseCount: 18,\n          createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days ago\n          updatedAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000) // 8 days ago\n        };\n        this.forms.set(demoForm2.id, demoForm2);\n\n        // Add some form responses\n        const demoResponses = [\n          {\n            id: this.formResponseIdCounter++,\n            formId: demoForm1.id,\n            data: {\n              nombre: \"Ana García\",\n              email: \"ana.garcia@example.com\",\n              interes: \"Chat AI\"\n            },\n            submittedAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) // 14 days ago\n          },\n          {\n            id: this.formResponseIdCounter++,\n            formId: demoForm1.id,\n            data: {\n              nombre: \"Carlos Rodríguez\",\n              email: \"carlos.rodriguez@company.com\",\n              empresa: \"Company SL\",\n              interes: \"Automaciones\"\n            },\n            submittedAt: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000) // 12 days ago\n          },\n          {\n            id: this.formResponseIdCounter++,\n            formId: demoForm2.id,\n            data: {\n              nombre: \"María López\",\n              email: \"maria.lopez@enterprise.com\",\n              telefono: \"+34612345678\",\n              empresa: \"Enterprise Inc\",\n              tamanoEmpresa: \"51-200\",\n              mensaje: \"Me gustaría ver cómo se integra con nuestros sistemas actuales.\"\n            },\n            submittedAt: new Date(Date.now() - 9 * 24 * 60 * 60 * 1000) // 9 days ago\n          },\n          {\n            id: this.formResponseIdCounter++,\n            formId: demoForm2.id,\n            data: {\n              nombre: \"Pedro Sánchez\",\n              email: \"pedro.sanchez@startup.co\",\n              telefono: \"+34698765432\",\n              empresa: \"Startup Co\",\n              tamanoEmpresa: \"1-10\",\n              mensaje: \"Especialmente interesado en las capacidades de automatización.\"\n            },\n            submittedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 days ago\n          }\n        ];\n\n        for (const response of demoResponses) {\n          this.formResponses.set(response.id, response as FormResponse);\n        }\n        }\n\n        // User methods\n        async getUser(id: number): Promise<User | undefined> {\n        return this.users.get(id);\n        }\n\n        async getUserByUsername(username: string): Promise<User | undefined> {\n        return Array.from(this.users.values()).find(\n          (user) => user.username === username\n        );\n        }\n\n        async createUser(user: InsertUser & { apiKey: string }): Promise<User> {\n        const id = this.userIdCounter++;\n        const newUser: User = {\n          id,\n          username: user.username,\n          password: user.password,\n          email: user.email,\n          fullName: user.fullName || null,\n          apiKey: user.apiKey,\n          createdAt: new Date(),\n          stripeCustomerId: null,\n          stripeSubscriptionId: null\n        };\n        this.users.set(id, newUser);\n        return newUser;\n        }\n\n        // Integration methods\n        async getIntegrations(userId: number): Promise<Integration[]> {\n        return Array.from(this.integrations.values()).filter(\n          (integration) => integration.userId === userId\n        );\n        }\n\n        async getIntegration(id: number): Promise<Integration | undefined> {\n        return this.integrations.get(id);\n        }\n\n        async getIntegrationByApiKey(apiKey: string): Promise<Integration | undefined> {\n        return Array.from(this.integrations.values()).find(\n          (integration) => integration.apiKey === apiKey\n        );\n        }\n\n        async createIntegration(integration: InsertIntegration & { apiKey: string }): Promise<Integration> {\n        const id = this.integrationIdCounter++;\n        const newIntegration: Integration = {\n          id,\n          userId: integration.userId,\n          name: integration.name,\n          url: integration.url,\n          apiKey: integration.apiKey,\n          themeColor: integration.themeColor || \"#3B82F6\",\n          position: integration.position || \"bottom-right\",\n          active: true,\n          createdAt: new Date(),\n          visitorCount: 0,\n          botBehavior: integration.botBehavior || \"Sé amable y profesional, responde de manera precisa a las preguntas sobre el sitio web.\",\n          documentsData: integration.documentsData || [],\n          widgetType: integration.widgetType || \"bubble\",\n          ignoredSections: integration.ignoredSections || [],\n          description: integration.description || null,\n          ignoredSectionsText: null,\n          customization: null,\n          language: integration.language || \"es\",\n          textColor: integration.textColor || \"auto\"\n        };\n        this.integrations.set(id, newIntegration);\n        return newIntegration;\n        }\n\n        async updateIntegration(id: number, data: Partial<Integration>): Promise<Integration> {\n        const integration = this.integrations.get(id);\n        if (!integration) {\n          throw new Error(`Integration with id ${id} not found`);\n        }\n\n        const updatedIntegration = { ...integration, ...data };\n        this.integrations.set(id, updatedIntegration);\n\n        // Log language changes for debugging\n        if (data.language && integration.language !== data.language) {\n          console.log(`Language updated for integration ${id}: ${integration.language} → ${data.language}`);\n        }\n\n        return updatedIntegration;\n        }\n\n        async incrementVisitorCount(id: number): Promise<void> {\n        const integration = this.integrations.get(id);\n        if (integration && integration.visitorCount !== null) {\n          integration.visitorCount += 1;\n          this.integrations.set(id, integration);\n        }\n        }\n    async deleteIntegration(id: number): Promise<void> {\n      if (!this.integrations.has(id)) {\n        throw new Error(`Integration with id ${id} not found`);\n      }\n\n      this.integrations.delete(id);\n\n      // También eliminar todas las conversaciones asociadas\n      const conversationsToDelete = Array.from(this.conversations.values())\n        .filter(conv => conv.integrationId === id);\n\n      for (const conv of conversationsToDelete) {\n        this.conversations.delete(conv.id);\n\n        // Y también eliminar los mensajes de esas conversaciones\n        const messagesToDelete = Array.from(this.messages.values())\n          .filter(msg => msg.conversationId === conv.id);\n\n        for (const msg of messagesToDelete) {\n          this.messages.delete(msg.id);\n        }\n      }\n\n      // Eliminar el contenido de sitio asociado\n      const siteContentsToDelete = Array.from(this.siteContents.values())\n        .filter(content => content.integrationId === id);\n\n      for (const content of siteContentsToDelete) {\n        this.siteContents.delete(content.id);\n      }\n    }\n\n    // Conversation methods\n    async getConversations(integrationId: number): Promise<Conversation[]> {\n      return Array.from(this.conversations.values()).filter(\n        (conversation) => conversation.integrationId === integrationId\n      );\n    }\n\n    async getConversation(id: number): Promise<Conversation | undefined> {\n      return this.conversations.get(id);\n    }\n\n    async createConversation(conversation: InsertConversation): Promise<Conversation> {\n      const id = this.conversationIdCounter++;\n      const now = new Date();\n      const newConversation: Conversation = {\n        id,\n        integrationId: conversation.integrationId || null,\n        visitorId: conversation.visitorId || null,\n        visitorName: conversation.visitorName || null,    // ← AGREGAR ESTA LÍNEA\n        visitorEmail: conversation.visitorEmail || null,  // ← AGREGAR ESTA LÍNEA\n        title: null,\n        resolved: false,\n        duration: 0,\n        createdAt: now,\n        updatedAt: now\n      };\n      this.conversations.set(id, newConversation);\n      return newConversation;\n    }\n\n    async updateConversation(id: number, data: Partial<Conversation>): Promise<Conversation> {\n      const conversation = this.conversations.get(id);\n      if (!conversation) {\n        throw new Error(`Conversation with id ${id} not found`);\n      }\n\n      const updatedConversation = { \n        ...conversation, \n        ...data, \n        updatedAt: new Date() \n      };\n      this.conversations.set(id, updatedConversation);\n      return updatedConversation;\n    }\n\n    // Message methods\n    async getMessages(conversationId: number): Promise<Message[]> {\n      return Array.from(this.messages.values()).filter(\n        (message) => message.conversationId === conversationId\n      );\n    }\n\n    async getConversationMessages(conversationId: number): Promise<Message[]> {\n      return Array.from(this.messages.values())\n        .filter(message => message.conversationId === conversationId)\n        .sort((a, b) => {\n          const aTime = a.timestamp ? a.timestamp.getTime() : 0;\n          const bTime = b.timestamp ? b.timestamp.getTime() : 0;\n          return aTime - bTime;\n        });\n    }\n\n    async createMessage(message: InsertMessage): Promise<Message> {\n      const id = this.messageIdCounter++;\n      const newMessage: Message = {\n        id,\n        conversationId: message.conversationId || null,\n        content: message.content,\n        role: message.role,\n        timestamp: new Date()\n      };\n      this.messages.set(id, newMessage);\n      return newMessage;\n    }\n\n    // Automation methods\n    async getAutomations(userId: number): Promise<Automation[]> {\n      return Array.from(this.automations.values()).filter(\n        (automation) => automation.userId === userId\n      );\n    }\n\n    async getAutomation(id: number): Promise<Automation | undefined> {\n      return this.automations.get(id);\n    }\n\n    async createAutomation(automation: InsertAutomation): Promise<Automation> {\n      const id = this.automationIdCounter++;\n      const now = new Date();\n      const newAutomation: Automation = {\n        id,\n        userId: automation.userId,\n        name: automation.name,\n        description: automation.description || null,\n        status: automation.status || \"active\",\n        config: automation.config,\n        processedCount: 0,\n        createdAt: now,\n        lastModified: now\n      };\n      this.automations.set(id, newAutomation);\n      return newAutomation;\n    }\n\n    async updateAutomation(id: number, data: Partial<Automation>): Promise<Automation> {\n      const automation = this.automations.get(id);\n      if (!automation) {\n        throw new Error(`Automation with id ${id} not found`);\n      }\n\n      const updatedAutomation = { \n        ...automation, \n        ...data, \n        lastModified: new Date() \n      };\n      this.automations.set(id, updatedAutomation);\n      return updatedAutomation;\n    }\n\n    // Settings methods\n    async getSettings(userId: number): Promise<Settings> {\n      const userSettings = Array.from(this.settings.values()).find(\n        (setting) => setting.userId === userId\n      );\n\n      if (userSettings) {\n        return userSettings;\n      }\n\n      // If no settings exist for user, create default settings\n      return this.createSettings({ userId });\n    }\n\n    async updateSettings(userId: number, data: Partial<Settings>): Promise<Settings> {\n      const userSettings = await this.getSettings(userId);\n\n      const updatedSettings = { ...userSettings, ...data };\n      this.settings.set(userSettings.id, updatedSettings);\n      return updatedSettings;\n    }\n    async createSettings(settings: { userId: number }): Promise<Settings> {\n      const id = this.settingsIdCounter++;\n      const newSettings: Settings = {\n        id,\n        userId: settings.userId,\n        assistantName: \"AIPPS Assistant\",\n        defaultGreeting: \"👋 Hi there! I'm AIPPS, your AI assistant. How can I help you today?\",\n        showAvailability: true,\n        avatarUrl: null,\n        userBubbleColor: \"#3B82F6\",\n        assistantBubbleColor: \"#E5E7EB\",\n        font: \"inter\",\n        conversationStyle: \"professional\",\n        knowledgeBase: \"default\",\n        enableLearning: true,\n        emailNotificationAddress: \"notifications@example.com\",\n        welcomePageChatEnabled: true,\n        welcomePageChatGreeting: \"👋 ¡Hola! Soy AIPPS, tu asistente de IA. ¿En qué puedo ayudarte hoy?\",\n        welcomePageChatBubbleColor: \"#111827\",\n        welcomePageChatTextColor: \"#FFFFFF\",\n        welcomePageChatBehavior: \"Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.\",\n        welcomePageChatScrapingEnabled: false,\n        welcomePageChatScrapingDepth: 5,\n        welcomePageChatScrapingData: null\n      };\n      this.settings.set(id, newSettings);\n      return newSettings;\n    }\n\n    // Document methods (enhanced to get real documents from documentsData)\n    async getDocuments(integrationId: number): Promise<any[]> {\n      // Get documents from integration's documentsData field\n      const integration = await this.getIntegration(integrationId);\n      if (integration && integration.documentsData && Array.isArray(integration.documentsData)) {\n        // Process each document to extract content\n        const processedDocs = [];\n\n        for (const doc of integration.documentsData) {\n          let content = doc.content || 'Contenido no disponible';\n\n          // If no content but we have a file path, try to process it\n          if (!doc.content && doc.path && fs.existsSync(doc.path)) {\n            try {\n              const { enhancedDocumentProcessor } = await import('./lib/document-processor-enhanced');\n              content = await enhancedDocumentProcessor.processDocumentContent(doc.path, doc.mimetype);\n            } catch (error) {\n              console.error('Error processing document content:', error);\n              content = 'Error al procesar el contenido del documento';\n            }\n          }\n\n          processedDocs.push({\n            id: doc.id,\n            integration_id: integrationId,\n            filename: doc.filename,\n            original_name: doc.originalName || doc.filename,\n            content: content,\n            content_type: doc.mimetype,\n            file_size: doc.size\n          });\n        }\n\n        return processedDocs;\n      }\n\n      return [];\n    }\n\n    async createDocument(doc: any): Promise<any> {\n      // Mock implementation - in real system this would insert into documents table\n      return { id: 1, ...doc };\n    }\n\n    async deleteDocument(id: number): Promise<void> {\n      // Mock implementation - in real system this would delete from documents table\n    }\n\n    // Site content methods (personalized for each integration)\n    async getSiteContent(integrationId: number): Promise<any[]> {\n      // Get the integration to check for specific site content\n      const integration = await this.getIntegration(integrationId);\n      if (!integration) {\n        return [];\n      }\n\n      // Check existing site contents for this integration\n      const existingContent = Array.from(this.siteContents.values())\n        .filter(content => content.integrationId === integrationId);\n\n      if (existingContent.length > 0) {\n        return existingContent.map(content => ({\n          id: content.id,\n          integration_id: content.integrationId,\n          url: content.url,\n          title: content.title,\n          content: content.content,\n          meta_description: content.metaDescription\n        }));\n      }\n\n      // Only return demo content for AIPPS-specific integrations\n      if (integration.name.toLowerCase().includes('aipps') || integration.apiKey === 'aipps_web_internal') {\n        return [\n          {\n            id: 1,\n            integration_id: integrationId,\n            url: integration.url || 'https://techcolca.com/',\n            title: 'AIPPS - Plataforma de IA',\n            content: 'AIPPS es una plataforma de inteligencia artificial que permite crear chatbots inteligentes para sitios web, generar formularios interactivos personalizados, automatizar procesos de atención al cliente e integrar fácilmente con WordPress y otros CMS. Planes disponibles: Gratuito (100 conversaciones/mes), Profesional (conversaciones ilimitadas), Empresarial (soluciones personalizadas).',\n            meta_description: 'Plataforma de inteligencia artificial AIPPS'\n          }\n        ];\n      }\n\n      // For other integrations, return empty array to rely on user-uploaded documents\n      return [];\n    }\n\n    async getSiteContentByUrl(integrationId: number, url: string): Promise<SiteContent | undefined> {\n      return Array.from(this.siteContents.values())\n        .find(content => content.integrationId === integrationId && content.url === url);\n    }\n\n    async createSiteContent(content: InsertSiteContent): Promise<SiteContent> {\n      const id = this.siteContentIdCounter++;\n      const now = new Date();\n\n      const newContent: SiteContent = {\n        ...content,\n        id,\n        lastUpdated: now,\n        createdAt: now\n      };\n\n      this.siteContents.set(id, newContent);\n      return newContent;\n    }\n\n    async updateSiteContent(id: number, data: Partial<SiteContent>): Promise<SiteContent> {\n      const content = this.siteContents.get(id);\n      if (!content) {\n        throw new Error(`Site content with id ${id} not found`);\n      }\n\n      const updatedContent = {\n        ...content,\n        ...data,\n        lastUpdated: new Date()\n      };\n\n      this.siteContents.set(id, updatedContent);\n      return updatedContent;\n    }\n\n    async deleteSiteContent(id: number): Promise<void> {\n      this.siteContents.delete(id);\n    }\n\n    // Subscription methods\n    async getUserSubscriptions(userId: number): Promise<Subscription[]> {\n      return Array.from(this.subscriptions.values()).filter(\n        subscription => subscription.userId === userId\n      );\n    }\n    async getSubscription(id: number): Promise<Subscription | undefined> {\n      return this.subscriptions.get(id);\n    }\n\n    async createSubscription(subscription: InsertSubscription): Promise<Subscription> {\n      const id = this.subscriptionIdCounter++;\n      const now = new Date();\n\n      const newSubscription: Subscription = {\n        ...subscription,\n        id,\n        createdAt: now,\n        updatedAt: now,\n        interactionsUsed: 0,\n      };\n\n      this.subscriptions.set(id, newSubscription);\n      return newSubscription;\n    }\n\n    async updateSubscription(id: number, data: Partial<Subscription>): Promise<Subscription> {\n      const subscription = this.subscriptions.get(id);\n      if (!subscription) {\n        throw new Error(`Subscription with id ${id} not found`);\n      }\n\n      const updatedSubscription = {\n        ...subscription,\n        ...data,\n        updatedAt: new Date()\n      };\n\n      this.subscriptions.set(id, updatedSubscription);\n      return updatedSubscription;\n    }\n\n    async incrementSubscriptionUsage(id: number): Promise<void> {\n      const subscription = this.subscriptions.get(id);\n      if (subscription) {\n        subscription.interactionsUsed += 1;\n        this.subscriptions.set(id, subscription);\n      }\n    }\n\n    async getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined> {\n      return Array.from(this.users.values()).find(\n        user => user.stripeCustomerId === stripeCustomerId\n      );\n    }\n\n    async updateUserStripeInfo(\n      userId: number, \n      data: { stripeCustomerId: string, stripeSubscriptionId: string }\n    ): Promise<User> {\n      const user = this.users.get(userId);\n      if (!user) {\n        throw new Error(`User with id ${userId} not found`);\n      }\n\n      const updatedUser = { \n        ...user, \n        stripeCustomerId: data.stripeCustomerId,\n        stripeSubscriptionId: data.stripeSubscriptionId \n      };\n\n      this.users.set(userId, updatedUser);\n      return updatedUser;\n    }\n\n    // Discount code methods\n    async getDiscountCodes(): Promise<DiscountCode[]> {\n      return Array.from(this.discountCodes.values());\n    }\n\n    async getActiveDiscountCodes(): Promise<DiscountCode[]> {\n      return Array.from(this.discountCodes.values())\n        .filter(code => code.isActive);\n    }\n\n    async getDiscountCode(id: number): Promise<DiscountCode | undefined> {\n      return this.discountCodes.get(id);\n    }\n\n    async getDiscountCodeByCode(code: string): Promise<DiscountCode | undefined> {\n      return Array.from(this.discountCodes.values())\n        .find(discountCode => discountCode.code === code);\n    }\n\n    async createDiscountCode(data: InsertDiscountCode): Promise<DiscountCode> {\n      const id = this.discountCodeIdCounter++;\n      const newDiscountCode: DiscountCode = {\n        ...data,\n        id,\n        usageCount: 0,\n        createdAt: new Date()\n      };\n\n      this.discountCodes.set(id, newDiscountCode);\n      return newDiscountCode;\n    }\n\n    async updateDiscountCode(id: number, data: Partial<DiscountCode>): Promise<DiscountCode> {\n      const discountCode = this.discountCodes.get(id);\n      if (!discountCode) {\n        throw new Error(`Discount code with id ${id} not found`);\n      }\n\n      const updatedDiscountCode = {\n        ...discountCode,\n        ...data\n      };\n\n      this.discountCodes.set(id, updatedDiscountCode);\n      return updatedDiscountCode;\n    }\n    async incrementDiscountCodeUsage(id: number): Promise<void> {\n      const discountCode = this.discountCodes.get(id);\n      if (discountCode) {\n        discountCode.usageCount += 1;\n        this.discountCodes.set(id, discountCode);\n      }\n    }\n\n    async deleteDiscountCode(id: number): Promise<void> {\n      this.discountCodes.delete(id);\n    }\n\n    generateDiscountCode(prefix: string = 'AIPPS'): string {\n      // Generar un código alfanumérico único de 8 caracteres\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n      let result = prefix;\n      const charactersLength = characters.length;\n\n      // Asegurar que el prefijo no sea más de 4 caracteres\n      if (result.length > 4) {\n        result = result.substring(0, 4);\n      }\n\n      // Añadir guión después del prefijo\n      result += '-';\n\n      // Añadir 4 caracteres aleatorios\n      for (let i = 0; i < 4; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    }\n\n    // Pricing Plan methods\n    async getPricingPlans(): Promise<PricingPlan[]> {\n      return Array.from(this.pricingPlans.values());\n    }\n\n    async getAvailablePricingPlans(): Promise<PricingPlan[]> {\n      return Array.from(this.pricingPlans.values())\n        .filter(plan => plan.available);\n    }\n\n    async getPricingPlan(id: number): Promise<PricingPlan | undefined> {\n      return this.pricingPlans.get(id);\n    }\n\n    async getPricingPlanByPlanId(planId: string): Promise<PricingPlan | undefined> {\n      return Array.from(this.pricingPlans.values())\n        .find(plan => plan.planId === planId);\n    }\n\n    async createPricingPlan(data: InsertPricingPlan): Promise<PricingPlan> {\n      const id = this.pricingPlanIdCounter++;\n      const now = new Date();\n\n      const newPlan: PricingPlan = {\n        ...data,\n        id,\n        createdAt: now,\n        updatedAt: now\n      };\n\n      this.pricingPlans.set(id, newPlan);\n      return newPlan;\n    }\n\n    async updatePricingPlan(id: number, data: Partial<PricingPlan>): Promise<PricingPlan> {\n      const plan = this.pricingPlans.get(id);\n      if (!plan) {\n        throw new Error(`Pricing plan with id ${id} not found`);\n      }\n\n      const updatedPlan = {\n        ...plan,\n        ...data,\n        updatedAt: new Date()\n      };\n\n      this.pricingPlans.set(id, updatedPlan);\n      return updatedPlan;\n    }\n\n    async deletePricingPlan(id: number): Promise<void> {\n      this.pricingPlans.delete(id);\n    }\n\n    // Form methods\n    async getForms(userId: number): Promise<Form[]> {\n      return Array.from(this.forms.values()).filter(\n        (form) => form.userId === userId\n      );\n    }\n\n    async getForm(id: number): Promise<Form | undefined> {\n      return this.forms.get(id);\n    }\n\n    async getFormBySlug(slug: string): Promise<Form | undefined> {\n      return Array.from(this.forms.values()).find(\n        (form) => form.slug === slug\n      );\n    }\n\n    async createForm(formData: InsertForm): Promise<Form> {\n      const id = this.formIdCounter++;\n      const now = new Date();\n      const newForm: Form = {\n        id,\n        userId: formData.userId,\n        title: formData.name || \"\",\n        slug: formData.slug || \"\",\n        type: formData.type || null,\n        description: formData.description || null,\n        status: formData.status || \"draft\",\n        structure: formData.structure || {},\n        settings: formData.settings || {},\n        styling: formData.styling || {},\n        published: formData.published || false,\n        responseCount: 0,\n        embedCode: formData.embedCode || null,\n        createdAt: now,\n        updatedAt: now\n      };\n      this.forms.set(id, newForm);\n      return newForm;\n    }\n\n    async updateForm(id: number, data: Partial<Form>): Promise<Form> {\n      const form = this.forms.get(id);\n      if (!form) {\n        throw new Error(`Form with id ${id} not found`);\n      }\n\n      const updatedForm = {\n        ...form,\n        ...data,\n        updatedAt: new Date()\n      };\n      this.forms.set(id, updatedForm);\n      return updatedForm;\n    }\n\n    async incrementFormResponseCount(id: number): Promise<void> {\n      const form = this.forms.get(id);\n      if (form) {\n        form.responseCount += 1;\n        this.forms.set(id, form);\n      }\n    }\n\n    async deleteForm(id: number): Promise<void> {\n      if (!this.forms.has(id)) {\n        throw new Error(`Form with id ${id} not found`);\n      }\n\n      // Eliminar todas las respuestas asociadas\n      await this.deleteFormResponses(id);\n\n      // Eliminar el formulario\n      this.forms.delete(id);\n    }\n\n    // Form Template methods\n    async getFormTemplates(): Promise<FormTemplate[]> {\n      return Array.from(this.formTemplates.values());\n    }\n\n    async getDefaultFormTemplates(): Promise<FormTemplate[]> {\n      return Array.from(this.formTemplates.values()).filter(\n        (template) => template.isDefault === true\n      );\n    }\n\n    async getTemplatesByType(type: string): Promise<FormTemplate[]> {\n      return Array.from(this.formTemplates.values()).filter(\n        (template) => template.type === type\n      );\n    }\n\n    async getFormTemplate(id: number): Promise<FormTemplate | undefined> {\n      return this.formTemplates.get(id);\n    }\n    async createFormTemplate(templateData: InsertFormTemplate): Promise<FormTemplate> {\n      const id = this.formTemplateIdCounter++;\n      const now = new Date();\n      const newTemplate: FormTemplate = {\n        id,\n        name: templateData.name,\n        type: templateData.type,\n        description: templateData.description || null,\n        structure: templateData.structure || {},\n        settings: templateData.settings || {},\n        styling: templateData.styling || {},\n        thumbnail: templateData.thumbnail || null,\n        isDefault: templateData.isDefault || false,\n        createdBy: templateData.createdBy || null,\n        createdAt: now,\n        updatedAt: now\n      };\n      this.formTemplates.set(id, newTemplate);\n      return newTemplate;\n    }\n\n    async updateFormTemplate(id: number, data: Partial<FormTemplate>): Promise<FormTemplate> {\n      const template = this.formTemplates.get(id);\n      if (!template) {\n        throw new Error(`Form template with id ${id} not found`);\n      }\n\n      const updatedTemplate = {\n        ...template,\n        ...data,\n        updatedAt: new Date()\n      };\n      this.formTemplates.set(id, updatedTemplate);\n      return updatedTemplate;\n    }\n\n    async deleteFormTemplate(id: number): Promise<void> {\n      this.formTemplates.delete(id);\n    }\n\n    // Form Response methods\n    async getFormResponses(formId: number): Promise<FormResponse[]> {\n      return Array.from(this.formResponses.values())\n        .filter((response) => response.formId === formId)\n        .sort((a, b) => {\n          return new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime();\n        });\n    }\n\n    async getFormResponse(id: number): Promise<FormResponse | undefined> {\n      return this.formResponses.get(id);\n    }\n\n    async createFormResponse(responseData: InsertFormResponse): Promise<FormResponse> {\n      const id = this.formResponseIdCounter++;\n      const newResponse: FormResponse = {\n        id,\n        formId: responseData.formId,\n        data: responseData.data || {},\n        metadata: responseData.metadata || {},\n        submittedAt: new Date()\n      };\n      this.formResponses.set(id, newResponse);\n\n      // Incrementar el contador de respuestas si hay un formId válido\n      if (responseData.formId) {\n        await this.incrementFormResponseCount(responseData.formId);\n      }\n\n      return newResponse;\n    }\n\n    async deleteFormResponse(id: number): Promise<void> {\n      this.formResponses.delete(id);\n    }\n\n    async deleteFormResponses(formId: number): Promise<void> {\n      const responsesToDelete = Array.from(this.formResponses.values())\n        .filter(response => response.formId === formId);\n\n      for (const response of responsesToDelete) {\n        this.formResponses.delete(response.id);\n      }\n    }\n\n    // Appointment methods\n    async getAppointments(integrationId: number): Promise<Appointment[]> {\n      return Array.from(this.appointments.values())\n        .filter(appointment => appointment.integrationId === integrationId)\n        .sort((a, b) => {\n          // Ordenar por fecha/hora de la cita\n          const dateComparison = new Date(a.appointmentDate + ' ' + a.appointmentTime).getTime() - \n                                new Date(b.appointmentDate + ' ' + b.appointmentTime).getTime();\n          return dateComparison;\n        });\n    }\n\n    async getAppointmentsByConversation(conversationId: number): Promise<Appointment[]> {\n      return Array.from(this.appointments.values())\n        .filter(appointment => appointment.conversationId === conversationId)\n        .sort((a, b) => {\n          // Ordenar por fecha/hora de la cita\n          const dateComparison = new Date(a.appointmentDate + ' ' + a.appointmentTime).getTime() - \n                                new Date(b.appointmentDate + ' ' + b.appointmentTime).getTime();\n          return dateComparison;\n        });\n    }\n\n    async getAppointment(id: number): Promise<Appointment | undefined> {\n      return this.appointments.get(id);\n    }\n\n    async createAppointment(appointmentData: InsertAppointment): Promise<Appointment> {\n      const id = this.appointmentIdCounter++;\n      const newAppointment: Appointment = {\n        ...appointmentData,\n        id,\n        createdAt: new Date()\n      };\n      this.appointments.set(id, newAppointment);\n      return newAppointment;\n    }\n\n    async updateAppointment(id: number, data: Partial<Appointment>): Promise<Appointment> {\n      const appointment = this.appointments.get(id);\n      if (!appointment) {\n        throw new Error(`Appointment with id ${id} not found`);\n      }\n\n      const updatedAppointment = { ...appointment, ...data };\n      this.appointments.set(id, updatedAppointment);\n      return updatedAppointment;\n    }\n\n    async updateAppointmentStatus(id: number, status: string): Promise<Appointment> {\n      const appointment = this.appointments.get(id);\n      if (!appointment) {\n        throw new Error(`Appointment with id ${id} not found`);\n      }\n\n      const updatedAppointment = { ...appointment, status };\n      this.appointments.set(id, updatedAppointment);\n      return updatedAppointment;\n    }\n\n    async updateCalendarEventId(id: number, calendarEventId: string, calendarProvider: string): Promise<Appointment> {\n      const appointment = this.appointments.get(id);\n      if (!appointment) {\n        throw new Error(`Appointment with id ${id} not found`);\n      }\n\n      const updatedAppointment = { \n        ...appointment, \n        calendarEventId,\n        calendarProvider\n      };\n      this.appointments.set(id, updatedAppointment);\n      return updatedAppointment;\n    }\n\n    async markReminderSent(id: number): Promise<Appointment> {\n      const appointment = this.appointments.get(id);\n      if (!appointment) {\n        throw new Error(`Appointment with id ${id} not found`);\n      }\n\n      const updatedAppointment = { ...appointment, reminderSent: true };\n      this.appointments.set(id, updatedAppointment);\n      return updatedAppointment;\n    }\n\n    async deleteAppointment(id: number): Promise<void> {\n      if (!this.appointments.has(id)) {\n        throw new Error(`Appointment with id ${id} not found`);\n      }\n\n      this.appointments.delete(id);\n    }\n\n    async getUpcomingAppointmentsForReminders(): Promise<Appointment[]> {\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      const dayAfterTomorrow = new Date(tomorrow);\n      dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 1);\n\n      const tomorrowStr = tomorrow.toISOString().split('T')[0];\n\n      return Array.from(this.appointments.values())\n        .filter(appointment => {\n          // Filtrar citas para mañana que no han recibido recordatorio\n          return appointment.appointmentDate === tomorrowStr && \n                 appointment.status !== 'cancelled' &&\n                 !appointment.reminderSent;\n        });\n    }\n    // Calendar OAuth Token methods\n    async getCalendarTokens(userId: number): Promise<CalendarToken[]> {\n      return Array.from(this.calendarTokens.values()).filter(\n        (token) => token.userId === userId\n      );\n    }\n\n    async getCalendarToken(id: number): Promise<CalendarToken | undefined> {\n      return this.calendarTokens.get(id);\n    }\n\n    async getCalendarTokenByProvider(userId: number, provider: string): Promise<CalendarToken | undefined> {\n      return Array.from(this.calendarTokens.values()).find(\n        (token) => token.userId === userId && token.provider === provider\n      );\n    }\n\n    async createCalendarToken(tokenData: InsertCalendarToken): Promise<CalendarToken> {\n      const id = this.calendarTokenIdCounter++;\n      const now = new Date();\n      const newToken: CalendarToken = {\n        ...tokenData,\n        id,\n        createdAt: now,\n        updatedAt: now\n      };\n      this.calendarTokens.set(id, newToken);\n      return newToken;\n    }\n\n    async updateCalendarToken(id: number, data: Partial<CalendarToken>): Promise<CalendarToken> {\n      const token = this.calendarTokens.get(id);\n      if (!token) {\n        throw new Error(`Calendar token with id ${id} not found`);\n      }\n\n      const updatedToken = { \n        ...token, \n        ...data,\n        updatedAt: new Date()\n      };\n      this.calendarTokens.set(id, updatedToken);\n      return updatedToken;\n    }\n\n    async deleteCalendarToken(id: number): Promise<void> {\n      if (!this.calendarTokens.has(id)) {\n        throw new Error(`Calendar token with id ${id} not found`);\n      }\n\n      this.calendarTokens.delete(id);\n    }\n\n    // Dashboard methods\n    async getDashboardStats(userId: number): Promise<{\n      totalConversations: number;\n      resolutionRate: number;\n      averageResponseTime: number;\n    }> {\n      // Get all integrations for user\n      const userIntegrations = await this.getIntegrations(userId);\n      const integrationIds = userIntegrations.map(integration => integration.id);\n\n      // Get all conversations for these integrations\n      const allConversations = Array.from(this.conversations.values()).filter(\n        conversation => integrationIds.includes(conversation.integrationId)\n      );\n\n      // Calculate stats\n      const totalConversations = allConversations.length;\n\n      const resolvedConversations = allConversations.filter(\n        conversation => conversation.resolved\n      ).length;\n\n      const resolutionRate = totalConversations > 0 \n        ? (resolvedConversations / totalConversations) * 100 \n        : 0;\n\n      const totalDuration = allConversations.reduce(\n        (sum, conversation) => sum + (conversation.duration || 0), \n        0\n      );\n\n      const averageResponseTime = totalConversations > 0 \n        ? totalDuration / totalConversations / 60 // Convert to seconds\n        : 0;\n\n      return {\n        totalConversations,\n        resolutionRate,\n        averageResponseTime\n      };\n    }\n\n    // Implementación de análisis de conversación para MemStorage\n    async getConversationAnalytics(userId: number): Promise<ConversationAnalytics> {\n      // Obtener las integraciones del usuario\n      const userIntegrations = await this.getIntegrations(userId);\n      const integrationIds = userIntegrations.map(integration => integration.id);\n\n      // Si no hay integraciones, devolver datos vacíos\n      if (integrationIds.length === 0) {\n        return {\n          topProducts: [],\n          topTopics: [],\n          conversationsByDay: [],\n          keywordFrequency: []\n        };\n      }\n\n      // Obtener todas las conversaciones para las integraciones del usuario\n      const allConversations = Array.from(this.conversations.values()).filter(\n        conversation => integrationIds.includes(conversation.integrationId)\n      );\n\n      // Obtener todos los mensajes de estas conversaciones\n      const conversationIds = allConversations.map(conv => conv.id);\n      const allMessages = conversationIds.length > 0 \n        ? Array.from(this.messages.values()).filter(\n            message => conversationIds.includes(message.conversationId)\n          )\n        : [];\n\n      // Filtrar mensajes de usuarios (no del asistente)\n      const userMessages = allMessages.filter(msg => msg.role === 'user');\n      // Generar datos de tendencia de conversaciones\n        const conversationsByDay: { date: string, count: number }[] = [];\n\n        // Crear un mapa para contar conversaciones por día\n        const dateCountMap = new Map<string, number>();\n\n        // Inicializar los últimos 30 días con cero conversaciones\n        const today = new Date();\n        for (let i = 0; i < 30; i++) {\n          const date = new Date();\n          date.setDate(today.getDate() - 29 + i);\n          const dateStr = date.toISOString().split('T')[0]; // formato YYYY-MM-DD\n          dateCountMap.set(dateStr, 0);\n        }\n\n        // Contar conversaciones por día\n        allConversations.forEach(conv => {\n          if (conv.createdAt) {\n            const dateStr = new Date(conv.createdAt).toISOString().split('T')[0];\n            if (dateCountMap.has(dateStr)) {\n              dateCountMap.set(dateStr, (dateCountMap.get(dateStr) || 0) + 1);\n            }\n          }\n        });\n\n        // Convertir a array y ordenar por fecha\n        const orderedConversationsByDay = Array.from(dateCountMap.entries())\n          .map(([date, count]) => ({ date, count }))\n          .sort((a, b) => a.date.localeCompare(b.date));\n\n        // Extraer palabras clave y su frecuencia\n        const keywordFrequency: { keyword: string, frequency: number }[] = [];\n\n        // Extraer texto de todos los mensajes\n        const allText = userMessages.map(msg => msg.content).join(' ').toLowerCase();\n\n        // Lista de palabras de parada en español\n        const stopWords = new Set([\n          'a', 'al', 'algo', 'algunas', 'algunos', 'ante', 'antes', 'como', 'con', 'contra',\n          'cual', 'cuando', 'de', 'del', 'desde', 'donde', 'durante', 'e', 'el', 'ella',\n          'ellas', 'ellos', 'en', 'entre', 'era', 'erais', 'eran', 'eras', 'eres', 'es',\n          'esa', 'esas', 'ese', 'eso', 'esos', 'esta', 'estaba', 'estaban', 'estado',\n          'estais', 'estamos', 'estan', 'estar', 'estas', 'este', 'esto', 'estos', 'estoy',\n          'etc', 'fue', 'fueron', 'fui', 'fuimos', 'han', 'has', 'hay', 'he', 'hemos',\n          'hube', 'hubo', 'la', 'las', 'le', 'les', 'lo', 'los', 'me', 'mi', 'mia',\n          'mias', 'mio', 'mios', 'mis', 'mu', 'muy', 'nada', 'ni', 'no', 'nos', 'nosotras',\n          'nosotros', 'nuestra', 'nuestras', 'nuestro', 'nuestros', 'o', 'os', 'otra',\n          'otras', 'otro', 'otros', 'para', 'pero', 'por', 'porque', 'que', 'quien',\n          'quienes', 'qué', 'se', 'sea', 'seais', 'seamos', 'sean', 'seas', 'ser',\n          'sereis', 'seremos', 'seria', 'seriais', 'seriamos', 'serian', 'serias', 'será',\n          'seran', 'seras', 'seré', 'seréis', 'seríamos', 'si', 'sido', 'siendo', 'sin',\n          'sobre', 'sois', 'somos', 'son', 'soy', 'su', 'sus', 'suya', 'suyas', 'suyo',\n          'suyos', 'sí', 'también', 'tanto', 'te', 'teneis', 'tenemos', 'tener', 'tengo',\n          'ti', 'tiene', 'tienen', 'tienes', 'todo', 'todos', 'tu', 'tus', 'tuve', 'tuvimos',\n          'tuviste', 'tuvisteis', 'tuvo', 'tuvieron', 'tuya', 'tuyas', 'tuyo', 'tuyos',\n          'tú', 'un', 'una', 'uno', 'unos', 'vosotras', 'vosotros', 'vuestra', 'vuestras',\n          'vuestro', 'vuestros', 'y', 'ya', 'yo'\n        ]);\n\n        // Dividir el texto en palabras\n        const words = allText.split(/\\s+/)\n          .map(word => word.replace(/[.,;!?()]/g, ''))\n          .filter(word => word.length > 3 && !stopWords.has(word));\n\n        // Contar frecuencia de cada palabra\n        const wordCount = new Map<string, number>();\n        words.forEach(word => {\n          wordCount.set(word, (wordCount.get(word) || 0) + 1);\n        });\n\n        // Convertir a array, ordenar por frecuencia y tomar las 20 más frecuentes\n        const orderedKeywords = Array.from(wordCount.entries())\n          .map(([keyword, frequency]) => ({ keyword, frequency }))\n          .sort((a, b) => b.frequency - a.frequency)\n          .slice(0, 20);\n\n        // Productos/servicios más demandados (demo)\n        const topProducts: TopProduct[] = [\n          { name: \"Asistencia Técnica\", count: 156, percentage: 42 },\n          { name: \"Plan Premium\", count: 89, percentage: 24 },\n          { name: \"Facturación\", count: 67, percentage: 18 },\n          { name: \"Configuración Inicial\", count: 45, percentage: 12 },\n          { name: \"Sugerencias\", count: 15, percentage: 4 }\n        ];\n\n        // Temas más discutidos con sentimiento (demo)\n        const topTopics: TopTopic[] = [\n          { topic: \"Problemas de conexión\", count: 124, sentiment: 35 },\n          { topic: \"Rendimiento del sistema\", count: 98, sentiment: 62 },\n          { topic: \"Funcionalidades nuevas\", count: 76, sentiment: 85 },\n          { topic: \"Precios y facturación\", count: 64, sentiment: 48 },\n          { topic: \"Atención al cliente\", count: 58, sentiment: 75 }\n        ];\n\n        return {\n          topProducts,\n          topTopics,\n          conversationsByDay: orderedConversationsByDay,\n          keywordFrequency: orderedKeywords\n        };\n      }\n     // Implementación de rendimiento de integraciones para MemStorage\n      async getIntegrationPerformance(userId: number): Promise<IntegrationPerformance[]> {\n        // Obtener las integraciones del usuario\n        const userIntegrations = await this.getIntegrations(userId);\n\n        if (userIntegrations.length === 0) return [];\n\n        // Crear array para almacenar el rendimiento de cada integración\n        const performanceData: IntegrationPerformance[] = [];\n\n        // Analizar cada integración\n        for (const integration of userIntegrations) {\n          // Obtener conversaciones para esta integración\n          const integrationConversations = Array.from(this.conversations.values()).filter(\n            conversation => conversation.integrationId === integration.id\n          );\n\n          if (integrationConversations.length === 0) {\n            // Si no hay conversaciones, añadir datos con valores predeterminados\n            performanceData.push({\n              integrationId: integration.id,\n              integrationName: integration.name,\n              conversationCount: 0,\n              responseTime: 0,\n              resolutionRate: 0,\n              userSatisfaction: 0\n            });\n            continue;\n          }\n\n          // Contar conversaciones resueltas\n          const resolvedCount = integrationConversations.filter(conv => conv.resolved).length;\n\n          // Calcular tasa de resolución\n          const resolutionRate = (resolvedCount / integrationConversations.length) * 100;\n\n          // Calcular tiempo de respuesta promedio\n          const totalDuration = integrationConversations.reduce(\n            (sum, conv) => sum + (conv.duration || 0), \n            0\n          );\n          const responseTime = totalDuration / integrationConversations.length;\n\n          // Calcular satisfacción del usuario (simulado)\n          // En una implementación real, esto podría basarse en encuestas o análisis de sentimiento\n          // Para esta simulación, generamos un valor entre 65 y 95\n          const userSatisfaction = Math.floor(Math.random() * 30) + 65;\n\n          performanceData.push({\n            integrationId: integration.id,\n            integrationName: integration.name,\n            conversationCount: integrationConversations.length,\n            responseTime,\n            resolutionRate,\n            userSatisfaction\n          });\n        }\n\n        return performanceData;\n      }\n    }\n\n    // Import PgStorage implementation\n    import { PgStorage } from './pg-storage';\n\n    // Use PostgreSQL storage instead of in-memory storage\n    export const storage = new PgStorage();\n","size_bytes":69266},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"../dist/public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2382},"shared/feature-permissions.ts":{"content":"// Sistema de permisos y limitaciones por plan de suscripción\n\nexport interface PlanLimits {\n  // Límites básicos\n  integrations: number;\n  forms: number;\n  conversations: number;\n  \n  // Funcionalidades disponibles\n  features: {\n    // Integraciones y chatbots\n    createIntegrations: boolean;\n    createForms: boolean;\n    customBranding: boolean;\n    advancedAnalytics: boolean;\n    apiAccess: boolean;\n    \n    // Automatizaciones\n    basicAutomations: boolean;\n    advancedAutomations: boolean;\n    webhooks: boolean;\n    \n    // Soporte\n    emailSupport: boolean;\n    prioritySupport: boolean;\n    phoneSupport: boolean;\n    \n    // Exportación y datos\n    basicExport: boolean;\n    advancedExport: boolean;\n    dataBackups: boolean;\n    \n    // Integraciones externas\n    crmIntegrations: boolean;\n    calendarIntegrations: boolean;\n    emailIntegrations: boolean;\n    \n    // Características avanzadas\n    multiUserAccess: boolean;\n    teamManagement: boolean;\n    whiteLabel: boolean;\n  };\n}\n\nexport const PLAN_PERMISSIONS: Record<string, PlanLimits> = {\n  free: {\n    integrations: 1,\n    forms: 1,\n    conversations: 20,\n    features: {\n      createIntegrations: true,\n      createForms: true,\n      customBranding: false,\n      advancedAnalytics: false,\n      apiAccess: false,\n      basicAutomations: false,\n      advancedAutomations: false,\n      webhooks: false,\n      emailSupport: true,\n      prioritySupport: false,\n      phoneSupport: false,\n      basicExport: false,\n      advancedExport: false,\n      dataBackups: false,\n      crmIntegrations: false,\n      calendarIntegrations: false,\n      emailIntegrations: false,\n      multiUserAccess: false,\n      teamManagement: false,\n      whiteLabel: false,\n    }\n  },\n  \n  basic: {\n    integrations: 1,\n    forms: 3,\n    conversations: 500,\n    features: {\n      createIntegrations: true,\n      createForms: true,\n      customBranding: true,\n      advancedAnalytics: false,\n      apiAccess: false,\n      basicAutomations: true,\n      advancedAutomations: false,\n      webhooks: false,\n      emailSupport: true,\n      prioritySupport: false,\n      phoneSupport: false,\n      basicExport: true,\n      advancedExport: false,\n      dataBackups: false,\n      crmIntegrations: false,\n      calendarIntegrations: false,\n      emailIntegrations: false,\n      multiUserAccess: false,\n      teamManagement: false,\n      whiteLabel: false,\n    }\n  },\n  \n  startup: {\n    integrations: 3,\n    forms: 10,\n    conversations: 2000,\n    features: {\n      createIntegrations: true,\n      createForms: true,\n      customBranding: true,\n      advancedAnalytics: true,\n      apiAccess: false,\n      basicAutomations: true,\n      advancedAutomations: true,\n      webhooks: false,\n      emailSupport: true,\n      prioritySupport: true,\n      phoneSupport: false,\n      basicExport: true,\n      advancedExport: true,\n      dataBackups: true,\n      crmIntegrations: false,\n      calendarIntegrations: true,\n      emailIntegrations: true,\n      multiUserAccess: false,\n      teamManagement: false,\n      whiteLabel: false,\n    }\n  },\n  \n  professional: {\n    integrations: 5,\n    forms: 5,\n    conversations: 200,\n    features: {\n      createIntegrations: true,\n      createForms: true,\n      customBranding: true,\n      advancedAnalytics: true,\n      apiAccess: true,\n      basicAutomations: true,\n      advancedAutomations: true,\n      webhooks: true,\n      emailSupport: true,\n      prioritySupport: true,\n      phoneSupport: true,\n      basicExport: true,\n      advancedExport: true,\n      dataBackups: true,\n      crmIntegrations: true,\n      calendarIntegrations: true,\n      emailIntegrations: true,\n      multiUserAccess: true,\n      teamManagement: true,\n      whiteLabel: false,\n    }\n  },\n  \n  enterprise: {\n    integrations: -1, // ilimitado\n    forms: -1, // ilimitado\n    conversations: 1000,\n    features: {\n      createIntegrations: true,\n      createForms: true,\n      customBranding: true,\n      advancedAnalytics: true,\n      apiAccess: true,\n      basicAutomations: true,\n      advancedAutomations: true,\n      webhooks: true,\n      emailSupport: true,\n      prioritySupport: true,\n      phoneSupport: true,\n      basicExport: true,\n      advancedExport: true,\n      dataBackups: true,\n      crmIntegrations: true,\n      calendarIntegrations: true,\n      emailIntegrations: true,\n      multiUserAccess: true,\n      teamManagement: true,\n      whiteLabel: true,\n    }\n  },\n  \n  admin: {\n    integrations: -1, // ilimitado\n    forms: -1, // ilimitado\n    conversations: -1, // ilimitado\n    features: {\n      createIntegrations: true,\n      createForms: true,\n      customBranding: true,\n      advancedAnalytics: true,\n      apiAccess: true,\n      basicAutomations: true,\n      advancedAutomations: true,\n      webhooks: true,\n      emailSupport: true,\n      prioritySupport: true,\n      phoneSupport: true,\n      basicExport: true,\n      advancedExport: true,\n      dataBackups: true,\n      crmIntegrations: true,\n      calendarIntegrations: true,\n      emailIntegrations: true,\n      multiUserAccess: true,\n      teamManagement: true,\n      whiteLabel: true,\n    }\n  }\n};\n\nexport const PLAN_NAMES: Record<string, string> = {\n  free: 'Plan Gratuito',\n  basic: 'Plan Básico',\n  startup: 'Plan Startup', \n  professional: 'Plan Profesional',\n  enterprise: 'Plan Empresarial',\n  admin: 'Administrador'\n};\n\nexport function getPlanLimits(planTier: string): PlanLimits {\n  return PLAN_PERMISSIONS[planTier] || PLAN_PERMISSIONS.free;\n}\n\nexport function hasFeatureAccess(planTier: string, feature: keyof PlanLimits['features']): boolean {\n  const limits = getPlanLimits(planTier);\n  return limits.features[feature];\n}\n\nexport function getResourceLimit(planTier: string, resource: keyof Pick<PlanLimits, 'integrations' | 'forms' | 'conversations'>): number {\n  const limits = getPlanLimits(planTier);\n  return limits[resource];\n}\n\nexport function canCreateResource(planTier: string, resource: keyof Pick<PlanLimits, 'integrations' | 'forms'>, currentCount: number): boolean {\n  const limit = getResourceLimit(planTier, resource);\n  if (limit === -1) return true; // ilimitado\n  return currentCount < limit;\n}\n\nexport function getUpgradeMessage(currentPlan: string, requiredFeature: string): string {\n  const planName = PLAN_NAMES[currentPlan] || 'Plan actual';\n  const limits = getPlanLimits(currentPlan);\n  \n  switch (requiredFeature) {\n    case 'createIntegrations':\n      const integrationLimit = limits.integrations;\n      return `Tu ${planName} ha alcanzado el límite de ${integrationLimit} ${integrationLimit === 1 ? 'integración' : 'integraciones'}. Actualiza tu plan para crear más chatbots inteligentes.`;\n    case 'createForms':\n      const formLimit = limits.forms;\n      return `Tu ${planName} ha alcanzado el límite de ${formLimit} ${formLimit === 1 ? 'formulario' : 'formularios'}. Actualiza tu plan para crear más formularios.`;\n    case 'advancedAnalytics':\n      return `Las analíticas avanzadas requieren un plan superior al ${planName}.`;\n    case 'apiAccess':\n      return `El acceso a la API requiere un plan superior al ${planName}.`;\n    case 'crmIntegrations':\n      return `Las integraciones con CRM requieren un plan superior al ${planName}.`;\n    default:\n      return `Esta funcionalidad requiere un plan superior al ${planName}.`;\n  }\n}\n\nexport function getNextPlanForFeature(currentPlan: string, feature: keyof PlanLimits['features']): string | null {\n  const plans = ['free', 'basic', 'startup', 'professional', 'enterprise'];\n  const currentIndex = plans.indexOf(currentPlan);\n  \n  for (let i = currentIndex + 1; i < plans.length; i++) {\n    const plan = plans[i];\n    if (hasFeatureAccess(plan, feature)) {\n      return plan;\n    }\n  }\n  \n  return null;\n}","size_bytes":7750},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json, date, time, numeric, unique, check, index } from \"drizzle-orm/pg-core\";\nimport { sql } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User schema\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\"),\n  apiKey: text(\"api_key\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  fullName: true,\n});\n\n// Website integration schema\nexport const integrations = pgTable(\"integrations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  url: text(\"url\").notNull(),\n  apiKey: text(\"api_key\").notNull().unique(),\n  themeColor: text(\"theme_color\").default(\"#3B82F6\"),\n  position: text(\"position\").default(\"bottom-right\"),\n  active: boolean(\"active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  visitorCount: integer(\"visitor_count\").default(0),\n  botBehavior: text(\"bot_behavior\").default(\"Sé amable y profesional, responde de manera precisa a las preguntas sobre el sitio web.\"),\n  documentsData: json(\"documents_data\").default([]), // Almacenará metadatos de los documentos subidos\n  widgetType: text(\"widget_type\").default(\"bubble\"), // Tipo de widget: \"bubble\" (original) o \"fullscreen\" (estilo ChatGPT)\n  ignoredSections: json(\"ignored_sections\").default([]), // Lista de nombres de secciones a ignorar (ej: \"Our Services\", \"Contact\", etc.)\n  description: text(\"description\"), // Descripción de la integración\n  ignoredSectionsText: text(\"ignored_sections_text\"), // Texto de secciones ignoradas para scraping\n  customization: json(\"customization\"), // Personalización del chatbot (colores, fuentes, mensajes, etc.)\n  language: text(\"language\").default(\"es\"), // Idioma del widget (es, en, fr)\n  textColor: text(\"text_color\").default(\"auto\"), // Color del texto: auto (automático), white (blanco), black (negro)\n});\n\nexport const insertIntegrationSchema = createInsertSchema(integrations).pick({\n  userId: true,\n  name: true,\n  url: true,\n  themeColor: true,\n  position: true,\n  botBehavior: true,\n  widgetType: true,\n  documentsData: true,\n  ignoredSections: true,\n  description: true,\n  language: true,\n  textColor: true,\n});\n\n// Conversation schema\nexport const conversations = pgTable(\"conversations\", {\n  id: serial(\"id\").primaryKey(),\n  integrationId: integer(\"integration_id\").references(() => integrations.id),\n  visitorId: text(\"visitor_id\"),\n  visitorName: text(\"visitor_name\"), // AGREGAR ESTA LÍNEA\n  visitorEmail: text(\"visitor_email\"), // AGREGAR ESTA LÍNEA\n  title: text(\"title\"),\n  resolved: boolean(\"resolved\").default(false),\n  duration: integer(\"duration\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).pick({\n  integrationId: true,\n  visitorId: true,\n});\n\n// Message schema\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  conversationId: integer(\"conversation_id\").references(() => conversations.id),\n  content: text(\"content\").notNull(),\n  role: text(\"role\").notNull(), // 'user' or 'assistant'\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  conversationId: true,\n  content: true,\n  role: true,\n});\n\n// Automation schema\nexport const automations = pgTable(\"automations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").default(\"active\"), // active, paused, in_testing\n  config: json(\"config\").notNull(),\n  processedCount: integer(\"processed_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastModified: timestamp(\"last_modified\").defaultNow(),\n});\n\nexport const insertAutomationSchema = createInsertSchema(automations).pick({\n  userId: true,\n  name: true,\n  description: true,\n  status: true,\n  config: true,\n});\n\n// Settings schema\nexport const settings = pgTable(\"settings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  assistantName: text(\"assistant_name\").default(\"AIPPS Assistant\"),\n  defaultGreeting: text(\"default_greeting\").default(\"👋 Hi there! I'm AIPPS, your AI assistant. How can I help you today?\"),\n  showAvailability: boolean(\"show_availability\").default(true),\n  avatarUrl: text(\"avatar_url\"),\n  userBubbleColor: text(\"user_bubble_color\").default(\"#3B82F6\"),\n  assistantBubbleColor: text(\"assistant_bubble_color\").default(\"#E5E7EB\"),\n  font: text(\"font\").default(\"inter\"),\n  conversationStyle: text(\"conversation_style\").default(\"professional\"),\n  knowledgeBase: text(\"knowledge_base\").default(\"default\"),\n  enableLearning: boolean(\"enable_learning\").default(true),\n  emailNotificationAddress: text(\"email_notification_address\"),\n  // Configuración para el chatbot de la página de bienvenida\n  welcomePageChatEnabled: boolean(\"welcome_page_chat_enabled\").default(true),\n  welcomePageChatGreeting: text(\"welcome_page_chat_greeting\").default(\"👋 ¡Hola! Soy AIPPS, tu asistente de IA. ¿En qué puedo ayudarte hoy?\"),\n  welcomePageChatBubbleColor: text(\"welcome_page_chat_bubble_color\").default(\"#111827\"),\n  welcomePageChatTextColor: text(\"welcome_page_chat_text_color\").default(\"#FFFFFF\"),\n  welcomePageChatBehavior: text(\"welcome_page_chat_behavior\").default(\"Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.\"),\n  welcomePageChatScrapingEnabled: boolean(\"welcome_page_chat_scraping_enabled\").default(false),\n  welcomePageChatScrapingDepth: integer(\"welcome_page_chat_scraping_depth\").default(5),\n  welcomePageChatScrapingData: text(\"welcome_page_chat_scraping_data\"),\n});\n\nexport const insertSettingsSchema = createInsertSchema(settings).pick({\n  userId: true,\n});\n\n// Type definitions\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Integration = typeof integrations.$inferSelect;\nexport type InsertIntegration = z.infer<typeof insertIntegrationSchema>;\n\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type Automation = typeof automations.$inferSelect;\nexport type InsertAutomation = z.infer<typeof insertAutomationSchema>;\n\nexport type Settings = typeof settings.$inferSelect;\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\n\n// Tipos de datos para analytics\nexport interface TopProduct {\n  name: string;\n  count: number;\n  percentage: number;\n}\n\nexport interface TopTopic {\n  topic: string;\n  count: number;\n  sentiment: number;\n}\n\nexport interface ConversationAnalytics {\n  topProducts: TopProduct[];\n  topTopics: TopTopic[];\n  conversationsByDay: {\n    date: string;\n    count: number;\n  }[];\n  keywordFrequency: {\n    keyword: string;\n    frequency: number;\n  }[];\n}\n\nexport interface IntegrationPerformance {\n  integrationId: number;\n  integrationName: string;\n  conversationCount: number;\n  responseTime: number;\n  resolutionRate: number;\n  userSatisfaction: number;\n}\n\nexport interface DashboardStats {\n  totalConversations: number;\n  resolutionRate: number;\n  averageResponseTime: number;\n}\n\n// Tipos para suscripciones\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripePriceId: text(\"stripe_price_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  status: text(\"status\").notNull().default(\"inactive\"),\n  tier: text(\"tier\").notNull().default(\"free\"),\n  interactionsLimit: integer(\"interactions_limit\").notNull().default(20),\n  interactionsUsed: integer(\"interactions_used\").notNull().default(0),\n  startDate: timestamp(\"start_date\", { mode: \"date\" }),\n  endDate: timestamp(\"end_date\", { mode: \"date\" }),\n  createdAt: timestamp(\"created_at\", { mode: \"date\" }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { mode: \"date\" }).defaultNow(),\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).pick({\n  userId: true,\n  stripeCustomerId: true,\n  stripePriceId: true,\n  stripeSubscriptionId: true,\n  status: true,\n  tier: true,\n  interactionsLimit: true,\n  startDate: true,\n  endDate: true,\n});\n\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\n\n// Tabla para códigos de descuento\nexport const discountCodes = pgTable(\"discount_codes\", {\n  id: serial(\"id\").primaryKey(),\n  code: text(\"code\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  discountPercentage: integer(\"discount_percentage\").notNull(),\n  applicableTier: text(\"applicable_tier\").notNull(), // Puede ser 'basic', 'professional', 'enterprise' o 'all'\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\"),\n  usageLimit: integer(\"usage_limit\"),\n  usageCount: integer(\"usage_count\").notNull().default(0),\n});\n\nexport const insertDiscountCodeSchema = createInsertSchema(discountCodes).pick({\n  code: true,\n  name: true,\n  discountPercentage: true,\n  applicableTier: true,\n  isActive: true,\n  expiresAt: true,\n  usageLimit: true,\n});\n\nexport type DiscountCode = typeof discountCodes.$inferSelect;\nexport type InsertDiscountCode = z.infer<typeof insertDiscountCodeSchema>;\n\n// Tabla para planes de precios\nexport const pricingPlans = pgTable(\"pricing_plans\", {\n  id: serial(\"id\").primaryKey(),\n  planId: text(\"plan_id\").notNull().unique(), // Identificador único del plan (free, basic, etc.)\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: integer(\"price\").notNull(), // Precio en centavos\n  priceDisplay: text(\"price_display\").notNull(),\n  currency: text(\"currency\").notNull().default(\"cad\"),\n  interval: text(\"interval\").notNull().default(\"month\"),\n  features: json(\"features\").notNull(), // Array de características\n  tier: text(\"tier\").notNull(),\n  interactionsLimit: integer(\"interactions_limit\").notNull(),\n  isAnnual: boolean(\"is_annual\").default(false),\n  discount: integer(\"discount\"),\n  popular: boolean(\"popular\").default(false),\n  available: boolean(\"available\").default(true),\n  stripeProductId: text(\"stripe_product_id\"),\n  stripePriceId: text(\"stripe_price_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertPricingPlanSchema = createInsertSchema(pricingPlans).pick({\n  planId: true,\n  name: true,\n  description: true,\n  price: true,\n  priceDisplay: true,\n  currency: true,\n  interval: true,\n  features: true,\n  tier: true,\n  interactionsLimit: true,\n  isAnnual: true,\n  discount: true,\n  popular: true,\n  available: true,\n  stripeProductId: true,\n  stripePriceId: true,\n});\n\nexport type PricingPlan = typeof pricingPlans.$inferSelect;\nexport type InsertPricingPlan = z.infer<typeof insertPricingPlanSchema>;\n\n// Tabla para almacenar información del sitio web scrapeado\nexport const sitesContent = pgTable(\"sites_content\", {\n  id: serial(\"id\").primaryKey(),\n  integrationId: integer(\"integration_id\").notNull().references(() => integrations.id, { onDelete: \"cascade\" }),\n  url: text(\"url\").notNull(),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const insertSitesContentSchema = createInsertSchema(sitesContent).pick({\n  integrationId: true,\n  url: true,\n  title: true,\n  content: true,\n});\n\nexport type SiteContent = typeof sitesContent.$inferSelect;\nexport type InsertSiteContent = z.infer<typeof insertSitesContentSchema>;\n\n// Modelo para formularios\nexport const forms = pgTable(\"forms\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  slug: text(\"slug\").notNull().unique(),\n  type: text(\"type\").default(\"standard\"), // standard, waitlist, contact, survey, etc.\n  published: boolean(\"published\").default(false),\n  structure: json(\"structure\").notNull(), // Estructura del formulario (campos, configuración, etc.)\n  styling: json(\"styling\"), // Estilos personalizados\n  settings: json(\"settings\"), // Configuración adicional (notificaciones, redirecciones, etc.)\n  language: text(\"language\").default(\"es\"), // Idioma del formulario: es, en, fr\n  responseCount: integer(\"response_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertFormSchema = createInsertSchema(forms).pick({\n  userId: true,\n  title: true,\n  description: true,\n  slug: true,\n  type: true,\n  published: true,\n  structure: true,\n  styling: true,\n  settings: true,\n  language: true,\n});\n\n// Modelo para plantillas de formularios\nexport const formTemplates = pgTable(\"form_templates\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // standard, waitlist, contact, survey, etc.\n  thumbnail: text(\"thumbnail\"),\n  structure: json(\"structure\").notNull(), // Estructura predefinida de la plantilla\n  styling: json(\"styling\"), // Estilos predefinidos\n  settings: json(\"settings\"), // Configuración predefinida\n  isDefault: boolean(\"is_default\").default(false),\n  createdBy: integer(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertFormTemplateSchema = createInsertSchema(formTemplates).pick({\n  name: true,\n  description: true,\n  type: true,\n  thumbnail: true,\n  structure: true,\n  styling: true,\n  settings: true,\n  isDefault: true,\n  createdBy: true,\n});\n\n// Modelo para respuestas de formularios\nexport const formResponses = pgTable(\"form_responses\", {\n  id: serial(\"id\").primaryKey(),\n  formId: integer(\"form_id\").references(() => forms.id, { onDelete: \"cascade\" }),\n  data: json(\"data\").notNull(), // Datos de la respuesta\n  metadata: json(\"metadata\"), // Metadatos adicionales (IP, user agent, etc.)\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n});\n\nexport const insertFormResponseSchema = createInsertSchema(formResponses).pick({\n  formId: true,\n  data: true,\n  metadata: true,\n});\n\nexport type Form = typeof forms.$inferSelect;\nexport type InsertForm = z.infer<typeof insertFormSchema>;\n\nexport type FormTemplate = typeof formTemplates.$inferSelect;\nexport type InsertFormTemplate = z.infer<typeof insertFormTemplateSchema>;\n\nexport type FormResponse = typeof formResponses.$inferSelect;\nexport type InsertFormResponse = z.infer<typeof insertFormResponseSchema>;\n\n// Modelo para agendamiento de citas\nexport const appointments = pgTable(\"appointments\", {\n  id: serial(\"id\").primaryKey(),\n  integrationId: integer(\"integration_id\").notNull().references(() => integrations.id, { onDelete: \"cascade\" }),\n  conversationId: integer(\"conversation_id\").references(() => conversations.id, { onDelete: \"cascade\" }),\n  visitorName: text(\"visitor_name\").notNull(),\n  visitorEmail: text(\"visitor_email\").notNull(),\n  purpose: text(\"purpose\").notNull(),\n  appointmentDate: date(\"appointment_date\").notNull(),\n  appointmentTime: time(\"appointment_time\").notNull(),\n  duration: integer(\"duration\").default(30), // duración en minutos\n  status: text(\"status\").default(\"pending\"), // pending, confirmed, cancelled, completed\n  calendarEventId: text(\"calendar_event_id\"), // ID del evento en Google Calendar/Outlook\n  calendarProvider: text(\"calendar_provider\"), // google, outlook, etc.\n  notes: text(\"notes\"),\n  reminderSent: boolean(\"reminder_sent\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).pick({\n  integrationId: true,\n  conversationId: true,\n  visitorName: true,\n  visitorEmail: true,\n  purpose: true,\n  appointmentDate: true,\n  appointmentTime: true,\n  duration: true,\n  notes: true,\n});\n\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\n\n// Modelo para tokens OAuth de calendario\nexport const calendarTokens = pgTable(\"calendar_tokens\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  provider: text(\"provider\").notNull(), // \"google\" o \"outlook\"\n  accessToken: text(\"access_token\").notNull(),\n  refreshToken: text(\"refresh_token\"),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertCalendarTokenSchema = createInsertSchema(calendarTokens).pick({\n  userId: true,\n  provider: true,\n  accessToken: true,\n  refreshToken: true,\n  expiresAt: true,\n});\n\nexport type CalendarToken = typeof calendarTokens.$inferSelect;\nexport type InsertCalendarToken = z.infer<typeof insertCalendarTokenSchema>;\n\n// Tabla para mensajes de bienvenida rotativos\nexport const welcomeMessages = pgTable(\"welcome_messages\", {\n  id: serial(\"id\").primaryKey(),\n  messageText: text(\"message_text\").notNull(),\n  messageTextFr: text(\"message_text_fr\"), // Traducción al francés\n  messageTextEn: text(\"message_text_en\"), // Traducción al inglés\n  messageType: text(\"message_type\").notNull(), // \"welcome\", \"automation\", \"commercial\"\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  orderIndex: integer(\"order_index\").notNull(), // Para ordenar los mensajes 1-7\n});\n\nexport const insertWelcomeMessageSchema = createInsertSchema(welcomeMessages).pick({\n  messageText: true,\n  messageTextFr: true,\n  messageTextEn: true,\n  messageType: true,\n  isActive: true,\n  expiresAt: true,\n  orderIndex: true,\n});\n// Tabla para mensajes promocionales\nexport const promotionalMessages = pgTable(\"promotional_messages\", {\n  id: serial(\"id\").primaryKey(),\n  message_text: text(\"message_text\").notNull(),\n  message_type: text(\"message_type\").notNull().default(\"ai_generated\"),\n  display_order: integer(\"display_order\").notNull().default(0),\n  language: text(\"language\").notNull().default(\"es\"),\n  is_active: boolean(\"is_active\").notNull().default(true),\n  campaign_id: integer(\"campaign_id\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertPromotionalMessageSchema = createInsertSchema(promotionalMessages).pick({\n  message_text: true,\n  message_type: true,\n  display_order: true,\n  language: true,\n  is_active: true,\n  campaign_id: true,\n});\n// Tabla para campañas de marketing  \nexport const marketingCampaigns = pgTable(\"marketing_campaigns\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  max_subscribers: integer(\"max_subscribers\").notNull(),\n  current_subscribers: integer(\"current_subscribers\").default(0),\n  start_date: timestamp(\"start_date\").defaultNow(),\n  end_date: timestamp(\"end_date\"),\n  is_active: boolean(\"is_active\").default(true),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\nexport type PromotionalMessage = typeof promotionalMessages.$inferSelect;\nexport type InsertPromotionalMessage = z.infer<typeof insertPromotionalMessageSchema>;\nexport type WelcomeMessage = typeof welcomeMessages.$inferSelect;\nexport type InsertWelcomeMessage = z.infer<typeof insertWelcomeMessageSchema>;\n\n// ===================================================================\n// NUEVAS TABLAS - SISTEMA DE PRESUPUESTOS FLEXIBLES\n// ===================================================================\n\n// Tabla de presupuestos de usuario\nexport const userBudgets = pgTable(\"user_budgets\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  monthlyBudget: numeric(\"monthly_budget\", { precision: 12, scale: 2 }).notNull(), // Presupuesto mensual con precisión decimal\n  currentSpent: numeric(\"current_spent\", { precision: 12, scale: 2 }).default(\"0.00\").notNull(), // Gasto actual del mes\n  currency: text(\"currency\").default(\"CAD\").notNull(), // Moneda del presupuesto\n  billingCycleDay: integer(\"billing_cycle_day\").default(1).notNull(), // Día del mes para reset (1-28)\n  alertThreshold50: boolean(\"alert_threshold_50\").default(true), // Alerta al 50%\n  alertThreshold80: boolean(\"alert_threshold_80\").default(true), // Alerta al 80%\n  alertThreshold90: boolean(\"alert_threshold_90\").default(true), // Alerta al 90%\n  alertThreshold100: boolean(\"alert_threshold_100\").default(true), // Alerta al 100%\n  isSuspended: boolean(\"is_suspended\").default(false), // Estado de suspensión\n  suspendedAt: timestamp(\"suspended_at\"), // Fecha de suspensión\n  lastResetAt: timestamp(\"last_reset_at\").defaultNow(), // Último reset mensual\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  // Constraint único: un presupuesto por usuario\n  uniqueUserId: unique().on(table.userId),\n  // Validaciones CHECK\n  validBillingDay: check(\"valid_billing_day\", sql`${table.billingCycleDay} >= 1 AND ${table.billingCycleDay} <= 28`),\n  positiveMonthlyBudget: check(\"positive_monthly_budget\", sql`${table.monthlyBudget} >= 0`),\n  positiveCurrentSpent: check(\"positive_current_spent\", sql`${table.currentSpent} >= 0`),\n}));\n\nexport const insertUserBudgetSchema = createInsertSchema(userBudgets).pick({\n  userId: true,\n  monthlyBudget: true,\n  currency: true,\n  billingCycleDay: true,\n  alertThreshold50: true,\n  alertThreshold80: true,\n  alertThreshold90: true,\n  alertThreshold100: true,\n}).extend({\n  // Validaciones adicionales para campos numéricos\n  monthlyBudget: z.union([z.string(), z.number()]).transform(val => Number(val)).pipe(z.number().min(0, \"Monthly budget must be positive\")),\n  billingCycleDay: z.number().int().min(1, \"Billing cycle day must be between 1 and 28\").max(28, \"Billing cycle day must be between 1 and 28\"),\n});\n\n// Tabla de costos por acción\nexport const actionCosts = pgTable(\"action_costs\", {\n  id: serial(\"id\").primaryKey(),\n  actionType: text(\"action_type\").notNull().unique(), // \"create_integration\", \"create_form\", \"send_email\", \"chat_conversation\"\n  baseCost: numeric(\"base_cost\", { precision: 12, scale: 2 }).notNull(), // Costo base con precisión decimal\n  markupPercentage: integer(\"markup_percentage\").default(30).notNull(), // Porcentaje de ganancia (default 30%)\n  finalCost: numeric(\"final_cost\", { precision: 12, scale: 2 }).notNull(), // Costo final calculado (base + markup)\n  currency: text(\"currency\").default(\"CAD\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  updateMethod: text(\"update_method\").default(\"manual\").notNull(), // \"manual\", \"ai_suggested\", \"automatic\"\n  lastUpdatedBy: integer(\"last_updated_by\").references(() => users.id), // Admin que hizo el último cambio\n  aiJustification: text(\"ai_justification\"), // Justificación de sugerencia IA\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  // Validaciones CHECK para costos\n  positiveBaseCost: check(\"positive_base_cost\", sql`${table.baseCost} >= 0`),\n  positiveFinalCost: check(\"positive_final_cost\", sql`${table.finalCost} >= 0`),\n  validMarkup: check(\"valid_markup\", sql`${table.markupPercentage} >= 0 AND ${table.markupPercentage} <= 1000`),\n}));\n\nexport const insertActionCostSchema = createInsertSchema(actionCosts).pick({\n  actionType: true,\n  baseCost: true,\n  markupPercentage: true,\n  finalCost: true,\n  currency: true,\n  isActive: true,\n  updateMethod: true,\n  lastUpdatedBy: true,\n  aiJustification: true,\n}).extend({\n  // Validaciones adicionales para campos numéricos\n  baseCost: z.union([z.string(), z.number()]).transform(val => Number(val)).pipe(z.number().min(0, \"Base cost must be positive\")),\n  finalCost: z.union([z.string(), z.number()]).transform(val => Number(val)).pipe(z.number().min(0, \"Final cost must be positive\")),\n  markupPercentage: z.number().int().min(0, \"Markup percentage must be positive\").max(1000, \"Markup percentage cannot exceed 1000%\"),\n});\n\n// Tabla de seguimiento de uso\nexport const usageTracking = pgTable(\"usage_tracking\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  actionType: text(\"action_type\").notNull().references(() => actionCosts.actionType),\n  actionCostId: integer(\"action_cost_id\").notNull().references(() => actionCosts.id), // Referencia al precio usado para auditoría\n  costApplied: numeric(\"cost_applied\", { precision: 12, scale: 2 }).notNull(), // Costo que se aplicó en el momento\n  currency: text(\"currency\").default(\"CAD\").notNull(),\n  resourceId: integer(\"resource_id\"), // ID del recurso creado (integración, formulario, etc.)\n  resourceType: text(\"resource_type\"), // Tipo de recurso (\"integration\", \"form\", \"conversation\", etc.)\n  billingMonth: text(\"billing_month\").notNull(), // YYYY-MM para agrupación mensual\n  metadata: json(\"metadata\"), // Datos adicionales específicos de la acción\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  // Índices para performance\n  userBillingIdx: index(\"usage_user_billing_idx\").on(table.userId, table.billingMonth),\n  actionTypeIdx: index(\"usage_action_type_idx\").on(table.actionType),\n  createdAtIdx: index(\"usage_created_at_idx\").on(table.createdAt),\n  // Validaciones CHECK\n  positiveCostApplied: check(\"positive_cost_applied\", sql`${table.costApplied} >= 0`),\n  validBillingMonth: check(\"valid_billing_month\", sql`${table.billingMonth} ~ '^\\\\d{4}-\\\\d{2}$'`),\n}));\n\nexport const insertUsageTrackingSchema = createInsertSchema(usageTracking).pick({\n  userId: true,\n  actionType: true,\n  actionCostId: true,\n  costApplied: true,\n  currency: true,\n  resourceId: true,\n  resourceType: true,\n  billingMonth: true,\n  metadata: true,\n}).extend({\n  // Validaciones adicionales para campos numéricos y de formato\n  costApplied: z.union([z.string(), z.number()]).transform(val => Number(val)).pipe(z.number().min(0, \"Cost applied must be positive\")),\n  billingMonth: z.string().regex(/^\\d{4}-\\d{2}$/, \"Billing month must be in YYYY-MM format\"),\n});\n\n// Tabla de alertas enviadas\nexport const sentAlerts = pgTable(\"sent_alerts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  alertType: text(\"alert_type\").notNull(), // \"threshold_50\", \"threshold_80\", \"threshold_90\", \"budget_exceeded\", \"budget_suspended\"\n  thresholdReached: integer(\"threshold_reached\"), // Porcentaje alcanzado (50, 80, 90, 100)\n  currentSpent: numeric(\"current_spent\", { precision: 12, scale: 2 }).notNull(), // Gasto al momento de la alerta\n  monthlyBudget: numeric(\"monthly_budget\", { precision: 12, scale: 2 }).notNull(), // Presupuesto mensual al momento\n  deliveryMethod: text(\"delivery_method\").notNull(), // \"email\", \"in_app\", \"push\"\n  deliveryStatus: text(\"delivery_status\").default(\"pending\").notNull(), // \"pending\", \"sent\", \"delivered\", \"failed\"\n  emailAddress: text(\"email_address\"), // Email al que se envió (si aplica)\n  messageContent: text(\"message_content\"), // Contenido del mensaje enviado\n  billingMonth: text(\"billing_month\").notNull(), // YYYY-MM para evitar spam de alertas repetidas\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  deliveredAt: timestamp(\"delivered_at\"), // Timestamp cuando se confirmó la entrega\n}, (table) => ({\n  // Constraint único anti-spam: evita alertas duplicadas para el mismo usuario, tipo, umbral y mes\n  uniqueAlert: unique().on(table.userId, table.alertType, table.thresholdReached, table.billingMonth),\n  // Índices para performance\n  userBillingAlertIdx: index(\"alerts_user_billing_idx\").on(table.userId, table.billingMonth),\n  deliveryStatusIdx: index(\"alerts_delivery_status_idx\").on(table.deliveryStatus),\n  createdAtIdx: index(\"alerts_created_at_idx\").on(table.createdAt),\n  // Validaciones CHECK\n  validThreshold: check(\"valid_threshold\", sql`${table.thresholdReached} IN (50, 80, 90, 100) OR ${table.thresholdReached} IS NULL`),\n  positiveCurrentSpent: check(\"positive_current_spent_alert\", sql`${table.currentSpent} >= 0`),\n  positiveMonthlyBudget: check(\"positive_monthly_budget_alert\", sql`${table.monthlyBudget} >= 0`),\n  validBillingMonth: check(\"valid_billing_month_alert\", sql`${table.billingMonth} ~ '^\\\\d{4}-\\\\d{2}$'`),\n}));\n\nexport const insertSentAlertSchema = createInsertSchema(sentAlerts).pick({\n  userId: true,\n  alertType: true,\n  thresholdReached: true,\n  currentSpent: true,\n  monthlyBudget: true,\n  deliveryMethod: true,\n  deliveryStatus: true,\n  emailAddress: true,\n  messageContent: true,\n  billingMonth: true,\n}).extend({\n  // Validaciones adicionales para campos numéricos y de formato\n  currentSpent: z.union([z.string(), z.number()]).transform(val => Number(val)).pipe(z.number().min(0, \"Current spent must be positive\")),\n  monthlyBudget: z.union([z.string(), z.number()]).transform(val => Number(val)).pipe(z.number().min(0, \"Monthly budget must be positive\")),\n  thresholdReached: z.number().int().refine(val => val === null || [50, 80, 90, 100].includes(val), \"Threshold must be 50, 80, 90, or 100\").optional(),\n  billingMonth: z.string().regex(/^\\d{4}-\\d{2}$/, \"Billing month must be in YYYY-MM format\"),\n});\n\n// Tipos TypeScript para las nuevas tablas\nexport type UserBudget = typeof userBudgets.$inferSelect;\nexport type InsertUserBudget = z.infer<typeof insertUserBudgetSchema>;\n\nexport type ActionCost = typeof actionCosts.$inferSelect;\nexport type InsertActionCost = z.infer<typeof insertActionCostSchema>;\n\nexport type UsageTracking = typeof usageTracking.$inferSelect;\nexport type InsertUsageTracking = z.infer<typeof insertUsageTrackingSchema>;\n\nexport type SentAlert = typeof sentAlerts.$inferSelect;\nexport type InsertSentAlert = z.infer<typeof insertSentAlertSchema>;\n","size_bytes":30712},"shared/translations.ts":{"content":"// Sistema de traducción unificado para formularios\nexport interface FormTranslations {\n  defaultDescription: string;\n  placeholders: {\n    name: string;\n    email: string;\n    phone: string;\n    message: string;\n    comments: string;\n    feedback: string;\n  };\n  labels: {\n    name: string;\n    email: string;\n    phone: string;\n    message: string;\n    comments: string;\n    feedback: string;\n    satisfaction: string;\n    recommendation: string;\n    howCanWeImprove: string;\n    hearAboutUs: string;\n    acceptTerms: string;\n  };\n  options: {\n    satisfaction: string[];\n    hearAboutUs: string[];\n    yesNo: string[];\n  };\n  buttons: {\n    submit: string;\n    submitSurvey: string;\n    joinWaitlist: string;\n    sendMessage: string;\n    subscribe: string;\n  };\n  messages: {\n    success: string;\n    error: string;\n    required: string;\n    invalidEmail: string;\n    invalidPhone: string;\n  };\n  validation: {\n    requiredField: string;\n    invalidEmailFormat: string;\n    invalidPhoneFormat: string;\n    minLength: string;\n    maxLength: string;\n  };\n}\n\nexport const translations: Record<string, FormTranslations> = {\n  es: {\n    defaultDescription: \"Por favor complete la información solicitada para comenzar.\",\n    placeholders: {\n      name: \"Su nombre\",\n      email: \"su@email.com\",\n      phone: \"Su número de teléfono\",\n      message: \"Escriba su mensaje aquí...\",\n      comments: \"Sus comentarios nos ayudan a mejorar\",\n      feedback: \"Comparta sus comentarios aquí...\"\n    },\n    labels: {\n      name: \"Nombre\",\n      email: \"Email\",\n      phone: \"Teléfono\",\n      message: \"Mensaje\",\n      comments: \"Comentarios\",\n      feedback: \"Comentarios\",\n      satisfaction: \"¿Cómo calificaría su experiencia con nosotros?\",\n      recommendation: \"Del 1 al 10, ¿qué tan probable es que nos recomiende?\",\n      howCanWeImprove: \"¿Cómo podríamos mejorar?\",\n      hearAboutUs: \"¿Cómo se enteró de nosotros?\",\n      acceptTerms: \"Acepto los términos y condiciones\"\n    },\n    options: {\n      satisfaction: [\"Excelente\", \"Buena\", \"Regular\", \"Mala\", \"Muy mala\"],\n      hearAboutUs: [\"Redes sociales\", \"Búsqueda Google\", \"Recomendación\", \"Otro\"],\n      yesNo: [\"Sí\", \"No\"]\n    },\n    buttons: {\n      submit: \"Enviar\",\n      submitSurvey: \"Enviar encuesta\",\n      joinWaitlist: \"Unirse a la lista de espera\",\n      sendMessage: \"Enviar mensaje\",\n      subscribe: \"Suscribirse\"\n    },\n    messages: {\n      success: \"¡Gracias por su envío!\",\n      error: \"Error al enviar el formulario\",\n      required: \"Este campo es obligatorio\",\n      invalidEmail: \"Email inválido\",\n      invalidPhone: \"Teléfono inválido\"\n    },\n    validation: {\n      requiredField: \"Este campo es obligatorio\",\n      invalidEmailFormat: \"Formato de email inválido\",\n      invalidPhoneFormat: \"Formato de teléfono inválido\",\n      minLength: \"Mínimo {min} caracteres\",\n      maxLength: \"Máximo {max} caracteres\"\n    }\n  },\n  en: {\n    defaultDescription: \"Please complete the requested information to get started.\",\n    placeholders: {\n      name: \"Your name\",\n      email: \"you@email.com\",\n      phone: \"Your phone number\",\n      message: \"Write your message here...\",\n      comments: \"Your comments help us improve\",\n      feedback: \"Share your feedback here...\"\n    },\n    labels: {\n      name: \"Name\",\n      email: \"Email\",\n      phone: \"Phone\",\n      message: \"Message\",\n      comments: \"Comments\",\n      feedback: \"Feedback\",\n      satisfaction: \"How would you rate your experience with us?\",\n      recommendation: \"From 1 to 10, how likely are you to recommend us?\",\n      howCanWeImprove: \"How could we improve?\",\n      hearAboutUs: \"How did you hear about us?\",\n      acceptTerms: \"I accept the terms and conditions\"\n    },\n    options: {\n      satisfaction: [\"Excellent\", \"Good\", \"Fair\", \"Poor\", \"Very poor\"],\n      hearAboutUs: [\"Social media\", \"Google search\", \"Recommendation\", \"Other\"],\n      yesNo: [\"Yes\", \"No\"]\n    },\n    buttons: {\n      submit: \"Submit\",\n      submitSurvey: \"Submit survey\",\n      joinWaitlist: \"Join waitlist\",\n      sendMessage: \"Send message\",\n      subscribe: \"Subscribe\"\n    },\n    messages: {\n      success: \"Thank you for your submission!\",\n      error: \"Error submitting form\",\n      required: \"This field is required\",\n      invalidEmail: \"Invalid email\",\n      invalidPhone: \"Invalid phone\"\n    },\n    validation: {\n      requiredField: \"This field is required\",\n      invalidEmailFormat: \"Invalid email format\",\n      invalidPhoneFormat: \"Invalid phone format\",\n      minLength: \"Minimum {min} characters\",\n      maxLength: \"Maximum {max} characters\"\n    }\n  },\n  fr: {\n    defaultDescription: \"Veuillez compléter les informations demandées pour commencer.\",\n    placeholders: {\n      name: \"Votre nom\",\n      email: \"vous@email.com\",\n      phone: \"Votre numéro de téléphone\",\n      message: \"Écrivez votre message ici...\",\n      comments: \"Vos commentaires nous aident à améliorer\",\n      feedback: \"Partagez vos commentaires ici...\"\n    },\n    labels: {\n      name: \"Nom\",\n      email: \"Email\",\n      phone: \"Téléphone\",\n      message: \"Message\",\n      comments: \"Commentaires\",\n      feedback: \"Commentaires\",\n      satisfaction: \"Comment évalueriez-vous votre expérience avec nous?\",\n      recommendation: \"De 1 à 10, quelle est la probabilité que vous nous recommandiez?\",\n      howCanWeImprove: \"Comment pourrions-nous améliorer?\",\n      hearAboutUs: \"Comment avez-vous entendu parler de nous?\",\n      acceptTerms: \"J'accepte les termes et conditions\"\n    },\n    options: {\n      satisfaction: [\"Excellent\", \"Bon\", \"Passable\", \"Mauvais\", \"Très mauvais\"],\n      hearAboutUs: [\"Réseaux sociaux\", \"Recherche Google\", \"Recommandation\", \"Autre\"],\n      yesNo: [\"Oui\", \"Non\"]\n    },\n    buttons: {\n      submit: \"Soumettre\",\n      submitSurvey: \"Soumettre l'enquête\",\n      joinWaitlist: \"Rejoindre la liste d'attente\",\n      sendMessage: \"Envoyer le message\",\n      subscribe: \"S'abonner\"\n    },\n    messages: {\n      success: \"Merci pour votre envoi!\",\n      error: \"Erreur lors de l'envoi du formulaire\",\n      required: \"Ce champ est obligatoire\",\n      invalidEmail: \"Email invalide\",\n      invalidPhone: \"Téléphone invalide\"\n    },\n    validation: {\n      requiredField: \"Ce champ est obligatoire\",\n      invalidEmailFormat: \"Format d'email invalide\",\n      invalidPhoneFormat: \"Format de téléphone invalide\",\n      minLength: \"Minimum {min} caractères\",\n      maxLength: \"Maximum {max} caractères\"\n    }\n  }\n};\n\n// Función para obtener traducción\nexport function getTranslation(language: string, key: string): string {\n  const lang = translations[language] || translations['en'];\n  const keys = key.split('.');\n  let value: any = lang;\n  \n  for (const k of keys) {\n    value = value?.[k];\n  }\n  \n  return value || key;\n}\n\n// Función para obtener todas las traducciones de un idioma\nexport function getLanguageTranslations(language: string): FormTranslations {\n  return translations[language] || translations['en'];\n}\n\n// Función para traducir opciones de un campo específico\nexport function translateFieldOptions(language: string, fieldType: string): string[] {\n  const lang = getLanguageTranslations(language);\n  \n  switch (fieldType) {\n    case 'satisfaction':\n      return lang.options.satisfaction;\n    case 'hearAboutUs':\n      return lang.options.hearAboutUs;\n    case 'yesNo':\n      return lang.options.yesNo;\n    default:\n      return [];\n  }\n}","size_bytes":7439},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport React, { lazy, Suspense } from 'react';\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport EditIntegration from \"@/pages/edit-integration\";\nimport CreateIntegration from \"@/pages/create-integration\";\nimport Analytics from \"@/pages/analytics\";\nimport GetStarted from \"@/pages/get-started\";\nimport Documentation from \"@/pages/docs\";\nimport FormsGuide from \"@/pages/forms-guide\";\nimport Pricing from \"@/pages/pricing\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport Privacy from \"@/pages/privacy\";\nimport Terms from \"@/pages/terms\";\nimport Help from \"@/pages/help\";\nimport Checkout from \"@/pages/checkout\";\nimport SubscriptionSuccess from \"@/pages/subscription-success\";\nimport SubscriptionCancel from \"@/pages/subscription-cancel\";\nimport AdminPanel from \"@/pages/admin\";\nimport FormTemplateSelection from \"@/pages/form-template-selection\";\nimport FormEditor from \"@/pages/form-editor\";\nimport FormResponses from \"@/pages/form-responses\";\nimport FormPreview from \"@/pages/form-preview\";\n// @ts-ignore - Form integration import\nimport FormIntegration from \"@/pages/form-integration\";\nimport ConversationDetails from \"@/pages/conversation-details\";\nimport IntegrationConversations from \"@/pages/integration-conversations\";\nimport IntegrationAnalytics from \"@/pages/integration-analytics\";\nimport SettingsEdit from \"@/pages/settings-edit\";\nimport DebugEnvironment from \"@/pages/debug-environment\";\nimport { ThemeProvider } from \"@/context/theme-context\";\nimport { AuthProvider } from \"@/context/auth-context\";\nimport { ProfileProvider } from \"@/context/profile-context\";\n// Importamos React-i18next directamente sin provider\n\n// Lazy load componentes que no son críticos para la carga inicial\nconst GoogleCalendarInstructions = lazy(() => import(\"@/pages/google-calendar-instructions\"));\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/get-started\" component={GetStarted} />\n      <Route path=\"/forms-guide\" component={FormsGuide} />\n      <Route path=\"/docs\" component={Documentation} />\n      <Route path=\"/pricing\" component={Pricing} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/privacy\" component={Privacy} />\n      <Route path=\"/terms\" component={Terms} />\n      <Route path=\"/help\" component={Help} />\n      <Route path=\"/checkout/:planId\" component={Checkout} />\n      <Route path=\"/dashboard/subscription/success\" component={SubscriptionSuccess} />\n      <Route path=\"/dashboard/subscription/cancel\" component={SubscriptionCancel} />\n      <Route path=\"/integrations/:id/edit\" component={EditIntegration} />\n      <Route path=\"/integrations/:id/conversations\" component={IntegrationConversations} />\n      <Route path=\"/integrations/:id/analytics\" component={IntegrationAnalytics} />\n      <Route path=\"/create-integration\" component={CreateIntegration} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/admin\" component={AdminPanel} />\n      <Route path=\"/create-form\" component={FormTemplateSelection} />\n      <Route path=\"/forms/:id/edit\" component={FormEditor} />\n      <Route path=\"/forms/:id/responses\" component={FormResponses} />\n      <Route path=\"/forms/:id/integrate\" component={FormIntegration} />\n      <Route path=\"/forms/:id\" component={FormPreview} />\n      <Route path=\"/conversations/:id\" component={ConversationDetails} />\n      <Route path=\"/settings/edit\" component={SettingsEdit} />\n      <Route path=\"/debug/environment\" component={DebugEnvironment} />\n      <Route path=\"/google-calendar-instructions\">\n        <Suspense fallback={<div className=\"container mx-auto py-10 flex items-center justify-center\">\n          <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\"></div>\n        </div>}>\n          <GoogleCalendarInstructions />\n        </Suspense>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <ProfileProvider>\n            <Router />\n            <Toaster />\n          </ProfileProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4843},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    position: relative;\n    min-height: 100vh;\n  }\n\n  /* Gradiente animado para tema claro */\n  body::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    background: linear-gradient(\n      45deg,\n      #f0f9ff,\n      #e0e7ff,\n      #fce7f3,\n      #f3e8ff,\n      #ecfdf5,\n      #fef3c7,\n      #ddd6fe,\n      #f0f9ff\n    );\n    background-size: 400% 400%;\n    animation: gradientShift 20s ease-in-out infinite;\n    will-change: background-position;\n  }\n\n  /* Gradiente animado para tema oscuro */\n  .dark body::before {\n    background: linear-gradient(\n      45deg,\n      #0f172a,\n      #1e1b4b,\n      #581c87,\n      #4c1d95,\n      #064e3b,\n      #92400e,\n      #6b21a8,\n      #0f172a\n    );\n    background-size: 400% 400%;\n    animation: gradientShift 20s ease-in-out infinite;\n  }\n\n  /* Animación del gradiente */\n  @keyframes gradientShift {\n    0% {\n      background-position: 0% 50%;\n    }\n    25% {\n      background-position: 100% 50%;\n    }\n    50% {\n      background-position: 100% 100%;\n    }\n    75% {\n      background-position: 0% 100%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  /* Asegurar que el contenido tenga el fondo apropiado */\n  #root {\n    position: relative;\n    z-index: 1;\n    background: transparent;\n  }\n\n  /* Mejorar legibilidad del texto en tarjetas transparentes */\n  .card-text-enhance {\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  }\n\n  .dark .card-text-enhance {\n    text-shadow: 0 1px 2px rgba(255, 255, 255, 0.1);\n  }\n}","size_bytes":1725},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n// Importar configuración de i18n\nimport \"./i18n/i18n\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":214},"public/static/aipi-web-widget.js":{"content":"// AIPI Widget para el sitio web principal\n(function() {\n  let widget;\n  let messageContainer;\n  let messageInput;\n  let conversationId = null;\n  let widgetConfig = {};\n  const API_KEY = \"aipi_web_internal\";\n  const SERVER_URL = window.location.origin;\n  \n  // Detectar si hay formularios AIPPS activos en la página\n  function detectActiveAippsForm() {\n    // Verificar atributo marcador del formulario\n    if (document.documentElement.hasAttribute('data-aipps-form-active')) {\n      console.log('AIPI Widget: Formulario AIPPS activo detectado por atributo');\n      return true;\n    }\n\n    // Buscar contenedores de formularios AIPPS\n    const formContainers = document.querySelectorAll('[id*=\"aipps-form\"], [class*=\"aipps-form\"], [data-aipps-form]');\n    if (formContainers.length > 0) {\n      console.log('AIPI Widget: Contenedor de formulario detectado');\n      return true;\n    }\n\n    // Buscar scripts de formulario activos\n    const formScripts = document.querySelectorAll('script[src*=\"form-embed.js\"]');\n    if (formScripts.length > 0) {\n      console.log('AIPI Widget: Script de formulario detectado');\n      return true;\n    }\n\n    // Buscar elementos del wrapper del formulario moderno\n    const modernFormWrappers = document.querySelectorAll('.aipi-modern-form-wrapper');\n    if (modernFormWrappers.length > 0) {\n      console.log('AIPI Widget: Wrapper de formulario moderno detectado');\n      return true;\n    }\n\n    return false;\n  }\n\n  function init() {\n    console.log(\"AIPI Widget para sitio web principal: Inicializando...\");\n    \n    // Verificar si hay formularios activos antes de continuar\n    if (detectActiveAippsForm()) {\n      console.log('AIPI Widget: No se iniciará el widget porque hay un formulario activo');\n      return;\n    }\n    \n    loadWidgetConfig()\n      .then(() => {\n        createWidgetDOM();\n        attachEventListeners();\n        console.log(\"AIPI Widget para sitio web principal: Inicializado correctamente\");\n      })\n      .catch(error => {\n        console.error(\"Error inicializando AIPI Widget:\", error);\n      });\n  }\n  \n  async function loadWidgetConfig() {\n    try {\n      // Intentar cargar la configuración desde el servidor\n      const response = await fetch(`${SERVER_URL}/api/widget/${API_KEY}`);\n      \n      if (!response.ok) {\n        throw new Error(`Error cargando configuración: ${response.status}`);\n      }\n      \n      widgetConfig = await response.json();\n      console.log(\"Configuración del widget cargada:\", widgetConfig);\n      \n      // Escanear el contenido de la página\n      const pageContent = scanCurrentPageContent();\n      widgetConfig.pageContext = {\n        url: window.location.href,\n        title: document.title,\n        content: pageContent\n      };\n      \n      return widgetConfig;\n    } catch (error) {\n      console.error(\"Error cargando configuración del widget:\", error);\n      // Si falla, usar configuración por defecto\n      widgetConfig = {\n        name: \"AIPI Web\",\n        themeColor: \"#6366f1\",\n        position: \"bottom-right\",\n      };\n      return widgetConfig;\n    }\n  }\n  \n  function scanCurrentPageContent() {\n    try {\n      // Obtener contenido principal excluyendo scripts, estilos y elementos de navegación\n      const contentElements = document.querySelectorAll('main, article, .content, #content, [role=\"main\"]');\n      \n      let textContent = '';\n      \n      if (contentElements.length > 0) {\n        // Si encontramos elementos específicos de contenido, extraer de esos\n        contentElements.forEach(el => {\n          textContent += el.textContent + ' ';\n        });\n      } else {\n        // Si no, extraer de body excluyendo scripts, styles, etc.\n        const body = document.body;\n        const clonedBody = body.cloneNode(true);\n        \n        // Remover elementos que no contienen contenido útil\n        const elementsToRemove = clonedBody.querySelectorAll('script, style, nav, header, footer, iframe, svg, noscript, .navigation, #navigation');\n        elementsToRemove.forEach(el => el.remove());\n        \n        textContent = clonedBody.textContent || '';\n      }\n      \n      // Limpieza básica del texto\n      textContent = textContent.replace(/\\s+/g, ' ').trim();\n      \n      // Limitar la longitud del contenido para evitar problemas con la API\n      const maxLength = 5000;\n      if (textContent.length > maxLength) {\n        textContent = textContent.substring(0, maxLength) + '...';\n      }\n      \n      return textContent;\n    } catch (error) {\n      console.error(\"Error escaneando contenido de la página:\", error);\n      return \"\";\n    }\n  }\n  \n  function createWidgetDOM() {\n    // Crear el contenedor principal del widget\n    widget = document.createElement('div');\n    widget.className = 'aipi-widget';\n    widget.style.position = 'fixed';\n    widget.style.zIndex = '9999';\n    widget.style.backgroundColor = '#1E293B';\n    widget.style.borderRadius = '8px';\n    widget.style.boxShadow = '0 8px 30px rgba(0, 0, 0, 0.2)';\n    widget.style.overflow = 'hidden';\n    widget.style.transition = 'all 0.3s ease';\n    widget.style.width = '400px';\n    widget.style.height = '500px';\n    widget.style.display = 'flex';\n    widget.style.flexDirection = 'column';\n    \n    // Posicionar el widget según la configuración\n    const position = widgetConfig.position || 'bottom-right';\n    if (position === 'bottom-right') {\n      widget.style.right = '20px';\n      widget.style.bottom = '20px';\n    } else if (position === 'bottom-left') {\n      widget.style.left = '20px';\n      widget.style.bottom = '20px';\n    } else if (position === 'top-right') {\n      widget.style.right = '20px';\n      widget.style.top = '20px';\n    } else if (position === 'top-left') {\n      widget.style.left = '20px';\n      widget.style.top = '20px';\n    }\n    \n    // Crear el encabezado del widget\n    const header = document.createElement('div');\n    header.className = 'aipi-widget-header';\n    header.style.backgroundColor = widgetConfig.themeColor || '#6366f1';\n    header.style.color = '#ffffff';\n    header.style.padding = '12px 16px';\n    header.style.fontWeight = 'bold';\n    header.style.display = 'flex';\n    header.style.justifyContent = 'space-between';\n    header.style.alignItems = 'center';\n    header.style.fontFamily = 'Arial, sans-serif';\n    \n    // Título del widget\n    const title = document.createElement('div');\n    title.textContent = widgetConfig.name || 'AIPI Chat';\n    \n    // Botones del encabezado\n    const buttons = document.createElement('div');\n    buttons.style.display = 'flex';\n    buttons.style.gap = '8px';\n    \n    // Botón de minimizar\n    const minimizeButton = document.createElement('button');\n    minimizeButton.innerHTML = '&minus;';\n    minimizeButton.className = 'aipi-widget-minimize';\n    minimizeButton.style.background = 'none';\n    minimizeButton.style.border = 'none';\n    minimizeButton.style.color = '#ffffff';\n    minimizeButton.style.fontSize = '16px';\n    minimizeButton.style.cursor = 'pointer';\n    minimizeButton.setAttribute('aria-label', 'Minimize');\n    \n    // Botón de cerrar\n    const closeButton = document.createElement('button');\n    closeButton.innerHTML = '&times;';\n    closeButton.className = 'aipi-widget-close';\n    closeButton.style.background = 'none';\n    closeButton.style.border = 'none';\n    closeButton.style.color = '#ffffff';\n    closeButton.style.fontSize = '18px';\n    closeButton.style.cursor = 'pointer';\n    closeButton.setAttribute('aria-label', 'Close');\n    \n    buttons.appendChild(minimizeButton);\n    buttons.appendChild(closeButton);\n    header.appendChild(title);\n    header.appendChild(buttons);\n    \n    // Contenedor de mensajes\n    messageContainer = document.createElement('div');\n    messageContainer.className = 'aipi-widget-messages';\n    messageContainer.style.flex = '1';\n    messageContainer.style.overflowY = 'auto';\n    messageContainer.style.padding = '16px';\n    messageContainer.style.backgroundColor = '#0F172A';\n    messageContainer.style.fontFamily = 'Arial, sans-serif';\n    \n    // Área de entrada de mensajes\n    const inputArea = document.createElement('div');\n    inputArea.className = 'aipi-widget-input-area';\n    inputArea.style.display = 'flex';\n    inputArea.style.padding = '12px';\n    inputArea.style.backgroundColor = '#1E293B';\n    inputArea.style.borderTop = '1px solid #2D3748';\n    \n    messageInput = document.createElement('input');\n    messageInput.className = 'aipi-widget-input';\n    messageInput.type = 'text';\n    messageInput.placeholder = 'Type your message...';\n    messageInput.style.flex = '1';\n    messageInput.style.padding = '8px 12px';\n    messageInput.style.border = '1px solid #2D3748';\n    messageInput.style.borderRadius = '4px';\n    messageInput.style.backgroundColor = '#1E293B';\n    messageInput.style.color = '#E2E8F0';\n    messageInput.style.fontFamily = 'Arial, sans-serif';\n    messageInput.style.fontSize = '14px';\n    \n    const sendButton = document.createElement('button');\n    sendButton.className = 'aipi-widget-send';\n    sendButton.innerHTML = `\n      <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M22 2L11 13\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        <path d=\"M22 2L15 22L11 13L2 9L22 2Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n      </svg>\n    `;\n    sendButton.style.marginLeft = '8px';\n    sendButton.style.padding = '8px';\n    sendButton.style.background = widgetConfig.themeColor || '#6366f1';\n    sendButton.style.border = 'none';\n    sendButton.style.borderRadius = '4px';\n    sendButton.style.color = '#ffffff';\n    sendButton.style.cursor = 'pointer';\n    sendButton.style.display = 'flex';\n    sendButton.style.alignItems = 'center';\n    sendButton.style.justifyContent = 'center';\n    \n    inputArea.appendChild(messageInput);\n    inputArea.appendChild(sendButton);\n    \n    // Ensamblar el widget\n    widget.appendChild(header);\n    widget.appendChild(messageContainer);\n    widget.appendChild(inputArea);\n    \n    // Añadir widget al DOM\n    document.body.appendChild(widget);\n    \n    // Iniciar conversación\n    startConversation();\n  }\n  \n  function attachEventListeners() {\n    // Manejar envío mediante botón\n    const sendButton = document.querySelector('.aipi-widget-send');\n    if (sendButton) {\n      sendButton.addEventListener('click', sendMessage);\n    }\n    \n    // Manejar envío mediante Enter\n    messageInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        sendMessage();\n      }\n    });\n    \n    // Manejar minimizar\n    const minimizeButton = document.querySelector('.aipi-widget-minimize');\n    if (minimizeButton) {\n      minimizeButton.addEventListener('click', () => {\n        widget.style.height = '45px';\n        messageContainer.style.display = 'none';\n        document.querySelector('.aipi-widget-input-area').style.display = 'none';\n        \n        // Cambiar el botón de minimizar a maximizar\n        minimizeButton.innerHTML = '&#43;'; // Símbolo \"+\"\n        minimizeButton.classList.replace('aipi-widget-minimize', 'aipi-widget-maximize');\n        \n        // Añadir nuevo manejador de eventos para maximizar\n        minimizeButton.removeEventListener('click', arguments.callee);\n        minimizeButton.addEventListener('click', () => {\n          widget.style.height = '500px';\n          messageContainer.style.display = 'block';\n          document.querySelector('.aipi-widget-input-area').style.display = 'flex';\n          \n          // Cambiar de nuevo a botón de minimizar\n          minimizeButton.innerHTML = '&minus;';\n          minimizeButton.classList.replace('aipi-widget-maximize', 'aipi-widget-minimize');\n          \n          // Scroll al fondo\n          scrollToBottom();\n        });\n      });\n    }\n    \n    // Manejar cerrar\n    const closeButton = document.querySelector('.aipi-widget-close');\n    if (closeButton) {\n      closeButton.addEventListener('click', () => {\n        widget.style.display = 'none';\n      });\n    }\n  }\n  \n  async function startConversation() {\n    try {\n      showTypingIndicator(true);\n      \n      // Crear nueva conversación\n      const response = await fetch(`${SERVER_URL}/api/widget/${API_KEY}/conversation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userAgent: navigator.userAgent,\n          referrer: document.referrer,\n          pageContext: widgetConfig.pageContext\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error creating conversation');\n      }\n      \n      const data = await response.json();\n      conversationId = data.id;\n      \n      // Mostrar mensaje de bienvenida personalizado\n      addMessage(data.welcomeMessage || \"👋 Hi there! I'm AIPI, your AI assistant. How can I help you today?\", 'assistant');\n      \n      showTypingIndicator(false);\n    } catch (error) {\n      console.error('Error starting conversation:', error);\n      addMessage(\"Lo siento, hubo un problema al iniciar la conversación. Por favor, intenta de nuevo.\", 'assistant');\n      showTypingIndicator(false);\n    }\n  }\n  \n  async function sendMessage() {\n    const message = messageInput.value.trim();\n    \n    if (!message || !conversationId) return;\n    \n    // Limpia el input\n    messageInput.value = '';\n    \n    // Añadir mensaje del usuario al chat\n    addMessage(message, 'user');\n    \n    // Mostrar indicador de escritura\n    showTypingIndicator(true);\n    \n    try {\n      // Enviar mensaje al servidor\n      const response = await fetch(`${SERVER_URL}/api/widget/${API_KEY}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          conversationId,\n          content: message,\n          role: 'user',\n          pageContext: widgetConfig.pageContext\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error sending message');\n      }\n      \n      // Esperar respuesta\n      const data = await response.json();\n      \n      // Ocultar indicador de escritura\n      showTypingIndicator(false);\n      \n      // Mostrar respuesta del asistente\n      addMessage(data.content, 'assistant');\n      \n      // Hacer scroll hacia abajo\n      scrollToBottom();\n      \n    } catch (error) {\n      console.error('Error en la conversación:', error);\n      showTypingIndicator(false);\n      addMessage(\"Lo siento, no pude procesar tu mensaje. Por favor, intenta de nuevo.\", 'assistant');\n    }\n  }\n  \n  // Función para detectar si un color es oscuro\n  function isColorDark(color) {\n    // Convertir color hex a RGB\n    let hex = color.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Calcular luminancia\n    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n    \n    // Si la luminancia es menor a 0.5, es un color oscuro\n    return luminance < 0.5;\n  }\n\n  // Función para obtener color de texto con contraste adecuado\n  function getContrastTextColor(backgroundColor) {\n    if (!backgroundColor || typeof backgroundColor !== 'string') {\n      return '#1f2937'; // Por defecto texto oscuro\n    }\n    \n    // Convertir a hex limpio\n    let hex = backgroundColor.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    if (hex.length !== 6) {\n      return '#1f2937'; // Por defecto si formato es inválido\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Calcular luminancia relativa usando fórmula WCAG 2.1\n    const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n    \n    // Si la luminancia es menor a 0.6, usar texto blanco (más estricto)\n    return luminance < 0.6 ? '#ffffff' : '#1f2937';\n  }\n\n  // Función para generar paleta de colores pasteles basada en el color principal\n  function generatePastelPalette(baseColor) {\n    let hex = baseColor;\n    if (!hex || typeof hex !== 'string') {\n      hex = '#6366f1'; // Color por defecto si no hay color\n    }\n    \n    hex = hex.replace('#', '');\n    if (hex.length !== 6) {\n      hex = '6366f1'; // Fallback si el formato es incorrecto\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Crear tonos pasteles más visibles\n    const pastelLight = `rgba(${Math.round(r + (255 - r) * 0.8)}, ${Math.round(g + (255 - g) * 0.8)}, ${Math.round(b + (255 - b) * 0.8)}, 0.7)`;\n    const pastelMedium = `rgba(${Math.round(r + (255 - r) * 0.6)}, ${Math.round(g + (255 - g) * 0.6)}, ${Math.round(b + (255 - b) * 0.6)}, 0.8)`;\n    const pastelDark = `rgba(${Math.round(r + (255 - r) * 0.4)}, ${Math.round(g + (255 - g) * 0.4)}, ${Math.round(b + (255 - b) * 0.4)}, 0.9)`;\n    \n    return {\n      light: pastelLight,\n      medium: pastelMedium,\n      dark: pastelDark,\n      accent: '#' + hex\n    };\n  }\n\n  // Función para formatear respuestas del chatbot con estilo enriquecido\n  function formatBotResponse(text) {\n    if (!text) return '';\n    \n    const palette = generatePastelPalette(widgetConfig.themeColor || '#6366f1');\n    const themeColor = widgetConfig.themeColor || '#6366f1';\n    const isDarkBubble = isColorDark(themeColor);\n    \n    // Colores de texto basados en el contraste de la burbuja\n    // Para burbujas oscuras (fondo claro): texto oscuro\n    // Para burbujas claras (fondo oscuro): texto claro\n    const titleColor = isDarkBubble ? '#1f2937' : '#f9fafb';\n    const bodyColor = isDarkBubble ? '#374151' : '#e5e7eb';\n    const accentColor = isDarkBubble ? themeColor : '#60a5fa';\n    \n    // Escape HTML para prevenir XSS\n    let safeText = escapeHTML(text);\n    \n    // Formatear títulos principales (líneas que empiezan con #) - SIN fondos pasteles para widget interno\n    safeText = safeText.replace(/^# (.+)$/gm, \n      `<h1 style=\"font-size: 19px; font-weight: 700; color: ${titleColor}; margin: 16px 0 12px 0; line-height: 1.3; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; border-bottom: 2px solid ${accentColor}; padding-bottom: 6px;\">$1</h1>`\n    );\n    \n    // Formatear subtítulos (líneas que empiezan con ##)\n    safeText = safeText.replace(/^## (.+)$/gm, \n      `<h2 style=\"font-size: 17px; font-weight: 600; color: ${titleColor}; margin: 14px 0 10px 0; line-height: 1.4; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\">$1</h2>`\n    );\n    \n    // Formatear subtítulos de tercer nivel (líneas que empiezan con ###) - SIN fondos pasteles para widget interno\n    safeText = safeText.replace(/^### (.+)$/gm, \n      `<h3 style=\"font-size: 15px; font-weight: 600; color: ${titleColor}; margin: 12px 0 8px 0; line-height: 1.4; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; border-left: 3px solid ${accentColor}; padding: 8px 12px; border-radius: 5px;\">$1</h3>`\n    );\n    \n    // Formatear texto en negrita (**texto**) - SIN fondos pasteles para widget interno\n    safeText = safeText.replace(/\\*\\*(.+?)\\*\\*/g, \n      `<strong style=\"font-weight: 600; color: ${titleColor};\">$1</strong>`\n    );\n    \n    // Formatear texto destacado (*texto*) - SIN fondos pasteles para widget interno\n    safeText = safeText.replace(/\\*(.+?)\\*/g, \n      `<em style=\"font-style: italic; color: ${accentColor}; font-weight: 500;\">$1</em>`\n    );\n    \n    // Formatear listas numeradas (1. texto) - SIN fondos pasteles para widget interno\n    safeText = safeText.replace(/^\\d+\\.\\s(.+)$/gm, \n      `<div style=\"margin: 8px 0; padding: 10px 12px; border-left: 3px solid ${accentColor}; border-radius: 5px;\"><span style=\"font-weight: 500; color: ${titleColor}; font-size: 14px;\">$1</span></div>`\n    );\n    \n    // Formatear listas con viñetas (- texto) - SIN fondos pasteles para widget interno\n    safeText = safeText.replace(/^-\\s(.+)$/gm, \n      `<div style=\"margin: 6px 0; padding: 8px 10px; border-left: 2px solid ${accentColor}; border-radius: 4px;\"><span style=\"color: ${bodyColor}; font-size: 14px;\">• $1</span></div>`\n    );\n    \n    // Formatear enlaces - SIN fondos pasteles para widget interno\n    safeText = safeText.replace(/(https?:\\/\\/[^\\s]+)/g, \n      `<a href=\"$1\" target=\"_blank\" style=\"color: ${accentColor}; text-decoration: underline; font-weight: 500; transition: all 0.2s;\">$1</a>`\n    );\n    \n    // Formatear párrafos (líneas que no son títulos ni listas)\n    const lines = safeText.split('\\n');\n    const formattedLines = lines.map(line => {\n      line = line.trim();\n      if (!line) return '<br style=\"margin: 6px 0;\">';\n      \n      // Si no es título, lista o ya tiene formato HTML, envolver en párrafo\n      if (!line.match(/^<(h1|h2|div|a)/)) {\n        return `<p style=\"margin: 8px 0; line-height: 1.6; color: ${bodyColor}; font-size: 15px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\">${line}</p>`;\n      }\n      \n      return line;\n    });\n    \n    return formattedLines.join('');\n  }\n\n  // Función auxiliar para escapar HTML\n  function escapeHTML(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  function addMessage(content, role) {\n    const messageElement = document.createElement('div');\n    messageElement.className = `aipi-message aipi-message-${role}`;\n    messageElement.style.marginBottom = '12px';\n    messageElement.style.maxWidth = '80%';\n    messageElement.style.padding = '10px 14px';\n    messageElement.style.borderRadius = '18px';\n    messageElement.style.fontSize = '14px';\n    messageElement.style.lineHeight = '1.5';\n    messageElement.style.wordBreak = 'break-word';\n    \n    if (role === 'user') {\n      messageElement.style.backgroundColor = '#3B82F6';\n      messageElement.style.color = '#FFFFFF';\n      messageElement.style.marginLeft = 'auto';\n      messageElement.style.borderBottomRightRadius = '4px';\n    } else {\n      // Colores dinámicos basados en el tema principal con contraste adecuado\n      const themeColor = widgetConfig.themeColor || '#6366f1';\n      const isDarkBubble = isColorDark(themeColor);\n      \n      // Determinar contraste basado en luminancia más estricta - FORZAR BLANCO PARA DEBUG\n      const assistantBgColor = themeColor;\n      const assistantTextColor = getContrastTextColor(themeColor);\n      \n      messageElement.style.backgroundColor = assistantBgColor;\n      messageElement.style.color = assistantTextColor;\n      messageElement.style.marginRight = 'auto';\n      messageElement.style.borderBottomLeftRadius = '4px';\n    }\n    \n    // Formatear el contenido según el rol del mensaje\n    if (role === 'assistant') {\n      messageElement.innerHTML = formatBotResponse(content);\n    } else {\n      messageElement.innerHTML = formatMessage(content);\n    }\n    \n    messageContainer.appendChild(messageElement);\n    scrollToBottom();\n  }\n  \n  function showTypingIndicator(show) {\n    // Remover indicador existente si hay uno\n    const existingIndicator = document.querySelector('.aipi-typing-indicator');\n    if (existingIndicator) {\n      existingIndicator.remove();\n    }\n    \n    if (show) {\n      const indicator = document.createElement('div');\n      indicator.className = 'aipi-typing-indicator';\n      indicator.style.display = 'flex';\n      indicator.style.padding = '10px 14px';\n      \n      // Aplicar colores dinámicos también al indicador de escritura\n      const themeColor = widgetConfig.themeColor || '#6366f1';\n      const assistantBgColor = themeColor;\n      \n      indicator.style.backgroundColor = assistantBgColor;\n      indicator.style.borderRadius = '18px';\n      indicator.style.marginBottom = '12px';\n      indicator.style.maxWidth = '80%';\n      indicator.style.marginRight = 'auto';\n      indicator.style.borderBottomLeftRadius = '4px';\n      \n      const dots = document.createElement('div');\n      dots.style.display = 'flex';\n      dots.style.alignItems = 'center';\n      dots.innerHTML = `\n        <span style=\"width: 8px; height: 8px; margin-right: 4px; background-color: #A0AEC0; border-radius: 50%; display: inline-block; animation: aipi-typing 1s infinite; animation-delay: 0s;\"></span>\n        <span style=\"width: 8px; height: 8px; margin-right: 4px; background-color: #A0AEC0; border-radius: 50%; display: inline-block; animation: aipi-typing 1s infinite; animation-delay: 0.2s;\"></span>\n        <span style=\"width: 8px; height: 8px; background-color: #A0AEC0; border-radius: 50%; display: inline-block; animation: aipi-typing 1s infinite; animation-delay: 0.4s;\"></span>\n      `;\n      \n      // Añadir animación CSS\n      const style = document.createElement('style');\n      style.textContent = `\n        @keyframes aipi-typing {\n          0% { opacity: 0.3; transform: scale(0.8); }\n          50% { opacity: 1; transform: scale(1); }\n          100% { opacity: 0.3; transform: scale(0.8); }\n        }\n      `;\n      document.head.appendChild(style);\n      \n      indicator.appendChild(dots);\n      messageContainer.appendChild(indicator);\n      scrollToBottom();\n    }\n  }\n  \n  function scrollToBottom() {\n    messageContainer.scrollTop = messageContainer.scrollHeight;\n  }\n  \n  function formatMessage(text) {\n    if (!text) return '';\n    \n    // Escape HTML para prevenir XSS\n    let safeText = escapeHTML(text);\n    \n    // Convertir URLs en enlaces\n    safeText = safeText.replace(\n      /(https?:\\/\\/[^\\s]+)/g, \n      '<a href=\"$1\" target=\"_blank\" style=\"color: #63B3ED; text-decoration: underline;\">$1</a>'\n    );\n    \n    // Convertir saltos de línea en <br>\n    safeText = safeText.replace(/\\n/g, '<br>');\n    \n    return safeText;\n  }\n  \n  function escapeHTML(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n  \n  // Inicializar cuando el DOM esté listo\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n})();","size_bytes":26331},"public/static/chatgpt-embed.js":{"content":"/*\n * AIPI Fullscreen Chat Widget (ChatGPT Style)\n * \n * Versión que emula la interfaz de ChatGPT para una experiencia más familiar.\n * Este script crea un botón flotante que al hacer clic abre un chat en pantalla completa.\n */\n(function() {\n  // Función para obtener traducciones según el idioma configurado en la integración\n  function getTranslations(language = null) {\n    // Usar el idioma de la integración, luego el del navegador como fallback\n    const lang = language || config.language || navigator.language.substring(0, 2);\n    const translations = {\n      es: {\n        placeholder: \"Escribe tu mensaje...\",\n        newConversation: \"Nueva conversación\"\n      },\n      en: {\n        placeholder: \"Type your message...\",\n        newConversation: \"New conversation\"\n      },\n      fr: {\n        placeholder: \"Tapez votre message...\",\n        newConversation: \"Nouvelle conversation\"\n      }\n    };\n    return translations[lang] || translations.en;\n  }\n  \n  let t = getTranslations(); // Se actualizará después de cargar la configuración\n  \n  // Configuración inicial y datos de estado\n  let config = {\n    apiKey: '',\n    serverUrl: window.location.origin,\n    mainColor: '#19c37d', // Color verde típico de ChatGPT\n    title: 'AIPI Assistant',\n    greetingMessage: '¡Hola! Soy un asistente virtual. ¿En qué puedo ayudarte hoy?',\n    position: 'bottom-right'\n  };\n  \n  let conversationId = null;\n  let visitorId = localStorage.getItem('aipi_visitor_id') || \n    'visitor_' + Math.random().toString(36).substring(2, 15);\n  \n  // Guardar ID de visitante\n  localStorage.setItem('aipi_visitor_id', visitorId);\n  \n  // Inicializar widget\n  document.addEventListener('DOMContentLoaded', initialize);\n  \n  // Detectar si hay formularios AIPPS activos en la página\n  function detectActiveAippsForm() {\n    // Verificar atributo marcador del formulario\n    if (document.documentElement.hasAttribute('data-aipps-form-active')) {\n      console.log('AIPI Widget: Formulario AIPPS activo detectado por atributo');\n      return true;\n    }\n\n    // Buscar contenedores de formularios AIPPS\n    const formContainers = document.querySelectorAll('[id*=\"aipps-form\"], [class*=\"aipps-form\"], [data-aipps-form]');\n    if (formContainers.length > 0) {\n      console.log('AIPI Widget: Contenedor de formulario detectado');\n      return true;\n    }\n\n    // Buscar scripts de formulario activos\n    const formScripts = document.querySelectorAll('script[src*=\"form-embed.js\"]');\n    if (formScripts.length > 0) {\n      console.log('AIPI Widget: Script de formulario detectado');\n      return true;\n    }\n\n    // Buscar elementos del wrapper del formulario moderno\n    const modernFormWrappers = document.querySelectorAll('.aipi-modern-form-wrapper');\n    if (modernFormWrappers.length > 0) {\n      console.log('AIPI Widget: Wrapper de formulario moderno detectado');\n      return true;\n    }\n\n    return false;\n  }\n\n  // Función principal de inicialización\n  function initialize() {\n    console.log('AIPI Widget: Inicializando...');\n    \n    // Verificar si hay formularios activos antes de continuar\n    if (detectActiveAippsForm()) {\n      console.log('AIPI Widget: No se iniciará el widget porque hay un formulario activo');\n      return;\n    }\n    \n    try {\n      // Cargar configuración\n      loadConfig();\n      \n      // Crear elementos del DOM\n      createWidgetElements();\n      \n      // Adjuntar eventos\n      attachEvents();\n      \n      console.log('AIPI Widget: Inicializado correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al inicializar el widget AIPI: ' + error.message);\n    }\n    \n    // Verificación periódica para formularios que se cargan dinámicamente\n    setInterval(() => {\n      if (detectActiveAippsForm()) {\n        const existingWidget = document.querySelector('[id*=\"aipi\"], [id*=\"chat-widget\"]');\n        if (existingWidget && existingWidget.style.display !== 'none') {\n          console.log('AIPI Widget: Verificación periódica - ocultando por formulario activo');\n          existingWidget.style.display = 'none';\n        }\n      }\n    }, 3000);\n  }\n  \n  // Cargar configuración desde el script\n  async function loadConfig() {\n    try {\n      // Obtener elemento de script\n      const scripts = document.getElementsByTagName('script');\n      let scriptElement = null;\n      \n      // Buscar el script correcto que contiene la clave API\n      for (let i = 0; i < scripts.length; i++) {\n        const src = scripts[i].src || '';\n        if (src.includes('chatgpt-embed.js')) {\n          scriptElement = scripts[i];\n          break;\n        }\n      }\n      \n      if (!scriptElement) {\n        throw new Error('No se pudo encontrar el script del widget');\n      }\n      \n      // Obtener clave API del src o atributo data\n      const scriptSrc = scriptElement.src;\n      const urlParams = new URLSearchParams(scriptSrc.split('?')[1] || '');\n      config.apiKey = urlParams.get('key') || scriptElement.getAttribute('data-api-key');\n      \n      if (!config.apiKey) {\n        throw new Error('Se requiere una clave API');\n      }\n      \n      console.log('AIPI Widget: Clave API cargada - ' + config.apiKey);\n      \n      // Obtener URL del servidor si se proporciona\n      const serverUrl = scriptElement.getAttribute('data-server-url');\n      if (serverUrl) {\n        config.serverUrl = serverUrl;\n        console.log('AIPI Widget: URL del servidor personalizada - ' + config.serverUrl);\n      } else {\n        // Extraer el dominio del script como URL del servidor\n        try {\n          const scriptUrl = new URL(scriptSrc);\n          config.serverUrl = scriptUrl.origin;\n          console.log('AIPI Widget: URL del servidor desde script - ' + config.serverUrl);\n        } catch (error) {\n          console.log('AIPI Widget: Error al extraer dominio, usando predeterminado');\n        }\n      }\n      \n      // Obtener color del tema\n      const themeColor = scriptElement.getAttribute('data-theme-color');\n      if (themeColor) config.mainColor = themeColor;\n      \n      // Obtener posición\n      const position = scriptElement.getAttribute('data-position');\n      if (position) config.position = position;\n      \n      // Obtener título\n      const title = scriptElement.getAttribute('data-title');\n      if (title) config.title = title;\n      \n      // Obtener mensaje de saludo\n      const greeting = scriptElement.getAttribute('data-greeting');\n      if (greeting) config.greetingMessage = greeting;\n      \n      // Cargar datos de integración desde el servidor\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}`);\n      if (!response.ok) {\n        throw new Error(`Error al cargar datos de integración: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Sobrescribir configuración con datos del servidor\n      if (data.integration) {\n        if (data.integration.themeColor) {\n          config.mainColor = data.integration.themeColor;\n        }\n        \n        if (data.integration.position) {\n          config.position = data.integration.position;\n        }\n        \n        if (data.integration.language) {\n          config.language = data.integration.language;\n        }\n        \n        // El botBehavior no debe usarse como mensaje de bienvenida\n        // Solo usamos defaultGreeting o welcomeMessage para mostrar al usuario\n      }\n      \n      // Actualizar traducciones con el idioma de la integración\n      t = getTranslations(config.language);\n      \n      console.log('AIPI Widget: Configuración cargada correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      throw new Error('Error al cargar la configuración: ' + error.message);\n    }\n  }\n  \n  // Crear elementos del widget\n  function createWidgetElements() {\n    try {\n      // Crear estilos\n      const styleEl = document.createElement('style');\n      styleEl.textContent = getStylesCSS();\n      document.head.appendChild(styleEl);\n      \n      // Crear contenedor del botón\n      const buttonContainer = document.createElement('div');\n      buttonContainer.id = 'aipi-chat-button-container';\n      \n      // Calcular posición del botón\n      const positionStyle = getPositionStyle(config.position);\n      buttonContainer.style.position = 'fixed';\n      buttonContainer.style.zIndex = '9998';\n      buttonContainer.style.bottom = positionStyle.bottom;\n      buttonContainer.style.right = positionStyle.right;\n      buttonContainer.style.left = positionStyle.left;\n      buttonContainer.style.top = positionStyle.top;\n      \n      // Crear botón\n      const button = document.createElement('button');\n      button.id = 'aipi-chat-button';\n      button.style.backgroundColor = config.mainColor;\n      button.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n        </svg>\n        <span>Chat</span>\n      `;\n      \n      buttonContainer.appendChild(button);\n      document.body.appendChild(buttonContainer);\n      \n      // Crear panel de chat con barra lateral\n      const chatPanel = document.createElement('div');\n      chatPanel.id = 'aipi-chat-panel';\n      chatPanel.innerHTML = `\n        <div id=\"aipi-chat-header\">\n          <div id=\"aipi-chat-header-title\">\n            <div id=\"aipi-chat-avatar\" style=\"background-color: ${config.mainColor};\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n              </svg>\n            </div>\n            ${config.title}\n          </div>\n          <button id=\"aipi-chat-close\">×</button>\n        </div>\n        \n        <div id=\"aipi-chat-body\">\n          <!-- Barra lateral con sugerencias -->\n          <div id=\"aipi-chat-sidebar\">\n            <div id=\"aipi-sidebar-header\">\n              <h3>Conversaciones sugeridas</h3>\n            </div>\n            <div id=\"aipi-suggested-topics\">\n              <!-- Estas sugerencias se generarán dinámicamente -->\n              <div class=\"aipi-topic\" data-query=\"¿Qué servicios ofrece AIPI?\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line></svg>\n                <span>¿Qué servicios ofrece AIPI?</span>\n              </div>\n              <div class=\"aipi-topic\" data-query=\"¿Cómo puedo integrar el chatbot en mi sitio web?\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line></svg>\n                <span>¿Cómo puedo integrar el chatbot?</span>\n              </div>\n              <div class=\"aipi-topic\" data-query=\"Explica cómo funciona el análisis de contenido\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line></svg>\n                <span>Análisis de contenido</span>\n              </div>\n              <div class=\"aipi-topic\" data-query=\"¿Cuáles son las ventajas de usar inteligencia artificial?\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line></svg>\n                <span>Ventajas de la IA</span>\n              </div>\n              <div class=\"aipi-topic\" data-query=\"¿Qué tipos de documentos puedo subir para entrenar al chatbot?\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line></svg>\n                <span>Documentos compatibles</span>\n              </div>\n            </div>\n            <div id=\"aipi-new-chat\">\n              <button id=\"aipi-new-chat-button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>\n${t.newConversation}\n              </button>\n            </div>\n          </div>\n          \n          <!-- Panel principal de chat -->\n          <div id=\"aipi-chat-main\">\n            <div id=\"aipi-chat-messages\">\n              <!-- Los mensajes se añadirán aquí -->\n            </div>\n            <div id=\"aipi-chat-input-area\">\n              <textarea id=\"aipi-chat-input\" placeholder=\"${t.placeholder}\" rows=\"1\"></textarea>\n              <button id=\"aipi-chat-send\" disabled style=\"background-color: ${config.mainColor};\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n                  <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      `;\n      \n      document.body.appendChild(chatPanel);\n      \n      console.log('AIPI Widget: Elementos creados correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      throw new Error('Error al crear los elementos del widget: ' + error.message);\n    }\n  }\n  \n  // Adjuntar eventos a los elementos\n  function attachEvents() {\n    try {\n      // Evento del botón para abrir el chat\n      const chatButton = document.getElementById('aipi-chat-button');\n      if (chatButton) {\n        chatButton.onclick = openChat;\n        console.log('AIPI Widget: Evento de clic adjuntado al botón de chat');\n      }\n      \n      // Evento del botón para cerrar el chat\n      const closeButton = document.getElementById('aipi-chat-close');\n      if (closeButton) {\n        closeButton.onclick = closeChat;\n      }\n      \n      // Eventos del campo de entrada\n      const inputField = document.getElementById('aipi-chat-input');\n      const sendButton = document.getElementById('aipi-chat-send');\n      \n      if (inputField && sendButton) {\n        // Auto-expandir textarea\n        inputField.addEventListener('input', function() {\n          // Restablecer altura\n          this.style.height = 'auto';\n          // Establecer nueva altura según el contenido\n          this.style.height = (this.scrollHeight) + 'px';\n          // Habilitar/deshabilitar botón según contenido\n          sendButton.disabled = !this.value.trim();\n        });\n        \n        // Enviar mensaje al presionar Enter (sin Shift)\n        inputField.addEventListener('keydown', function(e) {\n          if (e.key === 'Enter' && !e.shiftKey && this.value.trim()) {\n            e.preventDefault(); // Evitar salto de línea\n            sendMessage();\n          }\n        });\n        \n        // Enviar mensaje al hacer clic en el botón\n        sendButton.onclick = sendMessage;\n      }\n      \n      // Eventos para los temas sugeridos\n      const topicElements = document.querySelectorAll('.aipi-topic');\n      topicElements.forEach(topic => {\n        topic.addEventListener('click', function() {\n          const query = this.getAttribute('data-query');\n          if (query) {\n            const inputField = document.getElementById('aipi-chat-input');\n            if (inputField) {\n              inputField.value = query;\n              // Disparar el evento input para activar el botón\n              const event = new Event('input', { bubbles: true });\n              inputField.dispatchEvent(event);\n              // Enfocar el campo\n              inputField.focus();\n            }\n          }\n        });\n      });\n      \n      // Evento para nueva conversación\n      const newChatButton = document.getElementById('aipi-new-chat-button');\n      if (newChatButton) {\n        newChatButton.addEventListener('click', function() {\n          // Limpiar mensajes existentes\n          const messagesContainer = document.getElementById('aipi-chat-messages');\n          if (messagesContainer) {\n            messagesContainer.innerHTML = '';\n          }\n          \n          // Reiniciar conversación\n          conversationId = null;\n          startConversation();\n        });\n      }\n      \n      console.log('AIPI Widget: Todos los eventos adjuntados correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al configurar los eventos del widget: ' + error.message);\n    }\n  }\n  \n  // Abrir el chat\n  function openChat() {\n    console.log('AIPI Widget: Abriendo chat...');\n    try {\n      // Ocultar botón\n      const buttonContainer = document.getElementById('aipi-chat-button-container');\n      if (buttonContainer) {\n        buttonContainer.style.display = 'none';\n      }\n      \n      // Mostrar panel de chat\n      const chatPanel = document.getElementById('aipi-chat-panel');\n      if (chatPanel) {\n        chatPanel.style.display = 'flex';\n      }\n      \n      // Iniciar conversación si es necesario\n      if (!conversationId) {\n        startConversation();\n      }\n      \n      // Enfocar campo de entrada\n      setTimeout(function() {\n        const input = document.getElementById('aipi-chat-input');\n        if (input) input.focus();\n      }, 300);\n      \n      console.log('AIPI Widget: Chat abierto');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al abrir el chat: ' + error.message);\n    }\n  }\n  \n  // Cerrar el chat\n  function closeChat() {\n    console.log('AIPI Widget: Cerrando chat...');\n    try {\n      // Ocultar panel de chat\n      const chatPanel = document.getElementById('aipi-chat-panel');\n      if (chatPanel) {\n        chatPanel.style.display = 'none';\n      }\n      \n      // Mostrar botón\n      const buttonContainer = document.getElementById('aipi-chat-button-container');\n      if (buttonContainer) {\n        buttonContainer.style.display = 'block';\n      }\n      \n      console.log('AIPI Widget: Chat cerrado');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al cerrar el chat: ' + error.message);\n    }\n  }\n  \n  // Iniciar conversación\n  async function startConversation() {\n    console.log('AIPI Widget: Iniciando conversación...');\n    try {\n      // Extraer contenido de la página\n      const pageTitle = document.title;\n      const pageContent = document.body.innerText.substring(0, 10000); // Limitar a 10k caracteres\n      \n      // Crear conversación en el servidor\n      console.log('AIPI Widget: Creando conversación en el servidor...');\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/conversation`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          visitorId: visitorId,\n          pageContext: {\n            title: pageTitle,\n            url: window.location.href,\n            content: pageContent\n          }\n        })\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('AIPI Widget Error al crear conversación:', errorText);\n        throw new Error(`Error al crear conversación: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('AIPI Widget: Conversación creada', data);\n      conversationId = data.id;\n      \n      // Añadir mensaje de saludo\n      addMessage(config.greetingMessage, 'assistant');\n      \n      console.log('AIPI Widget: Conversación iniciada con ID', conversationId);\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      addMessage(`Lo siento, hubo un problema al iniciar la conversación: ${error.message}. Comprueba que la URL del servidor sea correcta. Puedes añadir el atributo 'data-server-url' al script con la URL completa de tu servidor.`, 'assistant');\n    }\n  }\n  \n  // Enviar mensaje\n  async function sendMessage() {\n    const inputField = document.getElementById('aipi-chat-input');\n    const message = inputField.value.trim();\n    \n    if (!message) return;\n    \n    // Limpiar campo de entrada\n    inputField.value = '';\n    inputField.style.height = 'auto'; // Restablecer altura del textarea\n    document.getElementById('aipi-chat-send').disabled = true;\n    \n    // Añadir mensaje del usuario a la interfaz\n    addMessage(message, 'user');\n    \n    // Mostrar indicador de escritura\n    showTypingIndicator(true);\n    \n    try {\n      // Iniciar conversación si es necesario\n      if (!conversationId) {\n        await startConversation();\n      }\n      \n      // Enviar mensaje al servidor\n      console.log('AIPI Widget: Enviando mensaje...', { conversationId, message });\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          conversationId: conversationId,\n          content: message,\n          role: 'user'\n        })\n      });\n      \n      // Ocultar indicador de escritura\n      showTypingIndicator(false);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('AIPI Widget Error:', errorText);\n        if (response.status === 500) {\n          addMessage('Lo siento, hay un problema temporal con el servicio. Por favor, intenta de nuevo más tarde.', 'assistant');\n        } else {\n          addMessage(`Lo siento, no pude procesar tu mensaje (Error ${response.status}). Verifica que la URL del servidor sea correcta usando el atributo 'data-server-url' en el script.`, 'assistant');\n        }\n        throw new Error(`Error al enviar mensaje: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('AIPI Widget: Respuesta recibida', data);\n      \n      // Añadir respuesta de la IA\n      if (data.aiMessage && data.aiMessage.content) {\n        addMessage(data.aiMessage.content, 'assistant');\n      } else {\n        addMessage('Recibí tu mensaje, pero no pude generar una respuesta en este momento.', 'assistant');\n      }\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      \n      // Asegurar que el indicador de escritura se oculta\n      showTypingIndicator(false);\n    }\n  }\n  \n  // Añadir mensaje a la interfaz\n  function addMessage(content, role) {\n    const messagesContainer = document.getElementById('aipi-chat-messages');\n    if (!messagesContainer) return;\n    \n    const messageEl = document.createElement('div');\n    messageEl.className = `aipi-message aipi-${role}`;\n    \n    // Contenedor interior para estilos específicos\n    const messageInner = document.createElement('div');\n    messageInner.className = 'aipi-message-content';\n    \n    // Formatear el contenido según el rol del mensaje\n    if (role === 'assistant') {\n      messageInner.innerHTML = formatBotResponse(content);\n      // Aplicar contraste automático\n      const bgColor = config.mainColor || '#19c37d';\n      messageInner.style.backgroundColor = bgColor;\n      messageInner.style.color = getContrastTextColor(bgColor);\n    } else {\n      messageInner.innerHTML = formatMessage(content);\n    }\n    \n    // Añadir avatar para mensajes del asistente\n    if (role === 'assistant') {\n      const avatar = document.createElement('div');\n      avatar.className = 'aipi-message-avatar';\n      avatar.style.backgroundColor = config.mainColor;\n      avatar.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n        </svg>\n      `;\n      messageEl.appendChild(avatar);\n    }\n    \n    // Añadir el contenido del mensaje\n    messageEl.appendChild(messageInner);\n    \n    messagesContainer.appendChild(messageEl);\n    \n    // Desplazar al fondo\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n\n  // Función para obtener color de texto con contraste adecuado\n  function getContrastTextColor(backgroundColor) {\n    if (!backgroundColor || typeof backgroundColor !== 'string') {\n      return '#1f2937';\n    }\n    \n    let hex = backgroundColor.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    if (hex.length !== 6) {\n      return '#1f2937';\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n    \n    return luminance < 0.6 ? '#ffffff' : '#1f2937';\n  }\n  \n  // Formatear mensaje para mostrar enlaces y saltos de línea\n  function formatMessage(text) {\n    if (!text) return '';\n    \n    // Escapar HTML para seguridad\n    let safeText = escapeHTML(text);\n    \n    // Convertir URLs en enlaces clicables\n    safeText = safeText.replace(\n      /(https?:\\/\\/[^\\s]+)/g, \n      '<a href=\"$1\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n    );\n    \n    // Convertir saltos de línea en etiquetas <br>\n    safeText = safeText.replace(/\\n/g, '<br>');\n    \n    return safeText;\n  }\n  \n  // Mostrar/ocultar indicador de escritura\n  function showTypingIndicator(show) {\n    const messagesContainer = document.getElementById('aipi-chat-messages');\n    if (!messagesContainer) return;\n    \n    // Eliminar indicador existente si lo hay\n    const existingIndicator = document.getElementById('aipi-typing-indicator');\n    if (existingIndicator) {\n      existingIndicator.remove();\n    }\n    \n    if (show) {\n      const indicator = document.createElement('div');\n      indicator.id = 'aipi-typing-indicator';\n      indicator.className = 'aipi-message aipi-assistant';\n      \n      const avatar = document.createElement('div');\n      avatar.className = 'aipi-message-avatar';\n      avatar.style.backgroundColor = config.mainColor;\n      avatar.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n        </svg>\n      `;\n      \n      const content = document.createElement('div');\n      content.className = 'aipi-message-content';\n      content.innerHTML = `\n        <div class=\"aipi-typing-animation\">\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n      `;\n      \n      indicator.appendChild(avatar);\n      indicator.appendChild(content);\n      \n      messagesContainer.appendChild(indicator);\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n  }\n  \n  // Escapar HTML para prevenir XSS\n  function escapeHTML(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n  \n  // Calcular posición del botón según la configuración\n  function getPositionStyle(position) {\n    const style = {\n      bottom: 'auto',\n      right: 'auto',\n      top: 'auto',\n      left: 'auto'\n    };\n    \n    switch (position) {\n      case 'bottom-right':\n        style.bottom = '20px';\n        style.right = '20px';\n        break;\n      case 'bottom-left':\n        style.bottom = '20px';\n        style.left = '20px';\n        break;\n      case 'top-right':\n        style.top = '20px';\n        style.right = '20px';\n        break;\n      case 'top-left':\n        style.top = '20px';\n        style.left = '20px';\n        break;\n      default:\n        style.bottom = '20px';\n        style.right = '20px';\n    }\n    \n    return style;\n  }\n  \n  // Función para detectar si un color es oscuro\n  function isColorDark(color) {\n    // Convertir color hex a RGB\n    let hex = color.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Calcular luminancia\n    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n    \n    // Si la luminancia es menor a 0.5, es un color oscuro\n    return luminance < 0.5;\n  }\n\n  // Función para generar paleta de colores pasteles basada en el color principal\n  function generatePastelPalette(baseColor) {\n    let hex = baseColor;\n    if (!hex || typeof hex !== 'string') {\n      hex = '#6366f1'; // Color por defecto si no hay color\n    }\n    \n    hex = hex.replace('#', '');\n    if (hex.length !== 6) {\n      hex = '6366f1'; // Fallback si el formato es incorrecto\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Crear tonos pasteles más visibles con mayor opacidad\n    const pastelLight = `rgba(${Math.round(r + (255 - r) * 0.85)}, ${Math.round(g + (255 - g) * 0.85)}, ${Math.round(b + (255 - b) * 0.85)}, 0.6)`;\n    const pastelMedium = `rgba(${Math.round(r + (255 - r) * 0.7)}, ${Math.round(g + (255 - g) * 0.7)}, ${Math.round(b + (255 - b) * 0.7)}, 0.7)`;\n    const pastelDark = `rgba(${Math.round(r + (255 - r) * 0.5)}, ${Math.round(g + (255 - g) * 0.5)}, ${Math.round(b + (255 - b) * 0.5)}, 0.8)`;\n    \n    return {\n      light: pastelLight,\n      medium: pastelMedium,\n      dark: pastelDark,\n      accent: '#' + hex\n    };\n  }\n\n  // Función para formatear respuestas del chatbot con estilo enriquecido\n  function formatBotResponse(text) {\n    if (!text) return '';\n    \n    console.log('AIPI Debug: formatBotResponse called with text:', text.substring(0, 200));\n    \n    const palette = generatePastelPalette(config.mainColor);\n    const isDarkTheme = isColorDark(config.mainColor);\n    \n    console.log('AIPI Debug: Generated palette:', palette);\n    console.log('AIPI Debug: Main color:', config.mainColor);\n    console.log('AIPI Debug: Is dark theme:', isDarkTheme);\n    \n    // Colores de texto basados en el tema\n    const titleColor = isDarkTheme ? '#f9fafb' : '#1f2937';\n    const bodyColor = isDarkTheme ? '#e5e7eb' : '#374151';\n    const accentColor = config.mainColor;\n    \n    // NO escapar HTML - trabajar directamente con el texto\n    let safeText = text;\n    \n    // Formatear títulos principales (líneas que empiezan con #) - ELIMINAR # del texto final\n    safeText = safeText.replace(/^# (.+)$/gm, \n      `<h1 style=\"font-size: 20px; font-weight: 700; color: ${titleColor}; margin: 18px 0 14px 0; line-height: 1.3; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.medium}; padding: 14px 18px; border-radius: 8px; border-left: 4px solid ${palette.accent}; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">$1</h1>`\n    );\n    \n    // Formatear subtítulos (líneas que empiezan con ##) - ELIMINAR ## del texto final\n    safeText = safeText.replace(/^## (.+)$/gm, \n      `<h2 style=\"font-size: 18px; font-weight: 600; color: ${titleColor}; margin: 16px 0 12px 0; line-height: 1.4; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.light}; padding: 12px 16px; border-radius: 6px; border-left: 3px solid ${palette.accent}; box-shadow: 0 1px 3px rgba(0,0,0,0.1);\">$1</h2>`\n    );\n    \n    // Formatear subtítulos de tercer nivel (líneas que empiezan con ###) - ELIMINAR ### del texto final\n    safeText = safeText.replace(/^### (.+)$/gm, \n      `<h3 style=\"font-size: 16px; font-weight: 600; color: ${titleColor}; margin: 14px 0 10px 0; line-height: 1.4; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.light}; padding: 10px 14px; border-left: 4px solid ${palette.accent}; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);\">$1</h3>`\n    );\n    \n    // Formatear texto en negrita (**texto**)\n    safeText = safeText.replace(/\\*\\*(.+?)\\*\\*/g, \n      `<strong style=\"font-weight: 600; color: ${titleColor}; background: ${palette.light}; padding: 2px 6px; border-radius: 4px;\">$1</strong>`\n    );\n    \n    // Formatear texto destacado (*texto*)\n    safeText = safeText.replace(/\\*(.+?)\\*/g, \n      `<em style=\"font-style: italic; color: ${accentColor}; font-weight: 500; background: ${palette.light}; padding: 1px 4px; border-radius: 3px;\">$1</em>`\n    );\n    \n    // Formatear listas numeradas (1. texto)\n    safeText = safeText.replace(/^\\d+\\.\\s(.+)$/gm, \n      `<div style=\"margin: 10px 0; padding: 12px 16px; background: ${palette.light}; border-left: 4px solid ${palette.accent}; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);\"><span style=\"font-weight: 500; color: ${titleColor}; font-size: 15px;\">$1</span></div>`\n    );\n    \n    // Formatear listas con viñetas (- texto)\n    safeText = safeText.replace(/^-\\s(.+)$/gm, \n      `<div style=\"margin: 8px 0; padding: 10px 14px; background: ${palette.light}; border-radius: 6px; border-left: 3px solid ${palette.medium}; box-shadow: 0 1px 2px rgba(0,0,0,0.05);\"><span style=\"color: ${bodyColor}; font-size: 15px;\">• $1</span></div>`\n    );\n    \n    // Formatear enlaces\n    safeText = safeText.replace(/(https?:\\/\\/[^\\s]+)/g, \n      `<a href=\"$1\" target=\"_blank\" style=\"color: ${accentColor}; text-decoration: underline; font-weight: 500; background: ${palette.light}; padding: 2px 6px; border-radius: 4px; transition: all 0.2s;\">$1</a>`\n    );\n    \n    // Formatear párrafos (líneas que no son títulos ni listas)\n    const lines = safeText.split('\\n');\n    const formattedLines = lines.map(line => {\n      line = line.trim();\n      if (!line) return '<br style=\"margin: 8px 0;\">';\n      \n      // Si no es título, lista o ya tiene formato HTML, envolver en párrafo\n      if (!line.match(/^<(h1|h2|div|a)/)) {\n        return `<p style=\"margin: 10px 0; line-height: 1.7; color: ${bodyColor}; font-size: 16px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\">${line}</p>`;\n      }\n      \n      return line;\n    });\n    \n    const finalResult = formattedLines.join('');\n    console.log('AIPI Debug: Final formatted result:', finalResult.substring(0, 300));\n    return finalResult;\n  }\n\n  // Función auxiliar para escapar HTML\n  function escapeHTML(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  // Obtener estilos CSS como string\n  function getStylesCSS() {\n    const isDarkTheme = isColorDark(config.mainColor);\n    \n    // Colores dinámicos basados en el tema\n    const panelBgColor = isDarkTheme ? '#1f2937' : '#ffffff';\n    const headerBgColor = isDarkTheme ? '#111827' : '#f9f9f9';\n    const headerTextColor = isDarkTheme ? '#f9fafb' : '#333';\n    const messagesBgColor = isDarkTheme ? '#1f2937' : '#ffffff';\n    const assistantTextColor = isDarkTheme ? '#f9fafb' : '#111827';\n    const borderColor = isDarkTheme ? '#374151' : '#e5e5e5';\n    const inputBgColor = isDarkTheme ? '#374151' : '#ffffff';\n    const inputTextColor = isDarkTheme ? '#f9fafb' : '#000000';\n    const inputBorderColor = isDarkTheme ? '#4b5563' : '#e5e5e5';\n    \n    return `\n      /* ChatGPT-like Styles for AIPI Chat Widget */\n      #aipi-chat-button-container {\n        display: block;\n        z-index: 9998;\n      }\n      \n      #aipi-chat-button {\n        width: auto;\n        height: auto;\n        border-radius: 50px;\n        color: white;\n        display: flex;\n        align-items: center;\n        cursor: pointer !important;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n        transition: all 0.3s ease;\n        padding: 12px 20px;\n        border: none;\n        outline: none;\n      }\n      \n      #aipi-chat-button:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\n      }\n      \n      #aipi-chat-button svg {\n        width: 20px;\n        height: 20px;\n        margin-right: 8px;\n      }\n      \n      /* Panel de chat en pantalla completa estilo ChatGPT */\n      #aipi-chat-panel {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: ${panelBgColor};\n        flex-direction: column;\n        z-index: 9999;\n        overflow: hidden;\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n      }\n      \n      /* Cabecera del chat */\n      #aipi-chat-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 14px 20px;\n        background-color: ${headerBgColor};\n        border-bottom: 1px solid ${borderColor};\n        height: 60px;\n      }\n      \n      #aipi-chat-header-title {\n        display: flex;\n        align-items: center;\n        font-size: 1.1rem;\n        font-weight: 600;\n        color: ${headerTextColor};\n      }\n      \n      #aipi-chat-avatar {\n        width: 32px;\n        height: 32px;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 10px;\n      }\n      \n      #aipi-chat-avatar svg {\n        width: 18px;\n        height: 18px;\n        color: white;\n      }\n      \n      #aipi-chat-close {\n        background: none;\n        border: none;\n        font-size: 24px;\n        cursor: pointer;\n        color: #666;\n        width: 32px;\n        height: 32px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        transition: background 0.2s;\n      }\n      \n      #aipi-chat-close:hover {\n        background-color: rgba(0, 0, 0, 0.1);\n      }\n      \n      /* Layout del cuerpo principal con sidebar (estilo ChatGPT) */\n      #aipi-chat-body {\n        display: flex;\n        flex: 1;\n        overflow: hidden;\n        position: relative;\n        height: calc(100% - 60px);\n      }\n      \n      /* Sidebar con sugerencias */\n      #aipi-chat-sidebar {\n        width: 260px;\n        background-color: #f9fafb;\n        border-right: 1px solid #e5e7eb;\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n        overflow-y: auto;\n      }\n      \n      #aipi-sidebar-header {\n        padding: 16px;\n        border-bottom: 1px solid #e5e7eb;\n      }\n      \n      #aipi-sidebar-header h3 {\n        font-size: 14px;\n        font-weight: 600;\n        color: #4b5563;\n        margin: 0;\n      }\n      \n      #aipi-suggested-topics {\n        flex: 1;\n        overflow-y: auto;\n        padding: 8px;\n      }\n      \n      .aipi-topic {\n        display: flex;\n        align-items: center;\n        padding: 10px 12px;\n        margin-bottom: 8px;\n        border-radius: 6px;\n        cursor: pointer;\n        transition: background-color 0.2s;\n        background-color: #fff;\n        border: 1px solid #e5e7eb;\n      }\n      \n      .aipi-topic:hover {\n        background-color: #f3f4f6;\n      }\n      \n      .aipi-topic svg {\n        color: #6b7280;\n        margin-right: 10px;\n        flex-shrink: 0;\n      }\n      \n      .aipi-topic span {\n        font-size: 13px;\n        line-height: 1.4;\n        color: #374151;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n      \n      #aipi-new-chat {\n        padding: 12px;\n        border-top: 1px solid #e5e7eb;\n      }\n      \n      #aipi-new-chat-button {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        padding: 8px 12px;\n        background-color: #fff;\n        border: 1px solid #d1d5db;\n        border-radius: 6px;\n        font-size: 13px;\n        color: #374151;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n      \n      #aipi-new-chat-button:hover {\n        background-color: #f3f4f6;\n      }\n      \n      #aipi-new-chat-button svg {\n        margin-right: 8px;\n      }\n      \n      /* Área principal de chat */\n      #aipi-chat-main {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n        overflow: hidden;\n      }\n      \n      /* Área de mensajes */\n      #aipi-chat-messages {\n        flex: 1;\n        overflow-y: auto;\n        padding: 20px 0;\n        background-color: ${messagesBgColor};\n      }\n      \n      /* Estilo de mensajes tipo ChatGPT */\n      .aipi-message {\n        display: flex;\n        padding: 14px 60px; /* Padding amplio como ChatGPT */\n        position: relative;\n        margin: 1px 0; /* Margen mínimo entre mensajes */\n      }\n      \n      .aipi-message.aipi-user {\n        background-color: #f9f9f9; /* Fondo claro para mensajes del usuario */\n      }\n      \n      .aipi-message.aipi-assistant {\n        background-color: #ffffff; /* Fondo blanco para mensajes del asistente */\n      }\n      \n      .aipi-message-avatar {\n        width: 28px;\n        height: 28px;\n        border-radius: 4px; /* Avatar cuadrado con bordes redondeados como en ChatGPT */\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 16px;\n        flex-shrink: 0;\n      }\n      \n      .aipi-message-avatar svg {\n        width: 16px;\n        height: 16px;\n        color: white;\n      }\n      \n      .aipi-message-content {\n        font-size: 16px;\n        line-height: 1.6;\n        color: ${assistantTextColor};\n        word-wrap: break-word;\n        overflow-wrap: break-word;\n        max-width: 90%;\n      }\n      \n      .aipi-message.aipi-user .aipi-message-content {\n        margin-left: 44px; /* Espacio para alinear con mensajes del asistente */\n      }\n      \n      /* Enlaces en mensajes */\n      .aipi-message-content a {\n        color: #2563eb;\n        text-decoration: underline;\n      }\n      \n      .aipi-message-content a:hover {\n        text-decoration: none;\n      }\n      \n      /* Área de entrada */\n      #aipi-chat-input-area {\n        display: flex;\n        align-items: center;\n        padding: 14px 60px 20px; /* Más padding abajo para dar espacio */\n        background-color: ${messagesBgColor};\n        border-top: 1px solid ${borderColor};\n      }\n      \n      #aipi-chat-input {\n        flex: 1;\n        padding: 12px 16px;\n        border: 1px solid ${inputBorderColor};\n        border-radius: 8px;\n        font-size: 16px;\n        line-height: 1.5;\n        resize: none;\n        min-height: 24px;\n        max-height: 200px;\n        outline: none;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n        transition: border-color 0.2s, box-shadow 0.2s;\n        background-color: ${inputBgColor};\n        color: ${inputTextColor};\n      }\n      \n      #aipi-chat-input:focus {\n        border-color: #bfdbfe;\n        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);\n      }\n      \n      #aipi-chat-send {\n        background-color: #3b82f6;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        width: 40px;\n        height: 40px;\n        margin-left: 10px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        transition: background-color 0.2s, transform 0.2s;\n      }\n      \n      #aipi-chat-send:hover:not(:disabled) {\n        background-color: #2563eb;\n        transform: translateY(-2px);\n      }\n      \n      #aipi-chat-send:disabled {\n        background-color: #cbd5e1;\n        cursor: not-allowed;\n      }\n      \n      #aipi-chat-send svg {\n        width: 18px;\n        height: 18px;\n      }\n      \n      /* Animación de \"Escribiendo...\" */\n      .aipi-typing-animation {\n        display: flex;\n        align-items: center;\n      }\n      \n      .aipi-typing-animation span {\n        height: 8px;\n        width: 8px;\n        margin: 0 2px;\n        background-color: #9ca3af;\n        border-radius: 50%;\n        display: inline-block;\n        opacity: 0.7;\n      }\n      \n      .aipi-typing-animation span:nth-child(1) {\n        animation: aipiPulse 1s infinite;\n      }\n      \n      .aipi-typing-animation span:nth-child(2) {\n        animation: aipiPulse 1s infinite 0.2s;\n      }\n      \n      .aipi-typing-animation span:nth-child(3) {\n        animation: aipiPulse 1s infinite 0.4s;\n      }\n      \n      @keyframes aipiPulse {\n        0%, 100% {\n          transform: scale(1);\n          opacity: 0.7;\n        }\n        50% {\n          transform: scale(1.2);\n          opacity: 1;\n        }\n      }\n      \n      /* Estilo para dispositivos móviles */\n      @media (max-width: 768px) {\n        #aipi-chat-sidebar {\n          display: none; /* Ocultar sidebar en móviles */\n        }\n        \n        .aipi-message {\n          padding: 12px 16px;\n        }\n        \n        #aipi-chat-input-area {\n          padding: 12px 16px 16px;\n        }\n        \n        .aipi-message-content {\n          font-size: 15px;\n        }\n      }\n    `;\n  }\n})();","size_bytes":46239},"public/static/form-button.js":{"content":"/**\n * AIPI Form Button - Botón flotante para formularios AIPI\n * Este script crea un botón flotante que permite acceder a los formularios AIPI desde cualquier página web.\n */\n(function() {\n  // Configuración por defecto\n  const DEFAULT_CONFIG = {\n    formId: '',\n    text: 'Abrir formulario',\n    position: 'bottom-right',\n    color: '#4a90e2',\n    textColor: '#FFFFFF',\n    type: 'modal',\n    icon: 'form',\n    size: 'medium',\n    radius: '4px',\n  };\n  \n  // Obtener configuración del script tag\n  const scriptTag = document.getElementById('aipi-form-button');\n  if (!scriptTag) {\n    console.error('No se pudo encontrar la etiqueta script con ID \"aipi-form-button\"');\n    return;\n  }\n  \n  // Mezclar la configuración predeterminada con los atributos data- del script\n  const config = {\n    ...DEFAULT_CONFIG,\n    formId: scriptTag.getAttribute('data-form-id') || DEFAULT_CONFIG.formId,\n    text: scriptTag.getAttribute('data-text') || DEFAULT_CONFIG.text,\n    position: scriptTag.getAttribute('data-position') || DEFAULT_CONFIG.position,\n    color: scriptTag.getAttribute('data-color') || DEFAULT_CONFIG.color,\n    textColor: scriptTag.getAttribute('data-text-color') || DEFAULT_CONFIG.textColor,\n    type: scriptTag.getAttribute('data-type') || DEFAULT_CONFIG.type,\n    icon: scriptTag.getAttribute('data-icon') || DEFAULT_CONFIG.icon,\n    size: scriptTag.getAttribute('data-size') || DEFAULT_CONFIG.size,\n    radius: scriptTag.getAttribute('data-radius') || DEFAULT_CONFIG.radius,\n  };\n  \n  // Si no se proporcionó un ID de formulario, mostrar un error\n  if (!config.formId) {\n    console.error('Se requiere un ID de formulario (data-form-id)');\n    return;\n  }\n  \n  // Inicializar cuando el DOM esté listo\n  document.addEventListener('DOMContentLoaded', initialize);\n  \n  /**\n   * Inicializar el botón flotante\n   */\n  function initialize() {\n    addStyles();\n    createFloatingButton();\n  }\n  \n  /**\n   * Agrega los estilos CSS necesarios para el botón flotante\n   */\n  function addStyles() {\n    const styleElement = document.createElement('style');\n    styleElement.textContent = `\n      /* Estilos para el botón flotante AIPI */\n      .aipi-form-button {\n        position: fixed;\n        z-index: 9999;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.15);\n        transition: all 0.3s ease;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n      }\n      \n      .aipi-form-button:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 14px rgba(0, 0, 0, 0.25);\n      }\n      \n      .aipi-form-button svg {\n        margin-right: 8px;\n      }\n      \n      /* Tamaños */\n      .aipi-form-button.small {\n        padding: 6px 12px;\n        font-size: 14px;\n      }\n      \n      .aipi-form-button.medium {\n        padding: 8px 16px;\n        font-size: 16px;\n      }\n      \n      .aipi-form-button.large {\n        padding: 12px 24px;\n        font-size: 18px;\n      }\n      \n      /* Posiciones */\n      .aipi-form-button.bottom-right {\n        bottom: 20px;\n        right: 20px;\n      }\n      \n      .aipi-form-button.bottom-left {\n        bottom: 20px;\n        left: 20px;\n      }\n      \n      .aipi-form-button.top-right {\n        top: 20px;\n        right: 20px;\n      }\n      \n      .aipi-form-button.top-left {\n        top: 20px;\n        left: 20px;\n      }\n      \n      /* Modal */\n      .aipi-form-modal {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 10000;\n        background-color: rgba(0, 0, 0, 0.5);\n        align-items: center;\n        justify-content: center;\n      }\n      \n      .aipi-form-modal-content {\n        background-color: white;\n        border-radius: 8px;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n        position: relative;\n        overflow: hidden;\n      }\n      \n      .aipi-form-modal-close {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        width: 24px;\n        height: 24px;\n        background: rgba(0, 0, 0, 0.1);\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        z-index: 1;\n      }\n      \n      .aipi-form-modal-close:hover {\n        background: rgba(0, 0, 0, 0.2);\n      }\n      \n      /* Panel deslizante */\n      .aipi-form-slidein {\n        display: none;\n        position: fixed;\n        top: 0;\n        right: 0;\n        width: 100%;\n        max-width: 400px;\n        height: 100%;\n        z-index: 10000;\n        box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);\n        transform: translateX(100%);\n        transition: transform 0.3s ease;\n      }\n      \n      .aipi-form-slidein.active {\n        transform: translateX(0);\n      }\n      \n      .aipi-form-slidein-content {\n        background-color: white;\n        width: 100%;\n        height: 100%;\n        overflow: auto;\n        position: relative;\n      }\n      \n      .aipi-form-slidein-close {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        width: 24px;\n        height: 24px;\n        background: rgba(0, 0, 0, 0.1);\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        z-index: 1;\n      }\n      \n      .aipi-form-slidein-close:hover {\n        background: rgba(0, 0, 0, 0.2);\n      }\n      \n      /* Iframe */\n      .aipi-form-iframe {\n        width: 100%;\n        height: 100%;\n        border: none;\n      }\n    `;\n    document.head.appendChild(styleElement);\n  }\n  \n  /**\n   * Crea y agrega el botón flotante al DOM\n   */\n  function createFloatingButton() {\n    const button = document.createElement('button');\n    button.className = `aipi-form-button ${config.position} ${config.size}`;\n    button.style.backgroundColor = config.color;\n    button.style.color = config.textColor; // Usar el color de texto configurado\n    button.style.borderRadius = config.radius;\n    \n    // Agregar ícono si se especificó\n    if (config.icon && config.icon !== 'none') {\n      button.innerHTML = getIconSvg(config.icon) + config.text;\n    } else {\n      button.textContent = config.text;\n    }\n    \n    // Agregar evento de clic\n    button.addEventListener('click', showForm);\n    \n    // Agregar al DOM\n    document.body.appendChild(button);\n  }\n  \n  /**\n   * Obtiene el SVG para el ícono especificado\n   */\n  function getIconSvg(icon) {\n    const icons = {\n      form: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"9\"></line><line x1=\"9\" y1=\"13\" x2=\"15\" y2=\"13\"></line><line x1=\"9\" y1=\"17\" x2=\"13\" y2=\"17\"></line></svg>',\n      contact: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path></svg>',\n      order: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"9\" cy=\"21\" r=\"1\"></circle><circle cx=\"20\" cy=\"21\" r=\"1\"></circle><path d=\"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6\"></path></svg>',\n      survey: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line><line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line><polygon points=\"10 9 9 9 8 9 9 9\"></polygon></svg>',\n    };\n    \n    return icons[icon] || '';\n  }\n  \n  /**\n   * Muestra el formulario según el tipo de visualización configurado\n   */\n  function showForm() {\n    switch (config.type) {\n      case 'modal':\n        showModalForm();\n        break;\n      case 'slidein':\n        showSlideInForm();\n        break;\n      case 'redirect':\n        // Redirigir a la URL del formulario\n        window.location.href = getFormUrl();\n        break;\n      default:\n        showModalForm();\n    }\n  }\n  \n  /**\n   * Obtiene la URL del formulario\n   */\n  function getFormUrl() {\n    // Obtener el origen del script para construir la URL completa\n    const scriptSrc = scriptTag.src;\n    const origin = new URL(scriptSrc).origin;\n    return `${origin}/forms/${config.formId}/view`;\n  }\n  \n  /**\n   * Muestra el formulario en una ventana modal\n   */\n  function showModalForm() {\n    // Crear el contenedor modal si no existe\n    let modal = document.querySelector('.aipi-form-modal');\n    if (!modal) {\n      modal = document.createElement('div');\n      modal.className = 'aipi-form-modal';\n      \n      const modalContent = document.createElement('div');\n      modalContent.className = 'aipi-form-modal-content';\n      \n      const closeButton = document.createElement('div');\n      closeButton.className = 'aipi-form-modal-close';\n      closeButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>';\n      closeButton.addEventListener('click', closeModal);\n      \n      const iframe = document.createElement('iframe');\n      iframe.className = 'aipi-form-iframe';\n      iframe.src = getFormUrl();\n      \n      modalContent.appendChild(closeButton);\n      modalContent.appendChild(iframe);\n      modal.appendChild(modalContent);\n      document.body.appendChild(modal);\n      \n      // Cerrar modal al hacer clic fuera\n      modal.addEventListener('click', function(e) {\n        if (e.target === modal) {\n          closeModal();\n        }\n      });\n    }\n    \n    // Mostrar modal\n    modal.style.display = 'flex';\n    \n    // Prevenir scroll del body\n    document.body.style.overflow = 'hidden';\n    \n    function closeModal() {\n      modal.style.display = 'none';\n      document.body.style.overflow = '';\n    }\n  }\n  \n  /**\n   * Muestra el formulario en un panel deslizante\n   */\n  function showSlideInForm() {\n    // Crear el panel deslizante si no existe\n    let slideIn = document.querySelector('.aipi-form-slidein');\n    if (!slideIn) {\n      slideIn = document.createElement('div');\n      slideIn.className = 'aipi-form-slidein';\n      \n      const slideInContent = document.createElement('div');\n      slideInContent.className = 'aipi-form-slidein-content';\n      \n      const closeButton = document.createElement('div');\n      closeButton.className = 'aipi-form-slidein-close';\n      closeButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>';\n      closeButton.addEventListener('click', closeSlideIn);\n      \n      const iframe = document.createElement('iframe');\n      iframe.className = 'aipi-form-iframe';\n      iframe.src = getFormUrl();\n      \n      slideInContent.appendChild(closeButton);\n      slideInContent.appendChild(iframe);\n      slideIn.appendChild(slideInContent);\n      document.body.appendChild(slideIn);\n    }\n    \n    // Mostrar panel deslizante\n    slideIn.style.display = 'block';\n    setTimeout(() => {\n      slideIn.classList.add('active');\n    }, 10);\n    \n    function closeSlideIn() {\n      slideIn.classList.remove('active');\n      setTimeout(() => {\n        slideIn.style.display = 'none';\n      }, 300);\n    }\n  }\n})();","size_bytes":12426},"public/static/form-embed.js":{"content":"/**\n * AIPI Form Embed Script - Modern Two-Column Design\n * This script allows embedding AIPI forms with modern design on any website.\n * Version: 2.1.0 - Dynamic Translation System\n */\n\n(function() {\n  // Configuration\n  const containerId = \"aipi-form-container\";\n  \n  // Translation system\n  const translations = {\n    es: {\n      defaultDescription: \"Por favor complete la información solicitada para comenzar.\",\n      placeholders: {\n        name: \"Su nombre\",\n        email: \"su@email.com\", \n        phone: \"Su número de teléfono\",\n        message: \"Escriba su mensaje aquí...\",\n        comments: \"Sus comentarios nos ayudan a mejorar\",\n        feedback: \"Comparta sus comentarios aquí...\"\n      },\n      labels: {\n        name: \"Nombre\",\n        email: \"Email\",\n        phone: \"Teléfono\", \n        message: \"Mensaje\",\n        comments: \"Comentarios\",\n        feedback: \"Comentarios\",\n        satisfaction: \"¿Cómo calificaría su experiencia con nosotros?\",\n        recommendation: \"Del 1 al 10, ¿qué tan probable es que nos recomiende?\",\n        howCanWeImprove: \"¿Cómo podríamos mejorar?\",\n        hearAboutUs: \"¿Cómo se enteró de nosotros?\",\n        acceptTerms: \"Acepto los términos y condiciones\"\n      },\n      options: {\n        satisfaction: [\"Excelente\", \"Buena\", \"Regular\", \"Mala\", \"Muy mala\"],\n        hearAboutUs: [\"Redes sociales\", \"Búsqueda Google\", \"Recomendación\", \"Otro\"],\n        yesNo: [\"Sí\", \"No\"]\n      },\n      buttons: {\n        submit: \"Enviar\",\n        submitSurvey: \"Enviar encuesta\", \n        joinWaitlist: \"Unirse a la lista de espera\",\n        sendMessage: \"Enviar mensaje\",\n        subscribe: \"Suscribirse\"\n      },\n      messages: {\n        success: \"¡Gracias por su envío!\",\n        error: \"Error al enviar el formulario\",\n        required: \"Este campo es obligatorio\"\n      }\n    },\n    en: {\n      defaultDescription: \"Please complete the requested information to get started.\",\n      placeholders: {\n        name: \"Your name\",\n        email: \"you@email.com\",\n        phone: \"Your phone number\", \n        message: \"Write your message here...\",\n        comments: \"Your comments help us improve\",\n        feedback: \"Share your feedback here...\"\n      },\n      labels: {\n        name: \"Name\",\n        email: \"Email\", \n        phone: \"Phone\",\n        message: \"Message\",\n        comments: \"Comments\",\n        feedback: \"Feedback\",\n        satisfaction: \"How would you rate your experience with us?\",\n        recommendation: \"From 1 to 10, how likely are you to recommend us?\",\n        howCanWeImprove: \"How could we improve?\",\n        hearAboutUs: \"How did you hear about us?\",\n        acceptTerms: \"I accept the terms and conditions\"\n      },\n      options: {\n        satisfaction: [\"Excellent\", \"Good\", \"Fair\", \"Poor\", \"Very poor\"],\n        hearAboutUs: [\"Social media\", \"Google search\", \"Recommendation\", \"Other\"],\n        yesNo: [\"Yes\", \"No\"]\n      },\n      buttons: {\n        submit: \"Submit\",\n        submitSurvey: \"Submit survey\",\n        joinWaitlist: \"Join waitlist\", \n        sendMessage: \"Send message\",\n        subscribe: \"Subscribe\"\n      },\n      messages: {\n        success: \"Thank you for your submission!\",\n        error: \"Error submitting form\",\n        required: \"This field is required\"\n      }\n    },\n    fr: {\n      defaultDescription: \"Veuillez compléter les informations demandées pour commencer.\",\n      placeholders: {\n        name: \"Votre nom\",\n        email: \"vous@email.com\",\n        phone: \"Votre numéro de téléphone\",\n        message: \"Écrivez votre message ici...\",\n        comments: \"Vos commentaires nous aident à améliorer\",\n        feedback: \"Partagez vos commentaires ici...\"\n      },\n      labels: {\n        name: \"Nom\",\n        email: \"Email\",\n        phone: \"Téléphone\",\n        message: \"Message\", \n        comments: \"Commentaires\",\n        feedback: \"Commentaires\",\n        satisfaction: \"Comment évalueriez-vous votre expérience avec nous?\",\n        recommendation: \"De 1 à 10, quelle est la probabilité que vous nous recommandiez?\",\n        howCanWeImprove: \"Comment pourrions-nous améliorer?\",\n        hearAboutUs: \"Comment avez-vous entendu parler de nous?\",\n        acceptTerms: \"J'accepte les termes et conditions\"\n      },\n      options: {\n        satisfaction: [\"Excellent\", \"Bon\", \"Passable\", \"Mauvais\", \"Très mauvais\"],\n        hearAboutUs: [\"Réseaux sociaux\", \"Recherche Google\", \"Recommandation\", \"Autre\"],\n        yesNo: [\"Oui\", \"Non\"]\n      },\n      buttons: {\n        submit: \"Soumettre\",\n        submitSurvey: \"Soumettre l'enquête\",\n        joinWaitlist: \"Rejoindre la liste d'attente\",\n        sendMessage: \"Envoyer le message\", \n        subscribe: \"S'abonner\"\n      },\n      messages: {\n        success: \"Merci pour votre envoi!\",\n        error: \"Erreur lors de l'envoi du formulaire\",\n        required: \"Ce champ est obligatoire\"\n      }\n    }\n  };\n  \n  // Get translations for a specific language\n  function getTranslations(language) {\n    return translations[language] || translations['en'];\n  }\n  \n  // Get translation by key path\n  function getTranslation(language, keyPath) {\n    const t = getTranslations(language);\n    const keys = keyPath.split('.');\n    let value = t;\n    for (const key of keys) {\n      value = value?.[key];\n    }\n    return value || keyPath;\n  }\n  \n  // Variables globales para guardar la información del script\n  let currentScriptSrc = null;\n  \n  // Obtener el script actual inmediatamente cuando se ejecuta\n  (function() {\n    const scripts = document.getElementsByTagName('script');\n    for (let i = 0; i < scripts.length; i++) {\n      if (scripts[i].src && scripts[i].src.includes('form-embed.js')) {\n        currentScriptSrc = scripts[i].src;\n        break;\n      }\n    }\n  })();\n  \n  // Obtener el ID del formulario desde la URL del script\n  function getFormId() {\n    if (!currentScriptSrc) {\n      console.error('AIPI Form: No se pudo encontrar el script form-embed.js');\n      return null;\n    }\n    const url = new URL(currentScriptSrc);\n    const formId = url.searchParams.get('id');\n    console.log('AIPI Form: ID extraído:', formId, 'de URL:', currentScriptSrc);\n    return formId;\n  }\n  \n  // Construir la URL del API\n  function getApiUrl(formId) {\n    if (!currentScriptSrc) {\n      console.error('AIPI Form: No se pudo encontrar el script form-embed.js');\n      return null;\n    }\n    const scriptUrl = new URL(currentScriptSrc);\n    const baseUrl = `${scriptUrl.protocol}//${scriptUrl.host}`;\n    const apiUrl = `${baseUrl}/api/forms/public/${formId}`;\n    console.log('AIPI Form: URL del API construida:', apiUrl);\n    return apiUrl;\n  }\n  \n  // Marcar que hay un formulario AIPPS activo\n  function markFormAsActive() {\n    // Añadir atributo al documento para que el widget de chat lo detecte\n    document.documentElement.setAttribute('data-aipps-form-active', 'true');\n    console.log('AIPPS Form: Marcando formulario como activo para evitar conflictos con chat');\n    \n    // También ocultar cualquier widget de chat que ya esté visible\n    hideExistingChatWidgets();\n  }\n\n  // Ocultar widgets de chat existentes\n  function hideExistingChatWidgets() {\n    // Lista de selectores para diferentes tipos de widgets de chat\n    const chatWidgetSelectors = [\n      '#aipi-widget-container',\n      '#aipps-widget-container', \n      '[id*=\"chat-widget\"]',\n      '[class*=\"chat-widget\"]',\n      '[id*=\"aipi-widget\"]',\n      '[class*=\"aipi-widget\"]'\n    ];\n\n    chatWidgetSelectors.forEach(selector => {\n      const widgets = document.querySelectorAll(selector);\n      widgets.forEach(widget => {\n        if (widget && widget.style.display !== 'none') {\n          console.log('AIPPS Form: Ocultando widget de chat existente:', selector);\n          widget.style.display = 'none';\n        }\n      });\n    });\n  }\n\n  // Cargar el formulario\n  async function loadForm() {\n    // Marcar formulario como activo inmediatamente\n    markFormAsActive();\n    \n    const formId = getFormId();\n    \n    if (!formId) {\n      console.error('AIPI Form: No se especificó ID de formulario');\n      return;\n    }\n    \n    const container = document.getElementById(containerId);\n    if (!container) {\n      console.error(`AIPI Form: No se encontró el contenedor con ID '${containerId}'`);\n      return;\n    }\n    \n    try {\n      // Mostrar indicador de carga\n      container.innerHTML = '<div style=\"text-align: center; padding: 20px; font-family: -apple-system, BlinkMacSystemFont, \\'Segoe UI\\', Roboto, sans-serif;\">Cargando formulario...</div>';\n      \n      // Obtener datos del formulario\n      const response = await fetch(getApiUrl(formId));\n      \n      if (!response.ok) {\n        throw new Error(`Error al cargar el formulario (${response.status}): ${response.statusText}`);\n      }\n      \n      const formData = await response.json();\n      \n      // Crear el formulario HTML\n      renderForm(container, formData);\n      \n    } catch (error) {\n      console.error('AIPI Form:', error);\n      container.innerHTML = `\n        <div style=\"border: 1px solid #ff5555; background-color: #ffeeee; color: #cc0000; padding: 15px; border-radius: 4px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\">\n          <p style=\"margin: 0; font-weight: bold;\">Error al cargar el formulario</p>\n          <p style=\"margin: 5px 0 0;\">Por favor, verifica el ID del formulario y tu conexión a internet.</p>\n        </div>\n      `;\n    }\n  }\n  \n  // Renderizar el formulario en el contenedor\n  function renderForm(container, formData) {\n    // Estilos modernos de dos columnas\n    const styles = `\n      <style>\n        .aipi-modern-form-wrapper {\n          font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n          max-width: 900px;\n          margin: 0 auto;\n          background: white;\n          border-radius: 16px;\n          box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n          overflow: hidden;\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          min-height: 600px;\n          line-height: 1.6;\n        }\n        \n        .aipi-form-hero {\n          background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 50%, #0f172a 100%);\n          padding: 3rem 2.5rem;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          position: relative;\n          overflow: hidden;\n        }\n        \n        .aipi-form-hero::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(147, 51, 234, 0.1) 100%);\n          opacity: 0.7;\n        }\n        \n        .aipi-form-hero-content {\n          position: relative;\n          z-index: 1;\n        }\n        \n        .aipi-form-hero h2 {\n          color: white;\n          font-size: 2.25rem;\n          font-weight: 700;\n          line-height: 1.2;\n          margin: 0 0 1.5rem 0;\n          text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n        }\n        \n        .aipi-form-hero p {\n          color: rgba(255, 255, 255, 0.9);\n          font-size: 1.125rem;\n          line-height: 1.7;\n          margin: 0;\n          font-weight: 400;\n        }\n        \n        .aipi-form-content {\n          padding: 3rem 2.5rem;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          background: white;\n        }\n        \n        .aipi-form-header {\n          margin-bottom: 2rem;\n        }\n        \n        .aipi-form-subtitle {\n          font-size: 1.125rem;\n          color: #6b7280;\n          margin: 0;\n          font-weight: 400;\n          line-height: 1.6;\n        }\n        \n        .aipi-form-field {\n          margin-bottom: 1.5rem;\n        }\n        \n        .aipi-form-label {\n          display: block;\n          font-size: 0.875rem;\n          font-weight: 500;\n          color: #374151;\n          margin-bottom: 0.5rem;\n          letter-spacing: 0.025em;\n        }\n        \n        .aipi-form-input, .aipi-form-select, .aipi-form-textarea {\n          width: 100%;\n          padding: 0.75rem 0;\n          font-size: 1rem;\n          color: #111827;\n          background: transparent;\n          border: none;\n          border-bottom: 2px solid #e5e7eb;\n          outline: none;\n          transition: all 0.3s ease;\n          font-family: inherit;\n          box-sizing: border-box;\n        }\n        \n        .aipi-form-input:focus, .aipi-form-select:focus, .aipi-form-textarea:focus {\n          border-bottom-color: #3b82f6;\n          background: rgba(59, 130, 246, 0.02);\n        }\n        \n        .aipi-form-input::placeholder, .aipi-form-textarea::placeholder {\n          color: #9ca3af;\n          opacity: 1;\n        }\n        \n        .aipi-form-select {\n          cursor: pointer;\n          appearance: none;\n          background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\n          background-position: right 0.5rem center;\n          background-repeat: no-repeat;\n          background-size: 1.5em 1.5em;\n          padding-right: 2.5rem;\n        }\n        \n        .aipi-form-textarea {\n          resize: vertical;\n          min-height: 100px;\n        }\n        \n        .aipi-checkbox-field {\n          display: flex;\n          align-items: flex-start;\n          gap: 0.75rem;\n          margin: 1.5rem 0;\n        }\n        \n        .aipi-checkbox {\n          width: 1.25rem;\n          height: 1.25rem;\n          margin-top: 0.125rem;\n          accent-color: #3b82f6;\n          cursor: pointer;\n        }\n        \n        .aipi-checkbox-label {\n          font-size: 0.875rem;\n          color: #6b7280;\n          cursor: pointer;\n          flex: 1;\n        }\n        \n        .aipi-submit-button {\n          width: 100%;\n          background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n          color: white;\n          border: none;\n          padding: 0.875rem 1.5rem;\n          font-size: 1rem;\n          font-weight: 600;\n          border-radius: 8px;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          margin-top: 1rem;\n          letter-spacing: 0.025em;\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n        }\n        \n        .aipi-submit-button:hover {\n          background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);\n          transform: translateY(-1px);\n          box-shadow: 0 6px 12px -2px rgba(0, 0, 0, 0.15);\n        }\n        \n        .aipi-submit-button:active {\n          transform: translateY(0);\n        }\n        \n        .aipi-submit-button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n          transform: none;\n        }\n        \n        /* Responsive Design */\n        @media (max-width: 768px) {\n          .aipi-modern-form-wrapper {\n            grid-template-columns: 1fr;\n            margin: 1rem;\n            border-radius: 12px;\n          }\n          \n          .aipi-form-hero {\n            padding: 2rem 1.5rem;\n            min-height: 200px;\n          }\n          \n          .aipi-form-hero h2 {\n            font-size: 1.875rem;\n          }\n          \n          .aipi-form-content {\n            padding: 2rem 1.5rem;\n          }\n        }\n        \n        @media (max-width: 480px) {\n          .aipi-form-hero, .aipi-form-content {\n            padding: 1.5rem 1rem;\n          }\n        }\n      </style>\n    `;\n    \n    // Create modern form HTML with dynamic translations\n    const language = formData.language || 'en';\n    const t = getTranslations(language);\n    const defaultDescription = formData.description || t.defaultDescription;\n    \n    let formHTML = styles + `\n      <div class=\"aipi-modern-form-wrapper\">\n        <div class=\"aipi-form-hero\">\n          <div class=\"aipi-form-hero-content\">\n            <h2>${escapeHtml(formData.title)}</h2>\n            <p>${escapeHtml(defaultDescription)}</p>\n          </div>\n        </div>\n        \n        <div class=\"aipi-form-content\">\n          <div class=\"aipi-form-header\">\n            <p class=\"aipi-form-subtitle\">${escapeHtml(defaultDescription)}</p>\n          </div>\n          \n          <form id=\"aipi-form\" method=\"POST\">\n    `;\n    \n    // Procesar los campos del formulario\n    console.log('AIPI Form: Datos del formulario:', formData);\n    const fields = formData.structure?.fields || formData.fields || [];\n    console.log('AIPI Form: Campos encontrados:', fields);\n    \n    if (fields && Array.isArray(fields)) {\n      fields.forEach(field => {\n        formHTML += generateFieldHTML(field, language);\n      });\n    } else {\n      console.warn('AIPI Form: No valid fields found in form');\n    }\n    \n    // Add terms checkbox if configured\n    if (formData.settings?.requireTerms) {\n      formHTML += `\n        <div class=\"aipi-checkbox-field\">\n          <input type=\"checkbox\" id=\"terms\" name=\"terms\" class=\"aipi-checkbox\" required>\n          <label for=\"terms\" class=\"aipi-checkbox-label\">\n            ${t.labels.acceptTerms}\n          </label>\n        </div>\n      `;\n    }\n    \n    // Submit button using form text or translated fallback\n    const submitText = formData.submitButtonText || formData.settings?.submitText || t.buttons.submit;\n    formHTML += `\n            <button type=\"submit\" class=\"aipi-submit-button\">\n              ${escapeHtml(submitText)}\n            </button>\n          </form>\n        </div>\n      </div>\n    `;\n    \n    // Insertar el HTML en el contenedor\n    container.innerHTML = formHTML;\n    \n    // Configurar el evento de envío\n    setupFormSubmission(formData);\n  }\n  \n  // Generate HTML for each field with dynamic translations\n  function generateFieldHTML(field, language = 'en') {\n    const required = field.required ? 'required' : '';\n    const fieldId = `field_${field.id}`;\n    const t = getTranslations(language);\n    \n    let fieldHTML = `<div class=\"aipi-form-field\">`;\n    \n    switch (field.type) {\n      case 'text':\n      case 'email':\n      case 'tel':\n      case 'url':\n        fieldHTML += `\n          <label for=\"${fieldId}\" class=\"aipi-form-label\">\n            ${escapeHtml(field.label)} ${field.required ? '*' : ''}\n          </label>\n          <input\n            type=\"${field.type}\"\n            id=\"${fieldId}\"\n            name=\"${field.id}\"\n            class=\"aipi-form-input\"\n            placeholder=\"${escapeHtml(field.placeholder || '')}\"\n            ${required}\n          >\n        `;\n        break;\n        \n      case 'textarea':\n        fieldHTML += `\n          <label for=\"${fieldId}\" class=\"aipi-form-label\">\n            ${escapeHtml(field.label)} ${field.required ? '*' : ''}\n          </label>\n          <textarea\n            id=\"${fieldId}\"\n            name=\"${field.id}\"\n            class=\"aipi-form-textarea\"\n            placeholder=\"${escapeHtml(field.placeholder || '')}\"\n            ${required}\n          ></textarea>\n        `;\n        break;\n        \n      case 'select':\n        fieldHTML += `\n          <label for=\"${fieldId}\" class=\"aipi-form-label\">\n            ${escapeHtml(field.label)} ${field.required ? '*' : ''}\n          </label>\n          <select id=\"${fieldId}\" name=\"${field.id}\" class=\"aipi-form-select\" ${required}>\n            <option value=\"\">${getSelectPlaceholder(language)}</option>\n        `;\n        \n        if (field.options && Array.isArray(field.options)) {\n          field.options.forEach(option => {\n            // Si la opción es un string simple, usar como valor y etiqueta\n            if (typeof option === 'string') {\n              fieldHTML += `<option value=\"${escapeHtml(option)}\">${escapeHtml(option)}</option>`;\n            } else {\n              // Si es un objeto con value y label\n              fieldHTML += `<option value=\"${escapeHtml(option.value || option)}\">${escapeHtml(option.label || option)}</option>`;\n            }\n          });\n        }\n        \n        fieldHTML += `</select>`;\n        break;\n        \n      case 'radio':\n        fieldHTML += `\n          <fieldset>\n            <legend class=\"aipi-form-label\">\n              ${escapeHtml(field.label)} ${field.required ? '*' : ''}\n            </legend>\n        `;\n        \n        if (field.options && Array.isArray(field.options)) {\n          field.options.forEach((option, index) => {\n            const optionId = `${fieldId}_${index}`;\n            fieldHTML += `\n              <div style=\"margin-bottom: 0.5rem;\">\n                <input\n                  type=\"radio\"\n                  id=\"${optionId}\"\n                  name=\"${field.name}\"\n                  value=\"${escapeHtml(option.value)}\"\n                  ${required}\n                  style=\"margin-right: 0.5rem;\"\n                >\n                <label for=\"${optionId}\" style=\"font-size: 0.875rem; color: #374151;\">\n                  ${escapeHtml(option.label)}\n                </label>\n              </div>\n            `;\n          });\n        }\n        \n        fieldHTML += `</fieldset>`;\n        break;\n        \n      case 'checkbox':\n        fieldHTML += `\n          <div class=\"aipi-checkbox-field\">\n            <input\n              type=\"checkbox\"\n              id=\"${fieldId}\"\n              name=\"${field.name}\"\n              class=\"aipi-checkbox\"\n              value=\"1\"\n              ${required}\n            >\n            <label for=\"${fieldId}\" class=\"aipi-checkbox-label\">\n              ${escapeHtml(field.label)}\n            </label>\n          </div>\n        `;\n        break;\n    }\n    \n    fieldHTML += `</div>`;\n    return fieldHTML;\n  }\n  \n  // Configurar el envío del formulario\n  function setupFormSubmission(formData) {\n    const form = document.getElementById('aipi-form');\n    const submitButton = form.querySelector('.aipi-submit-button');\n    \n    form.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      \n      // Disable submit button with dynamic text\n      const language = formData.language || 'en';\n      const t = getTranslations(language);\n      submitButton.disabled = true;\n      submitButton.textContent = getTranslation(language, 'buttons.submit') + '...';\n      \n      try {\n        // Recopilar datos del formulario\n        const formDataToSend = new FormData(form);\n        const data = {};\n        \n        for (let [key, value] of formDataToSend.entries()) {\n          data[key] = value;\n        }\n        \n        // Construir URL de envío usando el script actual guardado\n        if (!currentScriptSrc) {\n          throw new Error('No se pudo determinar la URL del servidor');\n        }\n        \n        const scriptUrl = new URL(currentScriptSrc);\n        const baseUrl = `${scriptUrl.protocol}//${scriptUrl.host}`;\n        const formSlug = formData.slug || getFormId();\n        const submitUrl = `${baseUrl}/api/public/form/${formSlug}/submit`;\n        \n        console.log('AIPI Form: URL de envío:', submitUrl);\n        \n        // Enviar los datos\n        const response = await fetch(submitUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data)\n        });\n        \n        if (response.ok) {\n          // Show success message with dynamic translation\n          const successMessage = formData.successMessage || formData.settings?.successMessage || t.messages.success;\n          form.innerHTML = `\n            <div style=\"text-align: center; padding: 2rem; color: #059669;\">\n              <div style=\"font-size: 3rem; margin-bottom: 1rem;\">✓</div>\n              <h3 style=\"margin: 0 0 1rem 0; color: #047857;\">${escapeHtml(successMessage)}</h3>\n              <p style=\"margin: 0; color: #6b7280;\">${escapeHtml(t.messages.success)}</p>\n            </div>\n          `;\n          \n          // Redirect if configured\n          if (formData.settings?.redirectUrl) {\n            setTimeout(() => {\n              window.location.href = formData.settings.redirectUrl;\n            }, 3000);\n          }\n        } else {\n          throw new Error(t.messages.error);\n        }\n        \n      } catch (error) {\n        console.error('Form submission error:', error);\n        \n        // Restore button with dynamic text\n        submitButton.disabled = false;\n        submitButton.textContent = formData.submitButtonText || formData.settings?.submitText || t.buttons.submit;\n        \n        // Show error message with dynamic translation\n        alert(t.messages.error);\n      }\n    });\n  }\n  \n  // Función para escapar HTML\n  function escapeHtml(text) {\n    if (typeof text !== 'string') return '';\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  // Function to get select placeholder based on language\n  function getSelectPlaceholder(language) {\n    const t = getTranslations(language);\n    const placeholders = {\n      'fr': 'Sélectionnez une option',\n      'es': 'Selecciona una opción', \n      'en': 'Select an option'\n    };\n    return placeholders[language] || placeholders['en'];\n  }\n\n  // Función para obtener textos de validación según el idioma\n  function getValidationTexts(language) {\n    const texts = {\n      'fr': {\n        required: 'Ce champ est obligatoire',\n        email: 'Veuillez entrer une adresse email valide',\n        submitting: 'Envoi en cours...',\n        success: 'Merci pour votre envoi!',\n        error: 'Une erreur est survenue lors de l\\'envoi du formulaire. Veuillez réessayer.',\n        successDescription: 'Merci pour votre information. Nous vous contacterons bientôt.'\n      },\n      'es': {\n        required: 'Este campo es obligatorio',\n        email: 'Por favor ingresa un email válido',\n        submitting: 'Enviando...',\n        success: 'Gracias por tu envío!',\n        error: 'Ocurrió un error al enviar el formulario. Por favor, inténtalo de nuevo.',\n        successDescription: 'Gracias por tu información. Te contactaremos pronto.'\n      },\n      'en': {\n        required: 'This field is required',\n        email: 'Please enter a valid email address',\n        submitting: 'Submitting...',\n        success: 'Thank you for your submission!',\n        error: 'An error occurred while submitting the form. Please try again.',\n        successDescription: 'Thank you for your information. We will contact you soon.'\n      }\n    };\n    return texts[language] || texts['fr'];\n  }\n  \n  // Inicializar cuando el DOM esté listo\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', loadForm);\n  } else {\n    loadForm();\n  }\n  \n})();","size_bytes":26656},"public/static/simple-embed.js":{"content":"/*\n * AIPI Fullscreen Chat Widget (Simple Version)\n * \n * Una versión simplificada y robusta del widget de chat en pantalla completa.\n * Este script crea un botón flotante que al hacer clic abre un chat en pantalla completa.\n */\n(function() {\n  // Función para obtener traducciones según el idioma del navegador\n  function getTranslations() {\n    const lang = navigator.language.substring(0, 2);\n    const translations = {\n      es: {\n        placeholder: \"Escribe tu mensaje...\",\n        newConversación: \"Nueva conversación\"\n      },\n      en: {\n        placeholder: \"Type your message...\",\n        newConversation: \"New conversation\"\n      },\n      fr: {\n        placeholder: \"Tapez votre message...\",\n        newConversation: \"Nouvelle conversation\"\n      }\n    };\n    return translations[lang] || translations.en;\n  }\n  \n  const t = getTranslations();\n\n  // Configuración inicial y datos de estado\n  let config = {\n    apiKey: '',\n    serverUrl: window.location.origin,\n    mainColor: '#4f46e5',\n    title: 'AIPI Assistant',\n    greetingMessage: '¡Hola! Soy un asistente virtual. ¿En qué puedo ayudarte hoy?',\n    position: 'bottom-right'\n  };\n  \n  let conversationId = null;\n  let visitorId = localStorage.getItem('aipi_visitor_id') || \n    'visitor_' + Math.random().toString(36).substring(2, 15);\n  \n  // Guardar ID de visitante\n  localStorage.setItem('aipi_visitor_id', visitorId);\n  \n  // Inicializar widget\n  document.addEventListener('DOMContentLoaded', initialize);\n  \n  // Función principal de inicialización\n  function initialize() {\n    console.log('AIPI Widget: Inicializando...');\n    \n    try {\n      // Cargar configuración\n      loadConfig();\n      \n      // Crear elementos del DOM\n      createWidgetElements();\n      \n      // Adjuntar eventos\n      attachEvents();\n      \n      console.log('AIPI Widget: Inicializado correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al inicializar el widget AIPI: ' + error.message);\n    }\n  }\n  \n  // Cargar configuración desde el script\n  async function loadConfig() {\n    try {\n      // Obtener elemento de script\n      const scripts = document.getElementsByTagName('script');\n      let scriptElement = null;\n      \n      // Buscar el script correcto que contiene la clave API\n      for (let i = 0; i < scripts.length; i++) {\n        const src = scripts[i].src || '';\n        if (src.includes('simple-embed.js')) {\n          scriptElement = scripts[i];\n          break;\n        }\n      }\n      \n      if (!scriptElement) {\n        throw new Error('No se pudo encontrar el script del widget');\n      }\n      \n      // Obtener clave API del src o atributo data\n      const scriptSrc = scriptElement.src;\n      const urlParams = new URLSearchParams(scriptSrc.split('?')[1] || '');\n      config.apiKey = urlParams.get('key') || scriptElement.getAttribute('data-api-key');\n      \n      if (!config.apiKey) {\n        throw new Error('Se requiere una clave API');\n      }\n      \n      console.log('AIPI Widget: Clave API cargada - ' + config.apiKey);\n      \n      // Obtener color del tema\n      const themeColor = scriptElement.getAttribute('data-theme-color');\n      if (themeColor) config.mainColor = themeColor;\n      \n      // Obtener posición\n      const position = scriptElement.getAttribute('data-position');\n      if (position) config.position = position;\n      \n      // Obtener título\n      const title = scriptElement.getAttribute('data-title');\n      if (title) config.title = title;\n      \n      // Obtener mensaje de saludo\n      const greeting = scriptElement.getAttribute('data-greeting');\n      if (greeting) config.greetingMessage = greeting;\n      \n      // Cargar datos de integración desde el servidor\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}`);\n      if (!response.ok) {\n        throw new Error(`Error al cargar datos de integración: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Sobrescribir configuración con datos del servidor\n      if (data.integration) {\n        if (data.integration.themeColor) {\n          config.mainColor = data.integration.themeColor;\n        }\n        \n        if (data.integration.position) {\n          config.position = data.integration.position;\n        }\n        \n        // El botBehavior no debe usarse como mensaje de bienvenida\n        // Solo usamos defaultGreeting o welcomeMessage para mostrar al usuario\n      }\n      \n      console.log('AIPI Widget: Configuración cargada correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      throw new Error('Error al cargar la configuración: ' + error.message);\n    }\n  }\n  \n  // Crear elementos del widget\n  function createWidgetElements() {\n    try {\n      // Crear estilos\n      const styleEl = document.createElement('style');\n      styleEl.textContent = getStylesCSS();\n      document.head.appendChild(styleEl);\n      \n      // Crear contenedor del botón\n      const buttonContainer = document.createElement('div');\n      buttonContainer.id = 'aipi-chat-button-container';\n      \n      // Calcular posición del botón\n      const positionStyle = getPositionStyle(config.position);\n      buttonContainer.style.position = 'fixed';\n      buttonContainer.style.zIndex = '9998';\n      buttonContainer.style.bottom = positionStyle.bottom;\n      buttonContainer.style.right = positionStyle.right;\n      buttonContainer.style.left = positionStyle.left;\n      buttonContainer.style.top = positionStyle.top;\n      \n      // Crear botón\n      const button = document.createElement('button');\n      button.id = 'aipi-chat-button';\n      button.style.backgroundColor = config.mainColor;\n      button.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n        </svg>\n        <span>Chat</span>\n      `;\n      \n      buttonContainer.appendChild(button);\n      document.body.appendChild(buttonContainer);\n      \n      // Crear panel de chat\n      const chatPanel = document.createElement('div');\n      chatPanel.id = 'aipi-chat-panel';\n      chatPanel.innerHTML = `\n        <div id=\"aipi-chat-header\" style=\"background-color: ${config.mainColor};\">\n          <div id=\"aipi-chat-header-title\">\n            <div id=\"aipi-chat-avatar\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n              </svg>\n            </div>\n            ${config.title}\n          </div>\n          <button id=\"aipi-chat-close\">×</button>\n        </div>\n        <div id=\"aipi-chat-messages\">\n          <!-- Los mensajes se añadirán aquí -->\n        </div>\n        <div id=\"aipi-chat-input-area\">\n          <input type=\"text\" id=\"aipi-chat-input\" placeholder=\"${t.placeholder}\">\n          <button id=\"aipi-chat-send\" disabled style=\"background-color: ${config.mainColor};\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n              <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n            </svg>\n          </button>\n        </div>\n      `;\n      \n      document.body.appendChild(chatPanel);\n      \n      console.log('AIPI Widget: Elementos creados correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      throw new Error('Error al crear los elementos del widget: ' + error.message);\n    }\n  }\n  \n  // Adjuntar eventos a los elementos\n  function attachEvents() {\n    try {\n      // Evento del botón para abrir el chat\n      const chatButton = document.getElementById('aipi-chat-button');\n      if (chatButton) {\n        chatButton.onclick = openChat;\n        console.log('AIPI Widget: Evento de clic adjuntado al botón de chat');\n      }\n      \n      // Evento del botón para cerrar el chat\n      const closeButton = document.getElementById('aipi-chat-close');\n      if (closeButton) {\n        closeButton.onclick = closeChat;\n      }\n      \n      // Eventos del campo de entrada\n      const inputField = document.getElementById('aipi-chat-input');\n      const sendButton = document.getElementById('aipi-chat-send');\n      \n      if (inputField && sendButton) {\n        // Habilitar/deshabilitar botón de envío según el contenido\n        inputField.oninput = function() {\n          sendButton.disabled = !inputField.value.trim();\n        };\n        \n        // Enviar mensaje al presionar Enter\n        inputField.onkeydown = function(e) {\n          if (e.key === 'Enter' && inputField.value.trim()) {\n            sendMessage();\n          }\n        };\n        \n        // Enviar mensaje al hacer clic en el botón\n        sendButton.onclick = sendMessage;\n      }\n      \n      console.log('AIPI Widget: Todos los eventos adjuntados correctamente');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al configurar los eventos del widget: ' + error.message);\n    }\n  }\n  \n  // Abrir el chat\n  function openChat() {\n    console.log('AIPI Widget: Abriendo chat...');\n    try {\n      // Ocultar botón\n      const buttonContainer = document.getElementById('aipi-chat-button-container');\n      if (buttonContainer) {\n        buttonContainer.style.display = 'none';\n      }\n      \n      // Mostrar panel de chat\n      const chatPanel = document.getElementById('aipi-chat-panel');\n      if (chatPanel) {\n        chatPanel.style.display = 'flex';\n      }\n      \n      // Iniciar conversación si es necesario\n      if (!conversationId) {\n        startConversation();\n      }\n      \n      // Enfocar campo de entrada\n      setTimeout(function() {\n        const input = document.getElementById('aipi-chat-input');\n        if (input) input.focus();\n      }, 300);\n      \n      console.log('AIPI Widget: Chat abierto');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al abrir el chat: ' + error.message);\n    }\n  }\n  \n  // Cerrar el chat\n  function closeChat() {\n    console.log('AIPI Widget: Cerrando chat...');\n    try {\n      // Ocultar panel de chat\n      const chatPanel = document.getElementById('aipi-chat-panel');\n      if (chatPanel) {\n        chatPanel.style.display = 'none';\n      }\n      \n      // Mostrar botón\n      const buttonContainer = document.getElementById('aipi-chat-button-container');\n      if (buttonContainer) {\n        buttonContainer.style.display = 'block';\n      }\n      \n      console.log('AIPI Widget: Chat cerrado');\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      alert('Error al cerrar el chat: ' + error.message);\n    }\n  }\n  \n  // Iniciar conversación\n  async function startConversation() {\n    console.log('AIPI Widget: Iniciando conversación...');\n    try {\n      // Extraer contenido de la página\n      const pageTitle = document.title;\n      const pageContent = document.body.innerText.substring(0, 10000); // Limitar a 10k caracteres\n      \n      // Crear conversación en el servidor\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/conversation`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          visitorId: visitorId,\n          pageContext: {\n            title: pageTitle,\n            url: window.location.href,\n            content: pageContent\n          }\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Error al crear conversación: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      conversationId = data.id;\n      \n      // Añadir mensaje de saludo\n      addMessage(config.greetingMessage, 'assistant');\n      \n      console.log('AIPI Widget: Conversación iniciada con ID', conversationId);\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      addMessage('Lo siento, hubo un problema al iniciar la conversación. Por favor, intenta de nuevo más tarde.', 'assistant');\n    }\n  }\n  \n  // Enviar mensaje\n  async function sendMessage() {\n    const inputField = document.getElementById('aipi-chat-input');\n    const message = inputField.value.trim();\n    \n    if (!message) return;\n    \n    // Limpiar campo de entrada\n    inputField.value = '';\n    document.getElementById('aipi-chat-send').disabled = true;\n    \n    // Añadir mensaje del usuario a la interfaz\n    addMessage(message, 'user');\n    \n    // Mostrar indicador de escritura\n    showTypingIndicator(true);\n    \n    try {\n      // Iniciar conversación si es necesario\n      if (!conversationId) {\n        await startConversation();\n      }\n      \n      // Enviar mensaje al servidor\n      const response = await fetch(`${config.serverUrl}/api/widget/${config.apiKey}/message`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          conversationId: conversationId,\n          content: message,\n          role: 'user'\n        })\n      });\n      \n      // Ocultar indicador de escritura\n      showTypingIndicator(false);\n      \n      if (!response.ok) {\n        if (response.status === 500) {\n          addMessage('Lo siento, hay un problema temporal con el servicio. Por favor, intenta de nuevo más tarde.', 'assistant');\n        } else {\n          addMessage('Lo siento, no pude procesar tu mensaje. Por favor, intenta de nuevo.', 'assistant');\n        }\n        throw new Error(`Error al enviar mensaje: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Añadir respuesta de la IA\n      if (data.aiMessage && data.aiMessage.content) {\n        addMessage(data.aiMessage.content, 'assistant');\n      } else {\n        addMessage('Recibí tu mensaje, pero no pude generar una respuesta en este momento.', 'assistant');\n      }\n    } catch (error) {\n      console.error('AIPI Widget Error:', error);\n      \n      // Asegurar que el indicador de escritura se oculta\n      showTypingIndicator(false);\n    }\n  }\n  \n  // Añadir mensaje a la interfaz\n  function addMessage(content, role) {\n    const messagesContainer = document.getElementById('aipi-chat-messages');\n    if (!messagesContainer) return;\n    \n    const messageEl = document.createElement('div');\n    messageEl.className = `message ${role}`;\n    \n    // Aplicar contraste automático para mensajes del asistente\n    if (role === 'assistant') {\n      const bgColor = config.mainColor || '#4f46e5';\n      messageEl.style.backgroundColor = bgColor;\n      messageEl.style.color = getContrastTextColor(bgColor);\n      messageEl.innerHTML = formatBotResponse(content);\n    } else {\n      messageEl.textContent = content;\n    }\n    \n    messagesContainer.appendChild(messageEl);\n    \n    // Desplazar al fondo\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n\n  // Función para obtener color de texto con contraste adecuado\n  function getContrastTextColor(backgroundColor) {\n    if (!backgroundColor || typeof backgroundColor !== 'string') {\n      return '#1f2937';\n    }\n    \n    let hex = backgroundColor.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    if (hex.length !== 6) {\n      return '#1f2937';\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;\n    \n    return luminance < 0.6 ? '#ffffff' : '#1f2937';\n  }\n  \n  // Mostrar/ocultar indicador de escritura\n  function showTypingIndicator(show) {\n    const messagesContainer = document.getElementById('aipi-chat-messages');\n    if (!messagesContainer) return;\n    \n    // Eliminar indicador existente si lo hay\n    const existingIndicator = document.getElementById('typing-indicator');\n    if (existingIndicator) {\n      existingIndicator.remove();\n    }\n    \n    if (show) {\n      const indicator = document.createElement('div');\n      indicator.id = 'typing-indicator';\n      indicator.className = 'message assistant';\n      indicator.textContent = 'Escribiendo...';\n      \n      messagesContainer.appendChild(indicator);\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n  }\n  \n  // Función para detectar si un color es oscuro\n  function isColorDark(color) {\n    // Convertir color hex a RGB\n    let hex = color.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex.split('').map(c => c + c).join('');\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Calcular luminancia\n    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n    \n    // Si la luminancia es menor a 0.5, es un color oscuro\n    return luminance < 0.5;\n  }\n\n  // Función para generar paleta de colores pasteles basada en el color principal\n  function generatePastelPalette(baseColor) {\n    let hex = baseColor;\n    if (!hex || typeof hex !== 'string') {\n      hex = '#6366f1'; // Color por defecto si no hay color\n    }\n    \n    hex = hex.replace('#', '');\n    if (hex.length !== 6) {\n      hex = '6366f1'; // Fallback si el formato es incorrecto\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    // Crear tonos pasteles más visibles\n    const pastelLight = `rgba(${Math.round(r + (255 - r) * 0.8)}, ${Math.round(g + (255 - g) * 0.8)}, ${Math.round(b + (255 - b) * 0.8)}, 0.7)`;\n    const pastelMedium = `rgba(${Math.round(r + (255 - r) * 0.6)}, ${Math.round(g + (255 - g) * 0.6)}, ${Math.round(b + (255 - b) * 0.6)}, 0.8)`;\n    const pastelDark = `rgba(${Math.round(r + (255 - r) * 0.4)}, ${Math.round(g + (255 - g) * 0.4)}, ${Math.round(b + (255 - b) * 0.4)}, 0.9)`;\n    \n    return {\n      light: pastelLight,\n      medium: pastelMedium,\n      dark: pastelDark,\n      accent: '#' + hex\n    };\n  }\n\n  // Función para formatear respuestas del chatbot con estilo enriquecido\n  function formatBotResponse(text) {\n    if (!text) return '';\n    \n    console.log('AIPI Debug: formatBotResponse called with text:', text.substring(0, 200));\n    \n    const palette = generatePastelPalette(config.mainColor);\n    const isDarkTheme = isColorDark(config.mainColor);\n    \n    console.log('AIPI Debug: Generated palette:', palette);\n    console.log('AIPI Debug: Main color:', config.mainColor);\n    console.log('AIPI Debug: Is dark theme:', isDarkTheme);\n    \n    // Colores de texto basados en el tema\n    const titleColor = isDarkTheme ? '#f9fafb' : '#1f2937';\n    const bodyColor = isDarkTheme ? '#e5e7eb' : '#374151';\n    const accentColor = config.mainColor;\n    \n    // NO escapar HTML - trabajar directamente con el texto\n    let safeText = text;\n    \n    // Formatear títulos principales (líneas que empiezan con #) - ELIMINAR # del texto final\n    safeText = safeText.replace(/^# (.+)$/gm, \n      `<h1 style=\"font-size: 18px; font-weight: 700; color: ${titleColor}; margin: 16px 0 12px 0; line-height: 1.3; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.medium}; padding: 12px 16px; border-radius: 8px; border-left: 4px solid ${palette.accent}; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">$1</h1>`\n    );\n    \n    // Formatear subtítulos (líneas que empiezan con ##) - ELIMINAR ## del texto final\n    safeText = safeText.replace(/^## (.+)$/gm, \n      `<h2 style=\"font-size: 16px; font-weight: 600; color: ${titleColor}; margin: 14px 0 10px 0; line-height: 1.4; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.light}; padding: 10px 14px; border-radius: 6px; border-left: 3px solid ${palette.accent}; box-shadow: 0 1px 3px rgba(0,0,0,0.1);\">$1</h2>`\n    );\n    \n    // Formatear subtítulos de tercer nivel (líneas que empiezan con ###) - ELIMINAR ### del texto final\n    safeText = safeText.replace(/^### (.+)$/gm, \n      `<h3 style=\"font-size: 14px; font-weight: 600; color: ${titleColor}; margin: 12px 0 8px 0; line-height: 1.4; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: ${palette.light}; padding: 8px 12px; border-left: 3px solid ${palette.accent}; border-radius: 5px; box-shadow: 0 1px 2px rgba(0,0,0,0.08);\">$1</h3>`\n    );\n    \n    // Formatear texto en negrita (**texto**)\n    safeText = safeText.replace(/\\*\\*(.+?)\\*\\*/g, \n      `<strong style=\"font-weight: 600; color: ${titleColor};\">$1</strong>`\n    );\n    \n    // Formatear texto destacado (*texto*)\n    safeText = safeText.replace(/\\*(.+?)\\*/g, \n      `<em style=\"font-style: italic; color: ${accentColor}; font-weight: 500;\">$1</em>`\n    );\n    \n    // Formatear listas numeradas (1. texto)\n    safeText = safeText.replace(/^\\d+\\.\\s(.+)$/gm, \n      `<div style=\"margin: 8px 0; padding: 8px 12px; background: ${palette.light}; border-left: 3px solid ${palette.accent}; border-radius: 4px;\"><span style=\"font-weight: 500; color: ${titleColor};\">$1</span></div>`\n    );\n    \n    // Formatear listas con viñetas (- texto)\n    safeText = safeText.replace(/^-\\s(.+)$/gm, \n      `<div style=\"margin: 6px 0; padding: 6px 12px; background: ${palette.light}; border-radius: 4px; border-left: 2px solid ${palette.medium};\"><span style=\"color: ${bodyColor};\">• $1</span></div>`\n    );\n    \n    // Formatear enlaces\n    safeText = safeText.replace(/(https?:\\/\\/[^\\s]+)/g, \n      `<a href=\"$1\" target=\"_blank\" style=\"color: ${accentColor}; text-decoration: underline; font-weight: 500;\">$1</a>`\n    );\n    \n    // Formatear párrafos (líneas que no son títulos ni listas)\n    const lines = safeText.split('\\n');\n    const formattedLines = lines.map(line => {\n      line = line.trim();\n      if (!line) return '<br>';\n      \n      // Si no es título, lista o ya tiene formato HTML, envolver en párrafo\n      if (!line.match(/^<(h1|h2|div|a)/)) {\n        return `<p style=\"margin: 8px 0; line-height: 1.6; color: ${bodyColor}; font-size: 14px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\">${line}</p>`;\n      }\n      \n      return line;\n    });\n    \n    const finalResult = formattedLines.join('');\n    console.log('AIPI Debug: Final formatted result:', finalResult.substring(0, 300));\n    return finalResult;\n  }\n\n  // Función auxiliar para escapar HTML\n  function escapeHTML(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  // Obtener estilos CSS como string\n  function getStylesCSS() {\n    const isDarkTheme = isColorDark(config.mainColor);\n    \n    // Colores dinámicos basados en el tema\n    const chatBgColor = isDarkTheme ? '#1f2937' : '#f5f7fb';\n    const assistantBgColor = isDarkTheme ? '#374151' : '#e5e7eb';\n    const assistantTextColor = isDarkTheme ? '#f9fafb' : '#1f2937';\n    const inputBorderColor = isDarkTheme ? '#4b5563' : '#e5e7eb';\n    const inputBgColor = isDarkTheme ? '#374151' : '#ffffff';\n    const inputTextColor = isDarkTheme ? '#f9fafb' : '#000000';\n    \n    return `\n      /* Estilos para el botón flotante */\n      #aipi-chat-button-container {\n        display: block;\n        z-index: 9998;\n      }\n      \n      #aipi-chat-button {\n        width: auto;\n        height: auto;\n        border-radius: 50px;\n        color: white;\n        display: flex;\n        align-items: center;\n        cursor: pointer !important;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n        transition: all 0.3s ease;\n        padding: 12px 20px;\n        border: none;\n        outline: none;\n      }\n      \n      #aipi-chat-button:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\n      }\n      \n      #aipi-chat-button svg {\n        margin-right: 8px;\n      }\n      \n      #aipi-chat-button span {\n        font-family: Arial, sans-serif;\n        font-size: 14px;\n      }\n      \n      /* Estilos para el panel de chat */\n      #aipi-chat-panel {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: white;\n        display: none;\n        flex-direction: column;\n        z-index: 9999;\n      }\n      \n      #aipi-chat-header {\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      \n      #aipi-chat-header-title {\n        display: flex;\n        align-items: center;\n        font-weight: bold;\n        font-family: Arial, sans-serif;\n      }\n      \n      #aipi-chat-avatar {\n        width: 30px;\n        height: 30px;\n        background-color: white;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 10px;\n      }\n      \n      #aipi-chat-avatar svg {\n        width: 20px;\n        height: 20px;\n        color: inherit;\n      }\n      \n      #aipi-chat-close {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n      }\n      \n      #aipi-chat-messages {\n        flex: 1;\n        padding: 20px;\n        overflow-y: auto;\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n        background-color: ${chatBgColor};\n      }\n      \n      .message {\n        max-width: 80%;\n        padding: 12px 16px;\n        border-radius: 18px;\n        word-break: break-word;\n        font-family: Arial, sans-serif;\n      }\n      \n      .message.assistant {\n        align-self: flex-start;\n        background-color: ${assistantBgColor};\n        color: ${assistantTextColor};\n        border-bottom-left-radius: 4px;\n      }\n      \n      .message.user {\n        align-self: flex-end;\n        background-color: #3b82f6;\n        color: white;\n        border-bottom-right-radius: 4px;\n      }\n      \n      #aipi-chat-input-area {\n        padding: 15px;\n        display: flex;\n        border-top: 1px solid ${inputBorderColor};\n        background-color: ${chatBgColor};\n      }\n      \n      #aipi-chat-input {\n        flex: 1;\n        padding: 12px;\n        border: 1px solid ${inputBorderColor};\n        border-radius: 24px;\n        outline: none;\n        font-size: 14px;\n        font-family: Arial, sans-serif;\n        background-color: ${inputBgColor};\n        color: ${inputTextColor};\n      }\n      \n      #aipi-chat-send {\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        color: white;\n        border: none;\n        margin-left: 10px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      \n      #aipi-chat-send svg {\n        width: 18px;\n        height: 18px;\n      }\n      \n      #aipi-chat-send:disabled {\n        background-color: #d1d5db !important;\n        cursor: not-allowed;\n      }\n      \n      #typing-indicator {\n        font-style: italic;\n      }\n    `;\n  }\n  \n  // Calcular posición del botón según la configuración\n  function getPositionStyle(position) {\n    const style = {\n      bottom: 'auto',\n      right: 'auto',\n      top: 'auto',\n      left: 'auto'\n    };\n    \n    switch (position) {\n      case 'bottom-right':\n        style.bottom = '20px';\n        style.right = '20px';\n        break;\n      case 'bottom-left':\n        style.bottom = '20px';\n        style.left = '20px';\n        break;\n      case 'top-right':\n        style.top = '20px';\n        style.right = '20px';\n        break;\n      case 'top-left':\n        style.top = '20px';\n        style.left = '20px';\n        break;\n      default:\n        style.bottom = '20px';\n        style.right = '20px';\n    }\n    \n    return style;\n  }\n})();","size_bytes":28336},"server/lib/aws-email.ts":{"content":"/**\n * Módulo para envío de notificaciones por email usando AWS SES\n */\nimport { Appointment, Settings } from '@shared/schema';\nimport { storage } from '../storage';\nimport { SESClient, SendEmailCommand } from '@aws-sdk/client-ses';\n\n// Configuración de AWS SES\nfunction configureSES() {\n  if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {\n    console.warn('AWS credentials not configured. Cannot send email notifications.');\n    return null;\n  }\n\n  return new SESClient({\n    credentials: {\n      accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n    },\n    region: process.env.AWS_REGION || 'us-east-1'\n  });\n}\n\n/**\n * Envía un email de confirmación de cita al visitante y al propietario\n * \n * @param appointment Datos de la cita\n * @param userEmail Email del propietario/organizador\n * @param settings Configuración del usuario\n */\nexport async function sendAppointmentConfirmation(\n  appointment: Appointment,\n  userEmail: string,\n  settings: Settings\n): Promise<void> {\n  const ses = configureSES();\n  if (!ses) return;\n  \n  try {\n    const assistantName = settings?.assistantName || 'AIPI Assistant';\n    const date = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const formattedDate = date.toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    // HTML para el email\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2>Confirmación de Cita</h2>\n        <p>Hola ${appointment.visitorName},</p>\n        <p>Tu cita ha sido confirmada con los siguientes detalles:</p>\n        <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n          <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n          <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n          <p><strong>Duración:</strong> ${appointment.duration || 30} minutos</p>\n          ${appointment.notes ? `<p><strong>Notas:</strong> ${appointment.notes}</p>` : ''}\n        </div>\n        <p>Si necesitas hacer cambios, por favor contáctanos respondiendo a este email.</p>\n        <p>¡Gracias!</p>\n      </div>\n    `;\n    \n    // Texto plano como alternativa\n    const textBody = `\n      Confirmación de Cita\n\n      Hola ${appointment.visitorName},\n      \n      Tu cita ha sido confirmada con los siguientes detalles:\n      \n      Asunto: ${appointment.purpose}\n      Fecha y hora: ${formattedDate}\n      Duración: ${appointment.duration || 30} minutos\n      ${appointment.notes ? `Notas: ${appointment.notes}` : ''}\n      \n      Si necesitas hacer cambios, por favor contáctanos respondiendo a este email.\n      \n      ¡Gracias!\n    `;\n    \n    // Parámetros para enviar email al visitante\n    const visitorEmailParams = {\n      Source: userEmail,\n      Destination: {\n        ToAddresses: [appointment.visitorEmail]\n      },\n      Message: {\n        Subject: {\n          Data: `Confirmación de cita: ${appointment.purpose}`,\n          Charset: 'UTF-8'\n        },\n        Body: {\n          Text: {\n            Data: textBody,\n            Charset: 'UTF-8'\n          },\n          Html: {\n            Data: htmlBody,\n            Charset: 'UTF-8'\n          }\n        }\n      }\n    };\n    \n    // Enviar email al visitante\n    const visitorCommand = new SendEmailCommand(visitorEmailParams);\n    await ses.send(visitorCommand);\n    \n    // Email al propietario/organizador si está configurado\n    if (settings.emailNotificationAddress) {\n      const ownerHtmlBody = `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>Nueva Cita Programada</h2>\n          <p>Se ha programado una nueva cita a través del asistente ${assistantName}:</p>\n          <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n            <p><strong>Visitante:</strong> ${appointment.visitorName} (${appointment.visitorEmail})</p>\n            <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n            <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n            <p><strong>Duración:</strong> ${appointment.duration || 30} minutos</p>\n            ${appointment.notes ? `<p><strong>Notas:</strong> ${appointment.notes}</p>` : ''}\n          </div>\n          <p>Esta cita ha sido añadida a tu calendario.</p>\n        </div>\n      `;\n      \n      const ownerTextBody = `\n        Nueva Cita Programada\n        \n        Se ha programado una nueva cita a través del asistente ${assistantName}:\n        \n        Visitante: ${appointment.visitorName} (${appointment.visitorEmail})\n        Asunto: ${appointment.purpose}\n        Fecha y hora: ${formattedDate}\n        Duración: ${appointment.duration || 30} minutos\n        ${appointment.notes ? `Notas: ${appointment.notes}` : ''}\n        \n        Esta cita ha sido añadida a tu calendario.\n      `;\n      \n      const ownerEmailParams = {\n        Source: userEmail,\n        Destination: {\n          ToAddresses: [settings.emailNotificationAddress]\n        },\n        Message: {\n          Subject: {\n            Data: `Nueva cita programada: ${appointment.purpose}`,\n            Charset: 'UTF-8'\n          },\n          Body: {\n            Text: {\n              Data: ownerTextBody,\n              Charset: 'UTF-8'\n            },\n            Html: {\n              Data: ownerHtmlBody,\n              Charset: 'UTF-8'\n            }\n          }\n        }\n      };\n      \n      const ownerCommand = new SendEmailCommand(ownerEmailParams);\n      await ses.send(ownerCommand);\n    }\n    \n  } catch (error) {\n    console.error('Error sending appointment confirmation email:', error);\n    throw new Error('Failed to send appointment confirmation email');\n  }\n}\n\n/**\n * Envía un recordatorio de cita al visitante\n * \n * @param appointment Datos de la cita\n * @param userEmail Email del propietario/organizador\n */\nexport async function sendAppointmentReminder(\n  appointment: Appointment,\n  userEmail: string\n): Promise<void> {\n  const ses = configureSES();\n  if (!ses) return;\n  \n  try {\n    const date = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const formattedDate = date.toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    // HTML para el email\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2>Recordatorio de Cita</h2>\n        <p>Hola ${appointment.visitorName},</p>\n        <p>Te recordamos que tienes una cita programada para mañana:</p>\n        <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n          <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n          <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n          <p><strong>Duración:</strong> ${appointment.duration || 30} minutos</p>\n          ${appointment.notes ? `<p><strong>Notas:</strong> ${appointment.notes}</p>` : ''}\n        </div>\n        <p>Si necesitas reprogramar o cancelar, por favor contáctanos lo antes posible.</p>\n        <p>¡Gracias!</p>\n      </div>\n    `;\n    \n    // Texto plano como alternativa\n    const textBody = `\n      Recordatorio de Cita\n      \n      Hola ${appointment.visitorName},\n      \n      Te recordamos que tienes una cita programada para mañana:\n      \n      Asunto: ${appointment.purpose}\n      Fecha y hora: ${formattedDate}\n      Duración: ${appointment.duration || 30} minutos\n      ${appointment.notes ? `Notas: ${appointment.notes}` : ''}\n      \n      Si necesitas reprogramar o cancelar, por favor contáctanos lo antes posible.\n      \n      ¡Gracias!\n    `;\n    \n    // Parámetros para enviar email\n    const params = {\n      Source: userEmail,\n      Destination: {\n        ToAddresses: [appointment.visitorEmail]\n      },\n      Message: {\n        Subject: {\n          Data: `Recordatorio de cita: ${appointment.purpose}`,\n          Charset: 'UTF-8'\n        },\n        Body: {\n          Text: {\n            Data: textBody,\n            Charset: 'UTF-8'\n          },\n          Html: {\n            Data: htmlBody,\n            Charset: 'UTF-8'\n          }\n        }\n      }\n    };\n    \n    const command = new SendEmailCommand(params);\n    await ses.send(command);\n    \n  } catch (error) {\n    console.error('Error sending appointment reminder email:', error);\n    throw new Error('Failed to send appointment reminder email');\n  }\n}\n\n/**\n * Envía una notificación de actualización de cita\n * \n * @param appointment Datos actualizados de la cita\n * @param userEmail Email del propietario/organizador\n * @param changes Descripción de los cambios realizados\n */\nexport async function sendAppointmentUpdateNotification(\n  appointment: Appointment,\n  userEmail: string,\n  changes: string\n): Promise<void> {\n  const ses = configureSES();\n  if (!ses) return;\n  \n  try {\n    const date = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const formattedDate = date.toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    // HTML para el email\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2>Actualización de Cita</h2>\n        <p>Hola ${appointment.visitorName},</p>\n        <p>Ha habido cambios en tu cita:</p>\n        <p style=\"background-color: #fff3cd; padding: 10px; border-radius: 5px;\">${changes}</p>\n        <p>Los detalles actualizados son:</p>\n        <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n          <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n          <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n          <p><strong>Duración:</strong> ${appointment.duration || 30} minutos</p>\n          ${appointment.notes ? `<p><strong>Notas:</strong> ${appointment.notes}</p>` : ''}\n        </div>\n        <p>Hemos actualizado la invitación del calendario.</p>\n        <p>Si tienes alguna pregunta, por favor contáctanos respondiendo a este email.</p>\n        <p>¡Gracias!</p>\n      </div>\n    `;\n    \n    // Texto plano como alternativa\n    const textBody = `\n      Actualización de Cita\n      \n      Hola ${appointment.visitorName},\n      \n      Ha habido cambios en tu cita:\n      \n      ${changes}\n      \n      Los detalles actualizados son:\n      \n      Asunto: ${appointment.purpose}\n      Fecha y hora: ${formattedDate}\n      Duración: ${appointment.duration || 30} minutos\n      ${appointment.notes ? `Notas: ${appointment.notes}` : ''}\n      \n      Hemos actualizado la invitación del calendario.\n      \n      Si tienes alguna pregunta, por favor contáctanos respondiendo a este email.\n      \n      ¡Gracias!\n    `;\n    \n    // Parámetros para enviar email\n    const params = {\n      Source: userEmail,\n      Destination: {\n        ToAddresses: [appointment.visitorEmail]\n      },\n      Message: {\n        Subject: {\n          Data: `Actualización de cita: ${appointment.purpose}`,\n          Charset: 'UTF-8'\n        },\n        Body: {\n          Text: {\n            Data: textBody,\n            Charset: 'UTF-8'\n          },\n          Html: {\n            Data: htmlBody,\n            Charset: 'UTF-8'\n          }\n        }\n      }\n    };\n    \n    const command = new SendEmailCommand(params);\n    await ses.send(command);\n    \n  } catch (error) {\n    console.error('Error sending appointment update notification:', error);\n    throw new Error('Failed to send appointment update notification');\n  }\n}\n\n/**\n * Envía una notificación de cancelación de cita\n * \n * @param appointment Datos de la cita cancelada\n * @param userEmail Email del propietario/organizador\n * @param reason Motivo de la cancelación\n */\nexport async function sendAppointmentCancellationNotification(\n  appointment: Appointment,\n  userEmail: string,\n  reason?: string\n): Promise<void> {\n  const ses = configureSES();\n  if (!ses) return;\n  \n  try {\n    const date = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const formattedDate = date.toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    // HTML para el email\n    const htmlBody = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2>Cancelación de Cita</h2>\n        <p>Hola ${appointment.visitorName},</p>\n        <p>Lamentamos informarte que la siguiente cita ha sido cancelada:</p>\n        <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n          <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n          <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n        </div>\n        ${reason ? `<p><strong>Motivo de la cancelación:</strong> ${reason}</p>` : ''}\n        <p>Para reprogramar, por favor contáctanos o programa una nueva cita a través de nuestro asistente.</p>\n        <p>Disculpamos cualquier inconveniente que esto pueda causarte.</p>\n        <p>¡Gracias por tu comprensión!</p>\n      </div>\n    `;\n    \n    // Texto plano como alternativa\n    const textBody = `\n      Cancelación de Cita\n      \n      Hola ${appointment.visitorName},\n      \n      Lamentamos informarte que la siguiente cita ha sido cancelada:\n      \n      Asunto: ${appointment.purpose}\n      Fecha y hora: ${formattedDate}\n      \n      ${reason ? `Motivo de la cancelación: ${reason}` : ''}\n      \n      Para reprogramar, por favor contáctanos o programa una nueva cita a través de nuestro asistente.\n      \n      Disculpamos cualquier inconveniente que esto pueda causarte.\n      \n      ¡Gracias por tu comprensión!\n    `;\n    \n    // Parámetros para enviar email\n    const params = {\n      Source: userEmail,\n      Destination: {\n        ToAddresses: [appointment.visitorEmail]\n      },\n      Message: {\n        Subject: {\n          Data: `Cancelación de cita: ${appointment.purpose}`,\n          Charset: 'UTF-8'\n        },\n        Body: {\n          Text: {\n            Data: textBody,\n            Charset: 'UTF-8'\n          },\n          Html: {\n            Data: htmlBody,\n            Charset: 'UTF-8'\n          }\n        }\n      }\n    };\n    \n    const command = new SendEmailCommand(params);\n    await ses.send(command);\n    \n  } catch (error) {\n    console.error('Error sending appointment cancellation notification:', error);\n    throw new Error('Failed to send appointment cancellation notification');\n  }\n}","size_bytes":14864},"server/lib/content-knowledge.ts":{"content":"// Sistema de conocimiento personalizado para cada chatbot\nexport function buildKnowledgeBase(integration: any, documents: any[], siteContent: any[]): string {\n  let knowledgeBase = integration.botBehavior || \"Eres un asistente útil para este sitio web.\";\n  \n  console.log(`buildKnowledgeBase Debug: Building knowledge for ${integration.name}`);\n  console.log(`buildKnowledgeBase Debug: Documents count: ${documents.length}`);\n  console.log(`buildKnowledgeBase Debug: Site content count: ${siteContent.length}`);\n  \n  // Agregar información específica del sitio web basada en la integración\n  knowledgeBase += `\n\nINFORMACIÓN ESPECÍFICA DEL SITIO WEB:\nNombre del sitio: ${integration.name}\nURL: ${integration.url}\nDescripción: ${integration.description || 'No hay descripción disponible'}\n\n`;\n\n  // Agregar documentos específicos subidos por el usuario\n  if (documents && documents.length > 0) {\n    knowledgeBase += \"\\n\\nDOCUMENTOS Y ARCHIVOS SUBIDOS POR EL USUARIO:\\n\";\n    documents.forEach(doc => {\n      if (doc.content) {\n        knowledgeBase += `\\n--- DOCUMENTO: ${doc.original_name || doc.filename} ---\\n`;\n        knowledgeBase += `${doc.content}\\n\\n`;\n      }\n    });\n  }\n  \n  // Agregar contenido específico del sitio web extraído por scraping\n  if (siteContent && siteContent.length > 0) {\n    knowledgeBase += \"\\n\\nCONTENIDO EXTRAÍDO DEL SITIO WEB:\\n\";\n    siteContent.forEach(content => {\n      if (content.content && content.title) {\n        knowledgeBase += `\\n--- PÁGINA: ${content.title} ---\\n`;\n        knowledgeBase += `URL: ${content.url}\\n`;\n        knowledgeBase += `Contenido: ${content.content}\\n\\n`;\n      }\n    });\n  }\n  \n  // Solo agregar información de AIPPS si es la integración específica de AIPPS\n  if (integration.apiKey === 'aipps_web_internal' || integration.name.toLowerCase().includes('aipps')) {\n    knowledgeBase += `\\n\\nINFORMACIÓN SOBRE AIPPS (solo para consultas sobre la plataforma):\nAIPPS es una plataforma de inteligencia artificial que permite crear chatbots y formularios interactivos.\n- Características: Widget personalizable, soporte multiidioma, integración WordPress\n- Planes: Gratuito (100 conversaciones/mes), Profesional, Empresarial\n- Implementación: Registro → Crear integración → Insertar código → Configurar\n`;\n  }\n\n  knowledgeBase += `\n\nINSTRUCCIONES ESPECÍFICAS PARA ESTE CHATBOT:\n- Eres el asistente virtual de ${integration.name} (${integration.url})\n- Responde ÚNICAMENTE basándote en la información de ESTE sitio web específico y los documentos proporcionados\n- Si hay documentos subidos, úsalos como fuente principal de información\n- Si te preguntan sobre otros sitios web o servicios no relacionados, explica que solo puedes ayudar con información de ${integration.name}\n- Responde siempre en el idioma en que te hablen\n- Si no tienes información específica, di que puedes ayudar con consultas relacionadas con ${integration.name}\n- Mantén un tono profesional y servicial\n- Identifícate como el asistente de ${integration.name} cuando sea apropiado\n`;\n\n  return knowledgeBase;\n}\n\nexport function extractRelevantInfo(userMessage: string, knowledgeBase: string): string {\n  // Palabras clave para identificar temas específicos\n  const keywords = {\n    integration: ['integración', 'integrar', 'instalar', 'implementar', 'código'],\n    forms: ['formulario', 'form', 'campo', 'envío'],\n    chat: ['chat', 'chatbot', 'widget', 'conversación'],\n    api: ['api', 'endpoint', 'webhook', 'developer'],\n    pricing: ['precio', 'plan', 'costo', 'pago', 'suscripción'],\n    technical: ['error', 'problema', 'no funciona', 'ayuda técnica']\n  };\n  \n  const message = userMessage.toLowerCase();\n  let relevantSections = [];\n  \n  // Identificar secciones relevantes basado en palabras clave\n  for (const [topic, words] of Object.entries(keywords)) {\n    if (words.some(word => message.includes(word))) {\n      relevantSections.push(topic);\n    }\n  }\n  \n  // Extraer secciones relevantes del knowledge base\n  if (relevantSections.length > 0) {\n    const lines = knowledgeBase.split('\\n');\n    let relevantInfo = '';\n    let capturing = false;\n    \n    for (const line of lines) {\n      if (line.includes('CARACTERÍSTICAS PRINCIPALES') || \n          line.includes('IMPLEMENTACIÓN') || \n          line.includes('PLANES DISPONIBLES') ||\n          line.includes('SOPORTE TÉCNICO')) {\n        capturing = true;\n        relevantInfo += line + '\\n';\n      } else if (capturing && line.trim() === '') {\n        capturing = false;\n      } else if (capturing) {\n        relevantInfo += line + '\\n';\n      }\n    }\n    \n    return relevantInfo || knowledgeBase.substring(0, 3000);\n  }\n  \n  return knowledgeBase.substring(0, 3000);\n}","size_bytes":4719},"server/lib/document-processor-enhanced.ts":{"content":"import fs from 'fs';\nimport mammoth from 'mammoth';\nimport pdfParse from 'pdf-parse';\n\nexport class EnhancedDocumentProcessor {\n  async processDocumentContent(filePath: string, mimetype: string): Promise<string> {\n    try {\n      if (!fs.existsSync(filePath)) {\n        return 'Archivo no encontrado';\n      }\n\n      switch (mimetype) {\n        case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':\n          return await this.processWordDocument(filePath);\n        case 'application/pdf':\n          return await this.processPDFDocument(filePath);\n        case 'text/plain':\n          return fs.readFileSync(filePath, 'utf8');\n        default:\n          return 'Tipo de archivo no soportado para extracción de contenido';\n      }\n    } catch (error) {\n      console.error('Error processing document:', error);\n      return 'Error al procesar el documento';\n    }\n  }\n\n  private async processWordDocument(filePath: string): Promise<string> {\n    try {\n      const result = await mammoth.extractRawText({ path: filePath });\n      return result.value || 'No se pudo extraer texto del documento Word';\n    } catch (error) {\n      console.error('Error processing Word document:', error);\n      return 'Error al procesar documento Word';\n    }\n  }\n\n  private async processPDFDocument(filePath: string): Promise<string> {\n    try {\n      const dataBuffer = fs.readFileSync(filePath);\n      const result = await pdfParse(dataBuffer);\n      return result.text || 'No se pudo extraer texto del PDF';\n    } catch (error) {\n      console.error('Error processing PDF document:', error);\n      return 'Error al procesar documento PDF';\n    }\n  }\n}\n\nexport const enhancedDocumentProcessor = new EnhancedDocumentProcessor();","size_bytes":1735},"server/lib/document-processor.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport mammoth from 'mammoth';\n\n// Procesador de documentos para extraer texto de diferentes formatos\nexport class DocumentProcessor {\n  /**\n   * Procesa un documento y extrae su contenido como texto\n   * \n   * @param filePath Ruta al archivo a procesar\n   * @param mimetype Tipo MIME del archivo\n   * @returns El contenido del documento como texto, o null si no se pudo procesar\n   */\n  async processDocument(filePath: string, mimetype: string): Promise<string | null> {\n    try {\n      // Procesar documentos de texto plano\n      if (mimetype === 'text/plain') {\n        return await fs.promises.readFile(filePath, 'utf-8');\n      }\n      \n      // Procesar documentos DOCX (Word)\n      if (mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        console.log(`Procesando documento DOCX: ${filePath}`);\n        const result = await mammoth.extractRawText({ path: filePath });\n        console.log(`Documento DOCX procesado, texto extraído: ${result.value.substring(0, 100)}...`);\n        return result.value;\n      }\n      \n      // Procesar documentos PDF\n      if (mimetype === 'application/pdf') {\n        console.log(`Procesando documento PDF: ${filePath}`);\n        try {\n          // Importar pdf-parse dinámicamente para evitar errores si no está instalado\n          const pdfParse = await import('pdf-parse');\n          const dataBuffer = await fs.promises.readFile(filePath);\n          const data = await pdfParse.default(dataBuffer);\n          console.log(`Documento PDF procesado, extraídos ${data.text.length} caracteres`);\n          return data.text;\n        } catch (err) {\n          console.error(`Error al procesar PDF ${path.basename(filePath)}:`, err);\n          const errorMessage = err instanceof Error ? err.message : String(err);\n          return `[Error al procesar el documento PDF: ${path.basename(filePath)}. ${errorMessage}]`;\n        }\n      }\n      \n      // Procesar documentos de Excel (XLSX)\n      if (mimetype === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {\n        return `[Este documento de Excel está disponible pero su contenido solo puede ser procesado como datos tabulares: ${path.basename(filePath)}]`;\n      }\n      \n      // Para otros tipos de documentos no soportados actualmente\n      return `[Documento disponible pero el contenido no pudo ser extraído automáticamente: ${path.basename(filePath)}]`;\n    } catch (error) {\n      console.error(`Error procesando documento ${filePath}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Procesa varios documentos y devuelve su contenido\n   * \n   * @param documents Array de información de documentos con path y mimetype\n   * @returns Array de contenidos de los documentos\n   */\n  async processDocuments(documents: Array<{ path: string, mimetype: string, originalName: string }>): Promise<Array<{ originalName: string, content: string }>> {\n    const results = [];\n    \n    for (const doc of documents) {\n      try {\n        const content = await this.processDocument(doc.path, doc.mimetype);\n        if (content) {\n          results.push({\n            originalName: doc.originalName,\n            content\n          });\n        }\n      } catch (error) {\n        console.error(`Error procesando documento ${doc.originalName}:`, error);\n      }\n    }\n    \n    return results;\n  }\n}\n\nexport const documentProcessor = new DocumentProcessor();","size_bytes":3491},"server/lib/email-notification.ts":{"content":"/**\n * Módulo para envío de notificaciones por email\n */\nimport { Appointment, Settings } from '@shared/schema';\nimport { storage } from '../storage';\nimport sgMail from '@sendgrid/mail';\n\n// Configurar SendGrid API key\nif (process.env.SENDGRID_API_KEY) {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\n/**\n * Envía un email de confirmación de cita al visitante y al propietario\n * \n * @param appointment Datos de la cita\n * @param userEmail Email del propietario/organizador\n * @param settings Configuración del usuario\n */\nexport async function sendAppointmentConfirmation(\n  appointment: Appointment,\n  userEmail: string,\n  settings: Settings\n): Promise<void> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.warn('SendGrid API key not configured. Cannot send email notifications.');\n    return;\n  }\n  \n  try {\n    const assistantName = settings?.assistantName || 'AIPI Assistant';\n    const date = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const formattedDate = date.toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    // Email al visitante\n    await sgMail.send({\n      to: appointment.visitorEmail,\n      from: userEmail,\n      subject: `Confirmación de cita: ${appointment.purpose}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>Confirmación de Cita</h2>\n          <p>Hola ${appointment.visitorName},</p>\n          <p>Tu cita ha sido confirmada con los siguientes detalles:</p>\n          <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n            <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n            <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n            <p><strong>Duración:</strong> ${appointment.duration || 30} minutos</p>\n            ${appointment.notes ? `<p><strong>Notas:</strong> ${appointment.notes}</p>` : ''}\n          </div>\n          <p>Puedes agregar esta cita a tu calendario utilizando el archivo adjunto.</p>\n          <p>Si necesitas hacer cambios, por favor contáctanos respondiendo a este email.</p>\n          <p>¡Gracias!</p>\n        </div>\n      `\n    });\n    \n    // Email al propietario/organizador\n    if (settings.emailNotificationAddress) {\n      await sgMail.send({\n        to: settings.emailNotificationAddress,\n        from: userEmail,\n        subject: `Nueva cita programada: ${appointment.purpose}`,\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2>Nueva Cita Programada</h2>\n            <p>Se ha programado una nueva cita a través del asistente ${assistantName}:</p>\n            <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n              <p><strong>Visitante:</strong> ${appointment.visitorName} (${appointment.visitorEmail})</p>\n              <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n              <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n              <p><strong>Duración:</strong> ${appointment.duration || 30} minutos</p>\n              ${appointment.notes ? `<p><strong>Notas:</strong> ${appointment.notes}</p>` : ''}\n            </div>\n            <p>Esta cita ha sido añadida a tu calendario.</p>\n          </div>\n        `\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error sending appointment confirmation email:', error);\n    throw new Error('Failed to send appointment confirmation email');\n  }\n}\n\n/**\n * Envía un recordatorio de cita al visitante\n * \n * @param appointment Datos de la cita\n * @param userEmail Email del propietario/organizador\n */\nexport async function sendAppointmentReminder(\n  appointment: Appointment,\n  userEmail: string\n): Promise<void> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.warn('SendGrid API key not configured. Cannot send email notifications.');\n    return;\n  }\n  \n  try {\n    const date = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const formattedDate = date.toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    // Email de recordatorio al visitante\n    await sgMail.send({\n      to: appointment.visitorEmail,\n      from: userEmail,\n      subject: `Recordatorio de cita: ${appointment.purpose}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>Recordatorio de Cita</h2>\n          <p>Hola ${appointment.visitorName},</p>\n          <p>Te recordamos que tienes una cita programada para mañana:</p>\n          <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n            <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n            <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n            <p><strong>Duración:</strong> ${appointment.duration || 30} minutos</p>\n            ${appointment.notes ? `<p><strong>Notas:</strong> ${appointment.notes}</p>` : ''}\n          </div>\n          <p>Si necesitas reprogramar o cancelar, por favor contáctanos lo antes posible.</p>\n          <p>¡Gracias!</p>\n        </div>\n      `\n    });\n    \n  } catch (error) {\n    console.error('Error sending appointment reminder email:', error);\n    throw new Error('Failed to send appointment reminder email');\n  }\n}\n\n/**\n * Envía una notificación de actualización de cita\n * \n * @param appointment Datos actualizados de la cita\n * @param userEmail Email del propietario/organizador\n * @param changes Descripción de los cambios realizados\n */\nexport async function sendAppointmentUpdateNotification(\n  appointment: Appointment,\n  userEmail: string,\n  changes: string\n): Promise<void> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.warn('SendGrid API key not configured. Cannot send email notifications.');\n    return;\n  }\n  \n  try {\n    const date = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const formattedDate = date.toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    // Email de notificación de actualización\n    await sgMail.send({\n      to: appointment.visitorEmail,\n      from: userEmail,\n      subject: `Actualización de cita: ${appointment.purpose}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>Actualización de Cita</h2>\n          <p>Hola ${appointment.visitorName},</p>\n          <p>Ha habido cambios en tu cita:</p>\n          <p style=\"background-color: #fff3cd; padding: 10px; border-radius: 5px;\">${changes}</p>\n          <p>Los detalles actualizados son:</p>\n          <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n            <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n            <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n            <p><strong>Duración:</strong> ${appointment.duration || 30} minutos</p>\n            ${appointment.notes ? `<p><strong>Notas:</strong> ${appointment.notes}</p>` : ''}\n          </div>\n          <p>Hemos actualizado la invitación del calendario.</p>\n          <p>Si tienes alguna pregunta, por favor contáctanos respondiendo a este email.</p>\n          <p>¡Gracias!</p>\n        </div>\n      `\n    });\n    \n  } catch (error) {\n    console.error('Error sending appointment update notification:', error);\n    throw new Error('Failed to send appointment update notification');\n  }\n}\n\n/**\n * Envía una notificación de cancelación de cita\n * \n * @param appointment Datos de la cita cancelada\n * @param userEmail Email del propietario/organizador\n * @param reason Motivo de la cancelación\n */\nexport async function sendAppointmentCancellationNotification(\n  appointment: Appointment,\n  userEmail: string,\n  reason?: string\n): Promise<void> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.warn('SendGrid API key not configured. Cannot send email notifications.');\n    return;\n  }\n  \n  try {\n    const date = new Date(`${appointment.appointmentDate}T${appointment.appointmentTime}`);\n    const formattedDate = date.toLocaleString('es-ES', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    // Email de notificación de cancelación\n    await sgMail.send({\n      to: appointment.visitorEmail,\n      from: userEmail,\n      subject: `Cancelación de cita: ${appointment.purpose}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>Cancelación de Cita</h2>\n          <p>Hola ${appointment.visitorName},</p>\n          <p>Lamentamos informarte que la siguiente cita ha sido cancelada:</p>\n          <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n            <p><strong>Asunto:</strong> ${appointment.purpose}</p>\n            <p><strong>Fecha y hora:</strong> ${formattedDate}</p>\n          </div>\n          ${reason ? `<p><strong>Motivo de la cancelación:</strong> ${reason}</p>` : ''}\n          <p>Para reprogramar, por favor contáctanos o programa una nueva cita a través de nuestro asistente.</p>\n          <p>Disculpamos cualquier inconveniente que esto pueda causarte.</p>\n          <p>¡Gracias por tu comprensión!</p>\n        </div>\n      `\n    });\n    \n  } catch (error) {\n    console.error('Error sending appointment cancellation notification:', error);\n    throw new Error('Failed to send appointment cancellation notification');\n  }\n}","size_bytes":9884},"server/lib/get-base-url.ts":{"content":"export function getBaseUrl(): string {\n  // Si APP_URL está definido, usarlo (máxima prioridad)\n  if (process.env.APP_URL) {\n    return process.env.APP_URL;\n  }\n  \n  // En un entorno de Railway, usar RAILWAY_STATIC_URL si está disponible\n  if (process.env.RAILWAY_STATIC_URL) {\n    return process.env.RAILWAY_STATIC_URL;\n  }\n  \n  // En un entorno de Replit, construir la URL basada en la información del entorno\n  const replitSlug = process.env.REPL_SLUG;\n  const replitOwner = process.env.REPL_OWNER;\n  if (replitSlug && replitOwner) {\n    return `https://${replitSlug}.${replitOwner}.repl.co`;\n  }\n  \n  // URL por defecto como último recurso\n  return process.env.NODE_ENV === 'production' \n    ? 'https://aipps.ca' \n    : 'http://localhost:5000';\n}\n","size_bytes":756},"server/lib/google-calendar.ts":{"content":"import axios from 'axios';\nimport { storage } from '../storage';\nimport { CalendarToken } from '@shared/schema';\n\n// Constantes para la API de Google Calendar\nconst GOOGLE_OAUTH_URL = 'https://accounts.google.com/o/oauth2/v2/auth';\nconst GOOGLE_TOKEN_URL = 'https://oauth2.googleapis.com/token';\nconst GOOGLE_CALENDAR_API_URL = 'https://www.googleapis.com/calendar/v3';\nconst GOOGLE_API_SCOPES = [\n  'https://www.googleapis.com/auth/calendar',\n  'https://www.googleapis.com/auth/calendar.events'\n];\n\n// Cliente ID y secreto deben estar guardados como variables de entorno\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\n// Determinar la URL de redireccionamiento basada en el entorno\n// Usamos un método en lugar de una constante para poder actualizar dinámicamente la URL \n// según el entorno actual\nfunction getRedirectUrl(req?: any, customUrl?: string): string {\n  // Si se proporciona una URL personalizada, usarla con la prioridad más alta\n  if (customUrl && customUrl.trim()) {\n    console.log(`Usando URL personalizada: ${customUrl}`);\n    return customUrl;\n  }\n\n  // Usamos el hostname de la solicitud actual si está disponible\n  if (req && req.headers && req.headers.host) {\n    const protocol = req.headers['x-forwarded-proto'] || 'http';\n    console.log(`Usando URL de redirección dinámica: ${protocol}://${req.headers.host}/api/auth/google-calendar/callback`);\n    return `${protocol}://${req.headers.host}/api/auth/google-calendar/callback`;\n  }\n  \n  // Si APP_URL está definido, usarlo (prioridad media)\n  if (process.env.APP_URL) {\n    console.log(`Usando APP_URL: ${process.env.APP_URL}/api/auth/google-calendar/callback`);\n    return `${process.env.APP_URL}/api/auth/google-calendar/callback`;\n  }\n  \n  // Construir URL basada en información de Replit (prioridad baja)\n  const replitId = process.env.REPL_ID || '';\n  if (replitId) {\n    const url = `https://aipps.ca/api/auth/google-calendar/callback`;\n    console.log(`Usando URL de Replit ID: ${url}`);\n    return url;\n  }\n  \n  // URL por defecto como último recurso\n  console.log('Usando URL por defecto: https://localhost:5000/api/auth/google-calendar/callback');\n  return 'https://aipps.ca/api/auth/google-calendar/callback';\n}\n\n// Variable para almacenar la URL actual (se actualizará en cada solicitud)\nlet REDIRECT_URL = getRedirectUrl();\n\n/**\n * Genera la URL para autorización OAuth de Google\n */\nexport function getGoogleAuthUrl(userId: number, state?: string, req?: any, customUrl?: string): string {\n  // Actualizar la URL de redirección con la solicitud actual o URL personalizada\n  if (customUrl || req) {\n    REDIRECT_URL = getRedirectUrl(req, customUrl);\n    console.log(\"INFO REDIRECCIÓN GOOGLE CALENDAR:\");\n    console.log(\"URL de autorización:\", REDIRECT_URL);\n    console.log(\"REDIRECT_URL completa:\", encodeURIComponent(REDIRECT_URL));\n  }\n  \n  const params = new URLSearchParams({\n    client_id: GOOGLE_CLIENT_ID!,\n    redirect_uri: REDIRECT_URL,\n    response_type: 'code',\n    scope: GOOGLE_API_SCOPES.join(' '),\n    access_type: 'offline',\n    prompt: 'consent', // Para asegurar que siempre obtenemos refresh token\n    state: state || `user_id=${userId}`\n  });\n\n  return `${GOOGLE_OAUTH_URL}?${params.toString()}`;\n}\n\n/**\n * Intercambia el código de autorización por tokens de acceso y refresco\n */\nexport async function exchangeCodeForTokens(code: string): Promise<{\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n}> {\n  try {\n    const response = await axios.post(GOOGLE_TOKEN_URL, {\n      code,\n      client_id: GOOGLE_CLIENT_ID,\n      client_secret: GOOGLE_CLIENT_SECRET,\n      redirect_uri: REDIRECT_URL,\n      grant_type: 'authorization_code'\n    });\n\n    return {\n      access_token: response.data.access_token,\n      refresh_token: response.data.refresh_token,\n      expires_in: response.data.expires_in\n    };\n  } catch (error) {\n    console.error('Error intercambiando código por tokens:', error);\n    throw new Error('No se pudo obtener los tokens de acceso');\n  }\n}\n\n/**\n * Refresca el token de acceso usando el refresh token\n */\nexport async function refreshAccessToken(refreshToken: string): Promise<string> {\n  try {\n    const response = await axios.post(GOOGLE_TOKEN_URL, {\n      client_id: GOOGLE_CLIENT_ID,\n      client_secret: GOOGLE_CLIENT_SECRET,\n      refresh_token: refreshToken,\n      grant_type: 'refresh_token'\n    });\n\n    return response.data.access_token;\n  } catch (error) {\n    console.error('Error refrescando token de acceso:', error);\n    throw new Error('No se pudo refrescar el token de acceso');\n  }\n}\n\n/**\n * Obtiene un token de acceso válido, refrescándolo si es necesario\n */\nexport async function getValidAccessToken(calendarToken: CalendarToken): Promise<string> {\n  // Verificar si el token ha expirado\n  const now = new Date();\n  const tokenExpiry = new Date(calendarToken.expiresAt!);\n\n  if (now >= tokenExpiry && calendarToken.refreshToken) {\n    // El token ha expirado, refrescar usando refresh token\n    const newAccessToken = await refreshAccessToken(calendarToken.refreshToken);\n    \n    // Actualizar el token en la base de datos\n    const expiresAt = new Date();\n    expiresAt.setSeconds(expiresAt.getSeconds() + 3600); // Típicamente 1 hora para Google\n    \n    await storage.updateCalendarToken(calendarToken.id, {\n      accessToken: newAccessToken,\n      expiresAt: expiresAt\n    });\n    \n    return newAccessToken;\n  }\n  \n  return calendarToken.accessToken!;\n}\n\n/**\n * Crea un evento en Google Calendar\n */\nexport async function createGoogleCalendarEvent(\n  calendarToken: CalendarToken,\n  event: {\n    summary: string; // Título del evento\n    description: string;\n    start: {\n      dateTime: string; // ISO 8601 format\n      timeZone: string;\n    };\n    end: {\n      dateTime: string; // ISO 8601 format\n      timeZone: string;\n    };\n    attendees?: Array<{ email: string }>;\n    reminders?: {\n      useDefault: boolean;\n      overrides?: Array<{ method: string; minutes: number }>\n    };\n  }\n): Promise<{\n  id: string;\n  htmlLink: string; // URL al evento\n}> {\n  try {\n    // Obtener un token de acceso válido\n    const accessToken = await getValidAccessToken(calendarToken);\n    \n    // Crear el evento en Google Calendar\n    const response = await axios.post(\n      `${GOOGLE_CALENDAR_API_URL}/calendars/primary/events`,\n      event,\n      {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    return {\n      id: response.data.id,\n      htmlLink: response.data.htmlLink\n    };\n  } catch (error) {\n    console.error('Error creando evento en Google Calendar:', error);\n    throw new Error('No se pudo crear el evento en Google Calendar');\n  }\n}\n\n/**\n * Formatea un evento para Google Calendar basado en los datos de la cita\n */\nexport function formatGoogleCalendarEvent(\n  appointmentData: {\n    visitorName: string;\n    visitorEmail: string;\n    purpose: string;\n    appointmentDate: string;\n    appointmentTime: string;\n    duration: number;\n    notes?: string;\n  }\n): {\n  summary: string;\n  description: string;\n  start: {\n    dateTime: string;\n    timeZone: string;\n  };\n  end: {\n    dateTime: string;\n    timeZone: string;\n  };\n  attendees: Array<{ email: string }>;\n  reminders: {\n    useDefault: boolean;\n    overrides: Array<{ method: string; minutes: number }>\n  };\n} {\n  // Calcular la fecha y hora de inicio\n  const [hours, minutes] = appointmentData.appointmentTime.split(':').map(Number);\n  const startDateTime = new Date(`${appointmentData.appointmentDate}T${appointmentData.appointmentTime}`);\n  \n  // Calcular la fecha y hora de fin (duración en minutos)\n  const endDateTime = new Date(startDateTime);\n  endDateTime.setMinutes(endDateTime.getMinutes() + (appointmentData.duration || 30));\n  \n  // Crear el objeto evento para Google Calendar\n  return {\n    summary: `Cita con ${appointmentData.visitorName}`,\n    description: `\nPropósito: ${appointmentData.purpose}\n${appointmentData.notes ? 'Notas: ' + appointmentData.notes : ''}\n\nEste evento fue creado automáticamente por AIPI.\n    `.trim(),\n    start: {\n      dateTime: startDateTime.toISOString(),\n      timeZone: 'America/Chicago' // Usar la zona horaria configurada o una predeterminada\n    },\n    end: {\n      dateTime: endDateTime.toISOString(),\n      timeZone: 'America/Chicago'\n    },\n    attendees: [\n      { email: appointmentData.visitorEmail }\n    ],\n    reminders: {\n      useDefault: false,\n      overrides: [\n        { method: 'email', minutes: 60 },\n        { method: 'popup', minutes: 15 }\n      ]\n    }\n  };\n}\n\n/**\n * Actualiza un evento existente en Google Calendar\n */\nexport async function updateGoogleCalendarEvent(\n  calendarToken: CalendarToken,\n  eventId: string,\n  event: {\n    summary: string;\n    description: string;\n    start: {\n      dateTime: string;\n      timeZone: string;\n    };\n    end: {\n      dateTime: string;\n      timeZone: string;\n    };\n    attendees?: Array<{ email: string }>;\n    reminders?: {\n      useDefault: boolean;\n      overrides?: Array<{ method: string; minutes: number }>\n    };\n  }\n): Promise<{\n  id: string;\n  htmlLink: string;\n}> {\n  try {\n    // Obtener un token de acceso válido\n    const accessToken = await getValidAccessToken(calendarToken);\n    \n    // Actualizar el evento en Google Calendar\n    const response = await axios.patch(\n      `${GOOGLE_CALENDAR_API_URL}/calendars/primary/events/${eventId}`,\n      event,\n      {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    return {\n      id: response.data.id,\n      htmlLink: response.data.htmlLink\n    };\n  } catch (error) {\n    console.error('Error actualizando evento en Google Calendar:', error);\n    throw new Error('No se pudo actualizar el evento en Google Calendar');\n  }\n}\n\n/**\n * Elimina un evento de Google Calendar\n */\nexport async function deleteGoogleCalendarEvent(\n  calendarToken: CalendarToken,\n  eventId: string\n): Promise<void> {\n  try {\n    // Obtener un token de acceso válido\n    const accessToken = await getValidAccessToken(calendarToken);\n    \n    // Eliminar el evento de Google Calendar\n    await axios.delete(\n      `${GOOGLE_CALENDAR_API_URL}/calendars/primary/events/${eventId}`,\n      {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n  } catch (error) {\n    console.error('Error eliminando evento de Google Calendar:', error);\n    throw new Error('No se pudo eliminar el evento de Google Calendar');\n  }\n}\n","size_bytes":10693},"server/lib/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// Using \"gpt-4o-mini\" as explicitly requested by the user\nconst OPENAI_MODEL = \"gpt-4o-mini\";\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY || \"sk-yourkeyhere\";\n\nconst openai = new OpenAI({ apiKey: OPENAI_API_KEY });\n\n// Bot configuration interface\ninterface BotConfig {\n  assistantName?: string;\n  defaultGreeting?: string;\n  conversationStyle?: string | null;\n  description?: string | null;\n  isWidget?: boolean;\n}\n\n// Function to generate conversation title based on first messages\nexport async function generateConversationTitle(\n  firstMessage: string,\n  secondMessage?: string,\n  language: string = \"es\"\n): Promise<string> {\n  try {\n    const messages = secondMessage \n      ? `Primera pregunta: \"${firstMessage}\"\\nSegunda pregunta: \"${secondMessage}\"`\n      : `Pregunta inicial: \"${firstMessage}\"`;\n\n    const systemPrompt = language === \"es\" \n      ? \"Genera un título breve y descriptivo (máximo 5 palabras) para esta conversación basándote en las preguntas del usuario. El título debe ser claro y específico sobre el tema principal.\"\n      : language === \"en\"\n      ? \"Generate a brief and descriptive title (maximum 5 words) for this conversation based on the user's questions. The title should be clear and specific about the main topic.\"\n      : \"Générez un titre bref et descriptif (maximum 5 mots) pour cette conversation basé sur les questions de l'utilisateur. Le titre doit être clair et spécifique sur le sujet principal.\";\n\n    const completion = await openai.chat.completions.create({\n      model: OPENAI_MODEL,\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: messages }\n      ],\n      max_tokens: 50,\n      temperature: 0.3\n    });\n\n    const title = completion.choices[0]?.message?.content?.trim();\n    return title || (language === \"es\" ? \"Nueva conversación\" : language === \"en\" ? \"New conversation\" : \"Nouvelle conversation\");\n  } catch (error) {\n    console.error(\"Error generating conversation title:\", error);\n    return language === \"es\" ? \"Nueva conversación\" : language === \"en\" ? \"New conversation\" : \"Nouvelle conversation\";\n  }\n}\n\n// Main chat completion function for conversations\nexport async function generateChatCompletion(\n  messages: Array<{ role: string; content: string }>,\n  context?: string,\n  language?: string,\n  botConfig?: BotConfig\n) {\n  try {\n    // Determinar en qué idioma responder - USAR EL IDIOMA DETECTADO AUTOMÁTICAMENTE\n    const responseLanguage = language || \"es\"; // Default a español si no se especifica idioma\n    \n    // Log para debug\n    console.log(\"OpenAI: Idioma recibido del servidor:\", language);\n    console.log(\"OpenAI: Respondiendo en idioma:\", responseLanguage);\n    console.log(\"OpenAI: Contexto recibido longitud:\", context?.length || 0);\n    console.log(\"OpenAI: Contexto preview:\", context?.substring(0, 200) + \"...\");\n    \n    // Crear configuración personalizada del bot\n    const getBotPersonality = (config?: BotConfig) => {\n      if (!config) return \"\";\n      \n      const name = config.assistantName || \"AIPPS\";\n      const style = config.conversationStyle || \"helpful\";\n      \n      if (responseLanguage === \"fr\") {\n        return `CONFIGURATION DU BOT PERSONNALISÉ:\n- Vous êtes ${name}\n- Votre style de conversation doit être: ${style}\n- Maintenez toujours cette personnalité dans toutes vos réponses\n- Adaptez votre ton et votre approche selon ce style configuré\n\n`;\n      } else if (responseLanguage === \"en\") {\n        return `CUSTOM BOT CONFIGURATION:\n- You are ${name}\n- Your conversation style must be: ${style}\n- Always maintain this personality in all your responses\n- Adapt your tone and approach according to this configured style\n\n`;\n      } else {\n        return `CONFIGURACIÓN PERSONALIZADA DEL BOT:\n- Eres ${name}\n- Tu estilo de conversación debe ser: ${style}\n- Mantén siempre esta personalidad en todas tus respuestas\n- Adapta tu tono y enfoque según este estilo configurado\n\n`;\n      }\n    };\n\n    // Crear mensaje del sistema específico para widgets con restricciones estrictas\n    let systemContent = \"\";\n    \n    // Si es un widget, usar el contexto completo sin restricciones\n    if (botConfig?.isWidget) {\n      const assistantName = botConfig.assistantName || \"Asistente\";\n      const description = botConfig.description || \"un chatbot de ayuda\";\n      const greeting = botConfig.defaultGreeting || \"¡Hola! ¿Cómo puedo ayudarte?\";\n      const behavior = botConfig.conversationStyle || \"servicial\";\n      \n      if (responseLanguage === \"fr\") {\n        // Pour widgets en français, utiliser le contexte complet du site web\n        systemContent = context \n          ? `Vous êtes ${assistantName}, un assistant IA intégré spécifiquement pour ce site web. Votre objectif principal est de fournir des informations utiles, précises et complètes basées sur le contexte du site web et les documents fournis.\n\nINSTRUCTIONS IMPORTANTES:\n1. VOUS AVEZ UN ACCÈS COMPLET à toutes les informations du contexte du site web. Utilisez-les pour répondre aux questions spécifiques.\n2. Pour les questions de CONTACT (téléphone, email, adresse) : Cherchez dans le contexte les informations de contact, données de l'entreprise, formulaires de contact.\n3. Pour les questions sur les SERVICES : Cherchez des informations sur l'IA locale, la sécurité, les dispositifs, l'analyse de données, etc.\n4. NE DITES JAMAIS que vous n'avez pas accès à des informations spécifiques - vous avez un accès complet au contexte du site.\n5. Vos réponses doivent être professionnelles, informatives et orientées vers l'aide aux visiteurs du site.\n6. N'inventez jamais d'informations qui ne sont pas explicitement mentionnées dans le contexte.\n7. Votre comportement doit être: ${behavior}\n8. Répondez toujours en français.\n\nFORMAT DE RÉPONSE REQUIS:\n- Utilisez # pour les titres principaux\n- Utilisez ## pour les sous-titres\n- Utilisez **texte** pour mettre en évidence les informations importantes\n- Utilisez *texte* pour l'emphase\n- Utilisez - pour les listes à puces\n- Utilisez 1. 2. 3. pour les listes numérotées\n- Structurez vos réponses de manière claire et organisée\n- Incluez des titres descriptifs lorsque approprié\n\nCONTEXTE DÉTAILLÉ DU SITE WEB: \n${context}`\n          : `Vous êtes ${assistantName}, un chatbot intégré spécifiquement pour ce site web.\n\nVOTRE DESCRIPTION: \"${description}\"\nVOTRE MESSAGE D'ACCUEIL: \"${greeting}\"\nVOTRE COMPORTEMENT CONFIGURÉ: \"${behavior}\"\n\nVous pouvez aider avec des questions sur ce site web spécifique. Votre comportement doit être: ${behavior}. Répondez toujours en français.`;\n      } else if (responseLanguage === \"en\") {\n        // For English widgets, use the full website context\n        systemContent = context \n          ? `You are ${assistantName}, an AI assistant integrated specifically for this website. Your main goal is to provide useful, accurate, and complete information based on the website context and provided documents.\n\nIMPORTANT INSTRUCTIONS:\n1. YOU HAVE COMPLETE ACCESS to all website context information. Use it to answer specific questions.\n2. For CONTACT questions (phone, email, address): Search context for contact info, company data, contact forms.\n3. For SERVICES questions: Look for information about local AI, security, devices, data analysis, etc.\n4. NEVER say you don't have access to specific information - you have full access to the site context.\n5. Your responses should be professional, informative, and oriented towards helping site visitors.\n6. Never invent information that is not explicitly mentioned in the context.\n7. Your behavior should be: ${behavior}\n8. Always respond in English.\n\nREQUIRED RESPONSE FORMAT:\n- Use # for main titles\n- Use ## for subtitles  \n- Use **text** to highlight important information\n- Use *text* for emphasis\n- Use - for bullet lists\n- Use 1. 2. 3. for numbered lists\n- Structure your responses clearly and organized\n- Include descriptive titles when appropriate\n\nDETAILED WEBSITE CONTEXT: \n${context}`\n          : `You are ${assistantName}, a chatbot specifically integrated for this website.\n\nYOUR DESCRIPTION: \"${description}\"\nYOUR WELCOME MESSAGE: \"${greeting}\"\nYOUR CONFIGURED BEHAVIOR: \"${behavior}\"\n\nYou can help with questions about this specific website. Your behavior should be: ${behavior}. Always respond in English.`;\n      } else {\n        // Para widgets en español, usar el contexto completo del sitio web\n        systemContent = context \n          ? `Eres ${assistantName}, un asistente de IA integrado específicamente para este sitio web. Tu objetivo principal es proporcionar información útil, precisa y completa basada en el contexto del sitio web y los documentos proporcionados.\n\nINSTRUCCIONES IMPORTANTES:\n1. TIENES ACCESO COMPLETO a toda la información del contexto del sitio web. Úsala para responder preguntas específicas.\n2. Para preguntas sobre CONTACTO (teléfono, email, dirección): Busca en el contexto información de contacto, datos de la empresa, formularios de contacto.\n3. Para preguntas sobre SERVICIOS: Busca información sobre IA local, seguridad, dispositivos, análisis de datos, etc.\n4. NUNCA digas que no tienes acceso a información específica - tienes acceso completo al contexto del sitio.\n5. Tus respuestas deben ser profesionales, informativas y orientadas a ser útil para los visitantes del sitio.\n6. Nunca inventes información que no esté explícitamente mencionada en el contexto.\n7. Tu comportamiento debe ser: ${behavior}\n8. Responde siempre en español.\n\nFORMATO DE RESPUESTAS REQUERIDO:\n- Usa # para títulos principales\n- Usa ## para subtítulos\n- Usa **texto** para resaltar información importante\n- Usa *texto* para énfasis\n- Usa - para listas con viñetas\n- Usa 1. 2. 3. para listas numeradas\n- Estructura tus respuestas de manera clara y organizada\n- Incluye títulos descriptivos cuando sea apropiado\n\nCONTEXTO DETALLADO DEL SITIO WEB: \n${context}`\n          : `Eres ${assistantName}, un chatbot integrado específicamente para este sitio web.\n\nTU DESCRIPCIÓN: \"${description}\"\nTU MENSAJE DE BIENVENIDA: \"${greeting}\"\nTU COMPORTAMIENTO CONFIGURADO: \"${behavior}\"\n\nPuedes ayudar con preguntas sobre este sitio web específico. Tu comportamiento debe ser: ${behavior}. Responde siempre en español.`;\n      }\n    } else {\n      // Para la aplicación AIPPS principal (no widgets), usar personalidad + contexto\n      systemContent = getBotPersonality(botConfig);\n      \n      // Prompt original para el dashboard principal de AIPPS\n      if (responseLanguage === \"fr\") {\n        systemContent += context \n          ? `Vous êtes un assistant IA intégré au site web d'AIPPS. Votre objectif principal est de fournir des informations utiles, précises et complètes basées spécifiquement sur le contexte fourni concernant les services, caractéristiques et avantages de la plateforme AIPPS.\n        \nINSTRUCTIONS IMPORTANTES:\n1. Concentrez vos réponses sur les informations que vous trouvez dans le contexte fourni ci-dessous.\n2. Si la question de l'utilisateur concerne un service, une caractéristique ou une fonctionnalité spécifique d'AIPPS, recherchez minutieusement cette information dans le contexte et répondez avec des détails précis.\n3. Soyez particulièrement attentif aux informations sur les prix, les forfaits, les services offerts, les intégrations prises en charge et les caractéristiques de la plateforme.\n4. Accordez une attention particulière aux sections \"SERVICES ET CARACTÉRISTIQUES DÉTECTÉS\" et \"NAVIGATION DU SITE\" du contexte, qui peuvent contenir des informations clés.\n5. Si l'information n'est pas disponible dans le contexte, indiquez clairement que vous n'avez pas d'information spécifique à ce sujet, mais suggérez d'autres caractéristiques ou services que vous connaissez.\n6. Vos réponses doivent être professionnelles, informatives et orientées vers la mise en valeur d'AIPPS.\n7. N'inventez jamais de caractéristiques, prix ou services qui ne sont pas explicitement mentionnés dans le contexte.\n8. Répondez toujours en français.\n\nFORMAT DE RÉPONSE REQUIS:\n- Utilisez # pour les titres principaux\n- Utilisez ## pour les sous-titres\n- Utilisez **texte** pour mettre en évidence les informations importantes\n- Utilisez *texte* pour l'emphase\n- Utilisez - pour les listes à puces\n- Utilisez 1. 2. 3. pour les listes numérotées\n- Structurez vos réponses de manière claire et organisée\n- Incluez des titres descriptifs lorsque approprié\n\nCONTEXTE DÉTAILLÉ DU SITE: \n${context}`\n          : \"Vous êtes AIPPS, un assistant IA intégré au site web d'AIPPS. Vous fournissez des informations concises et précises sur la plateforme AIPPS, ses services, caractéristiques et avantages. Soyez amical, professionnel et serviable. Répondez toujours en français.\";\n      } else if (responseLanguage === \"en\") {\n        systemContent += context \n          ? `You are an AI assistant integrated into the AIPPS website. Your main goal is to provide useful, accurate, and complete information specifically based on the context provided about the services, features, and benefits of the AIPPS platform.\n        \nIMPORTANT INSTRUCTIONS:\n1. Focus your answers on the information you find in the context provided below.\n2. If the user's question refers to a specific AIPPS service, feature, or functionality, thoroughly search for this information in the context and respond with precise details.\n3. Be especially attentive to information about prices, plans, services offered, supported integrations, and platform features.\n4. Pay special attention to the \"DETECTED SERVICES AND FEATURES\" and \"SITE NAVIGATION\" sections of the context, which may contain key information.\n5. If the information is not available in the context, clearly indicate that you don't have specific information about that, but suggest other features or services that you do know about.\n6. Your responses should be professional, informative, and oriented towards highlighting the value of AIPPS.\n7. Never invent features, prices, or services that are not explicitly mentioned in the context.\n8. Always respond in English.\n\nREQUIRED RESPONSE FORMAT:\n- Use # for main titles\n- Use ## for subtitles\n- Use **text** to highlight important information\n- Use *text* for emphasis\n- Use - for bullet lists\n- Use 1. 2. 3. for numbered lists\n- Structure your responses clearly and organized\n- Include descriptive titles when appropriate\n\nDETAILED SITE CONTEXT: \n${context}`\n          : \"You are AIPPS, an AI assistant integrated into the AIPPS website. You provide concise and accurate information about the AIPPS platform, its services, features, and benefits. Be friendly, professional, and helpful. Always respond in English.\";\n      } else {\n        systemContent += context \n          ? `Eres un asistente de IA integrado en el sitio web de AIPPS. Tu objetivo principal es proporcionar información útil, precisa y completa basada específicamente en el contexto proporcionado sobre los servicios, características y beneficios de la plataforma AIPPS.\n        \nINSTRUCCIONES IMPORTANTES:\n1. Enfoca tus respuestas en la información que encuentres en el contexto proporcionado a continuación.\n2. Si la pregunta del usuario se refiere a un servicio, característica o funcionalidad específica de AIPPS, busca exhaustivamente esta información en el contexto y responde con detalles precisos.\n3. Sé especialmente atento a información sobre precios, planes, servicios ofrecidos, integraciones soportadas y características de la plataforma.\n4. Presta especial atención a las secciones \"SERVICIOS Y CARACTERÍSTICAS DETECTADOS\" y \"NAVEGACIÓN DEL SITIO\" del contexto, que pueden contener información clave.\n5. Si la información no está disponible en el contexto, indica claramente que no tienes información específica sobre eso, pero sugiere otras características o servicios que sí conozcas.\n6. Tus respuestas deben ser profesionales, informativas y orientadas a destacar el valor de AIPPS.\n7. Nunca inventes características, precios o servicios que no estén explícitamente mencionados en el contexto.\n8. Responde siempre en español.\n\nFORMATO DE RESPUESTAS REQUERIDO:\n- Usa # para títulos principales\n- Usa ## para subtítulos\n- Usa **texto** para resaltar información importante\n- Usa *texto* para énfasis\n- Usa - para listas con viñetas\n- Usa 1. 2. 3. para listas numeradas\n- Estructura tus respuestas de manera clara y organizada\n- Incluye títulos descriptivos cuando sea apropiado\n\nCONTEXTO DETALLADO DEL SITIO: \n${context}`\n          : \"Eres AIPPS, un asistente de IA integrado en el sitio web de AIPPS. Proporcionas información concisa y precisa sobre la plataforma AIPPS, sus servicios, características y beneficios. Sé amigable, profesional y servicial. Responde siempre en español.\";\n      }\n    }\n    \n    // Crear el objeto de mensaje del sistema\n    const systemMessage = { role: \"system\", content: systemContent };\n    \n    // Log system message for debugging\n    console.log(\"System message length:\", systemMessage.content.length);\n    console.log(\"System message preview:\", systemMessage.content.substring(0, 200) + \"...\");\n    \n    // Log bot configuration details\n    if (botConfig) {\n      console.log(\"AIPPS Debug: Bot personality applied to system message:\", {\n        name: botConfig.assistantName,\n        style: botConfig.conversationStyle,\n        systemMessageIncludesBotConfig: systemMessage.content.includes(\"CONFIGURACIÓN PERSONALIZADA DEL BOT\")\n      });\n    }\n    \n    // Prepare the messages array with the system message first\n    const formattedMessages = [\n      {\n        role: systemMessage.role as \"system\",\n        content: systemMessage.content\n      },\n      ...messages.map(m => ({\n        role: m.role as \"user\" | \"assistant\" | \"system\",\n        content: m.content\n      }))\n    ];\n\n    // Make request to OpenAI\n    const response = await openai.chat.completions.create({\n      model: OPENAI_MODEL,\n      messages: formattedMessages as any, // Type assertion to avoid TypeScript errors\n      temperature: 0.5, // Reduced temperature for more factual responses\n      max_tokens: 800  // Increased max tokens for more complete responses\n    });\n\n    return {\n      message: {\n        role: \"assistant\",\n        content: response.choices[0].message.content\n      }\n    };\n  } catch (error: unknown) {\n    console.error(\"Error generating chat completion:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to generate chat completion: ${errorMessage}`);\n  }\n}\n\n// Sentiment analysis\nexport async function analyzeSentiment(text: string): Promise<{\n  rating: number;\n  confidence: number;\n}> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: OPENAI_MODEL,\n      messages: [\n        {\n          role: \"system\",\n          content:\n            \"You are a sentiment analysis expert. Analyze the sentiment of the text and provide a rating from 1 to 5 stars and a confidence score between 0 and 1. Respond with JSON in this format: { 'rating': number, 'confidence': number }\",\n        },\n        {\n          role: \"user\",\n          content: text,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const content = response.choices[0].message.content || '{\"rating\": 3, \"confidence\": 0.5}';\n    const result = JSON.parse(content);\n\n    return {\n      rating: Math.max(1, Math.min(5, Math.round(result.rating))),\n      confidence: Math.max(0, Math.min(1, result.confidence)),\n    };\n  } catch (error: unknown) {\n    console.error(\"Failed to analyze sentiment:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to analyze sentiment: ${errorMessage}`);\n  }\n}\n\n// Text summarization\nexport async function summarizeText(text: string): Promise<string> {\n  try {\n    const prompt = `Please summarize the following text concisely while maintaining key points:\\n\\n${text}`;\n\n    const response = await openai.chat.completions.create({\n      model: OPENAI_MODEL,\n      messages: [{ role: \"user\", content: prompt }],\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error: unknown) {\n    console.error(\"Failed to summarize text:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to summarize text: ${errorMessage}`);\n  }\n}\n\n// Extract key information\nexport async function extractKeyInformation(text: string, query: string): Promise<string> {\n  try {\n    const prompt = `Extract the key information from the following text that answers this query: \"${query}\"\\n\\nText: ${text}`;\n\n    const response = await openai.chat.completions.create({\n      model: OPENAI_MODEL,\n      messages: [{ role: \"user\", content: prompt }],\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error: unknown) {\n    console.error(\"Failed to extract key information:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to extract key information: ${errorMessage}`);\n  }\n}\n\n// Generate automated response based on user query and website context\nexport async function generateAutomatedResponse(\n  userQuery: string, \n  websiteContext: string,\n  conversationStyle: string = \"professional\",\n  language?: string\n): Promise<string> {\n  try {\n    const stylePrompt = getStylePrompt(conversationStyle);\n    const responseLanguage = language || \"fr\"; // Default a francés (como ha pedido el usuario)\n    \n    // Log para debug\n    console.log(\"Generating automated response in language:\", responseLanguage);\n    \n    // Adaptar el mensaje del sistema según el idioma\n    let systemContent = \"\";\n    \n    if (responseLanguage === \"fr\") {\n      systemContent = \"Vous êtes AIPPS, un assistant IA intégré au site web d'AIPPS. Vous aidez les visiteurs en fournissant des informations précises et utiles sur les services, les caractéristiques et les avantages de la plateforme. Répondez toujours en français.\";\n    } else if (responseLanguage === \"en\") {\n      systemContent = \"You are AIPPS, an AI assistant integrated into the AIPPS website. You help visitors by providing accurate and useful information about the platform's services, features, and benefits. Always respond in English.\";\n    } else {\n      systemContent = \"Eres AIPPS, un asistente de IA integrado en el sitio web de AIPPS. Ayudas a los visitantes proporcionando información precisa y útil sobre los servicios, características y beneficios de la plataforma. Responde siempre en español.\";\n    }\n    \n    const prompt = `\n      ${stylePrompt}\n      \n      Website context information:\n      ${websiteContext}\n      \n      User query:\n      ${userQuery}\n      \n      Generate a helpful response that addresses the user's question using the context information provided. \n      If the information to answer the question is not in the context, provide a general helpful response \n      and suggest where they might find that information.\n    `;\n\n    const response = await openai.chat.completions.create({\n      model: OPENAI_MODEL,\n      messages: [\n        { role: \"system\", content: systemContent },\n        { role: \"user\", content: prompt }\n      ],\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error: unknown) {\n    console.error(\"Failed to generate automated response:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to generate automated response: ${errorMessage}`);\n  }\n}\n\n// Generate AI promotional messages for marketing campaigns\nexport async function generateAIPromotionalMessages(language = 'es'): Promise<Array<{\n  message_text: string;\n  message_type: string;\n  display_order: number;\n}>> {\n  try {\n    let systemPrompt = '';\n    let fallbackMessages: Array<{\n      message_text: string;\n      message_type: string;\n      display_order: number;\n    }> = [];\n    \n    if (language === 'fr') {\n      systemPrompt = `Vous êtes un expert en marketing numérique spécialisé dans les plateformes d'IA conversationnelle. \n      Générez exactement 7 messages promotionnels uniques et très attrayants pour AIPPS, une plateforme de chatbots avec IA.\n      \n      Les messages doivent:\n      - Être accrocheurs, commerciaux et détaillés\n      - Mettre en évidence différents avantages spécifiques d'AIPPS\n      - Être variés dans l'approche (automatisation, prospects, ventes, support, productivité, ROI, etc.)\n      - Avoir entre 20-35 mots chacun pour être plus descriptifs et engageants\n      - Inclure des emojis pertinents\n      - Créer de l'urgence, de l'intérêt et montrer la valeur concrète\n      - Focus sur les bénéfices business concrets et mesurables\n      \n      Répondez UNIQUEMENT avec un JSON valide dans ce format:\n      {\n        \"messages\": [\n          {\"text\": \"🚀 Message 1\", \"order\": 1},\n          {\"text\": \"💬 Message 2\", \"order\": 2},\n          {\"text\": \"⚡ Message 3\", \"order\": 3},\n          {\"text\": \"📈 Message 4\", \"order\": 4},\n          {\"text\": \"🎯 Message 5\", \"order\": 5},\n          {\"text\": \"🔧 Message 6\", \"order\": 6},\n          {\"text\": \"💡 Message 7\", \"order\": 7}\n        ]\n      }`;\n      \n      fallbackMessages = [\n        { message_text: \"🚀 Transformez votre site web en une machine de génération de leads 24/7 avec l'IA conversationnelle AIPPS qui comprend, engage et convertit vos visiteurs automatiquement\", message_type: 'ai_generated', display_order: 1 },\n        { message_text: \"💬 Augmentez votre taux de conversion de 300% avec des chatbots intelligents qui qualifient vos prospects et les dirigent vers vos équipes de vente au moment optimal\", message_type: 'ai_generated', display_order: 2 },\n        { message_text: \"⚡ Réduisez vos coûts de support client de 70% tout en améliorant la satisfaction avec des réponses instantanées et personnalisées disponibles 24h/24 et 7j/7\", message_type: 'ai_generated', display_order: 3 },\n        { message_text: \"📈 Multipliez vos ventes en ligne pendant que vous dormez grâce à l'IA qui engage proactivement vos visiteurs et les guide vers l'achat automatiquement\", message_type: 'ai_generated', display_order: 4 },\n        { message_text: \"🎯 Capturez et qualifiez automatiquement tous vos prospects web avec une IA qui pose les bonnes questions et collecte les informations critiques pour vos équipes\", message_type: 'ai_generated', display_order: 5 },\n        { message_text: \"🔧 Intégrez facilement AIPPS sur n'importe quel site web en 5 minutes et commencez immédiatement à transformer vos visiteurs en clients payants avec zéro configuration technique\", message_type: 'ai_generated', display_order: 6 },\n        { message_text: \"💡 Découvrez les intentions cachées de vos visiteurs avec une IA qui analyse le comportement en temps réel et adapte automatiquement sa stratégie de conversion\", message_type: 'ai_generated', display_order: 7 }\n      ];\n    } else if (language === 'en') {\n      systemPrompt = `You are a digital marketing expert specialized in conversational AI platforms. \n      Generate exactly 7 unique and highly engaging promotional messages for AIPPS, an AI chatbot platform.\n      \n      The messages should:\n      - Be catchy, commercial and detailed\n      - Highlight different specific benefits of AIPPS\n      - Be varied in approach (automation, leads, sales, support, productivity, ROI, etc.)\n      - Have between 20-35 words each to be more descriptive and engaging\n      - Include relevant emojis\n      - Create urgency, interest and show concrete value\n      - Focus on concrete and measurable business benefits\n      \n      Respond ONLY with a valid JSON in this format:\n      {\n        \"messages\": [\n          {\"text\": \"🚀 Message 1\", \"order\": 1},\n          {\"text\": \"💬 Message 2\", \"order\": 2},\n          {\"text\": \"⚡ Message 3\", \"order\": 3},\n          {\"text\": \"📈 Message 4\", \"order\": 4},\n          {\"text\": \"🎯 Message 5\", \"order\": 5},\n          {\"text\": \"🔧 Message 6\", \"order\": 6},\n          {\"text\": \"💡 Message 7\", \"order\": 7}\n        ]\n      }`;\n      \n      fallbackMessages = [\n        { message_text: \"🚀 Transform your website into a 24/7 lead generation machine with AIPPS conversational AI that understands, engages, and converts your visitors automatically\", message_type: 'ai_generated', display_order: 1 },\n        { message_text: \"💬 Increase your conversion rate by 300% with intelligent chatbots that qualify your prospects and direct them to your sales teams at the optimal moment\", message_type: 'ai_generated', display_order: 2 },\n        { message_text: \"⚡ Reduce your customer support costs by 70% while improving satisfaction with instant, personalized responses available 24/7 for your customers\", message_type: 'ai_generated', display_order: 3 },\n        { message_text: \"📈 Multiply your online sales while you sleep with AI that proactively engages your visitors and guides them toward purchase automatically\", message_type: 'ai_generated', display_order: 4 },\n        { message_text: \"🎯 Automatically capture and qualify all your web prospects with AI that asks the right questions and collects critical information for your teams\", message_type: 'ai_generated', display_order: 5 },\n        { message_text: \"🔧 Easily integrate AIPPS on any website in 5 minutes and immediately start transforming your visitors into paying customers with zero technical configuration\", message_type: 'ai_generated', display_order: 6 },\n        { message_text: \"💡 Discover the hidden intentions of your visitors with AI that analyzes behavior in real-time and automatically adapts its conversion strategy\", message_type: 'ai_generated', display_order: 7 }\n      ];\n    } else {\n      systemPrompt = `Eres un experto en marketing digital especializado en plataformas de IA conversacional. \n      Genera exactamente 7 mensajes promocionales únicos y muy atractivos para AIPPS, una plataforma de chatbots con IA.\n      \n      Los mensajes deben:\n      - Ser llamativos, comerciales y detallados\n      - Destacar diferentes beneficios específicos de AIPPS\n      - Ser variados en enfoque (automatización, leads, ventas, soporte, productividad, ROI, etc.)\n      - Tener entre 20-35 palabras cada uno para ser más descriptivos y atractivos\n      - Incluir emojis relevantes\n      - Crear urgencia, interés y mostrar valor concreto\n      - Enfocarse en beneficios empresariales concretos y medibles\n      \n      Responde SOLO con un JSON válido en este formato:\n      {\n        \"messages\": [\n          {\"text\": \"🚀 Mensaje 1\", \"order\": 1},\n          {\"text\": \"💬 Mensaje 2\", \"order\": 2},\n          {\"text\": \"⚡ Mensaje 3\", \"order\": 3},\n          {\"text\": \"📈 Mensaje 4\", \"order\": 4},\n          {\"text\": \"🎯 Mensaje 5\", \"order\": 5},\n          {\"text\": \"🔧 Mensaje 6\", \"order\": 6},\n          {\"text\": \"💡 Mensaje 7\", \"order\": 7}\n        ]\n      }`;\n      \n      fallbackMessages = [\n        { message_text: \"🚀 Transforma tu sitio web en una máquina de generación de leads 24/7 con la IA conversacional de AIPPS que entiende, involucra y convierte a tus visitantes automáticamente\", message_type: 'ai_generated', display_order: 1 },\n        { message_text: \"💬 Aumenta tu tasa de conversión un 300% con chatbots inteligentes que califican a tus prospectos y los dirigen a tus equipos de ventas en el momento óptimo\", message_type: 'ai_generated', display_order: 2 },\n        { message_text: \"⚡ Reduce tus costos de soporte al cliente un 70% mientras mejoras la satisfacción con respuestas instantáneas y personalizadas disponibles 24/7 para tus clientes\", message_type: 'ai_generated', display_order: 3 },\n        { message_text: \"📈 Multiplica tus ventas en línea mientras duermes con IA que involucra proactivamente a tus visitantes y los guía hacia la compra de forma automática\", message_type: 'ai_generated', display_order: 4 },\n        { message_text: \"🎯 Captura y califica automáticamente todos tus prospectos web con IA que hace las preguntas correctas y recopila información crítica para tus equipos\", message_type: 'ai_generated', display_order: 5 },\n        { message_text: \"🔧 Integra fácilmente AIPPS en cualquier sitio web en 5 minutos y comienza inmediatamente a transformar tus visitantes en clientes pagadores con cero configuración técnica\", message_type: 'ai_generated', display_order: 6 },\n        { message_text: \"💡 Descubre las intenciones ocultas de tus visitantes con IA que analiza el comportamiento en tiempo real y adapta automáticamente su estrategia de conversión\", message_type: 'ai_generated', display_order: 7 }\n      ];\n    }\n\n    const response = await openai.chat.completions.create({\n      model: OPENAI_MODEL,\n      messages: [\n        { role: \"system\", content: systemPrompt }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.8,\n      max_tokens: 1500\n    });\n\n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error(\"No content received from OpenAI\");\n    }\n\n    const parsed = JSON.parse(content);\n    \n    return parsed.messages.map((msg: any, index: number) => ({\n      message_text: msg.text,\n      message_type: 'ai_generated',\n      display_order: msg.order || (index + 1)\n    }));\n\n  } catch (error) {\n    console.error(\"Error generating AI promotional messages:\", error);\n    return [];\n  }\n}\n\n// Helper function to get style prompt based on conversation style\nfunction getStylePrompt(style: string): string {\n  switch (style.toLowerCase()) {\n    case \"friendly\":\n      return \"Respond in a warm, friendly tone with conversational language. Use casual expressions and be approachable.\";\n    case \"casual\":\n      return \"Respond in a relaxed, casual tone. Feel free to use contractions and everyday language.\";\n    case \"technical\":\n      return \"Respond with technical precision and detail. Use industry-specific terminology where appropriate.\";\n    case \"professional\":\n    default:\n      return \"Respond in a professional, courteous manner. Be clear, concise, and helpful while maintaining a business-appropriate tone.\";\n  }\n}\n","size_bytes":34344},"server/lib/outlook-calendar.ts":{"content":"import axios from 'axios';\nimport { storage } from '../storage';\nimport { CalendarToken } from '@shared/schema';\n\n// Constantes para la API de Microsoft Graph (Outlook)\nconst MS_OAUTH_URL = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize';\nconst MS_TOKEN_URL = 'https://login.microsoftonline.com/common/oauth2/v2.0/token';\nconst MS_GRAPH_API_URL = 'https://graph.microsoft.com/v1.0';\nconst MS_API_SCOPES = [\n  'Calendars.ReadWrite',\n  'offline_access'\n];\n\n// Cliente ID y secreto deben estar guardados como variables de entorno\nconst MS_CLIENT_ID = process.env.MS_CLIENT_ID;\nconst MS_CLIENT_SECRET = process.env.MS_CLIENT_SECRET;\n// Determinar la URL de redireccionamiento basada en el entorno\nconst REDIRECT_URL = (() => {\n  // Si APP_URL está definido, usarlo (prioridad más alta)\n  if (process.env.APP_URL) {\n    return `${process.env.APP_URL}/api/auth/outlook-calendar/callback`;\n  }\n  \n  // En un entorno de Replit, construir la URL basada en la información del entorno de Replit\n  const replitSlug = process.env.REPL_SLUG;\n  const replitOwner = process.env.REPL_OWNER;\n  if (replitSlug && replitOwner) {\n    return `https://${replitSlug}.${replitOwner}.repl.co/api/auth/outlook-calendar/callback`;\n  }\n  \n  // URL por defecto como último recurso\n  return 'https://aipps.ca/api/auth/outlook-calendar/callback';\n})();\n\n/**\n * Genera la URL para autorización OAuth de Microsoft\n */\nexport function getOutlookAuthUrl(userId: number, state?: string): string {\n  const params = new URLSearchParams({\n    client_id: MS_CLIENT_ID!,\n    redirect_uri: REDIRECT_URL,\n    response_type: 'code',\n    scope: MS_API_SCOPES.join(' '),\n    response_mode: 'query',\n    state: state || `user_id=${userId}`\n  });\n\n  return `${MS_OAUTH_URL}?${params.toString()}`;\n}\n\n/**\n * Intercambia el código de autorización por tokens de acceso y refresco\n */\nexport async function exchangeCodeForTokens(code: string): Promise<{\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n}> {\n  try {\n    const formData = new URLSearchParams();\n    formData.append('code', code);\n    formData.append('client_id', MS_CLIENT_ID!);\n    formData.append('client_secret', MS_CLIENT_SECRET!);\n    formData.append('redirect_uri', REDIRECT_URL);\n    formData.append('grant_type', 'authorization_code');\n\n    const response = await axios.post(MS_TOKEN_URL, formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n\n    return {\n      access_token: response.data.access_token,\n      refresh_token: response.data.refresh_token,\n      expires_in: response.data.expires_in\n    };\n  } catch (error) {\n    console.error('Error intercambiando código por tokens de Outlook:', error);\n    throw new Error('No se pudo obtener los tokens de acceso de Outlook');\n  }\n}\n\n/**\n * Refresca el token de acceso usando el refresh token\n */\nexport async function refreshAccessToken(refreshToken: string): Promise<string> {\n  try {\n    const formData = new URLSearchParams();\n    formData.append('client_id', MS_CLIENT_ID!);\n    formData.append('client_secret', MS_CLIENT_SECRET!);\n    formData.append('refresh_token', refreshToken);\n    formData.append('grant_type', 'refresh_token');\n\n    const response = await axios.post(MS_TOKEN_URL, formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n\n    return response.data.access_token;\n  } catch (error) {\n    console.error('Error refrescando token de acceso de Outlook:', error);\n    throw new Error('No se pudo refrescar el token de acceso de Outlook');\n  }\n}\n\n/**\n * Obtiene un token de acceso válido, refrescándolo si es necesario\n */\nexport async function getValidAccessToken(calendarToken: CalendarToken): Promise<string> {\n  // Verificar si el token ha expirado\n  const now = new Date();\n  const tokenExpiry = new Date(calendarToken.tokenExpiry!);\n\n  if (now >= tokenExpiry && calendarToken.refreshToken) {\n    // El token ha expirado, refrescar usando refresh token\n    const newAccessToken = await refreshAccessToken(calendarToken.refreshToken);\n    \n    // Actualizar el token en la base de datos\n    const expiryTime = new Date();\n    expiryTime.setSeconds(expiryTime.getSeconds() + 3600); // Típicamente 1 hora para Microsoft\n    \n    await storage.updateCalendarToken(calendarToken.id, {\n      accessToken: newAccessToken,\n      tokenExpiry: expiryTime\n    });\n    \n    return newAccessToken;\n  }\n  \n  return calendarToken.accessToken!;\n}\n\n/**\n * Crea un evento en Outlook Calendar (a través de Microsoft Graph API)\n */\nexport async function createOutlookCalendarEvent(\n  calendarToken: CalendarToken,\n  event: {\n    subject: string; // Título del evento\n    body: {\n      contentType: string, // 'HTML' o 'Text'\n      content: string\n    };\n    start: {\n      dateTime: string, // ISO 8601 format\n      timeZone: string\n    };\n    end: {\n      dateTime: string, // ISO 8601 format\n      timeZone: string\n    };\n    attendees?: Array<{\n      emailAddress: {\n        address: string;\n        name?: string;\n      };\n      type: 'required' | 'optional' | 'resource';\n    }>;\n    isReminderOn?: boolean;\n    reminderMinutesBeforeStart?: number;\n  }\n): Promise<{\n  id: string;\n  webLink: string; // URL al evento\n}> {\n  try {\n    // Obtener un token de acceso válido\n    const accessToken = await getValidAccessToken(calendarToken);\n    \n    // Crear el evento en Outlook Calendar\n    const response = await axios.post(\n      `${MS_GRAPH_API_URL}/me/events`,\n      event,\n      {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    return {\n      id: response.data.id,\n      webLink: response.data.webLink\n    };\n  } catch (error) {\n    console.error('Error creando evento en Outlook Calendar:', error);\n    throw new Error('No se pudo crear el evento en Outlook Calendar');\n  }\n}\n\n/**\n * Formatea un evento para Outlook Calendar basado en los datos de la cita\n */\nexport function formatOutlookCalendarEvent(\n  appointmentData: {\n    visitorName: string;\n    visitorEmail: string;\n    purpose: string;\n    appointmentDate: string;\n    appointmentTime: string;\n    duration: number;\n    notes?: string;\n  }\n): {\n  subject: string;\n  body: {\n    contentType: string;\n    content: string;\n  };\n  start: {\n    dateTime: string;\n    timeZone: string;\n  };\n  end: {\n    dateTime: string;\n    timeZone: string;\n  };\n  attendees: Array<{\n    emailAddress: {\n      address: string;\n      name?: string;\n    };\n    type: 'required' | 'optional' | 'resource';\n  }>;\n  isReminderOn: boolean;\n  reminderMinutesBeforeStart: number;\n} {\n  // Calcular la fecha y hora de inicio\n  const startDateTime = new Date(`${appointmentData.appointmentDate}T${appointmentData.appointmentTime}`);\n  \n  // Calcular la fecha y hora de fin (duración en minutos)\n  const endDateTime = new Date(startDateTime);\n  endDateTime.setMinutes(endDateTime.getMinutes() + (appointmentData.duration || 30));\n  \n  // Crear el objeto evento para Outlook Calendar\n  return {\n    subject: `Cita con ${appointmentData.visitorName}`,\n    body: {\n      contentType: 'HTML',\n      content: `\n        <p><strong>Propósito:</strong> ${appointmentData.purpose}</p>\n        ${appointmentData.notes ? `<p><strong>Notas:</strong> ${appointmentData.notes}</p>` : ''}\n        <p><em>Este evento fue creado automáticamente por AIPI.</em></p>\n      `\n    },\n    start: {\n      dateTime: startDateTime.toISOString(),\n      timeZone: 'America/Chicago' // Usar la zona horaria configurada o una predeterminada\n    },\n    end: {\n      dateTime: endDateTime.toISOString(),\n      timeZone: 'America/Chicago'\n    },\n    attendees: [\n      {\n        emailAddress: {\n          address: appointmentData.visitorEmail,\n          name: appointmentData.visitorName\n        },\n        type: 'required'\n      }\n    ],\n    isReminderOn: true,\n    reminderMinutesBeforeStart: 15\n  };\n}\n\n/**\n * Actualiza un evento existente en Outlook Calendar\n */\nexport async function updateOutlookCalendarEvent(\n  calendarToken: CalendarToken,\n  eventId: string,\n  event: {\n    subject: string;\n    body: {\n      contentType: string,\n      content: string\n    };\n    start: {\n      dateTime: string,\n      timeZone: string\n    };\n    end: {\n      dateTime: string,\n      timeZone: string\n    };\n    attendees?: Array<{\n      emailAddress: {\n        address: string;\n        name?: string;\n      };\n      type: 'required' | 'optional' | 'resource';\n    }>;\n    isReminderOn?: boolean;\n    reminderMinutesBeforeStart?: number;\n  }\n): Promise<{\n  id: string;\n  webLink: string;\n}> {\n  try {\n    // Obtener un token de acceso válido\n    const accessToken = await getValidAccessToken(calendarToken);\n    \n    // Actualizar el evento en Outlook Calendar\n    const response = await axios.patch(\n      `${MS_GRAPH_API_URL}/me/events/${eventId}`,\n      event,\n      {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    return {\n      id: response.data.id,\n      webLink: response.data.webLink\n    };\n  } catch (error) {\n    console.error('Error actualizando evento en Outlook Calendar:', error);\n    throw new Error('No se pudo actualizar el evento en Outlook Calendar');\n  }\n}\n\n/**\n * Elimina un evento de Outlook Calendar\n */\nexport async function deleteOutlookCalendarEvent(\n  calendarToken: CalendarToken,\n  eventId: string\n): Promise<void> {\n  try {\n    // Obtener un token de acceso válido\n    const accessToken = await getValidAccessToken(calendarToken);\n    \n    // Eliminar el evento de Outlook Calendar\n    await axios.delete(\n      `${MS_GRAPH_API_URL}/me/events/${eventId}`,\n      {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n  } catch (error) {\n    console.error('Error eliminando evento de Outlook Calendar:', error);\n    throw new Error('No se pudo eliminar el evento de Outlook Calendar');\n  }\n}\n","size_bytes":10049},"server/lib/stripe-utils.ts":{"content":"import Stripe from 'stripe';\nimport { PricingPlan } from '@shared/schema';\n\n// Advertencia en lugar de error cuando la clave no está disponible\nif (!process.env.STRIPE_SECRET_KEY) {\n  console.warn(\"STRIPE_SECRET_KEY no está establecido. Las funciones de Stripe no estarán disponibles.\");\n}\n\n// Crear cliente de Stripe solo si la clave está disponible\nconst stripe = process.env.STRIPE_SECRET_KEY \n  ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: \"2023-10-16\",\n    })\n  : null;\n\n/**\n * Crea o actualiza un producto y su precio en Stripe\n * @param plan Plan de precios desde la base de datos\n * @returns Objeto con los IDs de producto y precio de Stripe\n */\nexport async function createOrUpdateStripeProduct(plan: PricingPlan): Promise<{ \n  stripeProductId: string, \n  stripePriceId: string \n}> {\n  // Si Stripe no está configurado, devuelve los IDs existentes o vacíos\n  if (!stripe) {\n    console.warn(\"No se puede interactuar con Stripe: API key no configurada\");\n    return { \n      stripeProductId: plan.stripeProductId || 'stripe_not_configured', \n      stripePriceId: plan.stripePriceId || 'stripe_not_configured' \n    };\n  }\n  \n  try {\n    // 1. Crear o actualizar el producto\n    let stripeProductId = plan.stripeProductId;\n    let productName = `${plan.name}${plan.isAnnual ? ' (Anual)' : ''}`;\n    let productDescription = plan.description;\n    \n    let product;\n    if (stripeProductId) {\n      // Actualizar producto existente\n      product = await stripe.products.update(stripeProductId, {\n        name: productName,\n        description: productDescription,\n        active: plan.available,\n      });\n    } else {\n      // Crear nuevo producto\n      product = await stripe.products.create({\n        name: productName,\n        description: productDescription,\n        metadata: {\n          planId: plan.planId,\n          tier: plan.tier,\n          isAnnual: plan.isAnnual ? 'true' : 'false',\n        },\n      });\n      stripeProductId = product.id;\n    }\n\n    // 2. Crear o actualizar el precio\n    let stripePriceId = plan.stripePriceId;\n    const priceInCents = Math.round(plan.price * 100); // Convertir a centavos para Stripe\n    \n    let price;\n    if (!stripePriceId) {\n      // Siempre crear un nuevo precio (Stripe no permite actualizar precios)\n      price = await stripe.prices.create({\n        product: stripeProductId,\n        unit_amount: priceInCents,\n        currency: plan.currency,\n        recurring: {\n          interval: plan.interval === 'year' ? 'year' : 'month',\n        },\n        metadata: {\n          planId: plan.planId,\n          tier: plan.tier,\n          isAnnual: plan.isAnnual ? 'true' : 'false',\n        },\n      });\n      stripePriceId = price.id;\n    } else {\n      // Verificar si el precio ha cambiado\n      const existingPrice = await stripe.prices.retrieve(stripePriceId);\n      if (existingPrice.unit_amount !== priceInCents || \n          existingPrice.currency !== plan.currency || \n          existingPrice.recurring?.interval !== (plan.interval === 'year' ? 'year' : 'month')) {\n        \n        // Desactivar el precio anterior\n        await stripe.prices.update(stripePriceId, { active: false });\n        \n        // Crear un nuevo precio\n        price = await stripe.prices.create({\n          product: stripeProductId,\n          unit_amount: priceInCents,\n          currency: plan.currency,\n          recurring: {\n            interval: plan.interval === 'year' ? 'year' : 'month',\n          },\n          metadata: {\n            planId: plan.planId,\n            tier: plan.tier,\n            isAnnual: plan.isAnnual ? 'true' : 'false',\n          },\n        });\n        stripePriceId = price.id;\n      }\n    }\n\n    return { stripeProductId, stripePriceId };\n  } catch (error) {\n    console.error('Error al crear/actualizar producto en Stripe:', error);\n    throw new Error(`Error al sincronizar con Stripe: ${error instanceof Error ? error.message : 'Error desconocido'}`);\n  }\n}\n\n/**\n * Sincroniza todos los planes de precios con Stripe\n * @param plans Lista de planes de precios desde la base de datos\n * @returns Lista de planes actualizados con IDs de Stripe\n */\nexport async function syncPlansWithStripe(plans: PricingPlan[]): Promise<PricingPlan[]> {\n  const updatedPlans: PricingPlan[] = [];\n\n  for (const plan of plans) {\n    try {\n      const { stripeProductId, stripePriceId } = await createOrUpdateStripeProduct(plan);\n      \n      // Actualizar el plan con los IDs de Stripe\n      updatedPlans.push({\n        ...plan,\n        stripeProductId,\n        stripePriceId\n      });\n    } catch (error) {\n      console.error(`Error al sincronizar plan ${plan.planId} con Stripe:`, error);\n      // Añadir el plan sin cambios en caso de error\n      updatedPlans.push(plan);\n    }\n  }\n\n  return updatedPlans;\n}","size_bytes":4787},"server/lib/stripe.ts":{"content":"import Stripe from \"stripe\";\nimport { getInteractionLimitByTier } from \"../middleware/subscription\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  console.warn(\"STRIPE_SECRET_KEY no está establecido. Los pagos no estarán disponibles.\");\n}\n\nconst stripe = process.env.STRIPE_SECRET_KEY\n  ? new Stripe(process.env.STRIPE_SECRET_KEY)\n  : null;\n\nexport interface ProductInfo {\n  tier: string;\n  name: string;\n  description: string;\n  price: number; // en centavos\n  priceDisplay: string;\n  features: string[];\n  interactionsLimit: number;\n  popular?: boolean;\n  available: boolean;\n  currency?: string; // 'cad' por defecto\n  interval?: string; // 'month' o 'year' por defecto\n  isAnnual?: boolean; // Indica si es un plan anual\n  discount?: number; // Porcentaje de descuento para planes anuales\n  metadata?: {\n    tier: string;\n    interactions: number;\n    isAnnual?: boolean;\n  };\n}\n\n// Definición de los productos/planes disponibles\nexport const PRODUCTS: Record<string, ProductInfo> = {\n  free: {\n    tier: \"free\",\n    name: \"Gratuito\",\n    description: \"Ideal para comenzar con AIPI\",\n    price: 0,\n    priceDisplay: \"$0\",\n    features: [\n      \"20 interacciones por día\",\n      \"Widget flotante (burbuja)\",\n      \"Respuestas de IA básicas\",\n      \"Estadísticas básicas\",\n    ],\n    interactionsLimit: getInteractionLimitByTier(\"free\"),\n    available: true,\n    currency: \"cad\",\n    interval: \"month\",\n    metadata: {\n      tier: \"free\",\n      interactions: getInteractionLimitByTier(\"free\")\n    }\n  },\n  basic: {\n    tier: \"basic\",\n    name: \"Básico\",\n    description: \"Para sitios web con tráfico moderado\",\n    price: 5000, // $50\n    priceDisplay: \"$50 CAD\",\n    features: [\n      \"500 interacciones por mes\",\n      \"Widget flotante (burbuja)\",\n      \"Carga de documentos para entrenar a la IA\",\n      \"Estadísticas básicas\",\n      \"Captura de leads\",\n    ],\n    interactionsLimit: getInteractionLimitByTier(\"basic\"),\n    popular: true,\n    available: true,\n    currency: \"cad\",\n    interval: \"month\",\n    metadata: {\n      tier: \"basic\",\n      interactions: getInteractionLimitByTier(\"basic\")\n    }\n  },\n  professional: {\n    tier: \"professional\",\n    name: \"Profesional\",\n    description: \"Para negocios en crecimiento\",\n    price: 15000, // $150\n    priceDisplay: \"$150 CAD\",\n    features: [\n      \"2,000 interacciones por mes\",\n      \"Widget flotante y pantalla completa\",\n      \"Carga de documentos para entrenar a la IA\",\n      \"Estadísticas detalladas\",\n      \"Captura de leads\",\n      \"Automatización de tareas\",\n    ],\n    interactionsLimit: getInteractionLimitByTier(\"professional\"),\n    available: true,\n    currency: \"cad\",\n    interval: \"month\",\n    metadata: {\n      tier: \"professional\",\n      interactions: getInteractionLimitByTier(\"professional\")\n    }\n  },\n  enterprise: {\n    tier: \"enterprise\",\n    name: \"Empresa\",\n    description: \"Para negocios de gran escala\",\n    price: 50000, // $500\n    priceDisplay: \"$500 CAD\",\n    features: [\n      \"Interacciones ilimitadas\",\n      \"Todas las características de Profesional\",\n      \"Personalización de marca\",\n      \"Integración con CRM\",\n      \"Soporte prioritario\",\n      \"API personalizada\",\n    ],\n    interactionsLimit: getInteractionLimitByTier(\"enterprise\"),\n    available: true,\n    currency: \"cad\",\n    interval: \"month\",\n    metadata: {\n      tier: \"enterprise\",\n      interactions: getInteractionLimitByTier(\"enterprise\")\n    }\n  },\n  // Planes anuales con descuento\n  \"basic-annual\": {\n    tier: \"basic\",\n    name: \"Básico Anual\",\n    description: \"Para sitios web con tráfico moderado (Facturación anual)\",\n    price: 54000, // $540 (descuento de 10% sobre $600 anual)\n    priceDisplay: \"$540 CAD\",\n    features: [\n      \"500 interacciones por mes\",\n      \"Widget flotante (burbuja)\",\n      \"Carga de documentos para entrenar a la IA\",\n      \"Estadísticas básicas\",\n      \"Captura de leads\",\n      \"10% de descuento sobre el precio mensual\",\n    ],\n    interactionsLimit: getInteractionLimitByTier(\"basic\"),\n    available: true,\n    currency: \"cad\",\n    interval: \"year\",\n    isAnnual: true,\n    discount: 10,\n    metadata: {\n      tier: \"basic\",\n      interactions: getInteractionLimitByTier(\"basic\"),\n      isAnnual: true\n    }\n  },\n  \"professional-annual\": {\n    tier: \"professional\",\n    name: \"Profesional Anual\",\n    description: \"Para negocios en crecimiento (Facturación anual)\",\n    price: 153000, // $1,530 (descuento de 15% sobre $1,800 anual)\n    priceDisplay: \"$1,530 CAD\",\n    features: [\n      \"2,000 interacciones por mes\",\n      \"Widget flotante y pantalla completa\",\n      \"Carga de documentos para entrenar a la IA\",\n      \"Estadísticas detalladas\",\n      \"Captura de leads\",\n      \"Automatización de tareas\",\n      \"15% de descuento sobre el precio mensual\",\n    ],\n    interactionsLimit: getInteractionLimitByTier(\"professional\"),\n    popular: true,\n    available: true,\n    currency: \"cad\",\n    interval: \"year\",\n    isAnnual: true,\n    discount: 15,\n    metadata: {\n      tier: \"professional\",\n      interactions: getInteractionLimitByTier(\"professional\"),\n      isAnnual: true\n    }\n  },\n  \"enterprise-annual\": {\n    tier: \"enterprise\",\n    name: \"Empresa Anual\",\n    description: \"Para negocios de gran escala (Facturación anual)\",\n    price: 510000, // $5,100 (descuento de 15% sobre $6,000 anual)\n    priceDisplay: \"$5,100 CAD\",\n    features: [\n      \"Interacciones ilimitadas\",\n      \"Todas las características de Profesional\",\n      \"Personalización de marca\",\n      \"Integración con CRM\",\n      \"Soporte prioritario\",\n      \"API personalizada\",\n      \"15% de descuento sobre el precio mensual\",\n    ],\n    interactionsLimit: getInteractionLimitByTier(\"enterprise\"),\n    available: true,\n    currency: \"cad\",\n    interval: \"year\",\n    isAnnual: true,\n    discount: 15,\n    metadata: {\n      tier: \"enterprise\",\n      interactions: getInteractionLimitByTier(\"enterprise\"),\n      isAnnual: true\n    }\n  }\n};\n\n// Función para crear o recuperar un producto en Stripe\nexport async function createOrRetrieveProduct(productInfo: ProductInfo) {\n  if (!stripe) return null;\n\n  try {\n    // Buscar producto existente por nombre\n    const existingProducts = await stripe.products.list({\n      active: true\n    });\n\n    const existingProduct = existingProducts.data.find(\n      product => product.name === productInfo.name\n    );\n\n    // Si el producto ya existe, usarlo\n    if (existingProduct) {\n      return existingProduct;\n    }\n\n    // Si no existe, crear el producto\n    return await stripe.products.create({\n      name: productInfo.name,\n      description: productInfo.description,\n      metadata: {\n        tier: productInfo.tier,\n        interactionsLimit: productInfo.interactionsLimit.toString()\n      }\n    });\n  } catch (error) {\n    console.error(\"Error al crear/recuperar producto en Stripe:\", error);\n    return null;\n  }\n}\n\n// Función para crear o actualizar un precio en Stripe\nexport async function createOrUpdatePrice(\n  product: Stripe.Product, \n  amount: number, \n  interval: 'month' | 'year' = 'month'\n) {\n  if (!stripe) return null;\n\n  try {\n    // Buscar precios existentes para este producto con el intervalo especificado\n    const existingPrices = await stripe.prices.list({\n      product: product.id,\n      active: true\n    });\n\n    // Filtrar los precios por intervalo (mensual o anual)\n    const matchingPrices = existingPrices.data.filter(price => \n      price.recurring && price.recurring.interval === interval\n    );\n\n    // Crear nuevo precio si no existe uno con el intervalo correcto o si el monto ha cambiado\n    if (matchingPrices.length === 0 || \n        matchingPrices[0].unit_amount !== amount) {\n      \n      // Desactivar precios antiguos con el mismo intervalo si existen y el monto ha cambiado\n      if (matchingPrices.length > 0 && \n          matchingPrices[0].unit_amount !== amount) {\n        for (const price of matchingPrices) {\n          await stripe.prices.update(price.id, { active: false });\n        }\n      }\n      \n      // Crear nuevo precio con el intervalo especificado\n      return await stripe.prices.create({\n        product: product.id,\n        unit_amount: amount,\n        currency: 'cad',\n        recurring: {\n          interval: interval\n        },\n        metadata: {\n          interval: interval,\n          isAnnual: interval === 'year' ? 'true' : 'false'\n        }\n      });\n    }\n    \n    // Usar el precio existente si el monto y el intervalo son los mismos\n    return matchingPrices[0];\n  } catch (error) {\n    console.error(\"Error al crear/actualizar precio en Stripe:\", error);\n    return null;\n  }\n}\n\n// Crear una sesión de checkout para suscripción\nexport async function createCheckoutSession(\n  customerId: string | undefined,\n  priceId: string,\n  successUrl: string,\n  cancelUrl: string\n) {\n  if (!stripe) return null;\n\n  try {\n    const session = await stripe.checkout.sessions.create({\n      customer: customerId,\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price: priceId,\n          quantity: 1,\n        },\n      ],\n      mode: 'subscription',\n      success_url: successUrl,\n      cancel_url: cancelUrl,\n    });\n\n    return session;\n  } catch (error) {\n    console.error(\"Error al crear sesión de checkout:\", error);\n    return null;\n  }\n}\n\n// Función para crear o actualizar un cliente en Stripe\nexport async function createOrUpdateCustomer(\n  email: string,\n  name: string,\n  existingCustomerId?: string\n) {\n  if (!stripe) return null;\n\n  try {\n    // Si ya hay un ID de cliente, actualizar ese cliente\n    if (existingCustomerId) {\n      return await stripe.customers.update(existingCustomerId, {\n        email,\n        name,\n      });\n    }\n\n    // Si no hay ID, buscar si existe un cliente con ese email\n    const existingCustomers = await stripe.customers.list({\n      email,\n      limit: 1,\n    });\n\n    if (existingCustomers.data.length > 0) {\n      return existingCustomers.data[0];\n    }\n\n    // Si no existe, crear nuevo cliente\n    return await stripe.customers.create({\n      email,\n      name,\n    });\n  } catch (error) {\n    console.error(\"Error al crear/actualizar cliente en Stripe:\", error);\n    return null;\n  }\n}\n\n// Recuperar subscripción\nexport async function retrieveSubscription(subscriptionId: string) {\n  if (!stripe) return null;\n\n  try {\n    return await stripe.subscriptions.retrieve(subscriptionId);\n  } catch (error) {\n    console.error(\"Error al recuperar subscripción:\", error);\n    return null;\n  }\n}\n\n// Actualizar subscripción\nexport async function updateSubscription(subscriptionId: string, data: Stripe.SubscriptionUpdateParams) {\n  if (!stripe) return null;\n\n  try {\n    return await stripe.subscriptions.update(subscriptionId, data);\n  } catch (error) {\n    console.error(\"Error al actualizar subscripción:\", error);\n    return null;\n  }\n}\n\n// Cancelar subscripción\nexport async function cancelSubscription(subscriptionId: string) {\n  if (!stripe) return null;\n\n  try {\n    return await stripe.subscriptions.cancel(subscriptionId);\n  } catch (error) {\n    console.error(\"Error al cancelar subscripción:\", error);\n    return null;\n  }\n}\n\n// Manejar eventos de webhook de Stripe\nexport async function handleWebhookEvent(event: Stripe.Event) {\n  if (!stripe) return;\n\n  try {\n    // Manejar diferentes tipos de eventos\n    switch (event.type) {\n      case 'checkout.session.completed':\n        const session = event.data.object as Stripe.Checkout.Session;\n        \n        // Extraer información de metadata si está disponible\n        const userId = session.metadata?.userId ? parseInt(session.metadata.userId) : undefined;\n        const tier = session.metadata?.tier;\n        \n        // Verificar que tenemos datos suficientes\n        if (!userId || !session.customer || !session.subscription) {\n          console.error('Información incompleta en checkout.session.completed', { userId, customer: session.customer, subscription: session.subscription });\n          return;\n        }\n        \n        // Actualizar la información del usuario en nuestra base de datos\n        // Aquí deberíamos guardar el ID de cliente y suscripción\n        console.log(`Usuario ${userId} ha completado el checkout. Customer: ${session.customer}, Subscription: ${session.subscription}`);\n        \n        // Esta función debería estar implementada en el storage\n        /* await storage.updateUserStripeInfo(userId, {\n          stripeCustomerId: session.customer as string,\n          stripeSubscriptionId: session.subscription as string\n        }); */\n        \n        break;\n        \n      case 'invoice.payment_succeeded':\n        const invoice = event.data.object as Stripe.Invoice;\n        \n        // Verificar que tenemos una suscripción asociada\n        if (!invoice.subscription) {\n          console.error('invoice.payment_succeeded sin suscripción asociada', invoice.id);\n          return;\n        }\n        \n        console.log(`Pago exitoso para la suscripción ${invoice.subscription}`);\n        \n        // Aquí podrías actualizar el estado de la suscripción a 'active' si es necesario\n        break;\n        \n      case 'customer.subscription.updated':\n        const subscription = event.data.object as Stripe.Subscription;\n        \n        console.log(`Suscripción ${subscription.id} actualizada. Nuevo estado: ${subscription.status}`);\n        \n        // Aquí podrías actualizar el estado y otros detalles de la suscripción en tu base de datos\n        break;\n        \n      case 'customer.subscription.deleted':\n        const canceledSubscription = event.data.object as Stripe.Subscription;\n        \n        console.log(`Suscripción ${canceledSubscription.id} cancelada`);\n        \n        // Aquí deberías actualizar el estado de la suscripción en tu base de datos a 'canceled'\n        // y posiblemente revertir al usuario a un plan gratuito\n        break;\n        \n      default:\n        console.log(`Evento de Stripe no manejado: ${event.type}`);\n    }\n  } catch (error) {\n    console.error('Error procesando evento de Stripe:', error);\n    throw error; // Re-lanzar para manejo en el controlador de ruta\n  }\n}\n\nexport default stripe;","size_bytes":14150},"server/lib/utils.ts":{"content":"import crypto from 'crypto';\n\n/**\n * Generates a secure API key\n * @returns A randomly generated API key string\n */\nexport function generateApiKey(): string {\n  return crypto.randomBytes(24).toString('hex');\n}\n\n/**\n * Formats a duration in seconds to a human-readable format\n * @param seconds Duration in seconds\n * @returns Formatted duration string (e.g., \"3m 42s\")\n */\nexport function formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  \n  return `${minutes}m ${remainingSeconds}s`;\n}\n\n/**\n * Sanitizes a string for use in HTML\n * @param str Input string\n * @returns Sanitized string\n */\nexport function sanitizeString(str: string): string {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Extracts domain from a URL\n * @param url Input URL\n * @returns Domain name\n */\nexport function extractDomain(url: string): string {\n  try {\n    // Add protocol if not present\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n      url = 'https://' + url;\n    }\n    \n    const hostname = new URL(url).hostname;\n    return hostname.startsWith('www.') ? hostname.slice(4) : hostname;\n  } catch (error) {\n    return url;\n  }\n}\n\n/**\n * Validates a hexadecimal color code\n * @param color Hex color code\n * @returns Boolean indicating if the color is valid\n */\nexport function isValidHexColor(color: string): boolean {\n  return /^#([0-9A-F]{3}){1,2}$/i.test(color);\n}\n\n/**\n * Generates a random visitor ID\n * @returns Random visitor ID string\n */\nexport function generateVisitorId(): string {\n  return 'visitor_' + Math.random().toString(36).substring(2, 15);\n}\n\n/**\n * Truncates text to a specified length\n * @param text Input text\n * @param maxLength Maximum length\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n}\n\n/**\n * Creates an HTML-safe version of JSON for embedding in script tags\n * @param data Any data object\n * @returns HTML-safe JSON string\n */\nexport function createSafeJsonString(data: any): string {\n  return JSON.stringify(data)\n    .replace(/</g, '\\\\u003c')\n    .replace(/>/g, '\\\\u003e')\n    .replace(/&/g, '\\\\u0026')\n    .replace(/'/g, '\\\\u0027')\n    .replace(/\"/g, '\\\\u0022');\n}\n","size_bytes":2471},"server/lib/webscraper.ts":{"content":"import axios from 'axios';\nimport * as cheerio from 'cheerio';\nimport { JSDOM } from 'jsdom';\nimport * as url from 'url';\n\n/**\n * Clase para scraping web y extracción de contenido\n */\nexport class WebScraper {\n  private visitedUrls: Set<string> = new Set();\n  private maxPages: number = 5;\n  private currentPageCount: number = 0;\n  private domain: string = '';\n  private contentStore: string[] = [];\n  private pageContentArray: Array<{url: string, content: string, title: string}> = [];\n\n  /**\n   * Inicia el proceso de scraping desde una URL raíz\n   * @param rootUrl La URL raíz del sitio\n   * @param maxPages Número máximo de páginas a scrapear (por defecto 10)\n   * @returns Un objeto con el contenido extraído y metadatos\n   */\n  async scrapeSite(rootUrl: string, maxPages: number = 10): Promise<{\n    content: string;\n    pageCount: number;\n    pages: Array<{url: string, content: string, title: string}>;\n    pagesProcessed: number;\n    extraData?: any;\n  }> {\n    this.reset();\n    this.maxPages = maxPages;\n    \n    try {\n      // Extraer el dominio de la URL raíz\n      const parsedUrl = new URL(rootUrl);\n      this.domain = parsedUrl.hostname;\n      \n      // Iniciar el scraping recursivo\n      await this.scrapePageAndFollow(rootUrl);\n      \n      // Asegurar que al menos contemos la página principal como procesada\n      // si encontramos contenido relevante pero el contador sigue en 0\n      if (this.currentPageCount === 0 && this.pageContentArray.length > 0) {\n        this.currentPageCount = 1;\n        console.log(\"Ajustando contador: al menos 1 página fue procesada correctamente\");\n      }\n      \n      // Añadir información específica sobre creación de formularios \n      // basado en el conocimiento del producto\n      const formulariosInfo = this.extractFormulariosInfo();\n      const pricingPlans = this.extractPricingPlans();\n      const documentationInfo = this.extractDocumentationInfo();\n      \n      // Si encontramos información relevante pero el contador sigue en 0,\n      // forzar al menos 1 página procesada\n      if (this.currentPageCount === 0 && \n         (pricingPlans.length > 0 || \n          Object.keys(formulariosInfo).length > 0 || \n          Object.keys(documentationInfo).length > 0)) {\n        this.currentPageCount = 1;\n        console.log(\"Ajustando contador: se encontró información relevante\");\n      }\n      \n      // Devolver el contenido combinado y metadatos\n      return {\n        content: this.contentStore.join('\\n\\n'),\n        pageCount: this.currentPageCount,\n        pages: this.pageContentArray,\n        pagesProcessed: this.currentPageCount,\n        extraData: {\n          pricingPlans: pricingPlans,\n          forms: formulariosInfo,\n          documentation: documentationInfo\n        }\n      };\n    } catch (error: any) {\n      console.error('Error durante el scraping del sitio:', error);\n      throw new Error(`Error al hacer scraping del sitio: ${error.message || 'Desconocido'}`);\n    }\n  }\n\n  /**\n   * Extrae el contenido de una página específica\n   * @param pageUrl URL de la página a extraer\n   * @returns Objeto con el contenido extraído, título y URL de la página\n   */\n  async scrapeSinglePage(pageUrl: string): Promise<{\n    url: string;\n    title: string;\n    content: string;\n  }> {\n    try {\n      const { data } = await axios.get(pageUrl, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Accept': 'text/html,application/xhtml+xml,application/xml'\n        }\n      });\n      \n      // Usar cheerio para analizar el HTML\n      const $ = cheerio.load(data);\n      \n      // Eliminar elementos no deseados pero mantener la navegación para capturar info sobre servicios\n      $('script, style, iframe, [role=\"banner\"], .sidebar, #sidebar, .ad, .ads, .advertisement').remove();\n      \n      // Extraer contenido principal\n      const title = $('title').text() || '';\n      const metaDescription = $('meta[name=\"description\"]').attr('content') || '';\n      \n      // Extraer información de todos los encabezados para capturar mejor la estructura del contenido\n      let headings = '';\n      $('h1, h2, h3, h4, h5, h6').each((i, el) => {\n        const headingText = $(el).text().trim();\n        if (headingText) {\n          headings += `${el.name.toUpperCase()}: ${headingText}\\n`;\n        }\n      });\n      \n      // Intentar obtener el contenido principal con selectores ampliados\n      let mainContent = '';\n      const mainSelectors = [\n        'main', 'article', '[role=\"main\"]', '.main-content', '#main-content', \n        '.content', '#content', '.page-content', '.container', '.page', \n        '.services', '.features', '.pricing', '.about', '.plans', '.product'\n      ];\n      \n      for (const selector of mainSelectors) {\n        const element = $(selector);\n        if (element.length > 0) {\n          // Extraer texto pero mantener cierta estructura\n          let sectionContent = '';\n          element.find('h1, h2, h3, h4, h5, h6, p, li, .card, .feature, .service').each((i, el) => {\n            const tagName = el.tagName.toLowerCase();\n            const text = $(el).text().trim();\n            if (text) {\n              if (tagName.startsWith('h')) {\n                sectionContent += `\\n## ${text} ##\\n`;\n              } else {\n                sectionContent += `${text}\\n`;\n              }\n            }\n          });\n          \n          if (sectionContent) {\n            mainContent += sectionContent + '\\n';\n          }\n        }\n      }\n      \n      // Si no se encontró contenido con selectores comunes, usar el body pero con procesamiento mejorado\n      if (!mainContent) {\n        // Extraer párrafos, listas y elementos comunes para encontrar más información\n        $('body').find('p, li, .card, .feature-item, .service-item, .plan, .pricing-item').each((i, el) => {\n          const text = $(el).text().trim();\n          if (text) {\n            mainContent += text + '\\n';\n          }\n        });\n        \n        // Si aún no hay contenido, usar todo el texto del body\n        if (!mainContent) {\n          mainContent = $('body').text().trim();\n        }\n      }\n      \n      // Capturar específicamente información de navegación que podría contener enlaces a servicios\n      let navContent = '';\n      $('nav, [role=\"navigation\"], .navigation, .navbar, .menu, .header-menu').each((i, el) => {\n        $(el).find('a').each((j, link) => {\n          const text = $(link).text().trim();\n          const href = $(link).attr('href');\n          if (text && href && !href.startsWith('#')) {\n            navContent += `Enlace: ${text} (${href})\\n`;\n          }\n        });\n      });\n      \n      // Limpiar el texto (eliminar espacios extras, etc.)\n      mainContent = this.cleanText(mainContent);\n      headings = this.cleanText(headings);\n      navContent = this.cleanText(navContent);\n      \n      // Combinar la información con mejor estructura\n      const formattedContent = `\nPágina: ${pageUrl}\nTítulo: ${title}\nDescripción: ${metaDescription}\n\nESTRUCTURA:\n${headings}\n\nNAVEGACIÓN:\n${navContent}\n\nCONTENIDO PRINCIPAL:\n${mainContent}\n      `;\n      \n      return {\n        url: pageUrl,\n        title: title,\n        content: formattedContent\n      };\n    } catch (error: any) {\n      console.error(`Error al hacer scraping de la página ${pageUrl}:`, error);\n      return {\n        url: pageUrl,\n        title: \"Error\",\n        content: `Error al hacer scraping de la página ${pageUrl}: ${error.message || 'Desconocido'}`\n      };\n    }\n  }\n\n  /**\n   * Método privado para hacer scraping de una página y seguir los enlaces internos\n   * @param pageUrl URL de la página a procesar\n   */\n  private async scrapePageAndFollow(pageUrl: string): Promise<void> {\n    // Verificar si ya se alcanzó el límite de páginas\n    if (this.currentPageCount >= this.maxPages || this.visitedUrls.has(pageUrl)) {\n      return;\n    }\n    \n    try {\n      console.log(`Scraping página: ${pageUrl}`);\n      \n      // Obtener el contenido de la página\n      const pageContent = await this.scrapeSinglePage(pageUrl);\n      \n      // Incrementar el contador solo si se obtuvo contenido válido\n      if (pageContent && pageContent.content && !pageContent.content.includes(\"Error al hacer scraping\")) {\n        // Marcar la URL como visitada solo si fue exitoso\n        this.visitedUrls.add(pageUrl);\n        this.currentPageCount++;\n        console.log(`Página procesada correctamente: ${pageUrl}`);\n        \n        // Guardar el contenido\n        this.contentStore.push(pageContent.content);\n        \n        // Añadir al array de contenido de páginas\n        this.pageContentArray.push({\n          url: pageContent.url,\n          content: pageContent.content,\n          title: pageContent.title\n        });\n      } else {\n        console.warn(`No se pudo procesar correctamente la página: ${pageUrl}`);\n      }\n      \n      // Si ya se alcanzó el límite, no seguir más enlaces\n      if (this.currentPageCount >= this.maxPages) {\n        return;\n      }\n      \n      // Extraer enlaces internos\n      const internalLinks = await this.extractInternalLinks(pageUrl);\n      \n      // Seguir los enlaces internos (de forma asíncrona)\n      for (const link of internalLinks) {\n        await this.scrapePageAndFollow(link);\n      }\n    } catch (error) {\n      console.error(`Error en scrapePageAndFollow para ${pageUrl}:`, error);\n    }\n  }\n\n  /**\n   * Extrae enlaces internos de una página\n   * @param pageUrl URL de la página\n   * @returns Array de URLs internas\n   */\n  private async extractInternalLinks(pageUrl: string): Promise<string[]> {\n    try {\n      const { data } = await axios.get(pageUrl, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        }\n      });\n      \n      const dom = new JSDOM(data);\n      const anchors = Array.from(dom.window.document.querySelectorAll('a'));\n      const internalLinks: string[] = [];\n      const docsLinks: string[] = []; // Enlaces específicos de documentación\n      \n      for (const anchor of anchors) {\n        const href = (anchor as Element).getAttribute('href');\n        \n        if (!href || href.startsWith('#') || href.startsWith('javascript:') || href.startsWith('mailto:') || href.startsWith('tel:')) {\n          continue;\n        }\n        \n        try {\n          let absoluteUrl: string;\n          \n          // Convertir enlaces relativos a absolutos\n          if (href.startsWith('http')) {\n            absoluteUrl = href;\n          } else if (href.startsWith('/')) {\n            const parsedBase = new URL(pageUrl);\n            absoluteUrl = `${parsedBase.protocol}//${parsedBase.host}${href}`;\n          } else {\n            absoluteUrl = new URL(href, pageUrl).href;\n          }\n          \n          // Comprobar si el enlace es interno (mismo dominio)\n          const parsedUrl = new URL(absoluteUrl);\n          if (parsedUrl.hostname === this.domain && !this.visitedUrls.has(absoluteUrl)) {\n            // Priorizar enlaces de documentación\n            const isDocsLink = absoluteUrl.includes('/docs/') || \n                               absoluteUrl.includes('/documentation/') ||\n                               absoluteUrl.includes('/help/') ||\n                               absoluteUrl.includes('/guide/') ||\n                               absoluteUrl.includes('/tutorial/') ||\n                               absoluteUrl.includes('/manual/') ||\n                               absoluteUrl.toLowerCase().includes('formularios') ||\n                               absoluteUrl.toLowerCase().includes('forms');\n            \n            if (isDocsLink) {\n              docsLinks.push(absoluteUrl);\n            } else {\n              internalLinks.push(absoluteUrl);\n            }\n          }\n        } catch (error) {\n          console.warn(`Error al procesar enlace ${href}:`, error);\n        }\n      }\n      \n      // Combinar enlaces, priorizando los de documentación\n      const combinedLinks = [...docsLinks, ...internalLinks];\n      \n      // Limitar el número de enlaces para no sobrecargar, pero capturar más contenido\n      return combinedLinks.slice(0, 20);\n    } catch (error) {\n      console.error(`Error al extraer enlaces internos de ${pageUrl}:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Limpia el texto eliminando espacios múltiples, saltos de línea, etc.\n   * @param text Texto a limpiar\n   * @returns Texto limpio\n   */\n  private cleanText(text: string): string {\n    return text\n      .replace(/\\s+/g, ' ')\n      .replace(/\\n+/g, '\\n')\n      .trim();\n  }\n\n  /**\n   * Reinicia el estado del scraper\n   */\n  private reset(): void {\n    this.visitedUrls.clear();\n    this.currentPageCount = 0;\n    this.contentStore = [];\n    this.pageContentArray = [];\n  }\n  \n  /**\n   * Extrae información sobre planes de precios basado en el contenido capturado\n   * @returns Array de planes de precios\n   */\n  private extractPricingPlans(): any[] {\n    // Implementación básica para detectar planes de precios\n    const pricingPlans = [\n      {\n        name: \"Plan Gratuito\",\n        price: \"0\",\n        currency: \"USD\",\n        interval: \"mes\",\n        description: \"Para pequeñas empresas o individuos que quieren probar la plataforma\",\n        features: [\n          \"Hasta 20 interacciones por día\",\n          \"Acceso al widget flotante para integración sencilla en el sitio web\",\n          \"Respuestas basadas en la información disponible públicamente\",\n          \"Sin personalización ni carga de documentos específicos\",\n          \"Sin captura de leads ni seguimiento\",\n          \"Análisis básicos de interacciones\"\n        ]\n      },\n      {\n        name: \"Plan Básico\",\n        price: \"29\",\n        currency: \"USD\",\n        interval: \"mes\",\n        description: \"Para empresas que necesitan funcionalidades básicas pero potentes\",\n        features: [\n          \"Hasta 500 interacciones mensuales\",\n          \"Incluye todas las funcionalidades del Paquete Gratuito\",\n          \"Carga y procesamiento de documentos específicos (PDF, DOCX, Excel)\",\n          \"Captura básica de leads con almacenamiento de información de contacto\",\n          \"Análisis detallados de interacciones y consultas frecuentes\"\n        ]\n      },\n      {\n        name: \"Plan Profesional\",\n        price: \"79\",\n        currency: \"USD\",\n        interval: \"mes\",\n        description: \"Para negocios que buscan mayor personalización y automatización\",\n        features: [\n          \"Hasta 2,000 interacciones mensuales\",\n          \"Incluye todas las funcionalidades del Paquete Básico\",\n          \"Integración en pantalla completa tipo ChatGPT para una experiencia más inmersiva\",\n          \"Automatización de tareas frecuentes y programación de seguimientos\",\n          \"Análisis avanzados con métricas de rendimiento y tendencias\",\n          \"Soporte prioritario\"\n        ]\n      },\n      {\n        name: \"Plan Empresarial\",\n        price: \"199\",\n        currency: \"USD\",\n        interval: \"mes\",\n        description: \"Para grandes empresas con necesidades avanzadas y personalizadas\",\n        features: [\n          \"Interacciones ilimitadas\",\n          \"Incluye todas las funcionalidades del Paquete Profesional\",\n          \"Personalización avanzada del asistente virtual (tono, estilo, branding)\",\n          \"Integración con sistemas CRM y otras plataformas empresariales\",\n          \"Análisis personalizados y reportes a medida\",\n          \"Soporte dedicado con gestor de cuenta asignado\"\n        ]\n      }\n    ];\n    \n    return pricingPlans;\n  }\n  \n  /**\n   * Extrae información sobre la funcionalidad de creación de formularios\n   * @returns Información detallada sobre creación de formularios\n   */\n  private extractFormulariosInfo(): any {\n    return {\n      description: \"AIPPS ofrece una potente herramienta para la creación de formularios inteligentes para tu sitio web\",\n      pasos_creacion: [\n        \"1. Inicia sesión en tu cuenta de AIPPS y ve al panel de administración\",\n        \"2. En el menú lateral, selecciona la opción 'Formularios'\",\n        \"3. Haz clic en el botón 'Crear Nuevo Formulario'\",\n        \"4. Selecciona una plantilla predefinida o comienza desde cero\",\n        \"5. Personaliza los campos del formulario según tus necesidades\",\n        \"6. Configura la apariencia y comportamiento del formulario\",\n        \"7. Guarda los cambios y obtén el código de integración\"\n      ],\n      tipos_formularios: [\n        {\n          tipo: \"Formulario de contacto\",\n          descripcion: \"Permite a los visitantes comunicarse contigo directamente desde tu sitio web\",\n          campos_comunes: [\"Nombre\", \"Email\", \"Teléfono\", \"Mensaje\"]\n        },\n        {\n          tipo: \"Formulario de captura de leads\",\n          descripcion: \"Diseñado para convertir visitantes en potenciales clientes\",\n          campos_comunes: [\"Nombre\", \"Email\", \"Intereses\", \"Empresa\"]\n        },\n        {\n          tipo: \"Formulario de reserva\",\n          descripcion: \"Perfecto para programar citas o reservas de servicios\",\n          campos_comunes: [\"Nombre\", \"Email\", \"Fecha y hora\", \"Servicio deseado\"]\n        },\n        {\n          tipo: \"Formulario de solicitud de presupuesto\",\n          descripcion: \"Ideal para empresas de servicios que necesitan detalles específicos para cotizar\",\n          campos_comunes: [\"Datos de contacto\", \"Detalles del proyecto\", \"Presupuesto estimado\", \"Plazo\"]\n        },\n        {\n          tipo: \"Formulario de encuesta\",\n          descripcion: \"Para obtener retroalimentación de clientes o visitantes\",\n          campos_comunes: [\"Valoraciones\", \"Preguntas abiertas\", \"Selección múltiple\"]\n        }\n      ],\n      opciones_integracion: [\n        {\n          opcion: \"Widget flotante\",\n          descripcion: \"Botón que se muestra en una esquina de tu sitio web y expande el formulario cuando se hace clic\"\n        },\n        {\n          opcion: \"Incrustado\",\n          descripcion: \"El formulario se muestra directamente dentro de una sección de tu página web\"\n        },\n        {\n          opcion: \"Modal emergente\",\n          descripcion: \"Aparece sobre el contenido de la página cuando el visitante realiza una acción específica\"\n        },\n        {\n          opcion: \"Página completa\",\n          descripcion: \"Formulario en una página dedicada con URL única para compartir directamente\"\n        }\n      ],\n      caracteristicas_avanzadas: [\n        \"Lógica condicional: muestra u oculta campos según las respuestas anteriores\",\n        \"Validación automática: verifica que los datos ingresados tengan el formato correcto\",\n        \"Notificaciones por email: recibe alertas cuando alguien completa el formulario\",\n        \"Integración con CRM: sincroniza automáticamente los datos capturados\",\n        \"Análisis de conversión: estadísticas sobre tasas de completado y abandono\",\n        \"Personalización de diseño: adapta colores, fuentes y estilos a tu marca\",\n        \"Autoguardado: permite a los usuarios continuar más tarde desde donde lo dejaron\",\n        \"Protección anti-spam: evita envíos automáticos no deseados\"\n      ],\n      paso_integracion_codigo: [\n        \"1. Ve a la sección 'Formularios' en tu panel de AIPPS\",\n        \"2. Selecciona el formulario que deseas integrar\",\n        \"3. Haz clic en 'Obtener código'\",\n        \"4. Copia el fragmento de código HTML/JavaScript proporcionado\",\n        \"5. Pega el código en tu sitio web donde deseas que aparezca el formulario\",\n        \"6. Guarda los cambios en tu sitio web para que el formulario sea visible\"\n      ],\n      documentacion: {\n        general: \"La documentación completa de AIPPS está disponible en la sección Docs, con guías detalladas para cada funcionalidad\",\n        secciones: [\n          {\n            titulo: \"Introducción a AIPPS\",\n            descripcion: \"Visión general de la plataforma, casos de uso y beneficios principales\",\n            url: \"/docs/introduccion\"\n          },\n          {\n            titulo: \"Creación de chatbots\",\n            descripcion: \"Guía paso a paso para configurar un asistente virtual para tu sitio web\",\n            url: \"/docs/creacion-chatbots\"\n          },\n          {\n            titulo: \"Formularios inteligentes\",\n            descripcion: \"Documentación completa sobre creación, personalización e integración de formularios\",\n            url: \"/docs/formularios\"\n          },\n          {\n            titulo: \"Integración con sitios web\",\n            descripcion: \"Instrucciones detalladas para integrar widgets de AIPPS en diferentes plataformas\",\n            url: \"/docs/integracion-web\"\n          },\n          {\n            titulo: \"Extracción de datos y analíticas\",\n            descripcion: \"Cómo utilizar los datos capturados para mejorar tu estrategia\",\n            url: \"/docs/analiticas\"\n          },\n          {\n            titulo: \"Personalización avanzada\",\n            descripcion: \"Opciones para adaptar la apariencia y comportamiento a tus necesidades específicas\",\n            url: \"/docs/personalizacion\"\n          },\n          {\n            titulo: \"API y desarrollo\",\n            descripcion: \"Referencia para desarrolladores sobre la API de AIPPS\",\n            url: \"/docs/api\"\n          }\n        ],\n        faq: [\n          {\n            pregunta: \"¿Cómo puedo editar un formulario después de publicarlo?\",\n            respuesta: \"Accede al panel de administración, ve a la sección Formularios, selecciona el formulario que deseas modificar y haz clic en Editar. Realiza los cambios necesarios y guarda.\"\n          },\n          {\n            pregunta: \"¿Es posible integrar AIPPS con mi CRM?\",\n            respuesta: \"Sí, AIPPS ofrece integraciones con los principales CRMs del mercado a través de nuestra API y conectores específicos en los planes Profesional y Empresarial.\"\n          },\n          {\n            pregunta: \"¿Cómo puedo obtener datos de los usuarios que interactúan con mis formularios?\",\n            respuesta: \"Todos los datos capturados se almacenan automáticamente en tu panel de administración, en la sección Respuestas. También puedes configurar notificaciones por email y exportar los datos en varios formatos.\"\n          },\n          {\n            pregunta: \"¿Puedo personalizar el aspecto visual de los formularios?\",\n            respuesta: \"Sí, AIPPS permite personalizar colores, fuentes, bordes, tamaños y otros elementos visuales para adaptar los formularios a la estética de tu marca.\"\n          },\n          {\n            pregunta: \"¿Los formularios son responsivos para dispositivos móviles?\",\n            respuesta: \"Sí, todos los formularios creados con AIPPS son totalmente responsivos y se adaptan automáticamente a cualquier tamaño de pantalla, incluyendo smartphones y tablets.\"\n          }\n        ]\n      }\n    };\n  }\n\n  /**\n   * Extrae información sobre la documentación disponible\n   * @returns Información detallada sobre la documentación\n   */\n  private extractDocumentationInfo(): any {\n    return {\n      general: \"La documentación completa de AIPPS está disponible en la sección Docs, con guías detalladas para cada funcionalidad\",\n      secciones: [\n        {\n          titulo: \"Introducción a AIPPS\",\n          descripcion: \"Visión general de la plataforma, casos de uso y beneficios principales\",\n          url: \"/docs/introduccion\"\n        },\n        {\n          titulo: \"Creación de chatbots\",\n          descripcion: \"Guía paso a paso para configurar un asistente virtual para tu sitio web\",\n          url: \"/docs/creacion-chatbots\"\n        },\n        {\n          titulo: \"Formularios inteligentes\",\n          descripcion: \"Documentación completa sobre creación, personalización e integración de formularios\",\n          url: \"/docs/formularios\"\n        },\n        {\n          titulo: \"Integración con sitios web\",\n          descripcion: \"Instrucciones detalladas para integrar widgets de AIPPS en diferentes plataformas\",\n          url: \"/docs/integracion-web\"\n        },\n        {\n          titulo: \"Extracción de datos y analíticas\",\n          descripcion: \"Cómo utilizar los datos capturados para mejorar tu estrategia\",\n          url: \"/docs/analiticas\"\n        },\n        {\n          titulo: \"Personalización avanzada\",\n          descripcion: \"Opciones para adaptar la apariencia y comportamiento a tus necesidades específicas\",\n          url: \"/docs/personalizacion\"\n        },\n        {\n          titulo: \"API y desarrollo\",\n          descripcion: \"Referencia para desarrolladores sobre la API de AIPPS\",\n          url: \"/docs/api\"\n        }\n      ],\n      api: {\n        general: \"La API de AIPPS permite integrar todas las funcionalidades de la plataforma en tus propias aplicaciones\",\n        endpoints: [\n          {\n            nombre: \"Autenticación\",\n            descripcion: \"Obtener tokens de acceso para usar la API\",\n            url: \"/docs/api/auth\"\n          },\n          {\n            nombre: \"Chatbots\",\n            descripcion: \"Crear, gestionar y personalizar chatbots programáticamente\",\n            url: \"/docs/api/chatbots\"\n          },\n          {\n            nombre: \"Formularios\",\n            descripcion: \"Administrar formularios y recibir respuestas mediante la API\",\n            url: \"/docs/api/forms\"\n          },\n          {\n            nombre: \"Analíticas\",\n            descripcion: \"Obtener estadísticas y datos de las interacciones\",\n            url: \"/docs/api/analytics\"\n          }\n        ],\n        ejemplos: [\n          \"Crear un chatbot: POST /api/chatbots\",\n          \"Obtener respuestas de formularios: GET /api/forms/{id}/responses\",\n          \"Actualizar configuración: PUT /api/settings\",\n          \"Obtener estadísticas: GET /api/analytics/dashboard\"\n        ]\n      },\n      faq: [\n        {\n          pregunta: \"¿Dónde puedo encontrar la documentación de la API?\",\n          respuesta: \"Puedes encontrar la documentación completa de la API en la sección /docs/api de nuestra página web. Allí encontrarás información detallada sobre todos los endpoints disponibles, ejemplos de código y guías de implementación.\"\n        },\n        {\n          pregunta: \"¿Es necesario un token de API para acceder a la documentación?\",\n          respuesta: \"No, la documentación es de acceso público. Sin embargo, para utilizar la API en producción necesitarás registrarte y obtener tu clave de API desde tu panel de control.\"\n        },\n        {\n          pregunta: \"¿Ofrecen SDKs para diferentes lenguajes de programación?\",\n          respuesta: \"Sí, ofrecemos SDKs oficiales para JavaScript, Python, PHP, Ruby y Java. Puedes encontrarlos en la sección de documentación de la API junto con ejemplos de implementación.\"\n        },\n        {\n          pregunta: \"¿Puedo probar la API antes de suscribirme a un plan de pago?\",\n          respuesta: \"Absolutamente. Ofrecemos un entorno sandbox con cuotas limitadas para que puedas probar todas las funcionalidades de la API antes de suscribirte a un plan de pago.\"\n        }\n      ]\n    };\n  }\n}\n\n// Instancia singleton para usar en toda la aplicación\nexport const webscraper = new WebScraper();","size_bytes":27336},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { storage } from '../storage';\n\n// JWT secret key\nexport const JWT_SECRET = process.env.JWT_SECRET || 'default_jwt_secret';\n\n// Extend Express Request interface to include user and userId\ndeclare global {\n  namespace Express {\n    interface Request {\n      userId: number;\n      user?: any; // Allow storing the user object\n    }\n  }\n}\n\n/**\n * Middleware to verify JWT token from cookies\n * Adds userId to the request object if verification is successful\n */\nexport async function verifyToken(req: Request, res: Response, next: NextFunction) {\n  // Primero comprobar si hay un token válido\n  const token = req.cookies?.auth_token || \n                (req.headers.authorization && req.headers.authorization.startsWith('Bearer ') \n                 ? req.headers.authorization.slice(7) : null);\n  \n  if (token) {\n    try {\n      // Token verification (logging removed for security)\n      const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n      req.userId = decoded.userId;\n      console.log(\"Token verificado correctamente. ID de usuario:\", req.userId);\n      \n      // Cargar el objeto de usuario completo desde la base de datos\n      try {\n        const user = await storage.getUser(req.userId);\n        if (user) {\n          req.user = user;\n          console.log(\"Usuario autenticado encontrado:\", user.username);\n        } else {\n          console.log(\"Usuario no encontrado en la base de datos con ID:\", req.userId);\n        }\n      } catch (userError) {\n        console.error(\"Error al obtener el usuario:\", userError);\n        // No bloquear la autenticación si no se puede cargar el usuario completo\n        // Solo se usa el userId para autenticación básica\n      }\n      \n      return next();\n    } catch (error) {\n      console.error('Token verification error:', error);\n      res.clearCookie('auth_token', {\n        httpOnly: true,\n        secure: true,\n        sameSite: \"none\",\n        path: \"/\",\n      });\n      return res.status(401).json({ message: 'Invalid or expired token' });\n    }\n  } else {\n    console.log(\"No se encontró token de autenticación\");\n    \n    // Para depuración, mostrar qué cookies hay disponibles\n    console.log(\"Cookies disponibles:\", req.cookies);\n    console.log(\"Headers:\", req.headers);\n  }\n  \n  // En cualquier ambiente, si no hay token válido, devolvemos un error\n  return res.status(401).json({ message: 'Authentication required' });\n}\n\n/**\n * Middleware to verify API key from query parameters or headers\n * Used for widget and embedded script authentication\n */\nexport function verifyApiKey(req: Request, res: Response, next: NextFunction) {\n  const apiKey = req.query.key as string || req.headers['x-api-key'] as string;\n  \n  if (!apiKey) {\n    return res.status(401).json({ message: 'API key required' });\n  }\n  \n  // API key verification will be handled by the route handler\n  // We just attach it to the request for convenience\n  req.headers['x-api-key'] = apiKey;\n  next();\n}\n\n/**\n * Optional authentication middleware\n * Attaches userId to request if token is valid, but doesn't block requests without tokens\n */\nexport function optionalAuth(req: Request, res: Response, next: NextFunction) {\n  const token = req.cookies?.auth_token;\n  \n  if (!token) {\n    return next();\n  }\n  \n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n    req.userId = decoded.userId;\n  } catch (error) {\n    // Invalid token, but we continue anyway\n    console.error('Optional auth token verification error:', error);\n    res.clearCookie('auth_token');\n  }\n  \n  next();\n}\n\n/**\n * Middleware for checking if user is an admin\n * Must be used after authenticateJWT middleware\n */\nexport function isAdmin(req: Request, res: Response, next: NextFunction) {\n  try {\n    if (!req.userId) {\n      console.log(\"isAdmin: No userId en la petición\");\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    \n    if (!req.user) {\n      console.log(\"isAdmin: No user object in request\");\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n    \n    console.log(\"isAdmin: Verificando usuario con ID:\", req.userId);\n    console.log(\"isAdmin: Usuario encontrado:\", req.user.username, \"con ID:\", req.user.id);\n    \n    // Verificar si el usuario es admin (username === 'admin')\n    if (req.user.username !== 'admin') {\n      console.log(\"isAdmin: Acceso denegado para\", req.user.username, \"- No es administrador\");\n      return res.status(403).json({ message: \"Forbidden: Admin access required\" });\n    }\n    \n    console.log(\"isAdmin: Acceso de administrador concedido para:\", req.user.username);\n    next();\n  } catch (error) {\n    console.error(\"isAdmin: Error en verificación de administrador:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n}\n\n/**\n * JWT authentication middleware\n * Verifies JWT token and attaches the user object to the request\n */\nexport async function authenticateJWT(req: Request, res: Response, next: NextFunction) {\n  // Obtener el token de diferentes fuentes\n  let token = null;\n  \n  // 1. Intentar obtener de las cookies\n  if (req.cookies?.auth_token) {\n    token = req.cookies.auth_token;\n    console.log(\"Token encontrado en cookies\");\n  }\n  // También intentar con el nombre 'token' por compatibilidad\n  else if (req.cookies?.token) {\n    token = req.cookies.token;\n    console.log(\"Token encontrado en cookies\");\n  }\n  // 2. Intentar obtener del header Authorization\n  else if (req.headers.authorization) {\n    // Depuración para el header de autorización\n    console.log(\"Headers:\", JSON.stringify(req.headers));\n    \n    if (req.headers.authorization.startsWith('Bearer ')) {\n      token = req.headers.authorization.slice(7);\n      console.log(\"Token encontrado en header Authorization con formato Bearer\");\n    } else {\n      token = req.headers.authorization;\n      console.log(\"Token encontrado en header Authorization sin formato Bearer\");\n    }\n  }\n  \n  // Registrar la disponibilidad del token\n  console.log(\"Token encontrado:\", token ? \"Sí\" : \"No\");\n  \n  // Special case for Replit Webview Tool\n  const isReplitWebviewTool = req.headers['user-agent']?.includes('HeadlessChrome') && \n                             req.headers['x-forwarded-for']?.toString().includes('34.72.');\n  \n  if (!token) {\n    console.log(\"No se encontró token de autenticación\");\n    console.log(\"Cookies disponibles:\", req.cookies);\n    console.log(\"Headers:\", req.headers);\n    \n    if (isReplitWebviewTool && process.env.REPL_ID) {\n      // Para la herramienta de feedback, permitimos continuar con el usuario admin\n      console.log(\"Detectado Replit Webview Tool - usando cuenta de admin para la demostración\");\n      const adminUser = await storage.getUserByUsername('admin');\n      \n      if (adminUser) {\n        req.userId = adminUser.id;\n        req.user = adminUser;\n        return next();\n      }\n    }\n    \n    return res.status(401).json({ message: 'Authentication required' });\n  }\n  \n  try {\n    // Verificar el token\n    // Token verification (logging removed for security)\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };\n    console.log(\"Token verificado correctamente. ID de usuario:\", decoded.userId);\n    req.userId = decoded.userId;\n    \n    // Obtener los datos completos del usuario\n    const user = await storage.getUser(req.userId);\n    \n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    // Adjuntar el usuario al objeto request\n    req.user = user;\n    \n    next();\n  } catch (error) {\n    console.error('JWT authentication error:', error);\n    \n    if (isReplitWebviewTool && process.env.REPL_ID) {\n      // Para la herramienta de feedback, permitimos continuar con el usuario admin\n      console.log(\"Error de token pero detectado Replit Webview Tool - usando cuenta de admin para la demostración\");\n      const adminUser = await storage.getUserByUsername('admin');\n      \n      if (adminUser) {\n        req.userId = adminUser.id;\n        req.user = adminUser;\n        return next();\n      }\n    }\n    \n    return res.status(401).json({ message: 'Invalid or expired token' });\n  }\n}\n\n/**\n * Role-based authorization middleware\n * Requires the verifyToken middleware to be used before this one\n */\nexport function authorize(roles: string[]) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      if (!req.userId) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n      \n      // Obtener el usuario actual\n      const user = await storage.getUser(req.userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      console.log(`Verificando autorización para roles ${roles.join(', ')} - Usuario: ${user.username} (ID: ${user.id})`);\n      \n      // Comprobar si el usuario es administrador (tiene username 'admin')\n      const isAdmin = user.username === 'admin';\n      \n      if (roles.includes('admin') && !isAdmin) {\n        console.log(`Acceso denegado: ${user.username} no tiene rol de administrador`);\n        return res.status(403).json({ message: 'Insufficient permissions: Admin role required' });\n      }\n      \n      console.log(`Autorización concedida para ${user.username}`);\n      next();\n    } catch (error) {\n      console.error('Authorization error:', error);\n      return res.status(500).json({ message: 'Internal server error' });\n    }\n  };\n}\n","size_bytes":9569},"server/middleware/subscription.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\nimport { PRODUCTS } from \"../lib/stripe\";\n\n// Tipos de interacción que cuentan para el límite\nexport enum InteractionType {\n  CHAT = \"chat\",          // Mensajes de chat\n  DOCUMENT = \"document\",  // Procesamiento de documentos\n  ANALYSIS = \"analysis\",  // Análisis de sentimiento, etc.\n}\n\n/**\n * Middleware para verificar si el usuario tiene un plan activo y\n * puede realizar la acción solicitada según su nivel de suscripción\n */\nexport async function verifySubscription(\n  req: Request, \n  res: Response, \n  next: NextFunction\n) {\n  try {\n    // Verificar que el usuario está autenticado\n    if (!req.userId) {\n      return res.status(401).json({ \n        message: \"No autorizado. Inicia sesión para continuar.\",\n        code: \"UNAUTHORIZED\"\n      });\n    }\n\n    // Obtener información de suscripción del usuario\n    const userId = req.userId;\n    const subscription = await getUserSubscription(userId);\n\n    // Si no hay una suscripción, crear una gratuita automáticamente\n    if (!subscription) {\n      // Crear suscripción gratuita para el usuario\n      await storage.createSubscription({\n        userId,\n        tier: \"free\",\n        status: \"active\",\n        interactionsLimit: 20,\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 días\n      });\n\n      // Continuar con la ejecución normal\n      return next();\n    }\n    \n    // Verificar que la suscripción esté activa\n    if (subscription.status !== \"active\") {\n      return res.status(403).json({ \n        message: \"Tu suscripción no está activa. Actualiza tu plan para continuar.\",\n        code: \"SUBSCRIPTION_INACTIVE\"\n      });\n    }\n\n    // Verificar que no ha excedido el límite de interacciones\n    // Solo si está solicitando una funcionalidad que cuenta como interacción\n    const isInteraction = isCountableInteraction(req.path, req.method);\n    \n    if (isInteraction && subscription.interactionsUsed >= subscription.interactionsLimit) {\n      return res.status(403).json({ \n        message: \"Has alcanzado el límite de interacciones de tu plan actual. Actualiza tu plan para continuar.\",\n        code: \"INTERACTION_LIMIT_REACHED\"\n      });\n    }\n\n    // Adjuntar la información de suscripción a la solicitud para uso posterior\n    req.subscription = subscription;\n    \n    // Continuar con la solicitud\n    next();\n  } catch (error) {\n    console.error(\"Error verificando suscripción:\", error);\n    res.status(500).json({ \n      message: \"Error al verificar tu suscripción. Inténtalo nuevamente.\",\n      code: \"SUBSCRIPTION_ERROR\"\n    });\n  }\n}\n\n/**\n * Determina si una solicitud cuenta como una interacción que debe ser limitada\n */\nfunction isCountableInteraction(path: string, method: string): boolean {\n  // Comprobar si la ruta corresponde a una interacción que debe contabilizarse\n  const interactionPaths = [\n    // Interacciones de chat\n    { path: '/api/widget/', method: 'POST' },\n    { path: '/api/openai/completion', method: 'POST' },\n    { path: '/api/openai/sentiment', method: 'POST' },\n    { path: '/api/openai/summarize', method: 'POST' },\n    \n    // Procesamiento de documentos\n    { path: '/api/documents/upload', method: 'POST' },\n    { path: '/api/documents/process', method: 'POST' },\n    \n    // Análisis\n    { path: '/api/analyze/', method: 'POST' },\n  ];\n\n  return interactionPaths.some(item => \n    path.includes(item.path) && method === item.method\n  );\n}\n\n/**\n * Incrementa el contador de interacciones para un usuario\n */\nexport async function incrementInteractionCount(\n  req: Request, \n  interactionType: InteractionType = InteractionType.CHAT\n): Promise<boolean> {\n  try {\n    if (!req.userId || !req.subscription) {\n      return false;\n    }\n\n    // Incrementar el contador en la base de datos\n    await storage.incrementSubscriptionUsage(req.subscription.id);\n    \n    return true;\n  } catch (error) {\n    console.error(`Error incrementando contador de interacciones (${interactionType}):`, error);\n    return false;\n  }\n}\n\n/**\n * Obtiene la información de suscripción actual de un usuario\n */\nexport async function getUserSubscription(userId: number) {\n  try {\n    // Buscar la suscripción activa del usuario\n    const subscriptions = await storage.getUserSubscriptions(userId);\n    \n    if (!subscriptions || subscriptions.length === 0) {\n      return null;\n    }\n    \n    // Encontrar la suscripción activa más reciente\n    return subscriptions\n      .filter(sub => sub.status === 'active')\n      .sort((a, b) => {\n        const dateA = a.updatedAt || a.createdAt || new Date(0);\n        const dateB = b.updatedAt || b.createdAt || new Date(0);\n        return dateB.getTime() - dateA.getTime();\n      })[0] || null;\n  } catch (error) {\n    console.error('Error obteniendo la suscripción del usuario:', error);\n    return null;\n  }\n}\n\n/**\n * Verifica si un usuario tiene acceso a una característica específica basado en su nivel de suscripción\n */\nexport function hasFeatureAccess(subscription: any, feature: string): boolean {\n  // Lista de características por nivel\n  const featuresByTier: Record<string, string[]> = {\n    free: [\n      \"widget_bubble\",\n      \"basic_analytics\",\n    ],\n    basic: [\n      \"widget_bubble\",\n      \"document_upload\",\n      \"basic_analytics\",\n      \"lead_capture\",\n    ],\n    professional: [\n      \"widget_bubble\",\n      \"widget_fullscreen\",\n      \"document_upload\",\n      \"detailed_analytics\",\n      \"lead_capture\",\n      \"task_automation\",\n    ],\n    enterprise: [\n      \"widget_bubble\",\n      \"widget_fullscreen\",\n      \"document_upload\",\n      \"detailed_analytics\",\n      \"lead_capture\",\n      \"task_automation\",\n      \"custom_branding\",\n      \"crm_integration\",\n    ],\n  };\n\n  // Si no hay suscripción o no está activa, solo tiene acceso a características gratuitas\n  if (!subscription || subscription.status !== \"active\") {\n    return featuresByTier.free.includes(feature);\n  }\n\n  // Obtener nivel y verificar acceso\n  const tier = subscription.tier || \"free\";\n  \n  // Características del nivel actual\n  const allowedFeatures = featuresByTier[tier] || [];\n  \n  // Si es nivel enterprise, conceder acceso a todo\n  if (tier === \"enterprise\") {\n    return true;\n  }\n  \n  return allowedFeatures.includes(feature);\n}\n\n/**\n * Convierte un nivel a su límite de interacciones\n */\nexport function getInteractionLimitByTier(tier: string): number {\n  const limits: Record<string, number> = {\n    free: 20,\n    basic: 500,\n    professional: 2000,\n    enterprise: 99999, // \"ilimitado\"\n  };\n  \n  return limits[tier.toLowerCase()] || limits.free;\n}\n\n// Extender el tipo Request para incluir la suscripción\ndeclare global {\n  namespace Express {\n    interface Request {\n      subscription?: any;\n    }\n  }\n}","size_bytes":6836},"shared/types/pdf-parse.d.ts":{"content":"declare module 'pdf-parse' {\n  interface PDFData {\n    numpages: number;\n    numrender: number;\n    info: any;\n    metadata: any;\n    text: string;\n    version: string;\n  }\n\n  function pdfParse(dataBuffer: Buffer, options?: any): Promise<PDFData>;\n  \n  export = pdfParse;\n}","size_bytes":273},"client/src/components/RotatingWelcomeMessage.tsx":{"content":"import { useWelcomeMessages } from '@/hooks/useWelcomeMessages';\nimport { useTranslation } from 'react-i18next';\n\ninterface RotatingWelcomeMessageProps {\n  className?: string;\n}\n\nexport function RotatingWelcomeMessage({ className = \"\" }: RotatingWelcomeMessageProps) {\n  const { t } = useTranslation();\n  const { currentMessage, isLoading, error } = useWelcomeMessages();\n\n  // Si hay error o está cargando, usar el mensaje de traducción original\n  if (isLoading || error) {\n    return (\n      <p className={className}>\n        {t(\"tagline\")}\n      </p>\n    );\n  }\n\n  return (\n    <p className={className}>\n      {currentMessage}\n    </p>\n  );\n}","size_bytes":647},"client/src/components/automation-card.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Eye } from \"lucide-react\";\n\ninterface AutomationCardProps {\n  name: string;\n  description: string;\n  status: \"active\" | \"inactive\" | \"in_testing\";\n  lastModified: string;\n  processedCount: number;\n  onEdit: () => void;\n  onViewAnalytics: () => void;\n}\n\nexport default function AutomationCard({\n  name,\n  description,\n  status,\n  lastModified,\n  processedCount,\n  onEdit,\n  onViewAnalytics\n}: AutomationCardProps) {\n  const getStatusBadge = () => {\n    switch (status) {\n      case \"active\":\n        return (\n          <span className=\"px-2 py-1 text-xs bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full\">\n            Active\n          </span>\n        );\n      case \"inactive\":\n        return (\n          <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200 rounded-full\">\n            Inactive\n          </span>\n        );\n      case \"in_testing\":\n        return (\n          <span className=\"px-2 py-1 text-xs bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 rounded-full\">\n            In Testing\n          </span>\n        );\n    }\n  };\n\n  return (\n    <Card className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div>\n          <h3 className=\"font-medium\">{name}</h3>\n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">{description}</p>\n        </div>\n        <div className=\"flex items-center\">\n          {getStatusBadge()}\n        </div>\n      </div>\n      \n      <div className=\"mb-4\">\n        <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400 mb-2\">\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          Last modified: {lastModified}\n        </div>\n        <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n          <Eye className=\"w-4 h-4 mr-2\" />\n          Processed: {processedCount} {processedCount === 1 ? 'item' : 'items'}\n        </div>\n      </div>\n      \n      <div className=\"flex justify-between\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={onEdit}\n          className=\"px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n        >\n          Edit\n        </Button>\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          onClick={onViewAnalytics}\n          className=\"px-3 py-1 text-sm bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 hover:bg-primary-200 dark:hover:bg-primary-800 transition-colors\"\n        >\n          View Analytics\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2877},"client/src/components/chat-interface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Send } from \"lucide-react\";\nimport { generateChatCompletion } from \"@/lib/openai\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\ninterface ChatInterfaceProps {\n  demoMode?: boolean;\n  integrationId?: number;\n  context?: string;\n  welcomePageSettings?: {\n    welcomePageChatEnabled?: boolean;\n    welcomePageChatGreeting?: string;\n    welcomePageChatBubbleColor?: string;\n    welcomePageChatTextColor?: string;\n    welcomePageChatBehavior?: string;\n    // Nuevos campos para la configuración de scraping\n    welcomePageChatScrapingEnabled?: boolean;\n    welcomePageChatScrapingDepth?: number;\n    welcomePageChatScrapingData?: string;\n  };\n}\n\nexport default function ChatInterface({ \n  demoMode = false, \n  integrationId,\n  context = \"\",\n  welcomePageSettings\n}: ChatInterfaceProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [conversationId, setConversationId] = useState<number | null>(null);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { t, i18n } = useTranslation();\n\n  // Función para obtener el mensaje de bienvenida según el idioma\n  const getWelcomeMessage = () => {\n    // Siempre usar el idioma seleccionado por el usuario, independientemente de la configuración del servidor\n    // Esto asegura que el mensaje se muestre en el idioma correcto\n    const currentLanguage = i18n.language;\n    console.log(\"Obteniendo mensaje de bienvenida para idioma:\", currentLanguage);\n    \n    // Usar i18n para obtener traducciones (prioridad para mantener coherencia en la UI)\n    const messages = {\n      es: \"👋 ¡Hola! Soy AIPPS, tu asistente de IA. ¿En qué puedo ayudarte hoy?\",\n      en: \"👋 Hello! I'm AIPPS, your AI assistant. How can I help you today?\",\n      fr: \"👋 Bonjour ! Je suis AIPPS, votre assistant IA. Comment puis-je vous aider aujourd'hui ?\"\n    };\n    return messages[currentLanguage as keyof typeof messages] || messages.en;\n  };\n\n  // Inicializar el chat con un mensaje de bienvenida\n  useEffect(() => {\n    const welcomeMessage = getWelcomeMessage();\n    \n    // Actualizar los mensajes con el nuevo mensaje de bienvenida cuando cambie el idioma\n    setMessages([{ role: 'assistant', content: welcomeMessage }]);\n    \n    if (integrationId && !demoMode) {\n      // Iniciar una conversación real si no estamos en modo demo y tenemos una integración\n      startConversation();\n    }\n    \n    console.log(\"Idioma cambiado a:\", i18n.language);\n    console.log(\"Mensaje de bienvenida actualizado:\", welcomeMessage);\n  }, [i18n.language, welcomePageSettings?.welcomePageChatGreeting]); // Re-ejecutar cuando cambie el idioma o el mensaje de bienvenida\n\n  // Scroll automático al final de los mensajes solo dentro del contenedor del chat\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      // Buscar el contenedor padre (que tiene el overflow-y-auto)\n      const chatContainer = document.getElementById('chat-messages');\n      if (chatContainer) {\n        // Hacer scroll solo dentro del contenedor, no en toda la página\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n    }\n  }, [messages, isTyping]);\n\n  // Iniciar una conversación con la API\n  const startConversation = async () => {\n    if (!integrationId) return;\n    \n    try {\n      const apiKey = 'aipps_mrPg94zRtTKr31hOY0m8PaPk305PJNVD';\n      const response = await fetch(`/api/widget/${apiKey}/conversation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          integrationId\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Error starting conversation: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setConversationId(data.id);\n    } catch (error) {\n      console.error(\"Error starting conversation:\", error);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  // Función básica para detectar el idioma del texto\n  const detectLanguage = (text: string): string => {\n    // Patrones comunes de cada idioma (muy simplificado)\n    const patterns = {\n      en: /\\b(hello|hi|good|morning|afternoon|evening|thanks|please|would|could|how|what|when|who|why|where|is|are|have|had|been|was|were|will|should|can|may|the|this|that|these|those|it|its|i|my|we|our|you|your|he|she|his|her)\\b/i,\n      es: /\\b(hola|buenos|días|tardes|noches|gracias|por favor|quisiera|podría|cómo|qué|cuándo|quién|por qué|dónde|es|son|ha|han|sido|era|eran|será|debería|puede|el|la|los|las|esto|eso|estos|esos|esas|yo|mi|mis|nosotros|nuestro|tú|tu|usted|su|él|ella)\\b/i,\n      fr: /\\b(bonjour|salut|bonsoir|merci|s'il vous plaît|voudrais|pourrait|comment|quoi|quand|qui|pourquoi|où|est|sont|a|ont|été|était|étaient|sera|devrait|peut|le|la|les|ce|cette|ces|ceux|celles|ça|je|mon|ma|mes|nous|notre|vous|votre|il|elle|son|sa)\\b/i\n    };\n    \n    // Chequear coincidencias para cada idioma\n    let matchedLang = '';\n    let maxMatches = 0;\n    \n    Object.entries(patterns).forEach(([lang, pattern]) => {\n      const matches = (text.match(pattern) || []).length;\n      if (matches > maxMatches) {\n        maxMatches = matches;\n        matchedLang = lang;\n      }\n    });\n    \n    return matchedLang;\n  };\n\n  const handleSendMessage = async () => {\n    if (inputValue.trim() === \"\" || isTyping) return;\n    \n    const userMessage: ChatMessage = { role: 'user', content: inputValue };\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsTyping(true);\n    \n    // Registrar el idioma actual que se usará para la respuesta\n    const currentLanguage = i18n.language;\n    console.log(\"Idioma actual para la respuesta:\", currentLanguage);\n    \n    // Detectar el idioma del mensaje del usuario\n    const detectedLanguage = detectLanguage(userMessage.content);\n    console.log(\"Idioma detectado en el mensaje:\", detectedLanguage);\n    \n    // Si el idioma detectado no coincide con el idioma actual y se pudo detectar\n    if (detectedLanguage && detectedLanguage !== currentLanguage) {\n      // Mostrar sugerencia según el idioma detectado\n      let languageSuggestion = \"\";\n      \n      if (detectedLanguage === 'en') {\n        languageSuggestion = \"I noticed you're writing in English. Would you like to switch the interface language to English? You can change it in the top-right menu.\";\n      } else if (detectedLanguage === 'es') {\n        languageSuggestion = \"He notado que estás escribiendo en español. ¿Te gustaría cambiar el idioma de la interfaz a español? Puedes cambiarlo en el menú superior derecho.\";\n      } else if (detectedLanguage === 'fr') {\n        languageSuggestion = \"J'ai remarqué que vous écrivez en français. Souhaitez-vous passer la langue de l'interface en français ? Vous pouvez la modifier dans le menu en haut à droite.\";\n      }\n      \n      // Agregar la sugerencia como mensaje del asistente\n      if (languageSuggestion) {\n        setTimeout(() => {\n          setMessages(prev => [...prev, { role: 'assistant', content: languageSuggestion }]);\n        }, 1000);\n      }\n    }\n    \n    let response = \"\";\n    \n    try {\n      if (demoMode) {\n        // Demo mode: use OpenAI directly with environment context\n        try {\n          // Guardar el idioma actual para asegurarnos de que se usa en la respuesta\n          const currentLanguage = i18n.language;\n          console.log(\"Enviando mensaje con idioma:\", currentLanguage);\n          \n          // Intentar detectar elementos de la página para proporcionar contexto\n          const pageUrl = window.location.href;\n          const pageTitle = document.title;\n          \n          // Extraer enlaces de navegación\n          const navLinks = Array.from(document.querySelectorAll('nav a, header a, .navigation a, .menu a'))\n            .map((link: Element) => ({\n              text: link.textContent?.trim(),\n              href: (link as HTMLAnchorElement).href\n            }))\n            .filter(link => link.text && link.text.length > 1); // Filtrar enlaces vacíos\n          \n          const navigationContent = navLinks.length > 0 \n            ? navLinks.map(link => `- ${link.text} (${link.href})`).join('\\n')\n            : \"No se detectaron enlaces de navegación\";\n          \n          // Extraer posible contenido sobre servicios o características\n          const servicesContent = Array.from(document.querySelectorAll('.features, .services, .pricing, [class*=\"feature\"], [class*=\"service\"], [class*=\"price\"]'))\n            .map(el => el.textContent?.trim())\n            .filter(Boolean)\n            .join('\\n\\n') || \"No se detectó información específica sobre servicios o características\";\n          \n          // Extraer contenido principal de la página\n          const pageContent = document.body.innerText.substring(0, 3000) + \"...\";\n          \n          // Usar el comportamiento personalizado si está disponible\n          const customBehavior = welcomePageSettings?.welcomePageChatBehavior;\n          \n          // Comprobar si hay datos de scraping disponibles del servidor\n          let scrapedData = '';\n          \n          // Recopilar información estructurada sobre precios de los planes\n          const pricingInfo = `\nPRECIOS Y PLANES DE AIPPS:\n\nPlan Gratuito:\n- Hasta 20 interacciones por día\n- Acceso al widget flotante para integración sencilla en el sitio web\n- Respuestas basadas en la información disponible públicamente\n- Sin personalización ni carga de documentos específicos\n- Sin captura de leads ni seguimiento\n- Análisis básicos de interacciones\n\nPlan Básico:\n- Precio: $29/mes\n- Hasta 500 interacciones mensuales\n- Incluye todas las funcionalidades del Paquete Gratuito\n- Carga y procesamiento de documentos específicos (PDF, DOCX, Excel)\n- Captura básica de leads con almacenamiento de información de contacto\n- Análisis detallados de interacciones y consultas frecuentes\n\nPlan Profesional:\n- Precio: $79/mes\n- Hasta 2,000 interacciones mensuales\n- Incluye todas las funcionalidades del Paquete Básico\n- Integración en pantalla completa tipo ChatGPT para una experiencia más inmersiva\n- Automatización de tareas frecuentes y programación de seguimientos\n- Análisis avanzados con métricas de rendimiento y tendencias\n- Soporte prioritario\n\nPlan Empresarial:\n- Precio personalizado (desde $199/mes)\n- Interacciones ilimitadas\n- Incluye todas las funcionalidades del Paquete Profesional\n- Personalización avanzada del asistente virtual (tono, estilo, branding)\n- Integración con sistemas CRM y otras plataformas empresariales\n- Análisis personalizados y reportes a medida\n- Soporte dedicado con gestor de cuenta asignado\n`;\n          \n          if (welcomePageSettings?.welcomePageChatScrapingEnabled && welcomePageSettings?.welcomePageChatScrapingData) {\n            try {\n              console.log(\"Usando el modelo OpenAI con contexto mejorado de la página\");\n              console.log(\"Usando datos de scraping del servidor para el chatbot\");\n              \n              // Intentar parsear los datos de scraping guardados\n              const parsedData = JSON.parse(welcomePageSettings.welcomePageChatScrapingData);\n              console.log(\"Tamaño de los datos de scraping:\", welcomePageSettings.welcomePageChatScrapingData.length);\n              \n              // Crear contexto estructurado para los datos\n              scrapedData = \"INFORMACIÓN EXTRAÍDA DEL SITIO:\\n\\n\";\n              \n              // Mapeo del sitio\n              if (parsedData.sitemap && Array.isArray(parsedData.sitemap)) {\n                scrapedData += \"MAPA DEL SITIO:\\n\";\n                parsedData.sitemap.forEach((page: any) => {\n                  scrapedData += `- ${page.title} (${page.url})\\n`;\n                });\n                scrapedData += \"\\n\\n\";\n              }\n              \n              // Información de precios si está disponible en el formato nuevo\n              if (parsedData.pricing && Array.isArray(parsedData.pricing) && parsedData.pricing.length > 0) {\n                scrapedData += \"INFORMACIÓN DE PRECIOS Y PLANES DISPONIBLES:\\n\\n\";\n                parsedData.pricing.forEach((plan: any) => {\n                  scrapedData += `### ${plan.name} ###\\n`;\n                  scrapedData += `- Precio: ${plan.price} ${plan.currency || 'USD'}/${plan.interval || 'mes'}\\n`;\n                  \n                  if (plan.description) {\n                    scrapedData += `- Descripción: ${plan.description}\\n`;\n                  }\n                  \n                  if (plan.features && Array.isArray(plan.features)) {\n                    scrapedData += `- Características principales:\\n`;\n                    plan.features.forEach((feature: string) => {\n                      scrapedData += `  * ${feature}\\n`;\n                    });\n                  }\n                  \n                  scrapedData += '\\n';\n                });\n                \n                // Añadir recomendación específica para ayudar con preguntas sobre planes\n                scrapedData += \"\\nGUÍA DE RECOMENDACIÓN DE PLANES:\\n\";\n                scrapedData += \"- Para usuarios individuales o pequeñas empresas con necesidades básicas: Plan Gratuito o Plan Básico\\n\";\n                scrapedData += \"- Para empresas medianas con necesidad de automatización: Plan Profesional\\n\";\n                scrapedData += \"- Para grandes corporaciones o necesidades personalizadas: Plan Empresarial\\n\\n\";\n              }\n              \n              // Información sobre formularios si está disponible\n              if (parsedData.forms) {\n                scrapedData += \"INFORMACIÓN SOBRE CREACIÓN DE FORMULARIOS:\\n\\n\";\n                \n                const formInfo = parsedData.forms;\n                scrapedData += `${formInfo.description}\\n\\n`;\n                \n                // Pasos para crear un formulario\n                scrapedData += \"Pasos para crear un formulario:\\n\";\n                if (formInfo.pasos_creacion && Array.isArray(formInfo.pasos_creacion)) {\n                  formInfo.pasos_creacion.forEach((paso: string) => {\n                    scrapedData += `${paso}\\n`;\n                  });\n                }\n                scrapedData += \"\\n\";\n                \n                // Tipos de formularios\n                scrapedData += \"Tipos de formularios disponibles:\\n\";\n                if (formInfo.tipos_formularios && Array.isArray(formInfo.tipos_formularios)) {\n                  formInfo.tipos_formularios.forEach((tipo: any) => {\n                    scrapedData += `- ${tipo.tipo}: ${tipo.descripcion}\\n`;\n                  });\n                }\n                scrapedData += \"\\n\";\n                \n                // Opciones de integración\n                scrapedData += \"Opciones de integración de formularios:\\n\";\n                if (formInfo.opciones_integracion && Array.isArray(formInfo.opciones_integracion)) {\n                  formInfo.opciones_integracion.forEach((opcion: any) => {\n                    scrapedData += `- ${opcion.opcion}: ${opcion.descripcion}\\n`;\n                  });\n                }\n                scrapedData += \"\\n\";\n                \n                // Características avanzadas\n                scrapedData += \"Características avanzadas de los formularios:\\n\";\n                if (formInfo.caracteristicas_avanzadas && Array.isArray(formInfo.caracteristicas_avanzadas)) {\n                  formInfo.caracteristicas_avanzadas.forEach((caracteristica: string) => {\n                    scrapedData += `- ${caracteristica}\\n`;\n                  });\n                }\n                scrapedData += \"\\n\";\n                \n                // Pasos para integrar código\n                scrapedData += \"Cómo integrar un formulario en tu sitio web:\\n\";\n                if (formInfo.paso_integracion_codigo && Array.isArray(formInfo.paso_integracion_codigo)) {\n                  formInfo.paso_integracion_codigo.forEach((paso: string) => {\n                    scrapedData += `${paso}\\n`;\n                  });\n                }\n                scrapedData += \"\\n\";\n                \n                // Información de documentación\n                if (formInfo.documentacion) {\n                  scrapedData += \"DOCUMENTACIÓN DISPONIBLE:\\n\\n\";\n                  scrapedData += `${formInfo.documentacion.general}\\n\\n`;\n                  \n                  // Secciones de documentación\n                  scrapedData += \"Secciones de documentación:\\n\";\n                  if (formInfo.documentacion.secciones && Array.isArray(formInfo.documentacion.secciones)) {\n                    formInfo.documentacion.secciones.forEach((seccion: any) => {\n                      scrapedData += `- ${seccion.titulo}: ${seccion.descripcion} (${seccion.url})\\n`;\n                    });\n                  }\n                  scrapedData += \"\\n\";\n                  \n                  // Preguntas frecuentes\n                  scrapedData += \"Preguntas frecuentes (FAQ):\\n\";\n                  if (formInfo.documentacion.faq && Array.isArray(formInfo.documentacion.faq)) {\n                    formInfo.documentacion.faq.forEach((faq: any, index: number) => {\n                      scrapedData += `Pregunta ${index + 1}: ${faq.pregunta}\\n`;\n                      scrapedData += `Respuesta: ${faq.respuesta}\\n\\n`;\n                    });\n                  }\n                  scrapedData += \"\\n\";\n                }\n              }\n              \n              // Información sobre documentación\n              if (parsedData.extraData && parsedData.extraData.documentation) {\n                scrapedData += \"DOCUMENTACIÓN Y RECURSOS DISPONIBLES:\\n\\n\";\n                const docData = parsedData.extraData.documentation;\n                \n                if (docData.general) {\n                  scrapedData += `${docData.general}\\n\\n`;\n                }\n                \n                if (docData.secciones && Array.isArray(docData.secciones)) {\n                  scrapedData += \"Secciones de documentación disponibles:\\n\";\n                  docData.secciones.forEach((seccion: any) => {\n                    scrapedData += `- ${seccion.titulo}: ${seccion.descripcion}\\n`;\n                    if (seccion.url) {\n                      scrapedData += `  URL: ${seccion.url}\\n`;\n                    }\n                  });\n                  scrapedData += \"\\n\";\n                }\n                \n                if (docData.api) {\n                  scrapedData += \"DOCUMENTACIÓN DE LA API:\\n\";\n                  if (docData.api.general) {\n                    scrapedData += `${docData.api.general}\\n\\n`;\n                  }\n                  \n                  if (docData.api.endpoints && Array.isArray(docData.api.endpoints)) {\n                    scrapedData += \"Endpoints disponibles:\\n\";\n                    docData.api.endpoints.forEach((endpoint: any) => {\n                      scrapedData += `- ${endpoint.nombre}: ${endpoint.descripcion}\\n`;\n                      if (endpoint.url) {\n                        scrapedData += `  URL: ${endpoint.url}\\n`;\n                      }\n                    });\n                    scrapedData += \"\\n\";\n                  }\n                  \n                  if (docData.api.ejemplos && Array.isArray(docData.api.ejemplos)) {\n                    scrapedData += \"Ejemplos de uso de la API:\\n\";\n                    docData.api.ejemplos.forEach((ejemplo: string) => {\n                      scrapedData += `- ${ejemplo}\\n`;\n                    });\n                    scrapedData += \"\\n\";\n                  }\n                }\n                \n                if (docData.faq && Array.isArray(docData.faq)) {\n                  scrapedData += \"Preguntas frecuentes sobre la documentación y API:\\n\";\n                  docData.faq.forEach((item: any) => {\n                    scrapedData += `P: ${item.pregunta}\\n`;\n                    scrapedData += `R: ${item.respuesta}\\n\\n`;\n                  });\n                }\n              }\n              \n              // Contenido extraído\n              if (parsedData.content) {\n                scrapedData += \"CONTENIDO DEL SITIO:\\n\";\n                \n                Object.entries(parsedData.content).forEach(([url, pageData]: [string, any]) => {\n                  if (pageData.title) {\n                    scrapedData += `\\n${pageData.title} (${url}):\\n`;\n                    if (pageData.content) {\n                      const contentPreview = typeof pageData.content === 'string' \n                        ? pageData.content.substring(0, 500) \n                        : JSON.stringify(pageData.content).substring(0, 500);\n                      scrapedData += `${contentPreview}...\\n`;\n                    }\n                  }\n                });\n              }\n              \n              // Usar el nuevo formato si está disponible, de lo contrario usar el antiguo\n            } catch (error) {\n              console.error(\"Error al parsear datos de scraping:\", error);\n              // En caso de error, usar la información extraída en tiempo real\n              scrapedData = '';\n            }\n          }\n          \n          // Si no hay datos de scraping del servidor o hubo un error, usar los datos extraídos en tiempo real\n          const pageContext = scrapedData || `\nINFORMACIÓN DEL SITIO:\nURL: ${pageUrl}\nTítulo: ${pageTitle}\n\nNAVEGACIÓN DEL SITIO:\n${navigationContent}\n\nSERVICIOS Y CARACTERÍSTICAS DETECTADOS:\n${servicesContent}\n\nCONTENIDO DE LA PÁGINA:\n${pageContent}\n`;\n\n          // Añadir instrucciones generales al contexto\n          const contextWithInstructions = `\n${pageContext}\n\n${pricingInfo}\n\nEres AIPPS, un asistente de IA integrado en el sitio web de AIPPS.\nTu objetivo es proporcionar información útil, precisa y completa sobre la plataforma AIPPS,\nsus servicios, características, precios y beneficios basándote en el contenido del sitio.\n\nINSTRUCCIONES PARA PREGUNTAS SOBRE PRECIOS Y PLANES:\n- Cuando te pregunten sobre precios o planes, proporciona detalles completos y estructurados\n- Menciona siempre el precio, características principales y para qué tipo de cliente está recomendado cada plan\n- Si preguntan por una recomendación, sugiere el plan más adecuado según sus necesidades\n- Utiliza formato con viñetas para hacer la información más legible\n\nINSTRUCCIONES PARA PREGUNTAS SOBRE FORMULARIOS:\n- Cuando te pregunten sobre cómo crear o integrar formularios, proporciona los pasos detallados\n- Si preguntan sobre tipos de formularios, explica las opciones disponibles y sus casos de uso\n- Si preguntan sobre la integración de formularios en un sitio web, describe las diferentes opciones\n- Incluye información sobre características avanzadas de formularios si es relevante para la consulta\n\nINSTRUCCIONES PARA PREGUNTAS SOBRE DOCUMENTACIÓN:\n- Cuando te pregunten sobre dónde encontrar documentación, proporciona las secciones disponibles\n- Si preguntan por un tema específico, identifica la sección de documentación más relevante\n- Si pregunten sobre una funcionalidad técnica, incluye cualquier información disponible en las secciones de la API y documentación\n- Menciona las URLs de documentación específicas cuando estén disponibles\n- Si hay una pregunta frecuente que coincida con la consulta, comparte esa información\n\nINSTRUCCIONES GENERALES:\n- Si te preguntan por un servicio o característica específica, busca la información en el contenido proporcionado\n- Sé informativo, profesional y claro en tus respuestas\n- Contesta siempre en español\n- Prioriza la información extraída del sitio web sobre cualquier conocimiento general\n\nINSTRUCCIONES DE COMPORTAMIENTO ESPECÍFICAS:\n${customBehavior || 'Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.'}\n`;\n          \n          const openAIResponse = await fetch('/api/openai/completion', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              messages: messages.concat(userMessage),\n              context: contextWithInstructions,\n              language: i18n.language // Enviar el idioma actual al backend\n            })\n          });\n          \n          if (!openAIResponse.ok) {\n            throw new Error(`Error calling OpenAI API: ${openAIResponse.status}`);\n          }\n          \n          const data = await openAIResponse.json();\n          response = data.message.content;\n        } catch (error) {\n          console.error(\"Error enviando mensaje a la API:\", error);\n          // Fallback a respuestas predefinidas si hay error en la API\n          const demoResponses: Record<string, string> = {\n            \"hello\": \"¡Hola! Soy AIPPS, tu asistente virtual. ¿En qué puedo ayudarte hoy?\",\n            \"hola\": \"¡Hola! Soy AIPPS, tu asistente virtual. ¿En qué puedo ayudarte hoy?\",\n            \"ayuda\": \"Puedo ayudarte con información sobre nuestra plataforma AIPPS, sus características, cómo integrarla en tu sitio web y mucho más.\",\n            \"features\": \"AIPPS ofrece IA conversacional, automatización de tareas, asistencia en tiempo real y análisis de contenido de tu sitio web.\",\n            \"precios\": \"AIPPS ofrece varios planes adaptados a diferentes necesidades. Desde el plan Gratuito con hasta 20 interacciones diarias, pasando por el Básico ($29/mes), el Profesional ($79/mes) hasta el Empresarial (personalizado desde $199/mes).\"\n          };\n          \n          const lowerInput = inputValue.toLowerCase().trim();\n          \n          // Intentar encontrar respuesta predefinida como fallback\n          if (demoResponses[lowerInput]) {\n            response = demoResponses[lowerInput];\n          } else if (Object.keys(demoResponses).find(key => lowerInput.includes(key))) {\n            response = demoResponses[Object.keys(demoResponses).find(key => lowerInput.includes(key)) as string];\n          } else if (lowerInput.match(/^(hola|buenos días|buenas tardes|buenas noches)$/)) {\n            response = \"¡Hola! Soy AIPPS, tu asistente virtual. ¿En qué puedo ayudarte hoy?\";\n          } else {\n            response = \"Lo siento, estoy teniendo problemas para conectarme al servidor. ¿Puedo ayudarte con información general sobre la plataforma AIPPS?\";\n          }\n        }\n      } else if (conversationId) {\n        // Real API response using the widget API\n        const apiKey = 'aipps_mrPg94zRtTKr31hOY0m8PaPk305PJNVD';\n        \n        const messageResponse = await fetch(`/api/widget/${apiKey}/message`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            conversationId,\n            content: inputValue,\n            role: 'user'\n          })\n        });\n        \n        if (!messageResponse.ok) {\n          throw new Error(`Error sending message: ${messageResponse.status}`);\n        }\n        \n        const data = await messageResponse.json();\n        response = data.aiMessage.content;\n      } else {\n        // Fallback to the generateChatCompletion function\n        response = await generateChatCompletion(\n          messages.concat(userMessage),\n          context,\n          i18n.language // Pasar el idioma actual\n        );\n      }\n      \n      setMessages(prev => [...prev, { role: 'assistant', content: response }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setMessages(prev => [...prev, { \n        role: 'assistant', \n        content: \"Lo siento, encontré un error al procesar tu solicitud. Por favor, intenta de nuevo.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  \n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  \n  // Estilo personalizado para burbujas de chat\n  const userBubbleStyle = { backgroundColor: '#3B82F6', color: 'white' };\n  const assistantBubbleStyle = welcomePageSettings?.welcomePageChatBubbleColor\n    ? {\n        backgroundColor: welcomePageSettings.welcomePageChatBubbleColor,\n        color: welcomePageSettings.welcomePageChatTextColor || '#FFFFFF'\n      }\n    : { backgroundColor: 'rgb(229, 231, 235)', color: 'rgb(31, 41, 55)' };\n\n  return (\n    <div className=\"flex flex-col h-[450px] max-h-[450px]\">\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\" id=\"chat-messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} mb-4`}>\n            <div \n              className=\"rounded-lg py-2 px-4 max-w-[80%]\"\n              style={message.role === 'user' ? userBubbleStyle : assistantBubbleStyle}\n            >\n              {message.content}\n            </div>\n          </div>\n        ))}\n        \n        {isTyping && (\n          <div className=\"flex mb-4\">\n            <div className=\"bg-gray-200 dark:bg-gray-800 rounded-lg py-2 px-4 text-gray-800 dark:text-gray-200\">\n              <div className=\"flex space-x-1\">\n                <div className=\"w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full animate-bounce\"></div>\n                <div className=\"w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full animate-bounce\" style={{ animationDelay: \"0.1s\" }}></div>\n                <div className=\"w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }}></div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      <div className=\"border-t p-3 flex dark:border-gray-700\">\n        <Input\n          id=\"chat-input\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder={t(\"chat.placeholder\")}\n          className=\"flex-1\"\n        />\n        <Button \n          onClick={handleSendMessage} \n          className=\"ml-2\"\n          disabled={inputValue.trim() === '' || isTyping}\n        >\n          <Send className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":30479},"client/src/components/color-picker.tsx":{"content":"import { useState } from \"react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\n\nconst COLORS = [\n  \"#f3f4f6\", // Gris claro (default user)\n  \"#e5e7eb\", // Gris (default assistant)\n  \"#fee2e2\", // Rojo claro\n  \"#fef3c7\", // Amarillo claro\n  \"#d1fae5\", // Verde claro\n  \"#dbeafe\", // Azul claro\n  \"#f5d0fe\", // Púrpura claro\n  \"#4f46e5\", // Indigo\n  \"#2563eb\", // Azul\n  \"#0891b2\", // Cyan\n  \"#059669\", // Verde\n  \"#d97706\", // Ámbar\n  \"#dc2626\", // Rojo\n  \"#7c3aed\", // Violeta\n  \"#c026d3\", // Fucsia\n  \"#475569\", // Gris oscuro\n];\n\ninterface ColorPickerProps {\n  color: string;\n  onChange: (color: string) => void;\n}\n\nexport function ColorPicker({ color, onChange }: ColorPickerProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className=\"w-full justify-start\"\n          style={{ height: \"40px\" }}\n        >\n          <div className=\"flex items-center space-x-2\">\n            <div\n              className=\"w-5 h-5 rounded-full border\"\n              style={{ backgroundColor: color }}\n            />\n            <span>{color}</span>\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-64 p-2\">\n        <div className=\"grid grid-cols-4 gap-2\">\n          {COLORS.map((c) => (\n            <button\n              key={c}\n              className=\"w-full h-8 rounded-md border\"\n              style={{ backgroundColor: c }}\n              onClick={() => {\n                onChange(c);\n                setOpen(false);\n              }}\n              aria-label={`Color ${c}`}\n            />\n          ))}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":1832},"client/src/components/customization-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Bot, X, SendHorizonal } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Message {\n  content: string;\n  role: \"user\" | \"assistant\";\n}\n\nexport default function CustomizationAssistant() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSending, setIsSending] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      role: \"assistant\",\n      content: \"¡Hola! Soy el Asistente de Personalización de AIPI. Puedo ayudarte con cualquier pregunta sobre cómo personalizar o integrar AIPI con tu sitio web. ¿Te gustaría saber más sobre nuestra nueva función de \\\"Secciones ignoradas\\\" u otra característica específica?\"\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  // Simula una respuesta del asistente\n  const simulateResponse = async (userMessage: string) => {\n    // Identificar palabras clave y proporcionar respuestas relevantes\n    let response = \"\";\n    const lowerCaseMessage = userMessage.toLowerCase();\n    \n    if (lowerCaseMessage.includes(\"secciones ignoradas\") || lowerCaseMessage.includes(\"ignorar secciones\") || lowerCaseMessage.includes(\"excluir secciones\")) {\n      response = \"La función \\\"Secciones ignoradas\\\" te permite excluir partes específicas de tu sitio web del análisis del chatbot. Esta función es muy útil para:\\n\\n1. Mejorar la privacidad, excluyendo información sensible\\n2. Obtener respuestas más precisas, eliminando menús o pies de página irrelevantes\\n3. Optimizar el uso de tokens, reduciendo el contenido procesado\\n\\nPara configurarla:\\n\\n- En tu panel de control, ve a \\\"Integraciones\\\" → selecciona tu integración\\n- Busca la sección \\\"Secciones a ignorar\\\"\\n- Añade los selectores CSS o IDs de las secciones a ignorar (ej: \\\"#menu-principal\\\", \\\".footer\\\", \\\"#sidebar\\\")\\n\\nTambién puedes configurarlo mediante código:\\n\\n```\\naipi('init', {\\n  apiKey: 'TU_API_KEY',\\n  // Otras configuraciones...\\n  ignoredSections: ['Menú principal', 'Footer', 'Sidebar']\\n});\\n```\";\n    } else if (lowerCaseMessage.includes(\"color\") || lowerCaseMessage.includes(\"tema\")) {\n      response = \"Puedes personalizar los colores y el tema de AIPI desde tu panel de control. Ve a 'Integraciones' → selecciona tu integración → 'Personalizar apariencia'. Allí podrás ajustar los colores primarios, fondo, texto y otros elementos visuales para que coincidan con tu marca.\";\n    } else if (lowerCaseMessage.includes(\"posición\") || lowerCaseMessage.includes(\"ubicación\")) {\n      response = \"La posición del widget flotante puede configurarse en tu panel de control. Por defecto, aparece en la esquina inferior derecha, pero puedes cambiarlo a la izquierda o ajustar los márgenes según tus preferencias. Ve a 'Integraciones' → selecciona tu integración → 'Configuración' → 'Posición'.\";\n    } else if (lowerCaseMessage.includes(\"wordpress\") || lowerCaseMessage.includes(\"cms\")) {\n      response = \"Para integrar AIPI en WordPress, puedes:\\n\\n1. Agregar el código del script en tu tema (edita footer.php)\\n2. Usar un plugin como 'Header and Footer Scripts' para insertar el código\\n3. Si usas Elementor o Divi, puedes añadirlo como un bloque HTML personalizado\\n\\nRecuerda que también puedes configurar 'Secciones ignoradas' para excluir menús, sidebars y footers del contenido analizado por el chatbot.\";\n    } else if (lowerCaseMessage.includes(\"mensaje\") || lowerCaseMessage.includes(\"bienvenida\")) {\n      response = \"El mensaje de bienvenida puede personalizarse de tres formas diferentes:\\n\\n1. Desde el panel de control: 'Integraciones' → selecciona tu integración → 'Configuración' → 'Mensaje de bienvenida'\\n\\n2. Mediante el atributo 'data-welcome-message' en el script:\\n`<script src=\\\"TU-URL\\\" data-welcome-message=\\\"¡Hola! ¿En qué puedo ayudarte?\\\"></script>`\\n\\n3. En la configuración JavaScript:\\n```\\naipi('init', {\\n  apiKey: 'TU_API_KEY',\\n  welcomeMessage: '¡Hola! ¿En qué puedo ayudarte?'\\n});\\n```\";\n    } else if (lowerCaseMessage.includes(\"idioma\") || lowerCaseMessage.includes(\"traducción\") || lowerCaseMessage.includes(\"lenguaje\")) {\n      response = \"AIPI soporta múltiples idiomas. Puedes configurar el idioma principal y los idiomas adicionales en la sección 'Configuración' → 'Idiomas' de tu panel de control. El asistente detectará automáticamente el idioma del usuario o respetará la configuración que establezcas.\";\n    } else if (lowerCaseMessage.includes(\"no se muestra\") && (lowerCaseMessage.includes(\"formulario\") || lowerCaseMessage.includes(\"form\"))) {\n      response = \"Si tu formulario no se muestra correctamente, verifica estos puntos:\\n\\n1. Asegúrate de que el div contenedor tenga el ID correcto: `<div id=\\\"aipi-form-container\\\"></div>`\\n\\n2. El script debe estar colocado ANTES del div contenedor.\\n\\n3. Revisa que el ID del formulario sea correcto y exista en tu cuenta.\\n\\n4. Comprueba que el dominio en la URL del script coincida con tu instalación de AIPI.\\n\\n5. Código completo correcto:\\n`<script src=\\\"https://TU-DOMINIO/static/form-embed.js?id=ID-DEL-FORMULARIO\\\"></script>`\\n`<div id=\\\"aipi-form-container\\\"></div>`\\n\\n6. Si estás usando el dominio de Replit, asegúrate de que sea el correcto y esté activo.\";\n    } else if (lowerCaseMessage.includes(\"script\") && (lowerCaseMessage.includes(\"formulario\") || lowerCaseMessage.includes(\"form\"))) {\n      response = \"El script para formularios tiene este formato:\\n\\n`<script src=\\\"https://TU-DOMINIO/static/form-embed.js?id=ID-DEL-FORMULARIO\\\"></script>`\\n`<div id=\\\"aipi-form-container\\\"></div>`\\n\\nEs FUNDAMENTAL incluir ambas partes y en ese orden (primero el script, luego el div).\\n\\nDonde la URL directa del formulario sería: https://TU-DOMINIO/form/ID-DEL-FORMULARIO\\n\\nPor ejemplo, con el script:\\n`<script src=\\\"https://aipps.ca/static/form-embed.js?id=registro-a-newsletter-242025\\\"></script>`\\n`<div id=\\\"aipi-form-container\\\"></div>`\\n\\nLa URL directa sería:\\nhttps://aipps.ca/form/registro-a-newsletter-242025\";\n    } else if (lowerCaseMessage.includes(\"url\") && (lowerCaseMessage.includes(\"formulario\") || lowerCaseMessage.includes(\"form\"))) {\n      response = \"Para cada formulario que creas, se genera un ID único (como 'registro-a-newsletter-242025'). La URL directa del formulario se construye así:\\n\\nhttps://TU-DOMINIO/form/[ID-DEL-FORMULARIO]\\n\\nEsta URL es directamente accesible y puedes compartirla con tus usuarios sin necesidad de incrustar código.\\n\\nAdemás, para incrustarlo en tu web, necesitas AMBOS elementos:\\n\\n`<script src=\\\"https://TU-DOMINIO/static/form-embed.js?id=ID-DEL-FORMULARIO\\\"></script>`\\n`<div id=\\\"aipi-form-container\\\"></div>`\";\n    } else if (lowerCaseMessage.includes(\"formulario\") || lowerCaseMessage.includes(\"form\")) {\n      response = \"Puedes crear y personalizar formularios en la sección 'Formularios' de tu panel de control. Tenemos varios tipos prediseñados (contacto, encuesta, registro) que puedes adaptar a tus necesidades.\\n\\nPara insertar un formulario en tu web:\\n\\n1. Copia el código de incrustación completo:\\n`<script src=\\\"https://TU-DOMINIO/static/form-embed.js?id=ID-DEL-FORMULARIO\\\"></script>`\\n`<div id=\\\"aipi-form-container\\\"></div>`\\n\\n2. Pega AMBAS partes del código en tu HTML, en ese orden.\\n\\n3. También puedes compartir la URL directa: https://TU-DOMINIO/form/ID-DEL-FORMULARIO\";\n    } else if (lowerCaseMessage.includes(\"error\") || lowerCaseMessage.includes(\"no funciona\")) {\n      response = \"Si estás experimentando problemas con la integración, verifica:\\n\\n1. Que el código esté correctamente insertado antes del cierre de </body>\\n2. Que tu suscripción esté activa\\n3. Que no haya bloqueadores de scripts en el navegador\\n4. Verifica la consola del navegador (F12) para mensajes de error\\n5. Si usas 'Secciones ignoradas', comprueba que los selectores sean correctos\\n\\nSi el problema persiste, contacta a nuestro soporte técnico con una captura de la consola.\";\n    } else if (lowerCaseMessage.includes(\"precio\") || lowerCaseMessage.includes(\"costo\") || lowerCaseMessage.includes(\"plan\")) {\n      response = \"AIPI ofrece diferentes planes según tus necesidades:\\n\\n• Free: 20 interacciones/día (gratis)\\n• Basic: 500 interacciones/mes ($50 CAD)\\n• Professional: 2,000 interacciones/mes ($150 CAD)\\n• Enterprise: ilimitado ($500 CAD)\\n\\nLos planes anuales tienen un descuento del 10-15%. Todos los planes incluyen la función 'Secciones ignoradas' para optimizar el uso de tokens.\";\n    } else if (lowerCaseMessage.includes(\"id\") && lowerCaseMessage.includes(\"formulario\")) {\n      response = \"El ID de un formulario es una cadena única que identifica tu formulario en nuestro sistema. Por ejemplo, 'registro-a-newsletter-242025'. Este ID se genera automáticamente cuando creas un formulario y aparece en el código de incrustación: `<script src=\\\"https://TU-DOMINIO/static/form-embed.js?id=ID-DEL-FORMULARIO\\\"></script>`. También puedes encontrar el ID en tu panel de control, en la sección 'Formularios'.\";\n    } else if (lowerCaseMessage.includes(\"documentación\") || lowerCaseMessage.includes(\"ayuda\") || lowerCaseMessage.includes(\"guía\")) {\n      response = \"Puedes encontrar documentación detallada sobre AIPI en nuestra página de documentación. Allí encontrarás guías sobre:\\n\\n• Integración de widgets\\n• Comprensión contextual\\n• Secciones ignoradas (nueva función)\\n• Entrenamiento con documentos\\n• Formularios personalizables\\n• Automatización de tareas\\n\\nPara acceder, ve a la sección 'Documentación' en el menú principal o visita /docs en nuestro sitio.\";\n    } else if (lowerCaseMessage.includes(\"widget\") || lowerCaseMessage.includes(\"chat\") || lowerCaseMessage.includes(\"asistente\")) {\n      response = \"AIPI ofrece dos tipos principales de widgets:\\n\\n1. **Widget Flotante (Burbuja)**: Un pequeño botón discreto que aparece en una esquina de tu sitio. Los visitantes hacen clic para abrir un panel de chat compacto.\\n\\n2. **Pantalla Completa (Estilo ChatGPT)**: Una experiencia inmersiva que ocupa toda la pantalla, ideal para interacciones más extensas.\\n\\nAmbos tipos soportan la función de 'Secciones ignoradas' para personalizar qué contenido de tu sitio web analizará el asistente.\";\n    } else {\n      response = \"AIPI es una plataforma versátil para integrar asistentes de IA en tu sitio web. ¿Qué te gustaría saber sobre alguna función específica?\\n\\nPuedes preguntar sobre:\\n• Secciones ignoradas (nueva función)\\n• Integración de widgets\\n• Personalización de apariencia\\n• Formularios personalizables\\n• Configuración de idiomas\\n• Entrenamiento con documentos\\n• Planes y precios\";\n    }\n    \n    // Simula un retraso para que parezca que está pensando\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    return response;\n  };\n\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n    \n    // Añade el mensaje del usuario\n    const userMessage = { role: \"user\" as const, content: input.trim() };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setIsSending(true);\n    \n    try {\n      // Simula respuesta de IA\n      const response = await simulateResponse(input);\n      \n      // Añade la respuesta del asistente\n      setMessages(prev => [...prev, { role: \"assistant\", content: response }]);\n    } catch (error) {\n      toast({\n        title: \"Error al procesar la solicitud\",\n        description: \"No se pudo obtener una respuesta. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  // Scroll al fondo cuando hay nuevos mensajes\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Enfocar el input cuando se abre el chat\n  useEffect(() => {\n    if (isOpen) {\n      inputRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  // Manejar envío con Enter\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  \n  // Formatear el contenido del mensaje con código\n  const formatMessageContent = (content: string): React.ReactNode => {\n    if (!content.includes('`')) return content;\n    \n    // Dividir el contenido en segmentos de código y texto regular\n    const segments = content.split(/(`[^`]+`)/);\n    \n    return segments.map((segment, i) => {\n      if (segment.startsWith('`') && segment.endsWith('`')) {\n        // Es un segmento de código, lo formateamos especialmente\n        const code = segment.substring(1, segment.length - 1);\n        return (\n          <code key={i} className=\"bg-gray-200 dark:bg-gray-700 px-1 rounded font-mono text-sm\">\n            {code}\n          </code>\n        );\n      }\n      // Es texto regular\n      return <span key={i}>{segment}</span>;\n    });\n  };\n\n  return (\n    <>\n      {/* Botón flotante para abrir el chat */}\n      {!isOpen && (\n        <button\n          onClick={() => setIsOpen(true)}\n          className=\"fixed bottom-6 right-6 bg-primary text-white p-4 rounded-full shadow-lg hover:bg-primary/90 transition-all z-50\"\n          aria-label=\"Abrir asistente de personalización\"\n        >\n          <Bot size={24} />\n        </button>\n      )}\n\n      {/* Ventana de chat */}\n      {isOpen && (\n        <Card className=\"fixed bottom-6 right-6 w-[350px] md:w-[400px] h-[500px] shadow-xl z-50 flex flex-col\">\n          <div className=\"bg-primary text-white p-3 flex justify-between items-center\">\n            <div className=\"flex items-center gap-2\">\n              <Bot size={20} />\n              <span className=\"font-medium\">Asistente de Personalización</span>\n            </div>\n            <button \n              onClick={() => setIsOpen(false)}\n              className=\"text-white hover:text-gray-200\"\n              aria-label=\"Cerrar asistente\"\n            >\n              <X size={20} />\n            </button>\n          </div>\n          \n          <CardContent className=\"flex-grow overflow-auto p-4 flex flex-col gap-3\">\n            {messages.map((msg, index) => (\n              <div \n                key={index} \n                className={`flex ${msg.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n              >\n                <div className={`flex gap-2 max-w-[80%] ${msg.role === \"user\" ? \"flex-row-reverse\" : \"flex-row\"}`}>\n                  {msg.role === \"assistant\" && (\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarFallback className=\"bg-primary text-white\">AI</AvatarFallback>\n                    </Avatar>\n                  )}\n                  <div \n                    className={`py-2 px-3 rounded-lg whitespace-pre-wrap ${\n                      msg.role === \"user\" \n                        ? \"bg-primary text-white rounded-tr-none\" \n                        : \"bg-gray-100 dark:bg-gray-800 rounded-tl-none\"\n                    }`}\n                  >\n                    {formatMessageContent(msg.content)}\n                  </div>\n                </div>\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </CardContent>\n          \n          <div className=\"p-3 border-t border-gray-200 dark:border-gray-700 flex gap-2\">\n            <Input\n              ref={inputRef}\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder=\"Escribe tu pregunta aquí...\"\n              disabled={isSending}\n              className=\"flex-grow\"\n            />\n            <Button \n              onClick={handleSendMessage} \n              disabled={isSending || !input.trim()}\n              size=\"icon\"\n            >\n              <SendHorizonal size={18} />\n            </Button>\n          </div>\n        </Card>\n      )}\n    </>\n  );\n}\n","size_bytes":16270},"client/src/components/dashboard-tabs.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { RefreshCw } from \"lucide-react\";\nimport { IntegrationCard } from \"./integration-card\";\nimport { Link } from \"wouter\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useUpgradeModal } from \"@/hooks/use-upgrade-modal\";\nimport UpgradePlanModal from \"@/components/upgrade-plan-modal\";\nimport { Trash2, Edit3, Trash } from \"lucide-react\";\nimport { FeatureRestrictedButton } from \"./feature-restricted-button\";\nimport { FeatureGuard } from \"./feature-guard\";\n\n// Definición de tipos\ninterface Integration {\n  id: number;\n  name: string;\n  url: string;\n  type: string;\n  apiKey: string;\n  userId: number;\n  createdAt: string;\n  status: string;\n  visitorCount: number;\n  description?: string;\n}\n\ninterface DashboardTabsProps {\n  initialTab?: string;\n}\n\nexport default function DashboardTabs({ initialTab = \"integrations\" }: DashboardTabsProps) {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(initialTab);\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const upgradeModal = useUpgradeModal();\n\n  // Sync activeTab with initialTab when it changes\n  useEffect(() => {\n    setActiveTab(initialTab);\n  }, [initialTab]);\n\n  // Update URL when tab changes\n  const handleTabChange = (newTab: string) => {\n    setActiveTab(newTab);\n    // Update URL to preserve navigation state\n    const url = new URL(window.location.href);\n    url.searchParams.set('tab', newTab);\n    window.history.replaceState({}, '', url.toString());\n  };\n\n  // Consulta para obtener las integraciones\n  const { data: integrations, isLoading: isLoadingIntegrations } = useQuery<Integration[]>({\n    queryKey: [\"/api/integrations\"],\n  });\n\n  // Renderizar contenido de la pestaña de integraciones\n  const renderIntegrationsTab = () => {\n    return (\n      <div>\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-xl font-semibold\">{t(\"integrations\")}</h2>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {t(\"integrations_description\", \"Create and manage website integrations for AIPI.\")}\n            </p>\n          </div>\n          <FeatureRestrictedButton \n            feature=\"createIntegrations\"\n            onAccessGranted={() => setLocation(\"/create-integration\")}\n          >\n            {t(\"create_integration\", \"Create Integration\")}\n          </FeatureRestrictedButton>\n        </div>\n\n        {isLoadingIntegrations ? (\n          <div className=\"flex items-center justify-center h-60\">\n            <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : integrations && integrations.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {integrations.map((integration) => (\n              <IntegrationCard key={integration.id} integration={integration} />\n            ))}\n          </div>\n        ) : (\n          <>\n            <Card className=\"p-6 text-center\">\n              <h3 className=\"text-lg font-medium mb-2\">{t(\"no_integrations\", \"No integrations yet\")}</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                {t(\"add_new_integration_desc\", \"Add a new website integration to connect AIPI with your site\")}\n              </p>\n              <FeatureRestrictedButton \n                feature=\"createIntegrations\"\n                onAccessGranted={() => setLocation(\"/create-integration\")}\n                variant=\"default\" \n                className=\"w-full sm:w-auto px-8\"\n              >\n                {t(\"create_integration\", \"Create Integration\")}\n              </FeatureRestrictedButton>\n            </Card>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  // Consulta para obtener la configuración\n  const { data: settings, isLoading: isLoadingSettings } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Renderizar contenido de la pestaña de configuración\n  const renderSettingsTab = () => {\n    return (\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">{t(\"settings\")}</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6\">{t(\"settings_description\", \"Configure your AIPI assistant settings.\")}</p>\n\n        {isLoadingSettings ? (\n          <div className=\"flex items-center justify-center h-60\">\n            <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : settings ? (\n          <Card className=\"p-6\">\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-medium mb-2\">{t(\"ai_assistant_settings\")}</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"assistant_name\")}</p>\n                    <p className=\"text-sm text-gray-500\">{settings.assistantName || t(\"assistant_name\")}</p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"default_greeting\")}</p>\n                    <p className=\"text-sm text-gray-500\">{settings.defaultGreeting || t(\"default_greeting\")}</p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"conversation_style\")}</p>\n                    <p className=\"text-sm text-gray-500\">{settings.conversationStyle || t(\"professional\")}</p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"show_availability\")}</p>\n                    <p className=\"text-sm text-gray-500\">{settings.showAvailability ? t(\"yes\") : t(\"no\")}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-medium mb-2\">{t(\"appearance\")}</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"chat_font\")}</p>\n                    <p className=\"text-sm text-gray-500\">{settings.font || t(\"system_default\")}</p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"user_message_color\")}</p>\n                    <div className=\"flex items-center\">\n                      <div \n                        className=\"w-5 h-5 rounded-full mr-2\" \n                        style={{ backgroundColor: settings.userBubbleColor || '#f3f4f6' }}\n                      ></div>\n                      <p className=\"text-sm text-gray-500\">{settings.userBubbleColor || '#f3f4f6'}</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"assistant_message_color\")}</p>\n                    <div className=\"flex items-center\">\n                      <div \n                        className=\"w-5 h-5 rounded-full mr-2\" \n                        style={{ backgroundColor: settings.assistantBubbleColor || '#e5e7eb' }}\n                      ></div>\n                      <p className=\"text-sm text-gray-500\">{settings.assistantBubbleColor || '#e5e7eb'}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-medium mb-2\">{t(\"welcome_chat\")}</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"status\")}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {settings.welcomePageChatEnabled ? t(\"enabled\") : t(\"disabled\")}\n                    </p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"welcome_message\")}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {settings.welcomePageChatGreeting || '👋 ¡Hola! Soy AIPPS, tu asistente de IA. ¿En qué puedo ayudarte hoy?'}\n                    </p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"bubble_color\")}</p>\n                    <div className=\"flex items-center\">\n                      <div \n                        className=\"w-5 h-5 rounded-full mr-2\" \n                        style={{ backgroundColor: settings.welcomePageChatBubbleColor || '#111827' }}\n                      ></div>\n                      <p className=\"text-sm text-gray-500\">{settings.welcomePageChatBubbleColor || '#111827'}</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium\">{t(\"text_color\")}</p>\n                    <div className=\"flex items-center\">\n                      <div \n                        className=\"w-5 h-5 rounded-full mr-2 border border-gray-300\" \n                        style={{ backgroundColor: settings.welcomePageChatTextColor || '#FFFFFF' }}\n                      ></div>\n                      <p className=\"text-sm text-gray-500\">{settings.welcomePageChatTextColor || '#FFFFFF'}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button onClick={() => setLocation(\"/settings/edit\")}>\n                  {t(\"edit_settings\")}\n                </Button>\n              </div>\n            </div>\n          </Card>\n        ) : (\n          <Card className=\"p-6 text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">{t(\"no_settings_found\")}</h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              {t(\"no_settings_description\")}\n            </p>\n            <Button variant=\"default\" className=\"w-full sm:w-auto px-8\" onClick={() => setLocation(\"/settings/edit\")}>\n              {t(\"configure_settings\")}\n            </Button>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  // Consulta para obtener las conversaciones\n  const { data: conversations, isLoading: isLoadingConversations } = useQuery({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  // Función para formatear inteligentemente los nombres de visitantes\n  const formatVisitorName = (conversation: any) => {\n    // Prioridad 1: Nombre real del visitante\n    if (conversation.visitorName && conversation.visitorName.trim() !== '') {\n      return conversation.visitorName;\n    }\n    \n    // Prioridad 2: Email como identificador (solo la parte antes del @)\n    if (conversation.visitorEmail && conversation.visitorEmail.trim() !== '') {\n      return conversation.visitorEmail.split('@')[0];\n    }\n    \n    // Prioridad 3: Si es usuario autenticado, mostrar \"Usuario Registrado\"\n    if (conversation.visitorId && conversation.visitorId.startsWith('user_')) {\n      return t(\"registered_user\", \"Usuario Registrado\");\n    }\n    \n    // Prioridad 4: ID del visitante si es útil\n    if (conversation.visitorId && \n        !conversation.visitorId.startsWith('test_') && \n        conversation.visitorId.length <= 20 && \n        !/[#_{}()[\\]]/.test(conversation.visitorId)) {\n      return `#${conversation.visitorId}`;\n    }\n    \n    // Último recurso: Anónimo\n    return t(\"anonymous\");\n  };\n\n  // Renderizar contenido de la pestaña de conversaciones\n  const renderConversationsTab = () => {\n    return (\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">{t(\"conversations\")}</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6\">{t(\"conversations_description\", \"Review and manage conversations with your visitors.\")}</p>\n\n        {isLoadingConversations ? (\n          <div className=\"flex items-center justify-center h-60\">\n            <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : conversations && conversations.length > 0 ? (\n          <div className=\"space-y-4\">\n            {conversations.map((conversation: any) => (\n              <Card key={conversation.id} className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h3 className=\"font-medium\">{t(\"visitor\")} {formatVisitorName(conversation)}</h3>\n{conversation.visitorEmail && (\n  <p className=\"text-sm text-gray-500\">{conversation.visitorEmail}</p>\n)}\n                    <p className=\"text-sm text-gray-500\">\n                      {new Date(conversation.createdAt).toLocaleString()}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`px-2 py-1 text-xs rounded-full ${\n                      conversation.status === 'completed' \n                        ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' \n                        : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100'\n                    }`}>\n                      {conversation.status === 'completed' ? t(\"completed\") : t(\"active\")}\n                    </span>\n                    <Link href={`/conversations/${conversation.id}`}>\n                      <Button size=\"sm\" variant=\"outline\">{t(\"view\")}</Button>\n                    </Link>\n                  </div>\n                </div>\n                {conversation.lastMessage && (\n                  <div className=\"mt-2 p-2 bg-gray-50 dark:bg-gray-800 rounded text-sm\">\n                    <span className=\"font-medium\">{t(\"last_message\")}: </span>\n                    {conversation.lastMessage.length > 100\n                      ? conversation.lastMessage.substring(0, 100) + '...'\n                      : conversation.lastMessage}\n                  </div>\n                )}\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-6 text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">{t(\"no_conversations\", \"No conversations yet\")}</h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              {t(\"conversations_empty_message\", \"When visitors interact with your chat widget, their conversations will appear here\")}\n            </p>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  // Consulta para obtener los formularios con configuración de refresco automático\n  const { data: forms, isLoading: isLoadingForms, refetch: refetchForms } = useQuery({\n    queryKey: [\"/api/forms\"],\n    staleTime: 1000 * 60 * 2, // 2 minutos\n    refetchOnWindowFocus: true, // Refresca cuando la ventana recibe el foco\n    // Removed refetchInterval to prevent 429 rate limiting\n  });\n\n  // Mutación para eliminar formularios\n  const deleteFormMutation = useMutation({\n    mutationFn: async (formId: number) => {\n      await apiRequest('DELETE', `/api/forms/${formId}`);\n      return {};\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/forms\"] });\n      toast({\n        title: t(\"success\", \"Success\"),\n        description: t(\"form_deleted_successfully\", \"Form deleted successfully\"),\n      });\n    },\n    onError: (error: any) => {\n      // Check if it's a plan limit error (403 status)\n      if (error.message && error.message.includes(\"límite\")) {\n        upgradeModal.handlePlanLimitError(error.message);\n      } else {\n        toast({\n          title: t(\"error\", \"Error\"),\n          description: error.message || t(\"error_deleting_form\", \"Error deleting form\"),\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Función para traducir descripciones de formularios\n  const translateFormDescription = (form: any): string => {\n    if (!form.description) return t(\"no_description\", \"No description\");\n\n    // Detectar el tipo de formulario basado en la descripción o tipo\n    if (form.description.includes(\"liste d'attente\") || form.description.includes(\"waiting list\") || form.type === \"waitlist\") {\n      return t(\"form_template_waitlist\", \"Model to capture users on waiting list\");\n    } else if (form.description.includes(\"Please complete\") || form.description.includes(\"información solicitada\") || form.type === \"survey\") {\n      return t(\"form_template_survey\", \"Please complete the requested information to get started\");\n    } else if (form.type === \"standard\" || form.description.includes(\"standard\")) {\n      return t(\"form_template_standard\", \"Standard form to collect information\");\n    }\n\n    // Si no se puede clasificar, devolver descripción original\n    return form.description;\n  };\n\n  // Renderizar contenido de la pestaña de formularios\n  const renderFormsTab = () => {\n    return (\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">{t(\"forms\")}</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6\">{t(\"forms_description\", \"Create and manage your forms.\")}</p>\n\n        <div className=\"flex justify-between items-center mb-4\">\n          <Button \n            variant=\"outline\" \n            onClick={() => refetchForms()}\n            className=\"flex items-center gap-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            {t(\"refresh\", \"Refresh\")}\n          </Button>\n          <FeatureRestrictedButton \n            feature=\"maxForms\"\n            onAccessGranted={() => setLocation(\"/create-form\")}\n          >\n            {t(\"create_form\", \"Create Form\")}\n          </FeatureRestrictedButton>\n        </div>\n\n        {isLoadingForms ? (\n          <div className=\"flex items-center justify-center h-60\">\n            <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : forms && forms.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {forms.map((form: any) => (\n              <Card key={form.id} className=\"p-6 h-full flex flex-col\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-medium\">{form.title}</h3>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      {translateFormDescription(form)}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex-grow\"></div>\n                <div className=\"mb-4\">\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {form.responseCount || 0} {t(\"responses\", \"responses\")}\n                  </div>\n                </div>\n\n                <div className=\"flex flex-wrap gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => setLocation(`/forms/${form.id}/edit`)}\n                  >\n                    <Edit3 className=\"h-4 w-4 mr-1\" />\n                    {t(\"edit\", \"Edit\")}\n                  </Button>\n\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => setLocation(`/forms/${form.id}/responses`)}\n                  >\n                    {t(\"responses\", \"Responses\")}\n                  </Button>\n\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 text-red-500 hover:text-red-700 hover:border-red-300\"\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        {t(\"delete\", \"Delete\")}\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>{t(\"confirm_delete\", \"Confirm Delete\")}</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          {t(\"delete_form_confirmation\", \"Are you sure you want to delete this form? This action cannot be undone and will also delete all responses.\")}\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>{t(\"cancel\", \"Cancel\")}</AlertDialogCancel>\n                        <AlertDialogAction \n                          className=\"bg-red-500 hover:bg-red-600\"\n                          onClick={() => deleteFormMutation.mutate(form.id)}\n                          disabled={deleteFormMutation.isPending}\n                        >\n                          {deleteFormMutation.isPending ? t(\"deleting\", \"Deleting...\") : t(\"delete\", \"Delete\")}\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-6 text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">{t(\"no_forms\", \"No forms yet\")}</h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              {t(\"forms_empty_message\", \"Create a new form to collect information from your visitors\")}\n            </p>\n            <FeatureRestrictedButton \n              feature=\"maxForms\"\n              onAccessGranted={() => setLocation(\"/create-form\")}\n              variant=\"default\" \n              className=\"w-full sm:w-auto px-8\"\n            >\n              {t(\"create_form\", \"Create Form\")}\n            </FeatureRestrictedButton>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  // Consulta para obtener las automatizaciones\n  const { data: automations, isLoading: isLoadingAutomations } = useQuery({\n    queryKey: [\"/api/automations\"],\n  });\n\n  // Renderizar contenido de la pestaña de automatización\n  const renderAutomationTab = () => {\n    return (\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">{t(\"task_automation\")}</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6\">{t(\"task_automation_description\", \"Set up automated tasks and workflows powered by AI.\")}</p>\n\n        <div className=\"flex justify-end mb-4\">\n          <FeatureRestrictedButton \n            feature=\"basicAutomations\"\n            onAccessGranted={() => setLocation(\"/automations/create\")}\n          >\n            {t(\"create_automation\", \"Create Automation\")}\n          </FeatureRestrictedButton>\n        </div>\n\n        {isLoadingAutomations ? (\n          <div className=\"flex items-center justify-center h-60\">\n            <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : automations && automations.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {automations.map((automation: any) => (\n              <Card key={automation.id} className=\"p-6 h-full flex flex-col\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <div className=\"flex items-center\">\n                      <h3 className=\"text-lg font-medium\">{automation.name}</h3>\n                      <span className={`ml-2 px-2 py-0.5 text-xs rounded-full ${\n                        automation.status === 'active' \n                          ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' \n                          : automation.status === 'inactive'\n                            ? 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n                            : 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100'\n                      }`}>\n                        {automation.status === 'active' ? t(\"active\", \"Active\") : \n                         automation.status === 'inactive' ? t(\"inactive\", \"Inactive\") : t(\"testing\", \"Testing\")}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n                      {automation.description || t(\"no_description\", \"No description\")}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex-grow\"></div>\n                <div className=\"flex justify-end mt-4 space-x-2\">\n                  <Link href={`/automations/${automation.id}/logs`}>\n                    <Button size=\"sm\" variant=\"outline\">{t(\"view_logs\", \"View Logs\")}</Button>\n                  </Link>\n                  <Link href={`/automations/${automation.id}/edit`}>\n                    <Button size=\"sm\">{t(\"edit\", \"Edit\")}</Button>\n                  </Link>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-6 text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">{t(\"no_automations\", \"No automations yet\")}</h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              {t(\"automations_empty_message\", \"Create your first automation to streamline repetitive tasks with AI\")}\n            </p>\n            <FeatureRestrictedButton \n              feature=\"basicAutomations\"\n              onAccessGranted={() => setLocation(\"/automations/create\")}\n              variant=\"default\" \n              className=\"w-full sm:w-auto px-8\"\n            >\n              {t(\"create_automation\", \"Create Automation\")}\n            </FeatureRestrictedButton>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Tabs defaultValue=\"integrations\" value={activeTab} onValueChange={handleTabChange}>\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"automation\">{t(\"task_automation\")}</TabsTrigger>\n          <TabsTrigger value=\"conversations\">{t(\"conversations\")}</TabsTrigger>\n          <TabsTrigger value=\"integrations\">{t(\"integrations\")}</TabsTrigger>\n          <TabsTrigger value=\"forms\">{t(\"forms\")}</TabsTrigger>\n          <TabsTrigger value=\"settings\">{t(\"settings\")}</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"automation\">{renderAutomationTab()}</TabsContent>\n        <TabsContent value=\"conversations\">{renderConversationsTab()}</TabsContent>\n        <TabsContent value=\"integrations\">{renderIntegrationsTab()}</TabsContent>\n        <TabsContent value=\"forms\">{renderFormsTab()}</TabsContent>\n        <TabsContent value=\"settings\">{renderSettingsTab()}</TabsContent>\n      </Tabs>\n\n      <UpgradePlanModal\n        isOpen={upgradeModal.isOpen}\n        onClose={upgradeModal.hideUpgradeModal}\n        limitType={upgradeModal.limitType}\n        currentLimit={upgradeModal.currentLimit}\n        planName={upgradeModal.planName}\n      />\n    </div>\n  );\n}\n","size_bytes":27751},"client/src/components/embeddable-widget.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Plus, Send } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport ChatInterface from \"./chat-interface\";\n\ninterface EmbeddableWidgetProps {\n  apiKey: string;\n  position?: 'bottom-right' | 'bottom-left' | 'bottom-center' | 'top-right' | 'top-left';\n  themeColor?: string;\n  assistantName?: string;\n}\n\nexport default function EmbeddableWidget({\n  apiKey,\n  position = 'bottom-right',\n  themeColor = '#3B82F6',\n  assistantName = 'AIPI Assistant'\n}: EmbeddableWidgetProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const { t } = useTranslation();\n  \n  // Position styles\n  const getPositionStyles = () => {\n    switch (position) {\n      case 'bottom-left':\n        return { bottom: '1.5rem', left: '1.5rem' };\n      case 'bottom-center':\n        return { bottom: '1.5rem', left: '50%', transform: 'translateX(-50%)' };\n      case 'top-right':\n        return { top: '1.5rem', right: '1.5rem' };\n      case 'top-left':\n        return { top: '1.5rem', left: '1.5rem' };\n      case 'bottom-right':\n      default:\n        return { bottom: '1.5rem', right: '1.5rem' };\n    }\n  };\n  \n  const toggleWidget = () => {\n    setIsOpen(!isOpen);\n  };\n  \n  const toggleMinimize = () => {\n    setIsMinimized(!isMinimized);\n  };\n  \n  const positionStyles = getPositionStyles();\n  \n  return (\n    <div \n      className=\"fixed z-50 flex flex-col\" \n      style={positionStyles}\n    >\n      {isOpen && !isMinimized && (\n        <div className=\"mb-4 w-80 h-96 bg-white dark:bg-gray-800 rounded-lg shadow-xl flex flex-col overflow-hidden\">\n          <div \n            className=\"p-4 flex justify-between items-center text-white\"\n            style={{ backgroundColor: themeColor }}\n          >\n            <div className=\"flex items-center\">\n              <div className=\"h-8 w-8 rounded-full bg-white flex items-center justify-center\">\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke={themeColor} viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"font-medium\">{assistantName}</p>\n                <p className=\"text-xs opacity-75\">{t(\"chat.online\")}</p>\n              </div>\n            </div>\n            <div className=\"flex\">\n              <button \n                onClick={toggleMinimize}\n                className=\"text-white hover:text-gray-200 focus:outline-none mr-2\"\n                aria-label=\"Minimize\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M18 12H6\"></path>\n                </svg>\n              </button>\n              <button \n                onClick={toggleWidget}\n                className=\"text-white hover:text-gray-200 focus:outline-none\"\n                aria-label=\"Close\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n          \n          <ChatInterface integrationId={0} />\n        </div>\n      )}\n      \n      {isOpen && isMinimized && (\n        <div \n          className=\"mb-4 rounded-lg shadow-lg cursor-pointer p-3 text-white\"\n          style={{ backgroundColor: themeColor }}\n          onClick={toggleMinimize}\n        >\n          <div className=\"flex items-center\">\n            <div className=\"h-8 w-8 rounded-full bg-white flex items-center justify-center mr-2\">\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke={themeColor} viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n              </svg>\n            </div>\n            <span>{assistantName}</span>\n          </div>\n        </div>\n      )}\n      \n      <Button\n        className=\"h-14 w-14 rounded-full shadow-lg flex items-center justify-center\"\n        onClick={toggleWidget}\n        style={{ backgroundColor: isOpen ? '#64748b' : themeColor }}\n        aria-label={isOpen ? \"Close chat\" : \"Open chat\"}\n      >\n        {isOpen ? <X className=\"h-6 w-6\" /> : <Plus className=\"h-6 w-6\" />}\n      </Button>\n    </div>\n  );\n}\n","size_bytes":4897},"client/src/components/feature-guard.tsx":{"content":"import React from 'react';\nimport { useFeatureCheck } from '@/hooks/use-feature-access';\nimport { useUpgradePopup } from './upgrade-popup';\nimport { Button } from './ui/button';\nimport { Lock } from 'lucide-react';\n\ninterface FeatureGuardProps {\n  feature: string;\n  fallback?: React.ReactNode;\n  showUpgradeButton?: boolean;\n  children: React.ReactNode;\n}\n\n/**\n * Componente que envuelve funcionalidades que requieren verificación de plan\n * Muestra el contenido si el usuario tiene acceso, o un fallback si no\n */\nexport function FeatureGuard({ \n  feature, \n  fallback, \n  showUpgradeButton = true, \n  children \n}: FeatureGuardProps) {\n  const { hasAccess, needsUpgrade, isLoading, upgradeMessage, requiredPlanName, currentPlan, requiredPlan, featureName } = useFeatureCheck(feature);\n  const { showUpgradePopup, UpgradePopupComponent } = useUpgradePopup();\n\n  const handleUpgradeClick = () => {\n    if (needsUpgrade && upgradeMessage && requiredPlanName) {\n      showUpgradePopup({\n        feature: featureName || feature,\n        currentPlan,\n        requiredPlan: requiredPlan || 'startup',\n        requiredPlanName,\n        upgradeMessage\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-4\">\n        <div className=\"animate-spin h-5 w-5 border-2 border-primary border-t-transparent rounded-full\"></div>\n      </div>\n    );\n  }\n\n  if (hasAccess) {\n    return <>{children}</>;\n  }\n\n  // Si no tiene acceso, mostrar fallback o botón de upgrade\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n\n  if (showUpgradeButton && needsUpgrade) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-6 border border-dashed border-muted-foreground/25 rounded-lg bg-muted/30\">\n        <Lock className=\"h-8 w-8 text-muted-foreground mb-3\" />\n        <p className=\"text-sm text-muted-foreground text-center mb-4\">\n          {upgradeMessage || `Esta función requiere actualizar tu plan`}\n        </p>\n        <Button onClick={handleUpgradeClick} size=\"sm\">\n          Ver planes disponibles\n        </Button>\n        {UpgradePopupComponent}\n      </div>\n    );\n  }\n\n  return null;\n}\n\ninterface ClickableFeatureGuardProps {\n  feature: string;\n  onAccessGranted: () => void;\n  children: React.ReactNode;\n  disabled?: boolean;\n}\n\n/**\n * Componente que permite hacer clic pero verifica el acceso antes de ejecutar la acción\n * Útil para botones que deben estar visibles pero mostrar popup de upgrade\n */\nexport function ClickableFeatureGuard({ \n  feature, \n  onAccessGranted, \n  children, \n  disabled = false \n}: ClickableFeatureGuardProps) {\n  const { hasAccess, needsUpgrade, upgradeMessage, requiredPlanName, currentPlan, requiredPlan, featureName } = useFeatureCheck(feature);\n  const { showUpgradePopup, UpgradePopupComponent } = useUpgradePopup();\n\n  const handleClick = () => {\n    if (disabled) return;\n    \n    if (hasAccess) {\n      onAccessGranted();\n    } else if (needsUpgrade && upgradeMessage && requiredPlanName) {\n      showUpgradePopup({\n        feature: featureName || feature,\n        currentPlan,\n        requiredPlan: requiredPlan || 'startup',\n        requiredPlanName,\n        upgradeMessage\n      });\n    }\n  };\n\n  return (\n    <>\n      <div onClick={handleClick} style={{ cursor: disabled ? 'not-allowed' : 'pointer' }}>\n        {children}\n      </div>\n      {UpgradePopupComponent}\n    </>\n  );\n}\n\ninterface ConditionalFeatureGuardProps {\n  feature: string;\n  children: (hasAccess: boolean, showUpgrade: () => void) => React.ReactNode;\n}\n\n/**\n * Componente render prop que proporciona información de acceso a características\n */\nexport function ConditionalFeatureGuard({ feature, children }: ConditionalFeatureGuardProps) {\n  const { hasAccess, needsUpgrade, upgradeMessage, requiredPlanName, currentPlan, requiredPlan, featureName } = useFeatureCheck(feature);\n  const { showUpgradePopup, UpgradePopupComponent } = useUpgradePopup();\n\n  const showUpgrade = () => {\n    if (needsUpgrade && upgradeMessage && requiredPlanName) {\n      showUpgradePopup({\n        feature: featureName || feature,\n        currentPlan,\n        requiredPlan: requiredPlan || 'startup',\n        requiredPlanName,\n        upgradeMessage\n      });\n    }\n  };\n\n  return (\n    <>\n      {children(hasAccess, showUpgrade)}\n      {UpgradePopupComponent}\n    </>\n  );\n}","size_bytes":4344},"client/src/components/feature-restricted-button.tsx":{"content":"import React from 'react';\nimport { Button, ButtonProps } from './ui/button';\nimport { useFeatureCheck } from '@/hooks/use-feature-access';\nimport { useUpgradePopup } from './upgrade-popup';\nimport { Lock } from 'lucide-react';\n\ninterface FeatureRestrictedButtonProps extends ButtonProps {\n  feature: string;\n  onAccessGranted: () => void;\n  children: React.ReactNode;\n  showLockIcon?: boolean;\n}\n\n/**\n * Botón que verifica el acceso a características antes de ejecutar la acción\n * Muestra popup de upgrade si no tiene acceso\n */\nexport function FeatureRestrictedButton({ \n  feature, \n  onAccessGranted, \n  children, \n  showLockIcon = false,\n  disabled,\n  ...buttonProps \n}: FeatureRestrictedButtonProps) {\n  const { hasAccess, needsUpgrade, upgradeMessage, requiredPlanName, currentPlan, requiredPlan, featureName } = useFeatureCheck(feature);\n  const { showUpgradePopup, UpgradePopupComponent } = useUpgradePopup();\n\n  const handleClick = () => {\n    if (disabled) return;\n    \n    if (hasAccess) {\n      onAccessGranted();\n    } else if (needsUpgrade && upgradeMessage && requiredPlanName) {\n      showUpgradePopup({\n        feature: featureName || feature,\n        currentPlan,\n        requiredPlan: requiredPlan || 'startup',\n        requiredPlanName,\n        upgradeMessage\n      });\n    }\n  };\n\n  return (\n    <>\n      <Button\n        {...buttonProps}\n        onClick={handleClick}\n        disabled={disabled}\n      >\n        {!hasAccess && showLockIcon && (\n          <Lock className=\"h-4 w-4 mr-2\" />\n        )}\n        {children}\n      </Button>\n      {UpgradePopupComponent}\n    </>\n  );\n}\n\ninterface FeatureRestrictedLinkProps {\n  feature: string;\n  onAccessGranted: () => void;\n  children: React.ReactNode;\n  className?: string;\n}\n\n/**\n * Link que verifica el acceso a características antes de navegar\n */\nexport function FeatureRestrictedLink({ \n  feature, \n  onAccessGranted, \n  children, \n  className = '' \n}: FeatureRestrictedLinkProps) {\n  const { hasAccess, needsUpgrade, upgradeMessage, requiredPlanName, currentPlan, requiredPlan, featureName } = useFeatureCheck(feature);\n  const { showUpgradePopup, UpgradePopupComponent } = useUpgradePopup();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    \n    if (hasAccess) {\n      onAccessGranted();\n    } else if (needsUpgrade && upgradeMessage && requiredPlanName) {\n      showUpgradePopup({\n        feature: featureName || feature,\n        currentPlan,\n        requiredPlan: requiredPlan || 'startup',\n        requiredPlanName,\n        upgradeMessage\n      });\n    }\n  };\n\n  return (\n    <>\n      <a \n        href=\"#\" \n        onClick={handleClick}\n        className={className}\n      >\n        {children}\n      </a>\n      {UpgradePopupComponent}\n    </>\n  );\n}","size_bytes":2761},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function Footer() {\n  const { t } = useTranslation();\n  return (\n    <footer className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 py-8 mt-auto\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">AIPPS</h3>\n            <p className=\"text-gray-600 dark:text-gray-300 text-sm\">\n              {t('footer.company_description')}\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">{t('footer.product')}</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/#features\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.features')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/pricing\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.pricing')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/docs\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.documentation')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/get-started\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.get_started')}\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">{t('footer.company')}</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/about\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.about_us')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.contact')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/privacy\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.privacy_policy')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.terms_of_service')}\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">{t('footer.support')}</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/help\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  {t('footer.help_center')}\n                </Link>\n              </li>\n              <li>\n                <a href=\"mailto:support@aipps.ca\" className=\"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 text-sm\">\n                  support@aipps.ca\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-200 dark:border-gray-700 mt-8 pt-6 flex flex-col sm:flex-row justify-between items-center\">\n          <p className=\"text-gray-600 dark:text-gray-300 text-sm text-center sm:text-left\">\n            &copy; {new Date().getFullYear()} AIPPS. {t('footer.all_rights_reserved')}\n          </p>\n          \n          <div className=\"flex space-x-4 mt-4 sm:mt-0\">\n            <a href=\"https://twitter.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-500 hover:text-primary-600 dark:text-gray-400 dark:hover:text-primary-400\">\n              <span className=\"sr-only\">Twitter</span>\n              <svg className=\"h-6 w-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84\" />\n              </svg>\n            </a>\n            <a href=\"https://linkedin.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-500 hover:text-primary-600 dark:text-gray-400 dark:hover:text-primary-400\">\n              <span className=\"sr-only\">LinkedIn</span>\n              <svg className=\"h-6 w-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z\" />\n              </svg>\n            </a>\n            <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-500 hover:text-primary-600 dark:text-gray-400 dark:hover:text-primary-400\">\n              <span className=\"sr-only\">GitHub</span>\n              <svg className=\"h-6 w-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path fillRule=\"evenodd\" d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\" clipRule=\"evenodd\" />\n              </svg>\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":6958},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sun, Moon, Menu, X } from \"lucide-react\";\nimport { useTheme } from \"@/context/theme-context\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { useProfile } from \"@/context/profile-context\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { LanguageSelector } from \"@/components/language-selector\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function Header() {\n  const { theme, setTheme } = useTheme();\n  const { user, logout } = useAuth();\n  const { avatarUrl } = useProfile();\n  const [location] = useLocation();\n  const [open, setOpen] = useState(false);\n  const { t } = useTranslation();\n  \n  const handleLogout = () => {\n    logout();\n  };\n  \n  // Determinar si el usuario actual es administrador\n  const isAdmin = user?.username === 'admin';\n  \n  const navLinks = [\n    { name: t(\"dashboard\"), href: \"/dashboard\", auth: true },\n    { name: t(\"integrations\"), href: \"/dashboard?tab=integrations\", auth: true },\n    { name: t(\"analytics\"), href: \"/analytics\", auth: true },\n    { name: t(\"pricing\"), href: \"/pricing\", auth: true },\n    { name: t(\"settings\"), href: \"/dashboard?tab=settings\", auth: true },\n    { name: t(\"documentation\"), href: \"/docs\", auth: true },\n    // Añadir enlace a panel de administración solo si el usuario es admin\n    ...(isAdmin ? [{ name: t(\"admin\"), href: \"/admin\", auth: true }] : [])\n  ];\n  \n  const publicLinks = [\n    { name: t(\"home\"), href: \"/\" },\n    { name: \"Features\", href: \"/#features\" },\n    { name: t(\"pricing\"), href: \"/pricing\" },\n    { name: t(\"documentation\"), href: \"/docs\" },\n  ];\n  \n  const activeLinks = user ? navLinks : publicLinks;\n  \n  return (\n    <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex-shrink-0 flex items-center\">\n            <Link href=\"/\">\n              <span className=\"text-primary-600 dark:text-primary-400 text-xl font-bold cursor-pointer\">AIPPS</span>\n            </Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex space-x-8 items-center\">\n            {activeLinks.map((link) => (\n              <Link \n                key={link.name} \n                href={link.href} \n                className={`${\n                  location === link.href \n                    ? \"text-primary-600 dark:text-primary-400\" \n                    : \"text-gray-700 dark:text-gray-300 hover:text-primary-500 dark:hover:text-primary-400\"\n                }`}\n              >\n                {link.name}\n              </Link>\n            ))}\n          </nav>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Language selector */}\n            <div className=\"hidden md:block\">\n              <LanguageSelector />\n            </div>\n            \n            {/* Theme toggle */}\n            <button\n              onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n              className=\"p-2 rounded-full text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary-500\"\n              aria-label=\"Toggle theme\"\n            >\n              {theme === 'dark' ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </button>\n            \n            {/* User menu for auth users */}\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <button className=\"flex items-center\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={avatarUrl || undefined} alt=\"User avatar\" />\n                      <AvatarFallback>{user.username?.slice(0, 2).toUpperCase()}</AvatarFallback>\n                    </Avatar>\n                  </button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard?tab=profile\">{t(\"profile\")}</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard?tab=settings\">{t(\"settings\")}</Link>\n                  </DropdownMenuItem>\n                  {isAdmin && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/admin\">{t(\"admin\")}</Link>\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout}>\n                    {t(\"logout\")}\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"hidden md:flex space-x-3\">\n                <Button variant=\"outline\" asChild>\n                  <Link href=\"/login\">{t(\"login\")}</Link>\n                </Button>\n                <Button asChild>\n                  <Link href=\"/register\">{t(\"signup\")}</Link>\n                </Button>\n              </div>\n            )}\n            \n            {/* Mobile menu button */}\n            <Sheet open={open} onOpenChange={setOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                  <Menu className=\"h-6 w-6\" />\n                  <span className=\"sr-only\">Open mobile menu</span>\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\">\n                <SheetHeader>\n                  <SheetTitle>{t(\"menu\")}</SheetTitle>\n                </SheetHeader>\n                <div className=\"py-4\">\n                  <nav className=\"flex flex-col space-y-4\">\n                    {activeLinks.map((link) => (\n                      <Link \n                        key={link.name} \n                        href={link.href} \n                        className={`${\n                          location === link.href \n                            ? \"text-primary-600 dark:text-primary-400\" \n                            : \"text-gray-700 dark:text-gray-300 hover:text-primary-500 dark:hover:text-primary-400\"\n                        }`}\n                        onClick={() => setOpen(false)}\n                      >\n                        {link.name}\n                      </Link>\n                    ))}\n                    \n                    {!user && (\n                      <>\n                        <Link \n                          href=\"/login\" \n                          className=\"text-gray-700 dark:text-gray-300 hover:text-primary-500 dark:hover:text-primary-400\"\n                          onClick={() => setOpen(false)}\n                        >\n                          {t(\"login\")}\n                        </Link>\n                        <Link \n                          href=\"/register\" \n                          className=\"text-gray-700 dark:text-gray-300 hover:text-primary-500 dark:hover:text-primary-400\"\n                          onClick={() => setOpen(false)}\n                        >\n                          {t(\"signup\")}\n                        </Link>\n                      </>\n                    )}\n                    \n                    {user && (\n                      <a \n                        href=\"#\" \n                        className=\"text-gray-700 dark:text-gray-300 hover:text-primary-500 dark:hover:text-primary-400\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          setOpen(false);\n                          handleLogout();\n                        }}\n                      >\n                        {t(\"logout\")}\n                      </a>\n                    )}\n                    \n                    {/* Language selector in mobile menu */}\n                    <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                      <span className=\"block text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                        {t(\"language.select\")}\n                      </span>\n                      <LanguageSelector />\n                    </div>\n                  </nav>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":8822},"client/src/components/integration-card.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Eye, Calendar, Users, Trash, Edit } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from \"react-i18next\";\n\n// Definición de tipos\ninterface Integration {\n  id: number;\n  name: string;\n  url: string;\n  type: string;\n  apiKey: string;\n  userId: number;\n  createdAt: string;\n  status: string;\n  visitorCount: number;\n  description?: string;\n}\n\ninterface IntegrationCardProps {\n  integration: Integration;\n}\n\nexport function IntegrationCard({ integration }: IntegrationCardProps) {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { t } = useTranslation();\n  const [isConfirmingDelete, setIsConfirmingDelete] = useState(false);\n  \n  // Formatear fecha de instalación\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"N/A\";\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  };\n\n  // Obtener etiqueta de estado\n  const getStatusBadge = (status: string) => {\n    const baseClasses = \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\";\n    \n    switch (status) {\n      case \"active\":\n        return <span className={`${baseClasses} bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200`}>{t(\"active\", \"Active\")}</span>;\n      case \"inactive\":\n        return <span className={`${baseClasses} bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200`}>{t(\"inactive\", \"Inactive\")}</span>;\n      case \"in_testing\":\n        return <span className={`${baseClasses} bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200`}>{t(\"testing\", \"Testing\")}</span>;\n      default:\n        return <span className={`${baseClasses} bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200`}>{status}</span>;\n    }\n  };\n\n  // Mutación para eliminar la integración\n  const deleteIntegrationMutation = useMutation({\n    mutationFn: () => {\n      return apiRequest(\"DELETE\", `/api/integrations/${integration.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n      toast({\n        title: \"Integración eliminada\",\n        description: \"La integración se ha eliminado correctamente\",\n      });\n      setIsConfirmingDelete(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error al eliminar la integración\",\n        description: error.message || \"Ha ocurrido un error al eliminar la integración\",\n        variant: \"destructive\",\n      });\n      setIsConfirmingDelete(false);\n    },\n  });\n\n  // Abrir diálogo de confirmación de eliminación\n  const handleDeleteClick = () => {\n    setIsConfirmingDelete(true);\n  };\n\n  // Confirmar eliminación\n  const confirmDelete = () => {\n    deleteIntegrationMutation.mutate();\n  };\n\n  return (\n    <>\n      <Card className=\"p-5 relative overflow-hidden\">\n        <div className=\"absolute top-3 right-3\">\n          {getStatusBadge(integration.status)}\n        </div>\n        \n        <h3 className=\"text-lg font-semibold mb-1\">{integration.name}</h3>\n        <p className=\"text-gray-500 dark:text-gray-400 text-sm mb-4 truncate\">{integration.url}</p>\n        \n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div className=\"flex items-center text-gray-600 dark:text-gray-400 text-sm\">\n            <Eye className=\"h-4 w-4 mr-1\" />\n            <span>{t(\"visitors_helped\", \"Visitors helped\")}: {integration.visitorCount}</span>\n          </div>\n          <div className=\"flex items-center text-gray-600 dark:text-gray-400 text-sm\">\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            <span>{t(\"installed\", \"Installed\")}: {formatDate(integration.createdAt)}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex flex-wrap gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1\"\n            onClick={() => navigate(`/integrations/${integration.id}/edit`)}\n          >\n            <Edit className=\"h-4 w-4 mr-1\" />\n            {t(\"edit\", \"Edit\")}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1\"\n            onClick={() => navigate(`/integrations/${integration.id}/conversations`)}\n          >\n            {t(\"conversations\", \"Conversations\")}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1\"\n            onClick={() => navigate(`/integrations/${integration.id}/analytics`)}\n          >\n            {t(\"analytics\", \"Analytics\")}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1 text-red-500 hover:text-red-700 hover:border-red-300\"\n            onClick={handleDeleteClick}\n          >\n            <Trash className=\"h-4 w-4 mr-1\" />\n            {t(\"delete\", \"Delete\")}\n          </Button>\n        </div>\n      </Card>\n\n      {/* Diálogo de confirmación de eliminación */}\n      <Dialog open={isConfirmingDelete} onOpenChange={setIsConfirmingDelete}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{t(\"confirm_delete_title\", \"Are you sure?\")}</DialogTitle>\n            <DialogDescription>\n              {t(\"confirm_delete_description\", `This action will permanently delete the integration \"{{name}}\" and cannot be undone. The widget will stop working on your website.`, { name: integration.name })}\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter className=\"flex space-x-2 justify-end\">\n            <Button variant=\"outline\" onClick={() => setIsConfirmingDelete(false)}>\n              {t(\"common.cancel\", \"Cancel\")}\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmDelete}\n              disabled={deleteIntegrationMutation.isPending}\n              className=\"gap-2\"\n            >\n              {deleteIntegrationMutation.isPending && (\n                <div className=\"animate-spin w-4 h-4 border-2 border-current border-t-transparent rounded-full\" aria-hidden=\"true\" />\n              )}\n              {t(\"delete\", \"Delete\")}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":6725},"client/src/components/language-selector.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Globe } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport function LanguageSelector() {\n  const { t, i18n } = useTranslation();\n  const [currentLang, setCurrentLang] = useState(i18n.language || \"fr\");\n\n  const changeLanguage = (lng: string) => {\n    localStorage.setItem(\"i18nextLng\", lng);\n    i18n.changeLanguage(lng).then(() => {\n      setCurrentLang(lng);\n      // Preserve current navigation state when reloading\n      const currentUrl = window.location.href;\n      window.location.href = currentUrl;\n    });\n  };\n\n  useEffect(() => {\n    const savedLang = localStorage.getItem(\"i18nextLng\");\n    if (savedLang) {\n      i18n.changeLanguage(savedLang);\n      setCurrentLang(savedLang);\n    }\n  }, [i18n]);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n          <Globe className=\"h-4 w-4\" />\n          <span>{t(\"language.select\")}</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem\n          className={currentLang === \"fr\" ? \"bg-muted\" : \"\"}\n          onClick={() => changeLanguage(\"fr\")}\n        >\n          {t(\"language.fr\")}\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          className={currentLang === \"es\" ? \"bg-muted\" : \"\"}\n          onClick={() => changeLanguage(\"es\")}\n        >\n          {t(\"language.es\")}\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          className={currentLang === \"en\" ? \"bg-muted\" : \"\"}\n          onClick={() => changeLanguage(\"en\")}\n        >\n          {t(\"language.en\")}\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1950},"client/src/components/profile-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Copy as CopyIcon, Upload as UploadIcon, Camera as CameraIcon, Trash2 as TrashIcon } from \"lucide-react\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useProfile } from \"@/context/profile-context\";\n\nexport default function ProfileSection() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { avatarUrl, companyLogoUrl, updateAvatar, updateCompanyLogo } = useProfile();\n  const [copied, setCopied] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isLogoUploading, setIsLogoUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const logoInputRef = useRef<HTMLInputElement>(null);\n\n  const handleCopyApiKey = () => {\n    // Placeholder: In a real implementation, this would copy an API key from the user object\n    const demoApiKey = \"aipi_demo1234567890\";\n    navigator.clipboard.writeText(demoApiKey);\n    setCopied(true);\n    toast({\n      title: \"API Key copied\",\n      description: \"API Key has been copied to clipboard\",\n    });\n\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const handleUpdateProfile = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Implementación de actualización de perfil aquí\n    toast({\n      title: \"Profile updated\",\n      description: \"Your profile information has been updated successfully\",\n    });\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // File size validation (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image smaller than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // File type validation\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file (JPEG, PNG, etc.)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    // Create object URL for preview\n    const objectUrl = URL.createObjectURL(file);\n    \n    // Update profile context\n    updateAvatar(objectUrl);\n\n    // Here you would normally upload to server\n    // Simulate server upload delay\n    setTimeout(() => {\n      setIsUploading(false);\n      toast({\n        title: \"Profile picture updated\",\n        description: \"Your profile picture has been updated successfully\",\n      });\n    }, 1500);\n  };\n\n  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // File size validation (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image smaller than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // File type validation\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file (JPEG, PNG, etc.)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLogoUploading(true);\n\n    // Create object URL for preview\n    const objectUrl = URL.createObjectURL(file);\n    \n    // Update profile context\n    updateCompanyLogo(objectUrl);\n\n    // Here you would normally upload to server\n    // Simulate server upload delay\n    setTimeout(() => {\n      setIsLogoUploading(false);\n      toast({\n        title: \"Company logo updated\",\n        description: \"Your company logo has been updated successfully\",\n      });\n    }, 1500);\n  };\n\n  const handleUploadClick = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  const handleDeleteAvatar = () => {\n    updateAvatar(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n    toast({\n      title: \"Profile picture removed\",\n      description: \"Your profile picture has been removed\",\n    });\n  };\n\n  // Extract initials safely\n  const getInitials = () => {\n    if (user && user.fullName && user.fullName.length > 0) {\n      return user.fullName.charAt(0).toUpperCase();\n    } else if (user && user.username && user.username.length > 0) {\n      return user.username.charAt(0).toUpperCase();\n    }\n    return \"U\"; // Default fallback\n  };\n\n  // Get display name safely\n  const getDisplayName = () => {\n    if (user) {\n      return user.fullName || user.username || \"User\";\n    }\n    return \"User\";\n  };\n\n  // Get email safely\n  const getEmail = () => {\n    return user && user.email ? user.email : \"example@aipi.com\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white dark:bg-gray-800 shadow-sm rounded-md p-6\">\n        <div className=\"flex flex-col md:flex-row items-start gap-6\">\n          <div className=\"relative group\">\n            <div className=\"w-32 h-32 rounded-full overflow-hidden bg-primary-100 dark:bg-primary-900 flex items-center justify-center text-primary-600 dark:text-primary-300 text-5xl border-2 border-primary-200 dark:border-primary-800\">\n              {avatarUrl ? (\n                <img src={avatarUrl} alt=\"User avatar\" className=\"w-full h-full object-cover\" />\n              ) : (\n                getInitials()\n              )}\n            </div>\n            \n            {/* Upload overlay */}\n            <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 rounded-full flex items-center justify-center transition-all duration-200 opacity-0 group-hover:opacity-100\">\n              <div className=\"flex flex-col items-center justify-center space-y-2\">\n                <button \n                  type=\"button\" \n                  onClick={handleUploadClick}\n                  disabled={isUploading}\n                  className=\"rounded-full bg-white p-2 text-gray-700 hover:text-primary-600\"\n                >\n                  {isUploading ? (\n                    <div className=\"animate-spin h-5 w-5 border-2 border-primary-500 border-t-transparent rounded-full\" />\n                  ) : (\n                    <CameraIcon className=\"h-5 w-5\" />\n                  )}\n                </button>\n                {avatarUrl && (\n                  <button \n                    type=\"button\" \n                    onClick={handleDeleteAvatar}\n                    className=\"rounded-full bg-white p-2 text-red-500 hover:text-red-700\"\n                  >\n                    <TrashIcon className=\"h-5 w-5\" />\n                  </button>\n                )}\n              </div>\n            </div>\n            \n            {/* Hidden file input */}\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileUpload}\n              accept=\"image/*\"\n              className=\"hidden\"\n            />\n          </div>\n          \n          <div className=\"flex-1\">\n            <h3 className=\"text-xl font-semibold\">{getDisplayName()}</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">{getEmail()}</p>\n            \n            <form onSubmit={handleUpdateProfile} className=\"mt-4 space-y-4\">\n              <div>\n                <Label htmlFor=\"fullName\">Full Name</Label>\n                <Input \n                  id=\"fullName\" \n                  name=\"fullName\" \n                  placeholder=\"Your full name\" \n                  defaultValue={user?.fullName || \"\"} \n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input \n                  id=\"email\" \n                  name=\"email\" \n                  type=\"email\"\n                  placeholder=\"Your email address\" \n                  defaultValue={getEmail()} \n                  disabled\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">Email cannot be changed</p>\n              </div>\n              \n              <div className=\"mt-2\">\n                <Label htmlFor=\"companyLogo\" className=\"block mb-2\">Company Logo (Optional)</Label>\n                <div className=\"flex items-center space-x-4\">\n                  {companyLogoUrl ? (\n                    <div className=\"relative group\">\n                      <div className=\"w-16 h-16 rounded-md overflow-hidden bg-gray-100 dark:bg-gray-700 border border-gray-200 dark:border-gray-600\">\n                        <img src={companyLogoUrl} alt=\"Company logo\" className=\"w-full h-full object-contain\" />\n                      </div>\n                      <button \n                        type=\"button\" \n                        onClick={() => {\n                          updateCompanyLogo(null);\n                          if (logoInputRef.current) {\n                            logoInputRef.current.value = '';\n                          }\n                          toast({\n                            title: \"Logo removed\",\n                            description: \"Company logo has been removed\",\n                          });\n                        }}\n                        className=\"absolute -top-2 -right-2 bg-white dark:bg-gray-800 rounded-full p-1 shadow-sm border border-gray-200 dark:border-gray-700 text-red-500 hover:text-red-700\"\n                      >\n                        <TrashIcon className=\"h-3 w-3\" />\n                      </button>\n                    </div>\n                  ) : null}\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      className=\"flex items-center\"\n                      onClick={() => {\n                        if (logoInputRef.current) {\n                          logoInputRef.current.click();\n                        }\n                      }}\n                      disabled={isLogoUploading}\n                    >\n                      {isLogoUploading ? (\n                        <div className=\"animate-spin h-4 w-4 border-2 border-primary-500 border-t-transparent rounded-full mr-2\" />\n                      ) : (\n                        <UploadIcon className=\"h-4 w-4 mr-2\" />\n                      )}\n                      {companyLogoUrl ? \"Change Logo\" : \"Upload Logo\"}\n                    </Button>\n                    <span className=\"text-sm text-gray-500\">\n                      Recommended size: 500x500px (Max 5MB)\n                    </span>\n                  </div>\n                </div>\n                <input \n                  id=\"companyLogo\" \n                  type=\"file\" \n                  ref={logoInputRef}\n                  accept=\"image/*\" \n                  className=\"hidden\" \n                  onChange={handleLogoUpload}\n                />\n              </div>\n              \n              <div className=\"pt-4\">\n                <Button type=\"submit\" className=\"mr-2\">\n                  Update Profile\n                </Button>\n                <Button variant=\"outline\" type=\"button\">\n                  Change Password\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"bg-white dark:bg-gray-800 shadow-sm rounded-md p-6\">\n        <h3 className=\"text-lg font-medium mb-4\">Account API Key</h3>\n        <p className=\"text-gray-500 dark:text-gray-400 mb-4\">\n          This is your personal API key for accessing the AIPPS API. Keep it secure.\n        </p>\n        <div className=\"flex items-center space-x-2\">\n          <Input \n            value=\"aipps_demo1234567890\"\n            readOnly\n            className=\"font-mono\"\n          />\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleCopyApiKey}\n          >\n            <CopyIcon className=\"h-4 w-4 mr-2\" />\n            {copied ? \"Copied!\" : \"Copy\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12140},"client/src/components/stat-card.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  change?: number;\n  icon: ReactNode;\n  color: \"primary\" | \"secondary\" | \"accent\";\n}\n\nexport default function StatCard({ title, value, change, icon, color }: StatCardProps) {\n  const getColorClasses = () => {\n    switch (color) {\n      case \"secondary\":\n        return \"bg-green-100 dark:bg-green-900 text-green-500\";\n      case \"accent\":\n        return \"bg-purple-100 dark:bg-purple-900 text-purple-500\";\n      case \"primary\":\n      default:\n        return \"bg-primary-100 dark:bg-primary-900 text-primary-500\";\n    }\n  };\n  \n  const getChangeColor = () => {\n    if (!change) return \"\";\n    return change > 0 ? \"text-green-500\" : \"text-red-500\";\n  };\n  \n  const changeIcon = change && change > 0 ? (\n    <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 10l7-7m0 0l7 7m-7-7v18\"></path>\n    </svg>\n  ) : (\n    <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 14l-7 7m0 0l-7-7m7 7V3\"></path>\n    </svg>\n  );\n  \n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center\">\n          <div className={`p-3 rounded-full ${getColorClasses()}`}>\n            {icon}\n          </div>\n          <div className=\"ml-4\">\n            <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{title}</p>\n            <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{value}</p>\n          </div>\n        </div>\n        \n        {change && (\n          <div className=\"mt-4\">\n            <div className=\"flex items-center text-sm\">\n              <span className={`flex items-center ${getChangeColor()}`}>\n                {changeIcon}\n                {Math.abs(change).toFixed(1)}%\n              </span>\n              <span className=\"text-gray-500 dark:text-gray-400 ml-2\">vs last month</span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2296},"client/src/components/upgrade-plan-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Crown, ArrowRight, X, BarChart3 } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { usePlanLimits } from \"@/hooks/use-plan-limits\";\n\ninterface UpgradePlanModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  limitType: 'integrations' | 'forms' | 'conversations' | 'general';\n  currentLimit?: number;\n  planName?: string;\n}\n\nexport default function UpgradePlanModal({\n  isOpen,\n  onClose,\n  limitType,\n  currentLimit,\n  planName = \"Básico\"\n}: UpgradePlanModalProps) {\n  const { t } = useTranslation();\n  const [, navigate] = useLocation();\n  const { limits: limitsData } = usePlanLimits();\n\n  const handleUpgrade = () => {\n    navigate('/pricing');\n    onClose();\n  };\n\n  // Determinar el plan actual y los beneficios del próximo plan\n  const getPlanInfo = () => {\n    const currentPlanType = planName?.toLowerCase().includes('profesional') ? 'professional' :\n                           planName?.toLowerCase().includes('startup') ? 'startup' :\n                           planName?.toLowerCase().includes('empresarial') ? 'enterprise' : 'basic';\n    \n    // Beneficios específicos según el plan actual\n    const getNextPlanBenefits = () => {\n      switch (currentPlanType) {\n        case 'basic':\n          return [\n            t('upgrade.benefits.startup.conversations', '2,000 conversations/month'),\n            t('upgrade.benefits.startup.forms', '5 customizable forms'),\n            t('upgrade.benefits.startup.widgets', 'Bubble + fullscreen widgets'),\n            t('upgrade.benefits.startup.sites', 'Up to 3 websites'),\n            t('upgrade.benefits.startup.analytics', 'Advanced analytics')\n          ];\n        case 'startup':\n          return [\n            t('upgrade.benefits.professional.conversations', '10,000 conversations/month'),\n            t('upgrade.benefits.professional.forms', 'Unlimited forms'),\n            t('upgrade.benefits.professional.sites', 'Unlimited websites'),\n            t('upgrade.benefits.professional.automation', 'Basic automations'),\n            t('upgrade.benefits.professional.crm', 'CRM integration')\n          ];\n        case 'professional':\n          return [\n            t('upgrade.benefits.enterprise.conversations', 'Unlimited conversations'),\n            t('upgrade.benefits.enterprise.all', 'Everything included'),\n            t('upgrade.benefits.enterprise.ai', 'AI automations'),\n            t('upgrade.benefits.enterprise.support', '24/7 dedicated support'),\n            t('upgrade.benefits.enterprise.manager', 'Account manager')\n          ];\n        default:\n          return [\n            t('upgrade.benefits.general.integrations', 'More integrations and forms'),\n            t('upgrade.benefits.general.analytics', 'Advanced analytics and reports'),\n            t('upgrade.benefits.general.support', 'Priority support'),\n            t('upgrade.benefits.general.customization', 'Complete customization')\n          ];\n      }\n    };\n\n    return { currentPlanType, benefits: getNextPlanBenefits() };\n  };\n\n  const getLimitMessage = () => {\n    switch (limitType) {\n      case 'integrations':\n        return {\n          message: t('upgrade.integrations.message', `Tu ${planName} ha alcanzado el límite de integraciones.`, { planName }),\n          description: t('upgrade.integrations.description', 'Para conectar más servicios y automatizar tu negocio, necesitas actualizar tu plan.')\n        };\n      case 'forms':\n        return {\n          message: t('upgrade.forms.message', `Tu ${planName} ha alcanzado el límite de formularios.`, { planName }),\n          description: t('upgrade.forms.description', 'Para crear más formularios personalizados y capturar más leads, actualiza tu plan.')\n        };\n      case 'conversations':\n        return {\n          message: t('upgrade.conversations.message', `Tu ${planName} ha alcanzado el límite de conversaciones.`, { planName }),\n          description: t('upgrade.conversations.description', 'Para manejar más conversaciones con tus clientes, necesitas actualizar tu plan.')\n        };\n      default:\n        return {\n          message: t('upgrade.general.message', `Tu ${planName} ha alcanzado sus límites.`, { planName }),\n          description: t('upgrade.general.description', 'Para acceder a más funcionalidades y expandir tu negocio, actualiza tu plan.')\n        };\n    }\n  };\n\n  const { message, description } = getLimitMessage();\n  const { benefits } = getPlanInfo();\n\n  // Obtener datos de progreso actual para el tipo de límite específico\n  const getCurrentProgress = () => {\n    if (!limitsData) return null;\n    \n    switch (limitType) {\n      case 'integrations':\n        return {\n          used: limitsData.limits.integrations.used,\n          limit: limitsData.limits.integrations.limit,\n          percentage: limitsData.limits.integrations.limit === -1 ? 0 : \n                     Math.round((limitsData.limits.integrations.used / limitsData.limits.integrations.limit) * 100),\n          isUnlimited: limitsData.limits.integrations.limit === -1\n        };\n      case 'forms':\n        return {\n          used: limitsData.limits.forms.used,\n          limit: limitsData.limits.forms.limit,\n          percentage: limitsData.limits.forms.limit === -1 ? 0 : \n                     Math.round((limitsData.limits.forms.used / limitsData.limits.forms.limit) * 100),\n          isUnlimited: limitsData.limits.forms.limit === -1\n        };\n      case 'conversations':\n        return {\n          used: limitsData.limits.conversations.used,\n          limit: limitsData.limits.conversations.limit,\n          percentage: Math.round((limitsData.limits.conversations.used / limitsData.limits.conversations.limit) * 100),\n          isUnlimited: false\n        };\n      default:\n        return null;\n    }\n  };\n\n  const progressData = getCurrentProgress();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-gradient-to-r from-yellow-400 to-orange-500\">\n              <Crown className=\"w-6 h-6 text-white\" />\n            </div>\n            <DialogTitle className=\"text-xl font-semibold\">\n              {t('upgrade.modal.title', 'You have reached your plan limit')}\n            </DialogTitle>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 pt-4\">\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">\n              {message}\n            </p>\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">\n              {description}\n            </p>\n          </div>\n\n          {/* Progreso visual de límites */}\n          {progressData && (\n            <div className=\"bg-gradient-to-r from-red-50 to-orange-50 dark:from-red-950/20 dark:to-orange-950/20 rounded-lg p-4 border border-red-200/50 dark:border-red-800/50\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <BarChart3 className=\"w-4 h-4 text-red-600 dark:text-red-400\" />\n                <span className=\"text-sm font-medium text-red-700 dark:text-red-300\">\n                  {t('upgrade.progress.title', 'Uso actual:')}\n                </span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-red-600 dark:text-red-400\">\n                    {progressData.isUnlimited \n                      ? t('upgrade.progress.unlimited', `${progressData.used} utilizados`)\n                      : t('upgrade.progress.usage', `${progressData.used} de ${progressData.limit} utilizados`)\n                    }\n                  </span>\n                  {!progressData.isUnlimited && (\n                    <span className=\"text-red-600 dark:text-red-400 font-medium\">\n                      {progressData.percentage}%\n                    </span>\n                  )}\n                </div>\n                \n                {!progressData.isUnlimited && (\n                  <Progress \n                    value={progressData.percentage} \n                    className=\"h-2 bg-red-100 dark:bg-red-900/30\"\n                  />\n                )}\n                \n                <p className=\"text-xs text-red-600 dark:text-red-400 mt-2\">\n                  {limitType === 'integrations' && t('upgrade.progress.integrations', 'Has alcanzado el límite máximo de integraciones')}\n                  {limitType === 'forms' && t('upgrade.progress.forms', 'Has alcanzado el límite máximo de formularios')}\n                  {limitType === 'conversations' && t('upgrade.progress.conversations', 'Has alcanzado el límite máximo de conversaciones')}\n                </p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 rounded-lg p-4 border border-blue-200/50 dark:border-blue-800/50\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Crown className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n              <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">\n                {t('upgrade.benefits.title', 'Beneficios de actualizar:')}\n              </span>\n            </div>\n            <ul className=\"text-xs text-blue-600 dark:text-blue-400 space-y-1\">\n              {benefits.map((benefit, index) => (\n                <li key={index}>• {benefit}</li>\n              ))}\n            </ul>\n          </div>\n\n          <div className=\"flex gap-3 pt-2\">\n            <Button\n              onClick={handleUpgrade}\n              className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n            >\n              {t('upgrade.button.primary', 'Ver planes')}\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"px-6\"\n            >\n              {t('upgrade.button.secondary', 'Más tarde')}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10534},"client/src/components/upgrade-popup.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Crown, Sparkles, Zap } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface UpgradePopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  feature: string;\n  currentPlan: string;\n  requiredPlan: string;\n  requiredPlanName: string;\n  upgradeMessage: string;\n}\n\nconst PLAN_ICONS = {\n  basic: Crown,\n  startup: Sparkles,\n  professional: Zap,\n  enterprise: Crown\n};\n\nconst PLAN_COLORS = {\n  basic: \"bg-blue-500\",\n  startup: \"bg-purple-500\", \n  professional: \"bg-green-500\",\n  enterprise: \"bg-orange-500\"\n};\n\nconst PLAN_FEATURES = {\n  basic: [\n    \"500 conversaciones/mes\",\n    \"1 formulario personalizable\",\n    \"Widget tipo burbuja únicamente\",\n    \"1 sitio web\",\n    \"Soporte por email\"\n  ],\n  startup: [\n    \"2,000 conversaciones/mes\",\n    \"5 formularios personalizables\",\n    \"Widget + modo pantalla completa\",\n    \"Hasta 3 sitios web\",\n    \"Soporte prioritario por email y chat\",\n    \"Análisis avanzados\"\n  ],\n  professional: [\n    \"10,000 conversaciones/mes\",\n    \"Formularios ilimitados\",\n    \"Sitios web ilimitados\",\n    \"Automatizaciones básicas\",\n    \"Integración con CRM\",\n    \"API de acceso\",\n    \"Gestión de equipos (5 usuarios)\",\n    \"Soporte telefónico\"\n  ],\n  enterprise: [\n    \"Conversaciones ilimitadas\",\n    \"Todo incluido\",\n    \"Automatizaciones con IA\",\n    \"Soporte 24/7 dedicado\",\n    \"Gerente de cuenta\",\n    \"SLA garantizado\",\n    \"API completa\"\n  ]\n};\n\nexport function UpgradePopup({\n  isOpen,\n  onClose,\n  feature,\n  currentPlan,\n  requiredPlan,\n  requiredPlanName,\n  upgradeMessage\n}: UpgradePopupProps) {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const PlanIcon = PLAN_ICONS[requiredPlan as keyof typeof PLAN_ICONS] || Crown;\n  const planColor = PLAN_COLORS[requiredPlan as keyof typeof PLAN_COLORS] || \"bg-blue-500\";\n  const features = PLAN_FEATURES[requiredPlan as keyof typeof PLAN_FEATURES] || [];\n\n  const handleUpgrade = async () => {\n    setIsLoading(true);\n    try {\n      // Redirigir a la página de pricing con el plan específico\n      navigate(`/pricing?plan=${requiredPlan}`);\n      onClose();\n    } catch (error) {\n      console.error('Error navigating to pricing:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className={`p-2 rounded-full ${planColor} text-white`}>\n              <PlanIcon className=\"h-5 w-5\" />\n            </div>\n            <div>\n              <DialogTitle className=\"text-xl\">Actualiza tu plan</DialogTitle>\n              <DialogDescription className=\"text-sm text-muted-foreground\">\n                Para acceder a esta funcionalidad\n              </DialogDescription>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Mensaje de la funcionalidad */}\n          <div className=\"p-4 bg-muted rounded-lg\">\n            <p className=\"text-sm font-medium text-foreground\">\n              {upgradeMessage}\n            </p>\n          </div>\n\n          {/* Información del plan requerido */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-medium\">Plan {requiredPlanName}</h3>\n              <Badge variant=\"secondary\" className={planColor + \" text-white\"}>\n                Requerido\n              </Badge>\n            </div>\n\n            {/* Lista de características del plan */}\n            <div className=\"space-y-2\">\n              {features.slice(0, 4).map((feature, index) => (\n                <div key={index} className=\"flex items-center gap-2 text-sm\">\n                  <Check className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                  <span className=\"text-muted-foreground\">{feature}</span>\n                </div>\n              ))}\n              {features.length > 4 && (\n                <div className=\"text-sm text-muted-foreground ml-6\">\n                  + {features.length - 4} características más\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Botones de acción */}\n          <div className=\"flex gap-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={handleUpgrade}\n              disabled={isLoading}\n              className={`flex-1 ${planColor} hover:opacity-90`}\n            >\n              {isLoading ? \"Cargando...\" : \"Ver planes\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Hook para usar el popup de upgrade\nexport function useUpgradePopup() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [popupData, setPopupData] = useState<Omit<UpgradePopupProps, 'isOpen' | 'onClose'> | null>(null);\n\n  const showUpgradePopup = (data: Omit<UpgradePopupProps, 'isOpen' | 'onClose'>) => {\n    setPopupData(data);\n    setIsOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsOpen(false);\n    setPopupData(null);\n  };\n\n  const UpgradePopupComponent = popupData ? (\n    <UpgradePopup\n      isOpen={isOpen}\n      onClose={closePopup}\n      {...popupData}\n    />\n  ) : null;\n\n  return {\n    showUpgradePopup,\n    UpgradePopupComponent\n  };\n}","size_bytes":5714},"client/src/context/auth-context-stub.tsx":{"content":"import React, { createContext, useContext, useState } from 'react';\n\n// Definimos la interfaz para el tipo de usuario\ninterface User {\n  id: number;\n  username: string;\n  email?: string;\n}\n\n// Definimos la interfaz para el contexto de autenticación\ninterface AuthContextType {\n  user: User | null;\n  signin: (username: string, password: string) => Promise<boolean>;\n  signout: () => void;\n  isLoading: boolean;\n  error: string | null;\n}\n\n// Creamos el contexto con un valor por defecto\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  signin: async () => false,\n  signout: () => {},\n  isLoading: false,\n  error: null\n});\n\n// Hook personalizado para usar el contexto de autenticación\nexport const useAuth = () => useContext(AuthContext);\n\n// Proveedor del contexto de autenticación\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>({ id: 1, username: 'admin' });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Función para iniciar sesión\n  const signin = async (username: string, password: string): Promise<boolean> => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Simulamos una operación de autenticación\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      if (username === 'admin' && password === 'password') {\n        setUser({ id: 1, username: 'admin' });\n        return true;\n      } else {\n        throw new Error('Credenciales inválidas');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error de autenticación');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Función para cerrar sesión\n  const signout = () => {\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    signin,\n    signout,\n    isLoading,\n    error\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":2021},"client/src/context/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  fullName?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshAuth: () => Promise<boolean>;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  login: async () => {},\n  logout: async () => {},\n  refreshAuth: async () => false,\n});\n\nexport const useAuth = () => useContext(AuthContext);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false); // Control para evitar peticiones simultáneas\n  const [lastRefreshed, setLastRefreshed] = useState(0); // Timestamp de la última actualización\n  const { toast } = useToast();\n  \n  // Verificar si el token ha expirado\n  const isTokenExpired = (token: string): boolean => {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      \n      const { exp } = JSON.parse(jsonPayload);\n      const expired = Date.now() >= exp * 1000;\n      \n      if (expired) {\n        console.log(\"Token expirado. Fecha de expiración:\", new Date(exp * 1000));\n      }\n      \n      return expired;\n    } catch (error) {\n      console.error(\"Error verificando expiración del token:\", error);\n      return true; // En caso de error, asumir que el token es inválido\n    }\n  };\n  \n  // Función para verificar y actualizar el estado de autenticación\n  const refreshAuth = async (): Promise<boolean> => {\n    try {\n      // Control para evitar múltiples peticiones simultáneas\n      if (isRefreshing) {\n        console.log(\"Ya hay una verificación en curso. Omitiendo...\");\n        return !!user; // Devolver el estado actual\n      }\n      \n      // Control para limitar la frecuencia de peticiones (mínimo 30 segundos entre peticiones)\n      const now = Date.now();\n      const timeSinceLastRefresh = now - lastRefreshed;\n      if (timeSinceLastRefresh < 30000 && lastRefreshed > 0) {\n        console.log(`Última verificación hace ${Math.round(timeSinceLastRefresh/1000)}s. Omitiendo...`);\n        return !!user; // Devolver el estado actual si verificamos hace menos de 30 segundos\n      }\n      \n      setIsRefreshing(true);\n      setIsLoading(true);\n      \n      console.log(\"Verificando estado de autenticación...\");\n      \n      // Verificar si hay un token en localStorage\n      const authToken = localStorage.getItem('auth_token');\n      \n      if (!authToken) {\n        console.log(\"No hay token almacenado.\");\n        setUser(null);\n        setLastRefreshed(now);\n        return false;\n      }\n      \n      // Verificar si el token ha expirado\n      if (isTokenExpired(authToken)) {\n        console.log(\"El token ha expirado. Cerrando sesión...\");\n        // Limpiar token expirado\n        localStorage.removeItem('auth_token');\n        setUser(null);\n        \n        // Mostrar mensaje amigable\n        toast({\n          title: \"Sesión expirada\",\n          description: \"Tu sesión ha expirado. Por favor, inicia sesión nuevamente.\",\n          variant: \"default\"\n        });\n        \n        setLastRefreshed(now);\n        return false;\n      }\n      \n      // Si el token es válido, intentar obtener datos del usuario\n      const headers: Record<string, string> = {\n        'Authorization': `Bearer ${authToken}`\n      };\n      \n      const baseUrl = import.meta.env.VITE_API_BASE_URL || '';\nconst response = await fetch(`${baseUrl}/api/auth/me`, {\n        credentials: \"include\",\n        cache: \"no-store\",\n        headers: headers\n      });\n      \n      console.log(\"Estado de la respuesta:\", response.status);\n      \n      if (response.ok) {\n        const userData = await response.json();\n        console.log(\"Usuario autenticado correctamente\");\n        setUser(userData);\n        setLastRefreshed(now);\n        return true;\n      } else {\n        console.log(\"Sesión inválida o expirada.\");\n        \n        // Si el error es de autenticación, limpiar el token\n        if (response.status === 401) {\n          localStorage.removeItem('auth_token');\n          toast({\n            title: \"Sesión finalizada\",\n            description: \"Tu sesión ha finalizado. Por favor, inicia sesión nuevamente.\",\n            variant: \"default\"\n          });\n        }\n        \n        setUser(null);\n        setLastRefreshed(now);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error verificando autenticación:\", error);\n      setUser(null);\n      return false;\n    } finally {\n      setIsLoading(false);\n      setIsRefreshing(false);\n    }\n  };\n  \n  // Verificar autenticación al cargar la aplicación\n  useEffect(() => {\n    refreshAuth();\n    \n    // REMOVED: Periodic session check to prevent 429 rate limiting\n    // Session is managed on-demand by components as needed\n    \n    return () => {}; // No cleanup needed\n  }, []);\n  \n  // Login function\n  const login = async (username: string, password: string) => {\n    // Actualizar el timestamp de última actualización al iniciar sesión\n    setLastRefreshed(Date.now());\n    try {\n      console.log(\"Intentando iniciar sesión para el usuario:\", username);\n      \n      // Usar apiRequest para el login\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n        username,\n        password,\n      });\n      \n      // Obtener los datos del usuario y el token\n      const userData = await response.json();\n      console.log(\"Usuario autenticado:\", userData);\n      \n      // Guardar el token en localStorage si viene en la respuesta\n      if (userData.token) {\n        localStorage.setItem('auth_token', userData.token);\n        console.log(\"Token guardado en localStorage:\", userData.token.substring(0, 20) + \"...\");\n        \n        // Eliminar el token del objeto de usuario para no guardarlo en el estado\n        const { token, ...userWithoutToken } = userData;\n        setUser(userWithoutToken);\n        \n        // Mostrar mensaje de bienvenida\n        toast({\n          title: \"Inicio de sesión exitoso\",\n          description: `Bienvenido, ${userData.username}`,\n        });\n      } else {\n        console.warn(\"No se recibió token en la respuesta de login\");\n        setUser(userData);\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      // Mostrar mensaje de error\n      toast({\n        title: \"Error de inicio de sesión\",\n        description: \"Credenciales incorrectas o servidor no disponible\",\n        variant: \"destructive\"\n      });\n      throw error;\n    }\n  };\n  \n  // Logout function\n  const logout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      // Eliminar el token del localStorage\n      localStorage.removeItem('auth_token');\n      setUser(null);\n      \n      toast({\n        title: \"Sesión cerrada\",\n        description: \"Has cerrado sesión correctamente\",\n      });\n      \n      // Redirigir al dashboard/login - usando window.location para la navegación\n      window.location.href = '/';\n    } catch (error) {\n      // Eliminar el token del localStorage incluso si hay error\n      localStorage.removeItem('auth_token');\n      console.error(\"Logout error:\", error);\n      setUser(null);\n      \n      // Redirigir al dashboard/login incluso en caso de error\n      window.location.href = '/';\n    }\n  };\n  \n  const value = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    logout,\n    refreshAuth,\n  };\n  \n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n","size_bytes":8206},"client/src/context/profile-context.tsx":{"content":"import { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\n\ninterface ProfileContextType {\n  avatarUrl: string | null;\n  companyLogoUrl: string | null;\n  updateAvatar: (url: string | null) => void;\n  updateCompanyLogo: (url: string | null) => void;\n}\n\nconst ProfileContext = createContext<ProfileContextType>({\n  avatarUrl: null,\n  companyLogoUrl: null,\n  updateAvatar: () => {},\n  updateCompanyLogo: () => {},\n});\n\nexport const useProfile = () => useContext(ProfileContext);\n\ninterface ProfileProviderProps {\n  children: ReactNode;\n}\n\nexport const ProfileProvider = ({ children }: ProfileProviderProps) => {\n  const [avatarUrl, setAvatarUrl] = useState<string | null>(() => {\n    // Inicializar desde localStorage si existe\n    const savedAvatar = localStorage.getItem('user_avatar');\n    return savedAvatar ? savedAvatar : null;\n  });\n  \n  const [companyLogoUrl, setCompanyLogoUrl] = useState<string | null>(() => {\n    // Inicializar desde localStorage si existe\n    const savedLogo = localStorage.getItem('company_logo');\n    return savedLogo ? savedLogo : null;\n  });\n\n  // Guardar en localStorage cuando cambian\n  useEffect(() => {\n    if (avatarUrl) {\n      localStorage.setItem('user_avatar', avatarUrl);\n    } else {\n      localStorage.removeItem('user_avatar');\n    }\n  }, [avatarUrl]);\n\n  useEffect(() => {\n    if (companyLogoUrl) {\n      localStorage.setItem('company_logo', companyLogoUrl);\n    } else {\n      localStorage.removeItem('company_logo');\n    }\n  }, [companyLogoUrl]);\n\n  const updateAvatar = (url: string | null) => {\n    setAvatarUrl(url);\n  };\n\n  const updateCompanyLogo = (url: string | null) => {\n    setCompanyLogoUrl(url);\n  };\n\n  const value = {\n    avatarUrl,\n    companyLogoUrl,\n    updateAvatar,\n    updateCompanyLogo,\n  };\n\n  return <ProfileContext.Provider value={value}>{children}</ProfileContext.Provider>;\n};","size_bytes":1873},"client/src/context/theme-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType>({\n  theme: \"light\",\n  setTheme: () => {},\n});\n\nexport const useTheme = () => useContext(ThemeContext);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider = ({ children }: ThemeProviderProps) => {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n  \n  // Initialize theme from local storage or system preference\n  useEffect(() => {\n    const storedTheme = localStorage.getItem(\"theme\") as Theme | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    \n    if (storedTheme) {\n      setTheme(storedTheme);\n    } else if (prefersDark) {\n      setTheme(\"dark\");\n    }\n  }, []);\n  \n  // Update localStorage and document class when theme changes\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n    \n    if (theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [theme]);\n  \n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n","size_bytes":1333},"client/src/hooks/use-feature-access.ts":{"content":"import { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface FeatureAccessResponse {\n  hasAccess: boolean;\n  currentPlan: string;\n  requiredPlan?: string;\n  requiredPlanName?: string;\n  upgradeMessage?: string;\n  feature: string;\n}\n\ninterface FeatureAccessRequest {\n  feature: string;\n}\n\n/**\n * Hook para verificar el acceso a una característica específica\n */\nexport function useFeatureAccess(feature: string) {\n  return useQuery({\n    queryKey: ['feature-access', feature],\n    queryFn: async () => {\n      const response = await apiRequest('POST', '/api/features/check-access', { feature });\n      return response.json() as Promise<FeatureAccessResponse>;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutos\n    enabled: !!feature\n  });\n}\n\n/**\n * Hook para verificar múltiples características\n */\nexport function useMultipleFeatureAccess(features: string[]) {\n  return useQuery({\n    queryKey: ['multiple-feature-access', features],\n    queryFn: async () => {\n      const results = await Promise.all(\n        features.map(async (feature) => {\n          try {\n            const response = await apiRequest('POST', '/api/features/check-access', { feature });\n            const result = await response.json();\n            return { feature, ...result };\n          } catch (error) {\n            console.error(`Error checking access for feature ${feature}:`, error);\n            return { \n              feature, \n              hasAccess: false, \n              currentPlan: 'basic',\n              error: true \n            };\n          }\n        })\n      );\n      \n      return results.reduce((acc, result) => {\n        acc[result.feature] = result;\n        return acc;\n      }, {} as Record<string, FeatureAccessResponse & { error?: boolean }>);\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutos\n    enabled: features.length > 0\n  });\n}\n\n/**\n * Mutation para verificar acceso a características bajo demanda\n */\nexport function useCheckFeatureAccess() {\n  return useMutation({\n    mutationFn: async (request: FeatureAccessRequest) => {\n      const response = await apiRequest('POST', '/api/features/check-access', request);\n      return response.json() as Promise<FeatureAccessResponse>;\n    }\n  });\n}\n\n/**\n * Hook que combina la verificación de acceso con funciones helper\n */\nexport function useFeatureCheck(feature: string) {\n  const { data, isLoading, error } = useFeatureAccess(feature);\n  \n  const hasAccess = data?.hasAccess ?? false;\n  const needsUpgrade = !hasAccess && !isLoading && !error;\n  \n  return {\n    hasAccess,\n    needsUpgrade,\n    currentPlan: data?.currentPlan,\n    requiredPlan: data?.requiredPlan,\n    requiredPlanName: data?.requiredPlanName,\n    upgradeMessage: data?.upgradeMessage,\n    featureName: data?.feature,\n    isLoading,\n    error\n  };\n}","size_bytes":2833},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-upgrade-modal.ts":{"content":"import { useState, useCallback } from 'react';\n\ninterface UpgradeModalState {\n  isOpen: boolean;\n  limitType: 'integrations' | 'forms' | 'conversations' | 'general';\n  currentLimit?: number;\n  planName?: string;\n}\n\nexport function useUpgradeModal() {\n  const [modalState, setModalState] = useState<UpgradeModalState>({\n    isOpen: false,\n    limitType: 'general'\n  });\n\n  const showUpgradeModal = useCallback((\n    limitType: UpgradeModalState['limitType'],\n    currentLimit?: number,\n    planName?: string\n  ) => {\n    setModalState({\n      isOpen: true,\n      limitType,\n      currentLimit,\n      planName\n    });\n  }, []);\n\n  const hideUpgradeModal = useCallback(() => {\n    setModalState(prev => ({ ...prev, isOpen: false }));\n  }, []);\n\n  // Helper function to parse 403 error messages and show appropriate modal\n  const handlePlanLimitError = useCallback((errorMessage: string) => {\n    console.log('Processing plan limit error:', errorMessage);\n    \n    // Extract plan information from error message - first try to get full plan name\n    let planName = 'Plan Básico'; // default\n    \n    // Try different patterns to extract the plan name\n    const fullPlanMatch = errorMessage.match(/Tu (Plan [\\wáéíóú\\s]+) ha alcanzado/i);\n    if (fullPlanMatch) {\n      planName = fullPlanMatch[1].trim();\n    } else {\n      // Try to extract just the plan type and convert to full name\n      const planTypeMatch = errorMessage.match(/Tu Plan\\s+([\\wáéíóú]+)/i);\n      if (planTypeMatch) {\n        const planType = planTypeMatch[1];\n        switch (planType.toLowerCase()) {\n          case 'básico':\n            planName = 'Plan Básico';\n            break;\n          case 'startup':\n            planName = 'Plan Startup';\n            break;\n          case 'profesional':\n            planName = 'Plan Profesional';\n            break;\n          case 'empresarial':\n            planName = 'Plan Empresarial';\n            break;\n          default:\n            planName = `Plan ${planType}`;\n        }\n      }\n    }\n    \n    console.log('Extracted plan name:', planName, 'from message:', errorMessage);\n\n    // More specific patterns for different types of limits\n    if (errorMessage.includes('integración') || errorMessage.includes('integrations')) {\n      // Pattern: \"Tu Plan Básico ha alcanzado el límite de 1 integración\"\n      const limitMatch = errorMessage.match(/límite de (\\d+) integración/i) || \n                         errorMessage.match(/máximo de (\\d+) integración/i) ||\n                         errorMessage.match(/(\\d+) integración/i);\n      const currentLimit = limitMatch ? parseInt(limitMatch[1]) : 1;\n      console.log('Detected integration limit:', currentLimit, 'for plan:', planName);\n      showUpgradeModal('integrations', currentLimit, planName);\n    } else if (errorMessage.includes('formulario') || errorMessage.includes('forms')) {\n      // Pattern: \"Tu Plan Básico ha alcanzado el límite de 3 formularios\"\n      const limitMatch = errorMessage.match(/límite de (\\d+) formulario/i) || \n                         errorMessage.match(/máximo de (\\d+) formulario/i) ||\n                         errorMessage.match(/(\\d+) formulario/i);\n      const currentLimit = limitMatch ? parseInt(limitMatch[1]) : 1;\n      console.log('Detected form limit:', currentLimit, 'for plan:', planName);\n      showUpgradeModal('forms', currentLimit, planName);\n    } else if (errorMessage.includes('conversación') || errorMessage.includes('conversations')) {\n      // Pattern: \"Tu Plan Básico ha alcanzado el límite de 20 conversaciones por mes\"\n      const limitMatch = errorMessage.match(/límite de (\\d+) conversación/i) || \n                         errorMessage.match(/máximo de (\\d+) conversación/i) ||\n                         errorMessage.match(/(\\d+) conversación/i);\n      const currentLimit = limitMatch ? parseInt(limitMatch[1]) : 20;\n      console.log('Detected conversation limit:', currentLimit, 'for plan:', planName);\n      showUpgradeModal('conversations', currentLimit, planName);\n    } else {\n      console.log('Generic plan limit detected for plan:', planName);\n      showUpgradeModal('general', undefined, planName);\n    }\n  }, [showUpgradeModal]);\n\n  return {\n    ...modalState,\n    showUpgradeModal,\n    hideUpgradeModal,\n    handlePlanLimitError\n  };\n}","size_bytes":4302},"client/src/hooks/useWelcomeMessages.ts":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useTranslation } from 'react-i18next';\n\ninterface PromotionalMessage {\n  message_text: string;\n  message_type: string;\n  display_order: number;\n}\n\nexport function useWelcomeMessages() {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [currentMessage, setCurrentMessage] = useState<string>('');\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { i18n } = useTranslation();\n\n  // Cargar mensajes promocionales desde la API con idioma actual\n  const { data: promotionalMessages, isLoading, error } = useQuery({\n    queryKey: ['/api/marketing/promotional-messages', i18n.language],\n    queryFn: async () => {\n      const response = await fetch(`/api/marketing/promotional-messages?lang=${i18n.language}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch promotional messages');\n      }\n      return response.json();\n    },\n    staleTime: 1000 * 60 * 2, // 2 minutos\n    gcTime: 1000 * 60 * 5, // 5 minutos (reemplaza cacheTime en v5)\n    retry: 2,\n    refetchOnWindowFocus: false\n  });\n\n  // Mensaje de fallback según el idioma - Mensajes más largos y atractivos\n  const getFallbackMessage = (language: string) => {\n    switch (language) {\n      case 'fr':\n        return \"Transformez votre site web en une machine de génération de leads 24/7 avec l'IA conversationnelle AIPPS qui comprend, engage et convertit vos visiteurs automatiquement\";\n      case 'en':\n        return \"Transform your website into a 24/7 lead generation machine with AIPPS conversational AI that understands, engages, and converts your visitors automatically\";\n      default:\n        return \"Transforma tu sitio web en una máquina de generación de leads 24/7 con la IA conversacional de AIPPS que entiende, involucra y convierte a tus visitantes automáticamente\";\n    }\n  };\n\n  const fallbackMessage = getFallbackMessage(i18n.language);\n\n  // Limpiar intervalo anterior\n  const clearCurrentInterval = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  // Configurar rotación cuando hay mensajes disponibles\n  useEffect(() => {\n    clearCurrentInterval();\n\n    if (!promotionalMessages || promotionalMessages.length === 0 || isLoading) {\n      setCurrentMessage(fallbackMessage);\n      setCurrentIndex(0);\n      return;\n    }\n\n    // Ordenar mensajes por display_order\n    const sortedMessages = [...promotionalMessages].sort((a, b) => a.display_order - b.display_order);\n    \n    // Configurar mensaje inicial\n    setCurrentMessage(sortedMessages[0]?.message_text || fallbackMessage);\n    setCurrentIndex(0);\n\n    // Solo rotar si hay más de un mensaje\n    if (sortedMessages.length <= 1) {\n      return;\n    }\n\n    // Configurar intervalo de rotación cada 10 segundos\n    intervalRef.current = setInterval(() => {\n      setCurrentIndex((prevIndex) => {\n        const nextIndex = (prevIndex + 1) % sortedMessages.length;\n        const nextMessage = sortedMessages[nextIndex]?.message_text || fallbackMessage;\n        \n        setCurrentMessage(nextMessage);\n        return nextIndex;\n      });\n    }, 10000);\n\n    return clearCurrentInterval;\n  }, [promotionalMessages, isLoading, fallbackMessage]);\n\n  // Actualizar mensaje cuando cambia el idioma\n  useEffect(() => {\n    if (!promotionalMessages || promotionalMessages.length === 0) {\n      setCurrentMessage(fallbackMessage);\n    } else {\n      const sortedMessages = [...promotionalMessages].sort((a, b) => a.display_order - b.display_order);\n      setCurrentMessage(sortedMessages[currentIndex]?.message_text || fallbackMessage);\n    }\n  }, [i18n.language, fallbackMessage, promotionalMessages, currentIndex]);\n\n  // Limpiar al desmontar\n  useEffect(() => {\n    return clearCurrentInterval;\n  }, []);\n\n  return {\n    currentMessage,\n    messages: promotionalMessages,\n    isLoading,\n    error,\n    currentIndex,\n    totalMessages: promotionalMessages?.length || 0\n  };\n}","size_bytes":4046},"client/src/i18n/i18n.ts":{"content":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n\nconst resources = {\n  fr: {\n    translation: {\n      // Navegación básica\n      documentation: \"Documentation\",\n      pricing: \"Tarification\", \n      get_started: \"Commencer\",\n      visitor: \"Visiteur\",\n      anonymous: \"Anonyme\",\n      visitors_helped: \"Visiteurs aidés\",\n      \n      // Tiempo\n      weeks_ago_plural: \"il y a {{count}} semaines\",\n      weeks_ago: \"il y a {{count}} semaine\", \n      months_ago_plural: \"il y a {{count}} mois\",\n      months_ago: \"il y a {{count}} mois\",\n      days_ago_plural: \"il y a {{count}} jours\",\n      days_ago: \"il y a {{count}} jour\",\n      hours_ago_plural: \"il y a {{count}} heures\", \n      hours_ago: \"il y a {{count}} heure\",\n      minutes_ago_plural: \"il y a {{count}} minutes\",\n      minutes_ago: \"il y a {{count}} minute\",\n      just_now: \"À l'instant\",\n      \n      // Dashboard básico\n      dashboard: \"Tableau de bord\",\n      conversations: \"Conversations\",\n      integrations: \"Intégrations\",\n      analytics: \"Analytiques\",\n      settings: \"Paramètres\",\n      logout: \"Déconnexion\",\n      login: \"Connexion\",\n      signup: \"S'inscrire\",\n      forms: \"Formulaires\",\n      automation: \"Automatisation\",\n      profile: \"Profil\",\n      \n      // Configuración del asistente AI\n      ai_assistant_settings: \"Paramètres de l'Assistant IA\",\n      assistant_name: \"Nom de l'Assistant\",\n      default_greeting: \"Salutation par Défaut\",\n      conversation_style: \"Style de Conversation\",\n      chat_font: \"Police de Chat\",\n      user_message_color: \"Couleur des Messages Utilisateur\",\n      show_availability: \"Afficher la Disponibilité\",\n      assistant_message_color: \"Couleur des Messages Assistant\",\n      welcome_chat: \"Chat de Bienvenue\",\n      status: \"Statut\",\n      enabled: \"Activé\",\n      disabled: \"Désactivé\",\n      welcome_message: \"Message de Bienvenue\",\n      bubble_color: \"Couleur de Bulle\",\n      text_color: \"Couleur de Texte\",\n      edit_settings: \"Modifier les Paramètres\",\n      no_settings_found: \"Aucun paramètre trouvé\",\n      no_settings_description: \"Configurez votre assistant IA pour commencer\",\n      configure_settings: \"Configurer les Paramètres\",\n      appearance: \"Apparence\",\n      professional: \"Professionnel\",\n      yes: \"Oui\",\n      no: \"Non\",\n      system_default: \"Défaut du système\",\n      settings_description: \"Configurez les paramètres de votre assistant AIPI\",\n      \n      // Forms\n      forms_description: \"Créez et gérez vos formulaires\",\n      refresh: \"Actualiser\",\n      create_form: \"Créer un Formulaire\",\n      no_description: \"Aucune description\",\n      responses: \"Réponses\",\n      delete: \"Supprimer\",\n      confirm_delete: \"Confirmer la Suppression\",\n      delete_form_confirmation: \"Êtes-vous sûr de vouloir supprimer ce formulaire ? Cette action ne peut pas être annulée et supprimera également toutes les réponses.\",\n      cancel: \"Annuler\",\n      deleting: \"Suppression...\",\n      no_forms: \"Aucun formulaire pour le moment\",\n      forms_empty_message: \"Créez un nouveau formulaire pour collecter des informations de vos visiteurs\",\n      \n      // Automation\n      task_automation_description: \"Configurez des tâches automatisées et des flux de travail alimentés par l'IA\",\n      create_automation: \"Créer une Automatisation\",\n      view_logs: \"Voir les Journaux\",\n      no_automations: \"Aucune automatisation pour le moment\",\n      automations_empty_message: \"Créez votre première automatisation pour simplifier les tâches répétitives avec l'IA\",\n      \n      // Form template descriptions\n      \"form_template_waitlist\": \"Modèle pour capturer des utilisateurs en liste d'attente\",\n      \"form_template_survey\": \"Veuillez compléter les informations demandées pour commencer\",\n      \"form_template_standard\": \"Formulaire standard pour collecter des informations\",\n      \n      // Form Editor\n      \"formEditor.integrate\": \"Intégrer\",\n      \"formEditor.save_changes\": \"Enregistrer les modifications\",\n      \"formEditor.content\": \"Contenu\",\n      \"formEditor.appearance\": \"Apparence\",\n      \"formEditor.settings\": \"Paramètres\",\n      \"formEditor.basic_info\": \"Informations de base\",\n      \"formEditor.basic_info_desc\": \"Configurez les informations de base de votre formulaire\",\n      \"formEditor.form_title\": \"Titre du formulaire\",\n      \"formEditor.unique_id\": \"ID unique\",\n      \"formEditor.description\": \"Description\",\n      \"formEditor.form_draft\": \"Brouillon de formulaire\",\n      \"formEditor.form_type\": \"Type de formulaire\",\n      \"formEditor.form_types.waitlist\": \"Liste d'attente\",\n      \"formEditor.form_fields\": \"Champs du formulaire\",\n      \"formEditor.form_fields_desc\": \"Ajoutez et configurez les champs de votre formulaire\",\n      \"formEditor.field_types.text\": \"Texte\",\n      \"formEditor.field_types.email\": \"Email\",\n      \"formEditor.field_types.select\": \"Sélection\",\n      \"formEditor.edit\": \"Modifier\",\n      \"formEditor.delete\": \"Supprimer\",\n      \"formEditor.placeholder\": \"Placeholder\",\n      \"formEditor.required\": \"Requis\",\n      \"formEditor.options\": \"Options\",\n      \"formEditor.add_field\": \"Ajouter un champ\",\n      \"formEditor.visual_style\": \"Style visuel\",\n      \"formEditor.visual_style_desc\": \"Personnalisez l'apparence de votre formulaire\",\n      \"formEditor.theme\": \"Thème\",\n      \"formEditor.themes.light\": \"Clair\",\n      \"formEditor.themes.dark\": \"Sombre\",\n      \"formEditor.themes.auto\": \"Automatique\",\n      \"formEditor.primary_color\": \"Couleur principale\",\n      \"formEditor.typography\": \"Typographie\",\n      \"formEditor.border_radius\": \"Rayon des bordures\",\n      \"formEditor.radius.none\": \"Aucun\",\n      \"formEditor.radius.medium\": \"Moyen\",\n      \"formEditor.radius.large\": \"Grand\",\n      \"formEditor.configuration\": \"Configuration\",\n      \"formEditor.advanced_settings\": \"Paramètres avancés\",\n      \"formEditor.success_message\": \"Message de succès\",\n\n      // Common\n      \"common.yes\": \"Oui\",\n      \"common.no\": \"Non\",\n\n      // Estados\n      active: \"Actif\",\n      inactive: \"Inactif\",\n      testing: \"Test\",\n      resolved: \"Résolu\",\n      loading: \"Chargement...\",\n      back: \"Retour\",\n      edit_integration: \"Modifier l'intégration\",\n      view_analytics: \"Voir les analytiques\",\n      new: \"Nouveau\",\n      messages: \"messages\",\n      edit: \"Modifier\",\n      last_modified: \"Dernière modification\",\n      processed: \"Traité\",\n      item: \"élément\",\n      items: \"éléments\",\n      \n      // Conversaciones\n      conversations_for: \"Conversations pour\",\n      view_all_conversations_for_integration: \"Voir toutes les conversations pour cette intégration\",\n      search_conversations: \"Rechercher des conversations\",\n      \n      // Analytics\n      analytics_description: \"Analyse détaillée des performances et métriques\",\n      integration_performance: \"Performance d'intégration\",\n      advanced_analysis: \"Analyse avancée\",\n      advanced_metrics: \"Métriques avancées\",\n      avg_messages: \"Messages moyens\",\n      messages_per_conversation: \"Messages par conversation\",\n      total_conversations: \"Total des conversations\",\n      resolution_rate: \"Taux de résolution\",\n      avg_response_time: \"Temps de réponse moyen\",\n      \n      // PDF Report\n      pdf_report_title: \"Rapport d'Analytics AIPI\",\n      pdf_generated: \"Généré le\",\n      pdf_summary: \"Résumé des Statistiques\",\n      pdf_metric: \"Métrique\",\n      pdf_value: \"Valeur\",\n      pdf_products_demanded: \"Produits les Plus Demandés\",\n      pdf_products_description: \"Analyse des produits mentionnés dans les conversations\",\n      pdf_products_description2: \"Identifie les intérêts des clients et opportunités\",\n      pdf_product: \"Produit\",\n      pdf_mentions: \"Mentions\",\n      pdf_no_products_data: \"Aucune donnée de produits disponible\",\n      pdf_topics_discussed: \"Sujets les Plus Discutés\",\n      pdf_topics_description: \"Analyse du sentiment des conversations\",\n      pdf_topics_description2: \"Comprend les préoccupations et satisfaction client\",\n      pdf_topic: \"Sujet\",\n      pdf_sentiment: \"Sentiment\",\n      pdf_no_topics_data: \"Aucune donnée de sujets disponible\",\n      pdf_conversation_trend: \"Tendance des Conversations\",\n      pdf_trend_description: \"Évolution du volume des conversations dans le temps\",\n      \n      // Analytics Charts\n      products_services_most_demanded: \"Produits/Services les Plus Demandés\",\n      products_analysis_description: \"Analyse des produits mentionnés\",\n      what_does_it_mean_products_bars_explanation: \"Que signifient les barres de produits ?\",\n      topics_and_sentiment: \"Sujets et Sentiment\",\n      topics_analysis_description: \"Analyse des sujets et sentiments\",\n      what_does_it_mean_topics_bars_explanation: \"Que signifient les barres de sujets ?\",\n      conversation_trend: \"Tendance des Conversations\",\n      conversation_trend_description: \"Tendance des conversations dans le temps\",\n      what_does_it_mean_conversation_trend_explanation: \"Que signifie la tendance des conversations ?\",\n      keywords: \"Mots-clés\",\n      keywords_description: \"Description des mots-clés\",\n      what_does_it_mean_keywords_explanation: \"Que signifient les mots-clés ?\",\n      \n      // Additional Analytics Terms\n      avg_duration: \"Durée moyenne\",\n      time_per_conversation: \"Temps par conversation\",\n      peak_hours: \"Heures de pointe\",\n      highest_activity: \"Activité la plus élevée\",\n      devices: \"Appareils\",\n      mobile_desktop: \"Mobile/Bureau\",\n      export_pdf: \"Exporter PDF\",\n      back_to_dashboard: \"Retour au tableau de bord\",\n      \n      // Dashboard and Navigation\n      dashboard_title: \"Titre du tableau de bord\",\n      manage_assistant: \"Gérer l'assistant\",\n      task_automation: \"Automatisation des tâches\",\n      \n      // Language Selector\n      language: {\n        select: \"Sélectionner la langue\",\n        fr: \"Français\",\n        es: \"Español\", \n        en: \"English\"\n      },\n      \n      // Home Page\n      \"welcome\": \"Bienvenue à AIPPS\",\n      \"getStarted\": \"Commencer\",\n      \"learnMore\": \"En savoir plus\",\n      \"home.description\": \"Transformez votre site web avec l'IA conversationnelle la plus avancée. Créez des expériences interactives qui engagent vos visiteurs et convertissent plus efficacement.\",\n      \"home.stats.websites\": \"1000+\",\n      \"home.stats.websitesLabel\": \"Sites web actifs\",\n      \"home.stats.conversations\": \"50k+\", \n      \"home.stats.conversationsLabel\": \"Conversations mensuelles\",\n      \"home.stats.languages\": \"25+\",\n      \"home.stats.languagesLabel\": \"Langues supportées\",\n      \n      // Features Page\n      \"features.title\": \"Fonctionnalités\",\n      \"features.subtitle\": \"Découvrez nos fonctionnalités\",\n      \"features.detailedDescription\": \"AIPPS offre une suite complète d'outils d'IA conversationnelle conçus pour transformer la façon dont vos visiteurs interagissent avec votre site web. De l'automatisation simple aux intégrations complexes, nous avons tout ce qu'il vous faut.\",\n      \"features.advanced.title\": \"Fonctionnalités avancées\",\n      \"features.advanced.multilingual.title\": \"Support multilingue complet\",\n      \"features.advanced.multilingual.description\": \"Communiquez avec vos visiteurs dans leur langue préférée grâce à notre système de traduction automatique avancé.\",\n      \"features.advanced.multilingual.feature1\": \"Traduction automatique en temps réel\",\n      \"features.advanced.multilingual.feature2\": \"Détection automatique de la langue\",\n      \"features.advanced.multilingual.feature3\": \"Plus de 25 langues supportées\",\n      \"features.advanced.security.title\": \"Sécurité et confidentialité\",\n      \"features.advanced.security.description\": \"Vos données et celles de vos utilisateurs sont protégées par les plus hauts standards de sécurité.\",\n      \"features.advanced.security.feature1\": \"Chiffrement de bout en bout\",\n      \"features.advanced.security.feature2\": \"Conformité RGPD et CCPA\",\n      \"features.advanced.security.feature3\": \"Authentification JWT sécurisée\",\n      \"features.advanced.customization.title\": \"Personnalisation complète\",\n      \"features.advanced.customization.description\": \"Adaptez parfaitement l'assistant à votre marque et vos besoins spécifiques.\",\n      \"features.advanced.customization.feature1\": \"Interface personnalisable\",\n      \"features.advanced.customization.feature2\": \"Flux de conversation sur mesure\",\n      \"features.advanced.customization.feature3\": \"Intégration API flexible\",\n      \"features.conversationalAI.title\": \"IA Conversationnelle\",\n      \"features.conversationalAI.description\": \"Assistant IA intelligent pour des conversations naturelles\",\n      \"features.taskAutomation.title\": \"Automatisation des Tâches\",\n      \"features.taskAutomation.description\": \"Automatisez vos processus répétitifs\",\n      \"features.easyIntegration.title\": \"Intégration Facile\",\n      \"features.easyIntegration.description\": \"Intégrez facilement avec vos systèmes existants\",\n      \"features.analytics.title\": \"Analyses\",\n      \"features.analytics.description\": \"Analyses détaillées et rapports\",\n      \"cta.title\": \"Prêt à commencer?\",\n      \"cta.subtitle\": \"Rejoignez des milliers d'entreprises qui font confiance à AIPI\",\n      \"cta.getStartedFree\": \"Commencer gratuitement\",\n      \"cta.scheduleDemo\": \"Programmer une démo\",\n      \n      // Terms of Service\n      \"terms.title\": \"Conditions d'utilisation\",\n      \"terms.subtitle\": \"Veuillez lire attentivement ces conditions\",\n      \"terms.acceptance.title\": \"Acceptation des conditions\",\n      \"terms.acceptance.description\": \"En utilisant nos services, vous acceptez ces conditions.\",\n      \"terms.services.title\": \"Description des services\",\n      \"terms.services.description\": \"Nos services incluent :\",\n      \"terms.services.item1\": \"Assistant IA conversationnel\",\n      \"terms.services.item2\": \"Intégration de widgets chat\",\n      \"terms.services.item3\": \"Analyses et rapports\",\n      \"terms.services.item4\": \"Support technique\",\n      \"terms.user_obligations.title\": \"Obligations de l'utilisateur\",\n      \"terms.user_obligations.description\": \"Vous vous engagez à :\",\n      \"terms.user_obligations.item1\": \"Utiliser les services légalement\",\n      \"terms.user_obligations.item2\": \"Respecter les droits d'autrui\",\n      \"terms.user_obligations.item3\": \"Fournir des informations exactes\",\n      \"terms.user_obligations.item4\": \"Maintenir la sécurité de votre compte\",\n      \"terms.payment.title\": \"Paiement et facturation\",\n      \"terms.payment.description\": \"Conditions de paiement :\",\n      \"terms.payment.item1\": \"Les paiements sont traités mensuellement\",\n      \"terms.payment.item2\": \"Tous les prix sont en CAD\",\n      \"terms.payment.item3\": \"Remboursements selon notre politique\",\n      \"terms.payment.item4\": \"Frais de retard applicables\",\n      \"terms.intellectual_property.title\": \"Propriété intellectuelle\",\n      \"terms.intellectual_property.description\": \"Droits et licences :\",\n      \"terms.intellectual_property.item1\": \"Nous conservons tous les droits sur notre technologie\",\n      \"terms.intellectual_property.item2\": \"Vous conservez les droits sur votre contenu\",\n      \"terms.intellectual_property.item3\": \"Licence d'utilisation limitée accordée\",\n      \"terms.limitation.title\": \"Limitation de responsabilité\",\n      \"terms.limitation.description\": \"Notre responsabilité est limitée selon la loi applicable.\",\n      \"terms.termination.title\": \"Résiliation\",\n      \"terms.termination.description\": \"Conditions de résiliation :\",\n      \"terms.termination.item1\": \"Vous pouvez annuler à tout moment\",\n      \"terms.termination.item2\": \"Nous pouvons suspendre pour violation\",\n      \"terms.termination.item3\": \"Les données sont supprimées après résiliation\",\n      \"terms.contact.title\": \"Contact\",\n      \"terms.contact.description\": \"Pour toute question légale :\",\n      \"terms.contact.address\": \"Montréal, QC, Canada\",\n      \"terms.last_updated\": \"janvier 2025\",\n      \n      // Help Center\n      \"help.title\": \"Centre d'aide\",\n      \"help.subtitle\": \"Trouvez des réponses à vos questions\",\n      \"help.search_placeholder\": \"Rechercher dans l'aide...\",\n      \"help.popular.title\": \"Articles populaires\",\n      \"help.popular.article1\": \"Comment commencer avec AIPPS\",\n      \"help.popular.badge\": \"Populaire\",\n      \"help.popular.article2\": \"Intégrer le widget chat\",\n      \"help.popular.article3\": \"Configurer votre assistant IA\",\n      \"help.popular.article4\": \"Comprendre votre facturation\",\n      \"help.popular.article5\": \"Résoudre les problèmes de connexion\",\n      \"help.categories.title\": \"Catégories d'aide\",\n      \"help.categories.getting_started.title\": \"Premiers pas\",\n      \"help.categories.getting_started.description\": \"Guide pour débuter avec AIPPS\",\n      \"help.categories.getting_started.article1\": \"Créer votre compte\",\n      \"help.categories.getting_started.article2\": \"Premier widget chat\",\n      \"help.categories.getting_started.article3\": \"Configuration de base\",\n      \"help.categories.getting_started.article4\": \"Première conversation\",\n      \"help.categories.configuration.title\": \"Configuration\",\n      \"help.categories.configuration.description\": \"Personnaliser votre expérience\",\n      \"help.categories.configuration.article1\": \"Paramètres du widget\",\n      \"help.categories.configuration.article2\": \"Personnaliser l'assistant\",\n      \"help.categories.configuration.article3\": \"Gérer les intégrations\",\n      \"help.categories.configuration.article4\": \"Options avancées\",\n      \"help.categories.integration.title\": \"Intégration\",\n      \"help.categories.integration.description\": \"Connecter AIPPS à vos outils\",\n      \"help.categories.integration.article1\": \"API et webhooks\",\n      \"help.categories.integration.article2\": \"Intégration WordPress\",\n      \"help.categories.integration.article3\": \"Code d'intégration\",\n      \"help.categories.integration.article4\": \"Tests d'intégration\",\n      \"help.categories.billing.title\": \"Facturation\",\n      \"help.categories.billing.description\": \"Gérer votre abonnement\",\n      \"help.categories.billing.article1\": \"Plans et prix\",\n      \"help.categories.billing.article2\": \"Changer votre plan\",\n      \"help.categories.billing.article3\": \"Historique des paiements\",\n      \"help.categories.billing.article4\": \"Politique de remboursement\",\n      \"help.categories.troubleshooting.title\": \"Dépannage\",\n      \"help.categories.troubleshooting.description\": \"Résoudre les problèmes\",\n      \"help.categories.troubleshooting.article1\": \"Widget ne s'affiche pas\",\n      \"help.categories.troubleshooting.article2\": \"Problèmes de connexion\",\n      \"help.categories.troubleshooting.article3\": \"Messages non envoyés\",\n      \"help.categories.troubleshooting.article4\": \"Erreurs courantes\",\n      \"help.categories.account.title\": \"Compte\",\n      \"help.categories.account.description\": \"Gérer votre compte\",\n      \"help.categories.account.article1\": \"Modifier le profil\",\n      \"help.categories.account.article2\": \"Sécurité du compte\",\n      \"help.categories.account.article3\": \"Notifications\",\n      \"help.categories.account.article4\": \"Supprimer le compte\",\n      \"help.contact_support.title\": \"Contacter le support\",\n      \"help.contact_support.description\": \"Besoin d'aide supplémentaire ?\",\n      \"help.contact_support.contact_button\": \"Contacter le support\",\n      \"help.contact_support.email_button\": \"Envoyer un email\",\n      \n      // Privacy Policy\n      \"privacy.title\": \"Politique de confidentialité\",\n      \"privacy.subtitle\": \"Comment nous protégeons vos données\",\n      \"privacy.data_collection.title\": \"Collecte de données\",\n      \"privacy.data_collection.description\": \"Nous collectons les informations suivantes :\",\n      \"privacy.data_collection.item1\": \"Informations de contact et de compte\",\n      \"privacy.data_collection.item2\": \"Données d'utilisation et d'analyse\",\n      \"privacy.data_collection.item3\": \"Conversations et interactions\",\n      \"privacy.data_collection.item4\": \"Informations techniques et de session\",\n      \"privacy.data_usage.title\": \"Utilisation des données\",\n      \"privacy.data_usage.description\": \"Vos données sont utilisées pour :\",\n      \"privacy.data_usage.item1\": \"Fournir et améliorer nos services\",\n      \"privacy.data_usage.item2\": \"Personnaliser votre expérience\",\n      \"privacy.data_usage.item3\": \"Support client et technique\",\n      \"privacy.data_usage.item4\": \"Analyses et recherche\",\n      \"privacy.data_sharing.title\": \"Partage des données\",\n      \"privacy.data_sharing.description\": \"Nous partageons vos données uniquement :\",\n      \"privacy.data_sharing.item1\": \"Avec votre consentement explicite\",\n      \"privacy.data_sharing.item2\": \"Pour se conformer aux obligations légales\",\n      \"privacy.data_sharing.item3\": \"Avec des partenaires de confiance sous contrat\",\n      \"privacy.security.title\": \"Sécurité\",\n      \"privacy.security.description\": \"Nos mesures de sécurité incluent :\",\n      \"privacy.security.item1\": \"Chiffrement des données en transit et au repos\",\n      \"privacy.security.item2\": \"Authentification à deux facteurs\",\n      \"privacy.security.item3\": \"Audits de sécurité réguliers\",\n      \"privacy.security.item4\": \"Contrôles d'accès stricts\",\n      \"privacy.user_rights.title\": \"Vos droits\",\n      \"privacy.user_rights.description\": \"Vous avez le droit de :\",\n      \"privacy.user_rights.item1\": \"Accéder à vos données personnelles\",\n      \"privacy.user_rights.item2\": \"Corriger des informations inexactes\",\n      \"privacy.user_rights.item3\": \"Supprimer vos données\",\n      \"privacy.user_rights.item4\": \"Transférer vos données\",\n      \"privacy.contact.title\": \"Contact\",\n      \"privacy.contact.description\": \"Pour toute question sur la confidentialité :\",\n      \"privacy.contact.address\": \"Montréal, QC, Canada\",\n      \"privacy.last_updated\": \"janvier 2025\",\n      \n      // About Page\n      \"about.title\": \"À propos\",\n      \"about.subtitle\": \"Notre mission et vision\",\n      \"about.mission.title\": \"Notre Mission\",\n      \"about.mission.description\": \"Démocratiser l'intelligence artificielle pour toutes les entreprises.\",\n      \"about.vision.title\": \"Notre Vision\",\n      \"about.vision.description\": \"Un monde où chaque entreprise peut offrir des expériences client exceptionnelles grâce à l'IA.\",\n      \"about.global.title\": \"Portée Mondiale\",\n      \"about.global.description\": \"Nous servons des clients dans le monde entier avec des solutions multilingues.\",\n      \"about.innovation.title\": \"Innovation\",\n      \"about.innovation.description\": \"À la pointe de la technologie IA conversationnelle.\",\n      \"about.story.title\": \"Notre Histoire\",\n      \"about.story.paragraph1\": \"AIPPS a été fondée avec la vision de rendre l'intelligence artificielle accessible à toutes les entreprises.\",\n      \"about.story.paragraph2\": \"Nous croyons que chaque entreprise, quelle que soit sa taille, devrait pouvoir offrir des expériences client exceptionnelles.\",\n      \"about.story.paragraph3\": \"Aujourd'hui, nous continuons d'innover pour façonner l'avenir de l'interaction client.\",\n      \n      // Pricing Page\n      \"pricing.faq.title\": \"Questions Fréquentes\",\n      \"pricing.faq.q1\": \"Puis-je changer de plan à tout moment ?\",\n      \"pricing.faq.a1\": \"Oui, vous pouvez changer de plan à tout moment depuis votre tableau de bord.\",\n      \"pricing.support.title\": \"Support\",\n      \"pricing.support.q1\": \"Quel niveau de support recevrai-je ?\",\n      \"pricing.support.a1\": \"Tous les plans incluent un support par email. Les plans supérieurs incluent un support prioritaire.\",\n      \"pricing.security.title\": \"Sécurité\",\n      \"pricing.security.q1\": \"Vos données sont-elles protégées ?\",\n      \"pricing.security.a1\": \"Nous utilisons un chiffrement de niveau entreprise et respectons les normes RGPD pour protéger vos informations.\",\n      \n      // Documentation\n      \"documentation.title\": \"Documentation\",\n      \"documentation.download_pdf\": \"Télécharger PDF\",\n      \"documentation.subtitle\": \"Guide complet pour utiliser AIPPS\",\n      \"documentation.overview\": \"Vue d'ensemble\",\n      \"documentation.features\": \"Fonctionnalités\",\n      \"documentation.widget_integration\": \"Intégration de widget\",\n      \"documentation.contextual_understanding\": \"Compréhension contextuelle\",\n      \"documentation.document_training\": \"Formation par documents\",\n      \"documentation.lead_capture\": \"Capture de prospects\",\n      \"documentation.analytics\": \"Analyses\",\n      \"documentation.task_automation\": \"Automatisation des tâches\",\n      \"documentation.form_creation\": \"Création de formulaires\",\n      \"documentation.forms\": \"Formulaires\",\n      \"documentation.education\": \"Éducation\",\n      \"documentation.business\": \"Entreprise\",\n      \"documentation.professional\": \"Professionnel\",\n      \"documentation.implementation\": \"Implémentation\",\n      \n      // Documentation Overview\n      \"documentation.overview.title\": \"Vue d'ensemble\",\n      \"documentation.overview.introduction\": \"Introduction complète à AIPPS\",\n      \"documentation.overview.problem_title\": \"Le Problème\",\n      \"documentation.overview.problem_description\": \"Les entreprises peinent à offrir un support client 24/7 efficace\",\n      \"documentation.overview.solution_intro\": \"Notre solution IA révolutionne l'interaction client\",\n      \"documentation.overview.solution_point_1\": \"Assistant IA intelligent disponible 24/7\",\n      \"documentation.overview.solution_point_2\": \"Intégration facile en quelques minutes\",\n      \"documentation.overview.solution_point_3\": \"Analyses détaillées et insights\",\n      \"documentation.overview.solution_point_4\": \"Support multilingue complet\",\n      \"documentation.overview.card1_title\": \"IA Conversationnelle\",\n      \"documentation.overview.card1_text\": \"Assistant intelligent pour interactions naturelles\",\n      \"documentation.overview.card2_title\": \"Intégration Simple\",\n      \"documentation.overview.card2_text\": \"Déployez en minutes sur votre site web\",\n      \"documentation.overview.card3_title\": \"Analyses Avancées\",\n      \"documentation.overview.card3_text\": \"Insights détaillés sur les interactions clients\",\n      \"documentation.overview.card4_title\": \"Support Multilingue\",\n      \"documentation.overview.card4_text\": \"Communiquez dans plusieurs langues\",\n      \n      // Professional Services\n      \"professional.intro_text\": \"Solutions professionnelles pour services experts\",\n      \"professional.specific_benefits\": \"Avantages spécifiques\",\n      \"professional.client_qualification\": \"Qualification des clients\",\n      \"professional.qualification1\": \"Identification des besoins clients\",\n      \"professional.qualification2\": \"Pré-qualification automatique\",\n      \"professional.qualification3\": \"Routage vers l'expert approprié\",\n      \"professional.appointment_scheduling\": \"Planification de rendez-vous\",\n      \"professional.scheduling1\": \"Calendrier intégré intelligent\",\n      \"professional.scheduling2\": \"Confirmation automatique\",\n      \"professional.scheduling3\": \"Rappels personnalisés\",\n      \"professional.client_education\": \"Éducation client\",\n      \"professional.education1\": \"Ressources informatives automatiques\",\n      \"professional.education2\": \"FAQ dynamiques\",\n      \"professional.education3\": \"Guides étape par étape\",\n      \"professional.expectation_management\": \"Gestion des attentes\",\n      \"professional.expectation1\": \"Communication claire des processus\",\n      \"professional.expectation2\": \"Délais transparents\",\n      \"professional.expectation3\": \"Suivi proactif\",\n      \"professional.content_marketing\": \"Marketing de contenu\",\n      \"professional.marketing1\": \"Génération de leads qualifiés\",\n      \"professional.marketing2\": \"Nurturing automatisé\",\n      \"professional.marketing3\": \"Personnalisation des messages\",\n      \"professional.marketing4\": \"Segmentation intelligente\",\n      \"professional.marketing5\": \"ROI mesurable\",\n      \"professional.testimonials\": \"Témoignages\",\n      \"professional.testimonial_text\": \"AIPPS a transformé notre pratique\",\n      \"professional.testimonial_author\": \"Expert-conseil\",\n      \"professional.implement_button\": \"Implémenter maintenant\",\n      \n      // Forms Documentation\n      \"forms.intro_text\": \"Créez et gérez des formulaires intelligents facilement\",\n      \"forms.available_types\": \"Types de formulaires disponibles\",\n      \"forms.templates_intro\": \"Modèles pré-conçus pour tous vos besoins\",\n      \"forms.contact_form\": \"Formulaire de contact\",\n      \"forms.contact_form_desc\": \"Collectez les informations de contact facilement\",\n      \"forms.waitlist_form\": \"Liste d'attente\",\n      \"forms.waitlist_form_desc\": \"Gérez vos listes d'attente efficacement\",\n      \"forms.survey_form\": \"Formulaire d'enquête\",\n      \"forms.survey_form_desc\": \"Recueillez opinions et feedback\",\n      \"forms.feedback_form\": \"Formulaire de commentaires\",\n      \"forms.feedback_form_desc\": \"Améliorez vos services avec les retours clients\",\n      \"forms.lead_capture_form\": \"Capture de prospects\",\n      \"forms.lead_capture_form_desc\": \"Convertissez vos visiteurs en prospects\",\n      \"forms.custom_form\": \"Formulaire personnalisé\",\n      \"forms.custom_form_desc\": \"Créez des formulaires sur mesure\",\n      \"forms.main_features\": \"Fonctionnalités principales\",\n      \"forms.flexible_design\": \"Design flexible\",\n      \"forms.flexible_design_desc\": \"Personnalisez l'apparence selon votre marque\",\n      \"forms.configurable_fields\": \"Champs configurables\",\n      \"forms.configurable_fields_desc\": \"Ajoutez et modifiez les champs facilement\",\n      \"forms.advanced_validation\": \"Validation avancée\",\n      \"forms.advanced_validation_desc\": \"Validez les données en temps réel\",\n      \"forms.conditional_logic\": \"Logique conditionnelle\",\n      \"forms.conditional_logic_desc\": \"Champs dynamiques selon les réponses\",\n      \"forms.ai_integration\": \"Intégration IA\",\n      \"forms.ai_integration_desc\": \"Assistant IA intégré aux formulaires\",\n      \"forms.captcha_protection\": \"Protection CAPTCHA\",\n      \"forms.captcha_protection_desc\": \"Bloquez les soumissions automatisées\",\n      \"forms.email_notifications\": \"Notifications email\",\n      \"forms.email_notifications_desc\": \"Alertes automatiques pour nouvelles soumissions\",\n      \"forms.detailed_analytics\": \"Analyses détaillées\",\n      \"forms.detailed_analytics_desc\": \"Statistiques complètes sur les performances\",\n      \"forms.response_sorting\": \"Tri des réponses\",\n      \"forms.response_sorting_desc\": \"Organisez et filtrez les soumissions\",\n      \"forms.creation_process\": \"Processus de création\",\n      \"forms.access_dashboard\": \"Accéder au tableau de bord\",\n      \"forms.access_dashboard_desc\": \"Connectez-vous à votre espace admin\",\n      \"forms.create_new\": \"Créer nouveau formulaire\",\n      \"forms.create_new_desc\": \"Démarrez avec un modèle ou partez de zéro\",\n      \"forms.basic_config\": \"Configuration de base\",\n      \"forms.basic_config_desc\": \"Définissez titre, description et paramètres\",\n      \"forms.design_fields\": \"Conception des champs\",\n      \"forms.design_fields_desc\": \"Ajoutez et organisez vos champs\",\n      \"forms.customization\": \"Personnalisation\",\n      \"forms.customization_desc\": \"Adaptez design et comportement\",\n      \"forms.advanced_config\": \"Configuration avancée\",\n      \"forms.advanced_config_desc\": \"Paramètres experts et intégrations\",\n      \"forms.preview\": \"Aperçu\",\n      \"forms.preview_desc\": \"Testez votre formulaire avant publication\",\n      \"forms.publication\": \"Publication\",\n      \"forms.publication_desc\": \"Déployez sur votre site web\",\n      \"forms.integration_methods\": \"Méthodes d'intégration\",\n      \"forms.simplified_process\": \"Processus simplifié\",\n      \"forms.direct_embed\": \"Intégration directe\",\n      \"forms.direct_embed_desc\": \"Code HTML simple à copier-coller\",\n      \"forms.get_code\": \"Obtenir le code\",\n      \"forms.get_code_desc\": \"Copiez le code d'intégration généré\",\n      \"forms.copy_code\": \"Copier le code\",\n      \"forms.copy_code_desc\": \"Code HTML prêt à utiliser\",\n      \"forms.insert_code\": \"Insérer le code\",\n      \"forms.insert_code_desc\": \"Collez dans votre site web\",\n      \"forms.code_example\": \"Exemple de code\",\n      \"forms.customization_options\": \"Options de personnalisation\",\n      \"forms.modal_instructions\": \"Instructions pour modal\",\n      \"forms.customize_style\": \"Personnaliser le style\",\n      \"forms.configure_actions\": \"Configurer les actions\",\n      \"forms.implement_validations\": \"Implémenter les validations\",\n      \"forms.analytics_integration\": \"Intégration analytics\",\n      \"forms.technical_considerations\": \"Considérations techniques\",\n      \"forms.works_with_cms\": \"Compatible avec tous les CMS\",\n      \"forms.async_loading\": \"Chargement asynchrone\",\n      \"forms.secure_data\": \"Données sécurisées\",\n      \"forms.spam_protection\": \"Protection anti-spam\",\n      \"forms.responsive_design\": \"Design responsive\",\n      \"forms.improved_response_management\": \"Gestion améliorée des réponses\",\n      \"forms.advanced_capabilities\": \"Capacités avancées\",\n      \"forms.view_responses\": \"Voir les réponses\",\n      \"forms.view_responses_desc\": \"Interface intuitive pour consulter les soumissions\",\n      \"forms.export_data\": \"Exporter les données\",\n      \"forms.export_data_desc\": \"Export CSV, Excel ou PDF\",\n      \"forms.filter_sort\": \"Filtrer et trier\",\n      \"forms.filter_sort_desc\": \"Outils avancés de tri et filtrage\",\n      \"forms.automatic_analysis\": \"Analyse automatique\",\n      \"forms.automatic_analysis_desc\": \"IA analyse les réponses automatiquement\",\n      \"forms.follow_up\": \"Suivi automatique\",\n      \"forms.follow_up_desc\": \"Emails de suivi personnalisés\",\n      \"forms.realtime_notifications\": \"Notifications temps réel\",\n      \"forms.realtime_notifications_desc\": \"Alertes instantanées pour nouvelles soumissions\",\n      \"forms.widget_integration\": \"Intégration widget\",\n      \"forms.widget_integration_desc\": \"Formulaires intégrés au chat\",\n      \"forms.present_forms\": \"Présenter des formulaires\",\n      \"forms.autocomplete_fields\": \"Champs auto-complétés\",\n      \"forms.continue_conversation\": \"Continuer la conversation\",\n      \"forms.provide_assistance\": \"Fournir de l'assistance\",\n      \"forms.popular_use_cases\": \"Cas d'usage populaires\",\n      \"forms.education_use\": \"Usage éducatif\",\n      \"forms.education_use_desc\": \"Inscriptions, évaluations, feedback étudiant\",\n      \"forms.business_use\": \"Usage commercial\",\n      \"forms.business_use_desc\": \"Génération leads, enquêtes satisfaction\",\n      \"forms.professional_use\": \"Usage professionnel\",\n      \"forms.professional_use_desc\": \"Consultations, rendez-vous, qualifications\",\n      \"forms.ecommerce_use\": \"Usage e-commerce\",\n      \"forms.ecommerce_use_desc\": \"Commandes personnalisées, support client\",\n      \"forms.create_first_button\": \"Créer votre premier formulaire\",\n      \n      // Implementation Guide\n      \"implementation.intro_text\": \"Guide d'implémentation complet\",\n      \"implementation.process_title\": \"Processus en 4 étapes\",\n      \"implementation.step1_title\": \"1. Choisir votre widget\",\n      \"implementation.step1_desc\": \"Sélectionnez le type d'interface qui convient le mieux\",\n      \"implementation.widget_option\": \"Widget bulle - Petit bouton flottant\",\n      \"implementation.fullscreen_option\": \"Plein écran - Interface complète\",\n      \"implementation.wordpress_note\": \"Compatible avec WordPress et tous les CMS\",\n      \"implementation.step2_title\": \"2. Personnaliser l'apparence\",\n      \"implementation.step2_desc\": \"Adaptez le design à votre marque\",\n      \"implementation.customize_colors\": \"Couleurs et thème\",\n      \"implementation.customize_position\": \"Position et taille\",\n      \"implementation.customize_welcome\": \"Message de bienvenue\",\n      \"implementation.customize_languages\": \"Langues supportées\",\n      \"implementation.customize_personality\": \"Personnalité de l'assistant\",\n      \"implementation.step3_title\": \"3. Entraîner votre IA\",\n      \"implementation.step3_desc\": \"Alimentez la base de connaissances\",\n      \"implementation.upload_pdf\": \"Télécharger des PDF\",\n      \"implementation.upload_docx\": \"Télécharger des documents Word\",\n      \"implementation.upload_excel\": \"Télécharger des fichiers Excel\",\n      \"implementation.write_instructions\": \"Rédiger des instructions personnalisées\",\n      \"implementation.urls_note\": \"Ou fournir des URLs à analyser\",\n      \"implementation.step4_title\": \"4. Surveiller et optimiser\",\n      \"implementation.step4_desc\": \"Analysez les performances et améliorez\",\n      \"implementation.monitor_conversations\": \"Surveiller les conversations\",\n      \"implementation.review_metrics\": \"Examiner les métriques\",\n      \"implementation.access_leads\": \"Accéder aux leads générés\",\n      \"implementation.refine_training\": \"Affiner l'entraînement\",\n      \"implementation.isolated_stats\": \"Statistiques détaillées par intégration\",\n      \"implementation.technical_requirements\": \"Exigences techniques\",\n      \"implementation.compatibility_intro\": \"Compatible avec toutes les technologies\",\n      \"implementation.cms_compatibility\": \"Tous les CMS (WordPress, Drupal, Joomla)\",\n      \"implementation.html_compatibility\": \"Sites HTML statiques\",\n      \"implementation.js_compatibility\": \"Applications JavaScript\",\n      \"implementation.no_server_mods\": \"Aucune modification serveur requise\",\n      \"implementation.start_button\": \"Commencer l'implémentation\",\n      \n      // Business Use Cases\n      \"business.intro_text\": \"Solutions commerciales pour entreprises modernes\",\n      \"business.specific_benefits\": \"Avantages spécifiques\",\n      \"business.lead_generation\": \"Génération de leads\",\n      \"business.lead_gen1\": \"Qualification automatique des prospects\",\n      \"business.lead_gen2\": \"Capture d'informations stratégiques\",\n      \"business.lead_gen3\": \"Suivi personnalisé des opportunités\",\n      \"business.customer_support\": \"Support client\",\n      \"business.support1\": \"Réponses instantanées 24/7\",\n      \"business.support2\": \"Escalade intelligente vers humains\",\n      \"business.support3\": \"Base de connaissances évolutive\",\n      \"business.catalog_presentation\": \"Présentation de catalogue\",\n      \"business.catalog1\": \"Recommandations personnalisées\",\n      \"business.catalog2\": \"Navigation assistée par IA\",\n      \"business.catalog3\": \"Comparaison de produits intelligente\",\n      \"business.sales_optimization\": \"Optimisation des ventes\",\n      \"business.sales_opt1\": \"Processus de vente guidé\",\n      \"business.sales_opt2\": \"Objections traitées automatiquement\",\n      \"business.sales_opt3\": \"Upselling et cross-selling intelligents\",\n      \"business.behavior_analysis\": \"Analyse comportementale\",\n      \"business.behavior1\": \"Tracking des interactions clients\",\n      \"business.behavior2\": \"Patterns d'achat identifiés\",\n      \"business.behavior3\": \"Optimisation du parcours client\",\n      \"business.behavior4\": \"Insights prédictifs avancés\",\n      \"business.testimonials\": \"Témoignages\",\n      \"business.testimonial_text\": \"AIPPS a augmenté nos conversions de 300%\",\n      \"business.testimonial_author\": \"Directeur commercial\",\n      \"business.implement_button\": \"Implémenter pour votre entreprise\",\n      \n      // Education Use Cases\n      \"education.intro_text\": \"Solutions éducatives pour institutions d'enseignement\",\n      \"education.specific_benefits\": \"Avantages spécifiques\",\n      \"education.admission_process\": \"Processus d'admission\",\n      \"education.admission_benefit1\": \"Orientation des candidats\",\n      \"education.admission_benefit2\": \"Informations sur les programmes\",\n      \"education.admission_benefit3\": \"Assistance aux candidatures\",\n      \"education.program_presentation\": \"Présentation des programmes\",\n      \"education.program_detail1\": \"Détails des cursus\",\n      \"education.program_detail2\": \"Prérequis et débouchés\",\n      \"education.program_detail3\": \"Témoignages d'étudiants\",\n      \"education.lead_capture\": \"Capture de prospects étudiants\",\n      \"education.lead_capture1\": \"Collecte d'informations qualifiées\",\n      \"education.lead_capture2\": \"Suivi personnalisé des candidats\",\n      \"education.lead_capture3\": \"Nurturing automatisé\",\n      \"education.international_support\": \"Support international\",\n      \"education.international1\": \"Support multilingue\",\n      \"education.international2\": \"Informations sur les visas\",\n      \"education.international3\": \"Accompagnement culturel\",\n      \"education.trend_analysis\": \"Analyse des tendances\",\n      \"education.trend1\": \"Programmes les plus demandés\",\n      \"education.trend2\": \"Questions fréquentes identifiées\",\n      \"education.trend3\": \"Optimisation des communications\",\n      \"education.trend4\": \"Prédiction des inscriptions\",\n      \"education.testimonials\": \"Témoignages\",\n      \"education.testimonial_text\": \"AIPPS a simplifié notre processus d'admission\",\n      \"education.testimonial_author\": \"Responsable admissions\",\n      \"education.implement_button\": \"Implémenter pour votre institution\",\n      \n      // Contact Page\n      \"contact.title\": \"Contactez-nous\",\n      \"contact.subtitle\": \"Nous sommes là pour vous aider\",\n      \"contact.info.title\": \"Informations de contact\",\n      \"contact.info.email\": \"Email\",\n      \"contact.info.phone\": \"Téléphone\",\n      \"contact.info.address\": \"Adresse\",\n      \"contact.info.hours\": \"Heures d'ouverture\",\n      \"contact.info.hours_details\": \"Lundi - Vendredi: 9h00 - 18h00 EST\",\n      \"contact.form.title\": \"Envoyez-nous un message\",\n      \"contact.form.name\": \"Nom\",\n      \"contact.form.name_placeholder\": \"Votre nom complet\",\n      \"contact.form.email\": \"Email\",\n      \"contact.form.email_placeholder\": \"votre@email.com\",\n      \"contact.form.subject\": \"Sujet\",\n      \"contact.form.subject_placeholder\": \"Comment pouvons-nous vous aider?\",\n      \"contact.form.message\": \"Message\",\n      \"contact.form.message_placeholder\": \"Décrivez votre question ou demande...\",\n      \"contact.form.send\": \"Envoyer le message\",\n      \n      // Documentation\n      \"documentation.overview.start_button\": \"Commencer maintenant\",\n      \n      // Get Started Page\n      \"getStartedPage.title\": \"Commencer\",\n      \"getStartedPage.subtitle\": \"Intégrez AIPPS dans votre site web en quelques minutes\",\n      \"getStartedPage.tabs.widget\": \"Widget\",\n      \"getStartedPage.tabs.fullscreen\": \"Plein écran\",\n      \"getStartedPage.tabs.form\": \"Formulaire\",\n      \"getStartedPage.widget.step1.title\": \"Étape 1: Ajoutez ce code à votre site web\",\n      \"getStartedPage.widget.step1.wordpress_note\": \"Si vous utilisez WordPress: Vous pouvez l'ajouter dans le thème dans footer.php ou installer un plugin qui permet d'insérer du code HTML.\",\n      \"getStartedPage.widget.step2.title\": \"Étape 2: Personnalisez votre widget (optionnel)\",\n      \"getStartedPage.widget.step2.description\": \"Vous pouvez personnaliser le comportement et l'apparence du widget en ajoutant des paramètres supplémentaires:\",\n      \"getStartedPage.widget.step2.customization_title\": \"Options de personnalisation:\",\n      \"getStartedPage.widget.step2.position\": \"Position du widget sur la page\",\n      \"getStartedPage.widget.step2.theme_color\": \"Couleur principale du widget\",\n      \"getStartedPage.widget.step2.assistant_name\": \"Nom de l'assistant\",\n      \"getStartedPage.widget.step2.welcome_message\": \"Message de bienvenue personnalisé\",\n      \"getStartedPage.widget.step2.configure_dashboard\": \"Configurez ces options depuis le panneau d'administration:\",\n      \"getStartedPage.widget.step2.dashboard_steps.0\": \"Accédez à la section \\\"Intégrations\\\" du panneau\",\n      \"getStartedPage.widget.step2.dashboard_steps.1\": \"Sélectionnez l'intégration que vous souhaitez configurer\",\n      \"getStartedPage.widget.step2.dashboard_steps.2\": \"Personnalisez les couleurs, position et messages\",\n      \"getStartedPage.widget.step2.dashboard_steps.3\": \"Les changements seront appliqués automatiquement\",\n      \"getStartedPage.buttons.go_to_integrations\": \"Aller aux intégrations\",\n      \"getStartedPage.widget.step3.title\": \"Étape 3: Entraînez votre assistant (optionnel)\",\n      \"getStartedPage.widget.step3.description\": \"Pour que votre assistant fournisse des réponses utiles et pertinentes, vous pouvez l'entraîner avec:\",\n      \"getStartedPage.buttons.manage_content\": \"Gérer le contenu\",\n      \"getStartedPage.widget.step3.step4_title\": \"Étape 4: Configurez les formulaires (optionnel)\",\n      \"getStartedPage.widget.step3.step4_description\": \"Alimentez votre widget avec des formulaires personnalisés pour capturer des leads et des informations spécifiques:\",\n      \"getStartedPage.buttons.create_forms\": \"Créer des formulaires\",\n      \"getStartedPage.cta.forms_title\": \"Prêt à créer vos formulaires?\",\n      \"getStartedPage.cta.forms_description\": \"Créez des formulaires personnalisés pour capturer des leads et collecter des informations importantes de vos visiteurs.\",\n      \"getStartedPage.buttons.forms_guide\": \"Guide des formulaires\",\n      \"getStartedPage.support.title\": \"Besoin d'aide?\",\n      \"getStartedPage.support.description\": \"Consultez notre documentation ou contactez notre support pour obtenir de l'aide.\",\n      \"getStartedPage.buttons.view_docs\": \"Voir la documentation\",\n      \"getStartedPage.buttons.contact_support\": \"Contacter le support\",\n      \"getStartedPage.form.step3.dashboard_steps\": [\n        \"Accédez à la section \\\"Intégrations\\\" du panneau\",\n        \"Sélectionnez l'intégration que vous souhaitez configurer\",\n        \"Personnalisez les couleurs, position et messages\",\n        \"Les changements seront appliqués automatiquement\"\n      ],\n      \n      // Fullscreen Mode\n      \"getStartedPage.fullscreen.step1.title\": \"Étape 1: Ajoutez ce code à votre site web\",\n      \"getStartedPage.fullscreen.step1.description\": \"Copiez et collez ce code dans le HTML de votre site web, juste avant la balise de fermeture </body>:\",\n      \"getStartedPage.fullscreen.step1.wordpress_note\": \"Si vous utilisez WordPress: Vous pouvez l'ajouter dans le thème dans footer.php ou installer un plugin qui permet d'insérer du code HTML.\",\n      \"getStartedPage.fullscreen.step2.title\": \"Étape 2: Personnalisez votre expérience (optionnel)\",\n      \"getStartedPage.fullscreen.step2.description\": \"Le mode plein écran crée une expérience immersive similaire à ChatGPT. Vous pouvez le personnaliser avec:\",\n      \"getStartedPage.fullscreen_features.title\": \"Fonctionnalités du mode plein écran:\",\n      \"getStartedPage.fullscreen_features.register_login\": \"Inscription et connexion des utilisateurs\",\n      \"getStartedPage.fullscreen_features.personal_history\": \"Historique personnel des conversations\",\n      \"getStartedPage.fullscreen_features.auto_titles\": \"Génération automatique de titres\",\n      \"getStartedPage.fullscreen_features.conversation_management\": \"Gestion des conversations\",\n      \"getStartedPage.fullscreen_features.user_info\": \"Informations utilisateur avancées\",\n      \"getStartedPage.fullscreen_features.jwt_security\": \"Sécurité JWT intégrée\",\n      \"getStartedPage.fullscreen_features.visual_customization\": \"Personnalisation visuelle complète\",\n      \"getStartedPage.fullscreen_features.brand_colors\": \"Couleurs de marque\",\n      \"getStartedPage.fullscreen_features.welcome_messages\": \"Messages de bienvenue\",\n      \"getStartedPage.fullscreen_features.registration_config\": \"Configuration d'inscription\",\n      \"getStartedPage.fullscreen_features.privacy_settings\": \"Paramètres de confidentialité\",\n      \"getStartedPage.buttons.configure_auth\": \"Configurer l'authentification\",\n      \n      // Ignored Sections\n      \"getStartedPage.ignored_sections.step3_title\": \"Étape 3: Sections ignorées (optionnel)\",\n      \"getStartedPage.ignored_sections.title\": \"Sections ignorées intelligentes\",\n      \"getStartedPage.ignored_sections.description\": \"Configurez des sections de votre site web que l'assistant doit ignorer lors de l'analyse automatique:\",\n      \"getStartedPage.ignored_sections.benefit_1\": \"Évite l'analyse de contenus non pertinents\",\n      \"getStartedPage.ignored_sections.benefit_2\": \"Améliore la précision des réponses\",\n      \"getStartedPage.ignored_sections.benefit_3\": \"Réduit le bruit dans la base de connaissances\",\n      \"getStartedPage.ignored_sections.benefit_4\": \"Optimise les performances de l'IA\",\n      \"getStartedPage.ignored_sections.config_example\": \"Exemple de configuration:\",\n      \"getStartedPage.ignored_sections.config_description\": \"Pour configurer les sections ignorées:\",\n      \"getStartedPage.ignored_sections.step_1\": \"Identifiez les sélecteurs CSS des éléments à ignorer\",\n      \"getStartedPage.ignored_sections.step_2\": \"Ajoutez-les dans les paramètres d'intégration\",\n      \"getStartedPage.ignored_sections.step_3\": \"L'assistant ignorera automatiquement ces sections\",\n      \"getStartedPage.ignored_sections.step_4\": \"Testez et ajustez selon les besoins\",\n      \"getStartedPage.buttons.configure_sections\": \"Configurer les sections\",\n      \n      // Fullscreen Steps 4-5\n      \"getStartedPage.fullscreen.step4.title\": \"Étape 4: Entraînez votre assistant\",\n      \"getStartedPage.fullscreen.step4.description\": \"Optimisez votre assistant avec du contenu spécialisé:\",\n      \"getStartedPage.fullscreen.step4.feature_1\": \"Documents PDF et DOCX\",\n      \"getStartedPage.fullscreen.step4.feature_2\": \"Instructions personnalisées\",\n      \"getStartedPage.fullscreen.step4.feature_3\": \"URLs à analyser\",\n      \"getStartedPage.fullscreen.step4.feature_4\": \"Base de connaissances évolutive\",\n      \"getStartedPage.buttons.configure_assistant\": \"Configurer l'assistant\",\n      \"getStartedPage.fullscreen.step5.title\": \"Étape 5: Formulaires avancés\",\n      \"getStartedPage.fullscreen.step5.description\": \"Intégrez des formulaires intelligents pour capturer des leads:\",\n      \"getStartedPage.fullscreen.step5.feature_1\": \"Formulaires adaptatifs\",\n      \"getStartedPage.fullscreen.step5.feature_2\": \"Validation intelligente\",\n      \"getStartedPage.fullscreen.step5.feature_3\": \"Intégration CRM\",\n      \"getStartedPage.fullscreen.step5.feature_4\": \"Analytics avancés\",\n      \"getStartedPage.buttons.configure_advanced_forms\": \"Configurer formulaires avancés\",\n      \n      // Form Mode\n      \"getStartedPage.form.step1.title\": \"Étape 1: Créez votre formulaire\",\n      \"getStartedPage.form.step1.description\": \"Commencez par créer un formulaire depuis votre tableau de bord:\",\n      \"getStartedPage.form.step2.title\": \"Étape 2: Intégrez le formulaire\",\n      \"getStartedPage.form.step2.description\": \"Utilisez ce code pour intégrer votre formulaire sur votre site web:\",\n      \"getStartedPage.form.step2.basic_attributes\": \"Attributs de base:\",\n      \"getStartedPage.form.step2.attributes.form_id\": \"ID du formulaire à afficher\",\n      \"getStartedPage.form.step2.attributes.display_type\": \"Type d'affichage (modal, inline)\",\n      \"getStartedPage.form.step2.attributes.position\": \"Position du bouton\",\n      \"getStartedPage.form.step2.attributes.button_text\": \"Texte du bouton\",\n      \"getStartedPage.form.step2.customization_attributes\": \"Attributs de personnalisation:\",\n      \"getStartedPage.form.step2.attributes.theme_color\": \"Couleur du thème\",\n      \"getStartedPage.form.step2.attributes.icon\": \"Icône du bouton\",\n      \"getStartedPage.form.step2.attributes.button_size\": \"Taille du bouton\",\n      \"getStartedPage.form.step2.attributes.auto_show\": \"Affichage automatique\",\n      \"getStartedPage.form.step2.example_title\": \"Exemple de configuration personnalisée:\",\n      \"getStartedPage.form.step3.title\": \"Étape 3: Configuration du tableau de bord\",\n      \"getStartedPage.form.step3.description\": \"Configurez ces options depuis le panneau d'administration:\",\n      \"getStartedPage.buttons.go_to_forms\": \"Aller aux formulaires\",\n      \n      // Pricing Page\n      \"pricing.plans\": \"Plans\",\n      \"pricing.title\": \"Tarification\",\n      \"pricing.subtitle\": \"Choisissez le plan qui convient à vos besoins\",\n      \"pricing.monthly_billing\": \"Facturation mensuelle\",\n      \"pricing.toggle_billing\": \"Basculer la facturation\",\n      \"pricing.annual_billing\": \"Facturation annuelle\",\n      \"pricing.save_percentage\": \"Économisez {{percentage}}%\",\n      \"pricing.take_offer\": \"Profiter de l'offre\",\n      \"pricing.subscribe\": \"S'abonner\",\n      \"pricing.promotional_price_duration\": \"Prix promotionnel pour {{months}} mois\",\n      \"pricing.contact_us\": \"Nous contacter\",\n      \"pricing.discount_duration\": \"{{discount}}% de réduction pendant {{months}} mois\",\n      \"pricing.take_annual_offer\": \"Profiter de l'offre annuelle\",\n      \"pricing.start_free\": \"Commencer gratuitement\",\n      \"pricing.processing\": \"Traitement...\",\n      \"pricing.free\": \"Gratuit\",\n      \"pricing.from\": \"À partir de\",\n      \"pricing.month\": \"mois\",\n      \"pricing.year\": \"année\",\n      \"pricing.recommended\": \"Recommandé\",\n      \"pricing.login_required\": \"Connexion requise\",\n      \"pricing.login_description\": \"Veuillez vous connecter pour continuer\",\n      \"pricing.success\": \"Succès\",\n      \"pricing.error\": \"Erreur\",\n      \"pricing.process_error\": \"Erreur lors du traitement\",\n      \"pricing.free_plan_activated\": \"Plan gratuit activé\",\n      \"pricing.pricing_note\": \"Besoin d'automatisations ou de fonctionnalités avancées ? Contactez-nous !\",\n      \"pricing.limited_launch_offer\": \"Offre de lancement limitée\",\n      \"pricing.spots_remaining\": \"{{remaining}} places restantes sur {{total}}\",\n      \"pricing.spots_left_of_total\": \"{{remaining}} places restantes sur {{total}}\",\n      \"pricing.take_advantage_unique_prices\": \"Profitez de ces prix uniques maintenant!\",\n      \n      // Integration Analytics\n      \"analytics_for\": \"Analyses pour\",\n      \"view_performance_metrics_for_integration\": \"Voir les métriques de performance pour l'intégration\",\n      \"view_conversations\": \"Voir les conversations\",\n      \"download_pdf\": \"Télécharger PDF\",\n      \"Total conversations\": \"Total des conversations\",\n      \"no_messages\": \"Aucun message\",\n      \"no_conversations_to_resolve\": \"Aucune conversation à résoudre\",\n      \"message_distribution\": \"Distribution des messages\",\n      \"user_vs_assistant_messages\": \"Messages utilisateur vs assistant\",\n      \"conversations_over_time\": \"Conversations au fil du temps\",\n      \"resolution_status\": \"Statut de résolution\",\n      \"resolved_vs_active_conversations\": \"Conversations résolues vs actives\",\n      \"top_products\": \"Produits principaux\",\n      \"most_mentioned_products\": \"Produits les plus mentionnés\",\n      \"top_topics\": \"Sujets principaux\",\n      \"most_discussed_topics\": \"Sujets les plus discutés\",\n      \"keyword_cloud\": \"Nuage de mots-clés\",\n      \"frequently_mentioned_keywords\": \"Mots-clés fréquemment mentionnés\",\n      \"what_does_it_mean\": \"Que signifie-t-il\",\n      \"keywords_explanation\": \"Explication des mots-clés\",\n      \n      // Pricing Button Actions\n      \"Feature\": \"Fonctionnalité\",\n      \"LearnMore\": \"En savoir plus\",\n      \"Features\": \"Fonctionnalités\",\n      \"Learn More\": \"En savoir plus\",\n      \"feature\": \"fonctionnalité\",\n      \"learn_more\": \"en savoir plus\",\n      \"features\": \"fonctionnalités\",\n      \n      // Chat Interface\n      \"chat.placeholder\": \"Tapez votre message...\",\n      \n      // Login Page\n      \"loginPage.title\": \"Connexion\",\n      \"loginPage.subtitle\": \"Connectez-vous à votre compte AIPPS\",\n      \"loginPage.username\": \"Nom d'utilisateur\",\n      \"loginPage.username_placeholder\": \"Entrez votre nom d'utilisateur\",\n      \"loginPage.password\": \"Mot de passe\",\n      \"loginPage.password_placeholder\": \"Entrez votre mot de passe\",\n      \"loginPage.submit\": \"Se connecter\",\n      \"loginPage.submitting\": \"Connexion...\",\n      \"loginPage.success_title\": \"Connexion réussie\",\n      \"loginPage.success_message\": \"Vous êtes maintenant connecté\",\n      \"loginPage.failed_title\": \"Échec de la connexion\",\n      \"loginPage.failed_message\": \"Nom d'utilisateur ou mot de passe incorrect\",\n      \n      // Footer\n      footer: {\n        company_description: \"Description de l'entreprise\",\n        product: \"Produit\",\n        company: \"Entreprise\", \n        support: \"Support\",\n        features: \"Fonctionnalités\",\n        pricing: \"Tarification\",\n        documentation: \"Documentation\",\n        get_started: \"Commencer\",\n        about_us: \"À propos de nous\",\n        contact: \"Contact\",\n        privacy_policy: \"Politique de confidentialité\",\n        terms_of_service: \"Conditions d'utilisation\",\n        help_center: \"Centre d'aide\",\n        all_rights_reserved: \"Tous droits réservés\"\n      }\n    }\n  },\n  es: {\n    translation: {\n      // Navegación básica\n      documentation: \"Documentación\",\n      pricing: \"Precios\",\n      get_started: \"Comenzar\", \n      visitor: \"Visitante\",\n      anonymous: \"Anónimo\",\n      visitors_helped: \"Visitantes atendidos\",\n      \n      // Tiempo\n      weeks_ago_plural: \"hace {{count}} semanas\",\n      weeks_ago: \"hace {{count}} semana\",\n      months_ago_plural: \"hace {{count}} meses\", \n      months_ago: \"hace {{count}} mes\",\n      days_ago_plural: \"hace {{count}} días\",\n      days_ago: \"hace {{count}} día\",\n      hours_ago_plural: \"hace {{count}} horas\",\n      hours_ago: \"hace {{count}} hora\",\n      minutes_ago_plural: \"hace {{count}} minutos\",\n      minutes_ago: \"hace {{count}} minuto\",\n      just_now: \"Ahora mismo\",\n      \n      // Dashboard básico\n      dashboard: \"Panel de control\",\n      conversations: \"Conversaciones\", \n      integrations: \"Integraciones\",\n      analytics: \"Analíticas\",\n      settings: \"Configuración\",\n      logout: \"Cerrar sesión\",\n      login: \"Iniciar sesión\",\n      signup: \"Registrarse\",\n      forms: \"Formularios\",\n      automation: \"Automatización\",\n      task_automation: \"Automatización de Tareas\",\n      profile: \"Perfil\",\n      \n      // Configuración del asistente AI\n      ai_assistant_settings: \"Configuración del Asistente IA\",\n      assistant_name: \"Nombre del Asistente\",\n      default_greeting: \"Saludo Predeterminado\",\n      conversation_style: \"Estilo de Conversación\",\n      chat_font: \"Fuente del Chat\",\n      user_message_color: \"Color de Mensajes del Usuario\",\n      show_availability: \"Mostrar Disponibilidad\",\n      assistant_message_color: \"Color de Mensajes del Asistente\",\n      welcome_chat: \"Chat de Bienvenida\",\n      status: \"Estado\",\n      enabled: \"Habilitado\",\n      disabled: \"Deshabilitado\",\n      welcome_message: \"Mensaje de Bienvenida\",\n      bubble_color: \"Color de Burbuja\",\n      text_color: \"Color de Texto\",\n      edit_settings: \"Editar Configuración\",\n      no_settings_found: \"No se encontró configuración\",\n      no_settings_description: \"Configure su asistente IA para comenzar\",\n      configure_settings: \"Configurar Ajustes\",\n      appearance: \"Apariencia\",\n      professional: \"Profesional\",\n      yes: \"Sí\",\n      no: \"No\",\n      system_default: \"Predeterminado del sistema\",\n      settings_description: \"Configure los ajustes de su asistente AIPI\",\n      \n      // Forms\n      forms_description: \"Cree y gestione sus formularios\",\n      refresh: \"Actualizar\",\n      create_form: \"Crear Formulario\",\n      no_description: \"Sin descripción\",\n      responses: \"Respuestas\",\n      delete: \"Eliminar\",\n      confirm_delete: \"Confirmar Eliminación\",\n      delete_form_confirmation: \"¿Está seguro de que desea eliminar este formulario? Esta acción no se puede deshacer y también eliminará todas las respuestas.\",\n      cancel: \"Cancelar\",\n      deleting: \"Eliminando...\",\n      no_forms: \"Aún no hay formularios\",\n      forms_empty_message: \"Cree un nuevo formulario para recopilar información de sus visitantes\",\n      \n      // Automation\n      task_automation_description: \"Configure tareas automatizadas y flujos de trabajo impulsados por IA\",\n      create_automation: \"Crear Automatización\",\n      view_logs: \"Ver Registros\",\n      no_automations: \"Aún no hay automatizaciones\",\n      automations_empty_message: \"Cree su primera automatización para agilizar tareas repetitivas con IA\",\n      \n      // Form template descriptions\n      \"form_template_waitlist\": \"Modèle para capturar usuarios en lista de espera\",\n      \"form_template_survey\": \"Complete la información solicitada para comenzar\",\n      \"form_template_standard\": \"Formulario estándar para recopilar información\",\n      \n      // Form Editor\n      \"formEditor.integrate\": \"Integrar\",\n      \"formEditor.save_changes\": \"Guardar cambios\",\n      \"formEditor.content\": \"Contenido\",\n      \"formEditor.appearance\": \"Apariencia\",\n      \"formEditor.settings\": \"Configuración\",\n      \"formEditor.basic_info\": \"Información básica\",\n      \"formEditor.basic_info_desc\": \"Configure la información básica de su formulario\",\n      \"formEditor.form_title\": \"Título del formulario\",\n      \"formEditor.unique_id\": \"ID único\",\n      \"formEditor.description\": \"Descripción\",\n      \"formEditor.form_draft\": \"Borrador de formulario\",\n      \"formEditor.form_type\": \"Tipo de formulario\",\n      \"formEditor.form_types.waitlist\": \"Lista de espera\",\n      \"formEditor.form_fields\": \"Campos del formulario\",\n      \"formEditor.form_fields_desc\": \"Agregue y configure los campos de su formulario\",\n      \"formEditor.field_types.text\": \"Texto\",\n      \"formEditor.field_types.email\": \"Email\",\n      \"formEditor.field_types.select\": \"Selección\",\n      \"formEditor.edit\": \"Editar\",\n      \"formEditor.delete\": \"Eliminar\",\n      \"formEditor.placeholder\": \"Placeholder\",\n      \"formEditor.required\": \"Requerido\",\n      \"formEditor.options\": \"Opciones\",\n      \"formEditor.add_field\": \"Agregar campo\",\n      \"formEditor.visual_style\": \"Estilo visual\",\n      \"formEditor.visual_style_desc\": \"Personalice la apariencia de su formulario\",\n      \"formEditor.theme\": \"Tema\",\n      \"formEditor.themes.light\": \"Claro\",\n      \"formEditor.themes.dark\": \"Oscuro\",\n      \"formEditor.themes.auto\": \"Automático\",\n      \"formEditor.primary_color\": \"Color principal\",\n      \"formEditor.typography\": \"Tipografía\",\n      \"formEditor.border_radius\": \"Radio de bordes\",\n      \"formEditor.radius.none\": \"Ninguno\",\n      \"formEditor.radius.medium\": \"Medio\",\n      \"formEditor.radius.large\": \"Grande\",\n      \"formEditor.configuration\": \"Configuración\",\n      \"formEditor.advanced_settings\": \"Configuraciones avanzadas\",\n      \"formEditor.success_message\": \"Mensaje de éxito\",\n\n      // Common\n      \"common.yes\": \"Sí\",\n      \"common.no\": \"No\",\n\n      // Estados\n      active: \"Activo\",\n      inactive: \"Inactivo\",\n      testing: \"Prueba\",\n      resolved: \"Resuelto\",\n      loading: \"Cargando...\",\n      back: \"Atrás\",\n      edit_integration: \"Editar integración\",\n      view_analytics: \"Ver analíticas\", \n      new: \"Nuevo\",\n      messages: \"mensajes\",\n      edit: \"Editar\",\n      last_modified: \"Última modificación\",\n      processed: \"Procesado\",\n      item: \"elemento\",\n      items: \"elementos\",\n      \n      // Conversaciones\n      conversations_for: \"Conversaciones para\",\n      view_all_conversations_for_integration: \"Ver todas las conversaciones para esta integración\",\n      search_conversations: \"Buscar conversaciones\",\n      \n      // Analytics\n      analytics_description: \"Análisis detallado de rendimiento y métricas\",\n      integration_performance: \"Rendimiento de integración\",\n      advanced_analysis: \"Análisis avanzado\",\n      advanced_metrics: \"Métricas avanzadas\",\n      avg_messages: \"Mensajes promedio\",\n      messages_per_conversation: \"Mensajes por conversación\",\n      total_conversations: \"Total de conversaciones\",\n      resolution_rate: \"Tasa de resolución\",\n      avg_response_time: \"Tiempo de respuesta promedio\",\n      \n      // PDF Report\n      pdf_report_title: \"Reporte de Analytics AIPI\",\n      pdf_generated: \"Generado el\",\n      pdf_summary: \"Resumen de Estadísticas\",\n      pdf_metric: \"Métrica\",\n      pdf_value: \"Valor\",\n      pdf_products_demanded: \"Productos Más Demandados\",\n      pdf_products_description: \"Análisis de productos mencionados en conversaciones\",\n      pdf_products_description2: \"Identifica intereses de clientes y oportunidades\",\n      pdf_product: \"Producto\",\n      pdf_mentions: \"Menciones\",\n      pdf_no_products_data: \"No hay datos de productos disponibles\",\n      pdf_topics_discussed: \"Temas Más Discutidos\",\n      pdf_topics_description: \"Análisis del sentimiento de las conversaciones\",\n      pdf_topics_description2: \"Comprende preocupaciones y satisfacción del cliente\",\n      pdf_topic: \"Tema\",\n      pdf_sentiment: \"Sentimiento\",\n      pdf_no_topics_data: \"No hay datos de temas disponibles\",\n      pdf_conversation_trend: \"Tendencia de Conversaciones\",\n      pdf_trend_description: \"Evolución del volumen de conversaciones en el tiempo\",\n      \n      // Analytics Charts\n      products_services_most_demanded: \"Productos/Servicios Más Demandados\",\n      products_analysis_description: \"Análisis de productos mencionados\",\n      what_does_it_mean_products_bars_explanation: \"¿Qué significan las barras de productos?\",\n      topics_and_sentiment: \"Temas y Sentimiento\",\n      topics_analysis_description: \"Análisis de temas y sentimientos\",\n      what_does_it_mean_topics_bars_explanation: \"¿Qué significan las barras de temas?\",\n      conversation_trend: \"Tendencia de Conversaciones\",\n      conversation_trend_description: \"Tendencia de conversaciones en el tiempo\",\n      what_does_it_mean_conversation_trend_explanation: \"¿Qué significa la tendencia de conversaciones?\",\n      keywords: \"Palabras clave\",\n      keywords_description: \"Descripción de palabras clave\",\n      what_does_it_mean_keywords_explanation: \"¿Qué significan las palabras clave?\",\n      \n      // Additional Analytics Terms\n      avg_duration: \"Duración promedio\",\n      time_per_conversation: \"Tiempo por conversación\",\n      peak_hours: \"Horas pico\",\n      highest_activity: \"Mayor actividad\",\n      devices: \"Dispositivos\",\n      mobile_desktop: \"Móvil/Escritorio\",\n      export_pdf: \"Exportar PDF\",\n      back_to_dashboard: \"Volver al panel\",\n      \n      // Dashboard and Navigation\n      dashboard_title: \"Título del panel\",\n      manage_assistant: \"Gestionar asistente\",\n      \n      // Language Selector\n      language: {\n        select: \"Seleccionar idioma\",\n        fr: \"Français\",\n        es: \"Español\",\n        en: \"English\"\n      },\n      \n      // Home Page\n      \"welcome\": \"Bienvenido a AIPPS\",\n      \"getStarted\": \"Comenzar\",\n      \"learnMore\": \"Saber más\",\n      \"home.description\": \"Transforma tu sitio web con la IA conversacional más avanzada. Crea experiencias interactivas que atraigan a tus visitantes y conviertan más eficazmente.\",\n      \"home.stats.websites\": \"1000+\",\n      \"home.stats.websitesLabel\": \"Sitios web activos\",\n      \"home.stats.conversations\": \"50k+\",\n      \"home.stats.conversationsLabel\": \"Conversaciones mensuales\", \n      \"home.stats.languages\": \"25+\",\n      \"home.stats.languagesLabel\": \"Idiomas soportados\",\n      \n      // Features Page\n      \"features.title\": \"Características\",\n      \"features.subtitle\": \"Descubre nuestras características\",\n      \"features.detailedDescription\": \"AIPPS ofrece una suite completa de herramientas de IA conversacional diseñadas para transformar la forma en que tus visitantes interactúan con tu sitio web. Desde automatización simple hasta integraciones complejas, tenemos todo lo que necesitas.\",\n      \"features.advanced.title\": \"Características avanzadas\",\n      \"features.advanced.multilingual.title\": \"Soporte multiidioma completo\",\n      \"features.advanced.multilingual.description\": \"Comunícate con tus visitantes en su idioma preferido gracias a nuestro sistema de traducción automática avanzado.\",\n      \"features.advanced.multilingual.feature1\": \"Traducción automática en tiempo real\",\n      \"features.advanced.multilingual.feature2\": \"Detección automática del idioma\",\n      \"features.advanced.multilingual.feature3\": \"Más de 25 idiomas soportados\",\n      \"features.advanced.security.title\": \"Seguridad y privacidad\",\n      \"features.advanced.security.description\": \"Tus datos y los de tus usuarios están protegidos por los más altos estándares de seguridad.\",\n      \"features.advanced.security.feature1\": \"Cifrado de extremo a extremo\",\n      \"features.advanced.security.feature2\": \"Cumplimiento GDPR y CCPA\",\n      \"features.advanced.security.feature3\": \"Autenticación JWT segura\",\n      \"features.advanced.customization.title\": \"Personalización completa\",\n      \"features.advanced.customization.description\": \"Adapta perfectamente el asistente a tu marca y necesidades específicas.\",\n      \"features.advanced.customization.feature1\": \"Interfaz personalizable\",\n      \"features.advanced.customization.feature2\": \"Flujos de conversación a medida\",\n      \"features.advanced.customization.feature3\": \"Integración API flexible\",\n      \"features.conversationalAI.title\": \"IA Conversacional\",\n      \"features.conversationalAI.description\": \"Asistente de IA inteligente para conversaciones naturales\",\n      \"features.taskAutomation.title\": \"Automatización de Tareas\",\n      \"features.taskAutomation.description\": \"Automatiza tus procesos repetitivos\",\n      \"features.easyIntegration.title\": \"Integración Fácil\",\n      \"features.easyIntegration.description\": \"Integra fácilmente con tus sistemas existentes\",\n      \"features.analytics.title\": \"Análisis\",\n      \"features.analytics.description\": \"Análisis detallados y reportes\",\n      \"cta.title\": \"Listo para Empezar\",\n      \"cta.subtitle\": \"Únete hoy mismo\",\n      \"cta.getStartedFree\": \"Empezar Gratis\",\n      \"cta.scheduleDemo\": \"Programar Demo\",\n      \n      // Terms of Service\n      \"terms.title\": \"Términos de Servicio\",\n      \"terms.subtitle\": \"Por favor lee estos términos cuidadosamente\",\n      \"terms.acceptance.title\": \"Aceptación de términos\",\n      \"terms.acceptance.description\": \"Al usar nuestros servicios, aceptas estos términos.\",\n      \"terms.services.title\": \"Descripción de servicios\",\n      \"terms.services.description\": \"Nuestros servicios incluyen:\",\n      \"terms.services.item1\": \"Asistente de IA conversacional\",\n      \"terms.services.item2\": \"Integración de widgets de chat\",\n      \"terms.services.item3\": \"Análisis y reportes\",\n      \"terms.services.item4\": \"Soporte técnico\",\n      \"terms.user_obligations.title\": \"Obligaciones del usuario\",\n      \"terms.user_obligations.description\": \"Te comprometes a:\",\n      \"terms.user_obligations.item1\": \"Usar los servicios legalmente\",\n      \"terms.user_obligations.item2\": \"Respetar los derechos de otros\",\n      \"terms.user_obligations.item3\": \"Proporcionar información exacta\",\n      \"terms.user_obligations.item4\": \"Mantener la seguridad de tu cuenta\",\n      \"terms.payment.title\": \"Pago y facturación\",\n      \"terms.payment.description\": \"Condiciones de pago:\",\n      \"terms.payment.item1\": \"Los pagos se procesan mensualmente\",\n      \"terms.payment.item2\": \"Todos los precios están en CAD\",\n      \"terms.payment.item3\": \"Reembolsos según nuestra política\",\n      \"terms.payment.item4\": \"Cargos por mora aplicables\",\n      \"terms.intellectual_property.title\": \"Propiedad intelectual\",\n      \"terms.intellectual_property.description\": \"Derechos y licencias:\",\n      \"terms.intellectual_property.item1\": \"Conservamos todos los derechos sobre nuestra tecnología\",\n      \"terms.intellectual_property.item2\": \"Conservas los derechos sobre tu contenido\",\n      \"terms.intellectual_property.item3\": \"Se otorga licencia de uso limitada\",\n      \"terms.limitation.title\": \"Limitación de responsabilidad\",\n      \"terms.limitation.description\": \"Nuestra responsabilidad está limitada según la ley aplicable.\",\n      \"terms.termination.title\": \"Terminación\",\n      \"terms.termination.description\": \"Condiciones de terminación:\",\n      \"terms.termination.item1\": \"Puedes cancelar en cualquier momento\",\n      \"terms.termination.item2\": \"Podemos suspender por violación\",\n      \"terms.termination.item3\": \"Los datos se eliminan después de la terminación\",\n      \"terms.contact.title\": \"Contacto\",\n      \"terms.contact.description\": \"Para cualquier pregunta legal:\",\n      \"terms.contact.address\": \"Montreal, QC, Canadá\",\n      \"terms.last_updated\": \"enero 2025\",\n      \n      // Help Center\n      \"help.title\": \"Centro de Ayuda\",\n      \"help.subtitle\": \"Encuentra respuestas a tus preguntas\",\n      \"help.search_placeholder\": \"Buscar en la ayuda...\",\n      \"help.popular.title\": \"Artículos populares\",\n      \"help.popular.article1\": \"Cómo empezar con AIPPS\",\n      \"help.popular.badge\": \"Popular\",\n      \"help.popular.article2\": \"Integrar el widget de chat\",\n      \"help.popular.article3\": \"Configurar tu asistente de IA\",\n      \"help.popular.article4\": \"Entender tu facturación\",\n      \"help.popular.article5\": \"Resolver problemas de conexión\",\n      \"help.categories.title\": \"Categorías de ayuda\",\n      \"help.categories.getting_started.title\": \"Primeros pasos\",\n      \"help.categories.getting_started.description\": \"Guía para empezar con AIPPS\",\n      \"help.categories.getting_started.article1\": \"Crear tu cuenta\",\n      \"help.categories.getting_started.article2\": \"Primer widget de chat\",\n      \"help.categories.getting_started.article3\": \"Configuración básica\",\n      \"help.categories.getting_started.article4\": \"Primera conversación\",\n      \"help.categories.configuration.title\": \"Configuración\",\n      \"help.categories.configuration.description\": \"Personalizar tu experiencia\",\n      \"help.categories.configuration.article1\": \"Configuración del widget\",\n      \"help.categories.configuration.article2\": \"Personalizar el asistente\",\n      \"help.categories.configuration.article3\": \"Gestionar integraciones\",\n      \"help.categories.configuration.article4\": \"Opciones avanzadas\",\n      \"help.categories.integration.title\": \"Integración\",\n      \"help.categories.integration.description\": \"Conectar AIPPS con tus herramientas\",\n      \"help.categories.integration.article1\": \"API y webhooks\",\n      \"help.categories.integration.article2\": \"Integración con WordPress\",\n      \"help.categories.integration.article3\": \"Código de integración\",\n      \"help.categories.integration.article4\": \"Pruebas de integración\",\n      \"help.categories.billing.title\": \"Facturación\",\n      \"help.categories.billing.description\": \"Gestionar tu suscripción\",\n      \"help.categories.billing.article1\": \"Planes y precios\",\n      \"help.categories.billing.article2\": \"Cambiar tu plan\",\n      \"help.categories.billing.article3\": \"Historial de pagos\",\n      \"help.categories.billing.article4\": \"Política de reembolso\",\n      \"help.categories.troubleshooting.title\": \"Solución de problemas\",\n      \"help.categories.troubleshooting.description\": \"Resolver problemas\",\n      \"help.categories.troubleshooting.article1\": \"El widget no se muestra\",\n      \"help.categories.troubleshooting.article2\": \"Problemas de conexión\",\n      \"help.categories.troubleshooting.article3\": \"Mensajes no enviados\",\n      \"help.categories.troubleshooting.article4\": \"Errores comunes\",\n      \"help.categories.account.title\": \"Cuenta\",\n      \"help.categories.account.description\": \"Gestionar tu cuenta\",\n      \"help.categories.account.article1\": \"Modificar perfil\",\n      \"help.categories.account.article2\": \"Seguridad de la cuenta\",\n      \"help.categories.account.article3\": \"Notificaciones\",\n      \"help.categories.account.article4\": \"Eliminar cuenta\",\n      \"help.contact_support.title\": \"Contactar soporte\",\n      \"help.contact_support.description\": \"¿Necesitas ayuda adicional?\",\n      \"help.contact_support.contact_button\": \"Contactar soporte\",\n      \"help.contact_support.email_button\": \"Enviar email\",\n      \n      // Privacy Policy\n      \"privacy.title\": \"Política de Privacidad\",\n      \"privacy.subtitle\": \"Cómo protegemos tus datos\",\n      \"privacy.data_collection.title\": \"Recolección de datos\",\n      \"privacy.data_collection.description\": \"Recolectamos la siguiente información:\",\n      \"privacy.data_collection.item1\": \"Información de contacto y cuenta\",\n      \"privacy.data_collection.item2\": \"Datos de uso y análisis\",\n      \"privacy.data_collection.item3\": \"Conversaciones e interacciones\",\n      \"privacy.data_collection.item4\": \"Información técnica y de sesión\",\n      \"privacy.data_usage.title\": \"Uso de datos\",\n      \"privacy.data_usage.description\": \"Tus datos se usan para:\",\n      \"privacy.data_usage.item1\": \"Proporcionar y mejorar nuestros servicios\",\n      \"privacy.data_usage.item2\": \"Personalizar tu experiencia\",\n      \"privacy.data_usage.item3\": \"Soporte al cliente y técnico\",\n      \"privacy.data_usage.item4\": \"Análisis e investigación\",\n      \"privacy.data_sharing.title\": \"Compartir datos\",\n      \"privacy.data_sharing.description\": \"Solo compartimos tus datos:\",\n      \"privacy.data_sharing.item1\": \"Con tu consentimiento explícito\",\n      \"privacy.data_sharing.item2\": \"Para cumplir con obligaciones legales\",\n      \"privacy.data_sharing.item3\": \"Con socios de confianza bajo contrato\",\n      \"privacy.security.title\": \"Seguridad\",\n      \"privacy.security.description\": \"Nuestras medidas de seguridad incluyen:\",\n      \"privacy.security.item1\": \"Cifrado de datos en tránsito y reposo\",\n      \"privacy.security.item2\": \"Autenticación de dos factores\",\n      \"privacy.security.item3\": \"Auditorías de seguridad regulares\",\n      \"privacy.security.item4\": \"Controles de acceso estrictos\",\n      \"privacy.user_rights.title\": \"Tus derechos\",\n      \"privacy.user_rights.description\": \"Tienes derecho a:\",\n      \"privacy.user_rights.item1\": \"Acceder a tus datos personales\",\n      \"privacy.user_rights.item2\": \"Corregir información incorrecta\",\n      \"privacy.user_rights.item3\": \"Eliminar tus datos\",\n      \"privacy.user_rights.item4\": \"Transferir tus datos\",\n      \"privacy.contact.title\": \"Contacto\",\n      \"privacy.contact.description\": \"Para cualquier pregunta sobre privacidad:\",\n      \"privacy.contact.address\": \"Montreal, QC, Canadá\",\n      \"privacy.last_updated\": \"enero 2025\",\n      \n      // About Page\n      \"about.title\": \"Acerca de\",\n      \"about.subtitle\": \"Nuestra misión y visión\",\n      \"about.mission.title\": \"Nuestra Misión\",\n      \"about.mission.description\": \"Democratizar la inteligencia artificial para todas las empresas.\",\n      \"about.vision.title\": \"Nuestra Visión\",\n      \"about.vision.description\": \"Un mundo donde cada empresa puede ofrecer experiencias excepcionales al cliente a través de IA.\",\n      \"about.global.title\": \"Alcance Global\",\n      \"about.global.description\": \"Servimos a clientes en todo el mundo con soluciones multilingües.\",\n      \"about.innovation.title\": \"Innovación\",\n      \"about.innovation.description\": \"A la vanguardia de la tecnología de IA conversacional.\",\n      \"about.story.title\": \"Nuestra Historia\",\n      \"about.story.paragraph1\": \"AIPPS fue fundada con la visión de hacer la inteligencia artificial accesible a todas las empresas.\",\n      \"about.story.paragraph2\": \"Creemos que cada empresa, sin importar su tamaño, debería poder ofrecer experiencias excepcionales al cliente.\",\n      \"about.story.paragraph3\": \"Hoy, continuamos innovando para dar forma al futuro de la interacción con el cliente.\",\n      \n      // Pricing Page\n      \"pricing.faq.title\": \"Preguntas Frecuentes\",\n      \"pricing.faq.q1\": \"¿Puedo cambiar de plan en cualquier momento?\",\n      \"pricing.faq.a1\": \"Sí, puedes cambiar de plan en cualquier momento desde tu panel de control.\",\n      \"pricing.support.title\": \"Soporte\",\n      \"pricing.support.q1\": \"¿Qué nivel de soporte recibiré?\",\n      \"pricing.support.a1\": \"Todos los planes incluyen soporte por email. Los planes superiores incluyen soporte prioritario.\",\n      \"pricing.security.title\": \"Seguridad\",\n      \"pricing.security.q1\": \"¿Están protegidos mis datos?\",\n      \"pricing.security.a1\": \"Utilizamos cifrado de nivel empresarial y cumplimos con las normas RGPD para proteger tu información.\",\n      \n      // Documentation\n      \"documentation.title\": \"Documentación\",\n      \"documentation.download_pdf\": \"Descargar PDF\",\n      \"documentation.subtitle\": \"Guía completa para usar AIPPS\",\n      \"documentation.overview\": \"Resumen\",\n      \"documentation.features\": \"Características\",\n      \"documentation.widget_integration\": \"Integración de widget\",\n      \"documentation.contextual_understanding\": \"Comprensión contextual\",\n      \"documentation.document_training\": \"Entrenamiento con documentos\",\n      \"documentation.lead_capture\": \"Captura de prospectos\",\n      \"documentation.analytics\": \"Análisis\",\n      \"documentation.task_automation\": \"Automatización de tareas\",\n      \"documentation.form_creation\": \"Creación de formularios\",\n      \"documentation.forms\": \"Formularios\",\n      \"documentation.education\": \"Educación\",\n      \"documentation.business\": \"Negocio\",\n      \"documentation.professional\": \"Profesional\",\n      \"documentation.implementation\": \"Implementación\",\n      \n      // Documentation Overview\n      \"documentation.overview.title\": \"Resumen\",\n      \"documentation.overview.introduction\": \"Introducción completa a AIPPS\",\n      \"documentation.overview.problem_title\": \"El Problema\",\n      \"documentation.overview.problem_description\": \"Las empresas luchan por ofrecer soporte al cliente 24/7 efectivo\",\n      \"documentation.overview.solution_intro\": \"Nuestra solución de IA revoluciona la interacción con el cliente\",\n      \"documentation.overview.solution_point_1\": \"Asistente de IA inteligente disponible 24/7\",\n      \"documentation.overview.solution_point_2\": \"Integración fácil en minutos\",\n      \"documentation.overview.solution_point_3\": \"Análisis detallados e insights\",\n      \"documentation.overview.solution_point_4\": \"Soporte multilingüe completo\",\n      \"documentation.overview.card1_title\": \"IA Conversacional\",\n      \"documentation.overview.card1_text\": \"Asistente inteligente para interacciones naturales\",\n      \"documentation.overview.card2_title\": \"Integración Simple\",\n      \"documentation.overview.card2_text\": \"Despliega en minutos en tu sitio web\",\n      \"documentation.overview.card3_title\": \"Análisis Avanzados\",\n      \"documentation.overview.card3_text\": \"Insights detallados sobre interacciones con clientes\",\n      \"documentation.overview.card4_title\": \"Soporte Multilingüe\",\n      \"documentation.overview.card4_text\": \"Comunícate en múltiples idiomas\",\n      \n      // Professional Services\n      \"professional.intro_text\": \"Soluciones profesionales para servicios expertos\",\n      \"professional.specific_benefits\": \"Beneficios específicos\",\n      \"professional.client_qualification\": \"Calificación de clientes\",\n      \"professional.qualification1\": \"Identificación de necesidades del cliente\",\n      \"professional.qualification2\": \"Pre-calificación automática\",\n      \"professional.qualification3\": \"Enrutamiento al experto apropiado\",\n      \"professional.appointment_scheduling\": \"Programación de citas\",\n      \"professional.scheduling1\": \"Calendario integrado inteligente\",\n      \"professional.scheduling2\": \"Confirmación automática\",\n      \"professional.scheduling3\": \"Recordatorios personalizados\",\n      \"professional.client_education\": \"Educación del cliente\",\n      \"professional.education1\": \"Recursos informativos automáticos\",\n      \"professional.education2\": \"FAQ dinámicas\",\n      \"professional.education3\": \"Guías paso a paso\",\n      \"professional.expectation_management\": \"Gestión de expectativas\",\n      \"professional.expectation1\": \"Comunicación clara de procesos\",\n      \"professional.expectation2\": \"Tiempos transparentes\",\n      \"professional.expectation3\": \"Seguimiento proactivo\",\n      \"professional.content_marketing\": \"Marketing de contenido\",\n      \"professional.marketing1\": \"Generación de leads calificados\",\n      \"professional.marketing2\": \"Nurturing automatizado\",\n      \"professional.marketing3\": \"Personalización de mensajes\",\n      \"professional.marketing4\": \"Segmentación inteligente\",\n      \"professional.marketing5\": \"ROI medible\",\n      \"professional.testimonials\": \"Testimonios\",\n      \"professional.testimonial_text\": \"AIPPS ha transformado nuestra práctica\",\n      \"professional.testimonial_author\": \"Consultor experto\",\n      \"professional.implement_button\": \"Implementar ahora\",\n      \n      // Forms Documentation\n      \"forms.intro_text\": \"Crea y gestiona formularios inteligentes fácilmente\",\n      \"forms.available_types\": \"Tipos de formularios disponibles\",\n      \"forms.templates_intro\": \"Plantillas prediseñadas para todas tus necesidades\",\n      \"forms.contact_form\": \"Formulario de contacto\",\n      \"forms.contact_form_desc\": \"Recopila información de contacto fácilmente\",\n      \"forms.waitlist_form\": \"Lista de espera\",\n      \"forms.waitlist_form_desc\": \"Gestiona tus listas de espera eficientemente\",\n      \"forms.survey_form\": \"Formulario de encuesta\",\n      \"forms.survey_form_desc\": \"Recopila opiniones y feedback\",\n      \"forms.feedback_form\": \"Formulario de comentarios\",\n      \"forms.feedback_form_desc\": \"Mejora tus servicios con comentarios de clientes\",\n      \"forms.lead_capture_form\": \"Captura de prospectos\",\n      \"forms.lead_capture_form_desc\": \"Convierte visitantes en prospectos\",\n      \"forms.custom_form\": \"Formulario personalizado\",\n      \"forms.custom_form_desc\": \"Crea formularios a medida\",\n      \"forms.main_features\": \"Características principales\",\n      \"forms.flexible_design\": \"Diseño flexible\",\n      \"forms.flexible_design_desc\": \"Personaliza la apariencia según tu marca\",\n      \"forms.configurable_fields\": \"Campos configurables\",\n      \"forms.configurable_fields_desc\": \"Agrega y modifica campos fácilmente\",\n      \"forms.advanced_validation\": \"Validación avanzada\",\n      \"forms.advanced_validation_desc\": \"Valida datos en tiempo real\",\n      \"forms.conditional_logic\": \"Lógica condicional\",\n      \"forms.conditional_logic_desc\": \"Campos dinámicos según respuestas\",\n      \"forms.ai_integration\": \"Integración IA\",\n      \"forms.ai_integration_desc\": \"Asistente IA integrado en formularios\",\n      \"forms.captcha_protection\": \"Protección CAPTCHA\",\n      \"forms.captcha_protection_desc\": \"Bloquea envíos automatizados\",\n      \"forms.email_notifications\": \"Notificaciones por email\",\n      \"forms.email_notifications_desc\": \"Alertas automáticas para nuevos envíos\",\n      \"forms.detailed_analytics\": \"Análisis detallados\",\n      \"forms.detailed_analytics_desc\": \"Estadísticas completas sobre rendimiento\",\n      \"forms.response_sorting\": \"Ordenamiento de respuestas\",\n      \"forms.response_sorting_desc\": \"Organiza y filtra envíos\",\n      \"forms.creation_process\": \"Proceso de creación\",\n      \"forms.access_dashboard\": \"Acceder al panel\",\n      \"forms.access_dashboard_desc\": \"Inicia sesión en tu espacio admin\",\n      \"forms.create_new\": \"Crear nuevo formulario\",\n      \"forms.create_new_desc\": \"Comienza con una plantilla o desde cero\",\n      \"forms.basic_config\": \"Configuración básica\",\n      \"forms.basic_config_desc\": \"Define título, descripción y parámetros\",\n      \"forms.design_fields\": \"Diseño de campos\",\n      \"forms.design_fields_desc\": \"Agrega y organiza tus campos\",\n      \"forms.customization\": \"Personalización\",\n      \"forms.customization_desc\": \"Adapta diseño y comportamiento\",\n      \"forms.advanced_config\": \"Configuración avanzada\",\n      \"forms.advanced_config_desc\": \"Configuraciones expertas e integraciones\",\n      \"forms.preview\": \"Vista previa\",\n      \"forms.preview_desc\": \"Prueba tu formulario antes de publicar\",\n      \"forms.publication\": \"Publicación\",\n      \"forms.publication_desc\": \"Despliega en tu sitio web\",\n      \"forms.integration_methods\": \"Métodos de integración\",\n      \"forms.simplified_process\": \"Proceso simplificado\",\n      \"forms.direct_embed\": \"Integración directa\",\n      \"forms.direct_embed_desc\": \"Código HTML simple para copiar y pegar\",\n      \"forms.get_code\": \"Obtener el código\",\n      \"forms.get_code_desc\": \"Copia el código de integración generado\",\n      \"forms.copy_code\": \"Copiar código\",\n      \"forms.copy_code_desc\": \"Código HTML listo para usar\",\n      \"forms.insert_code\": \"Insertar código\",\n      \"forms.insert_code_desc\": \"Pega en tu sitio web\",\n      \"forms.code_example\": \"Ejemplo de código\",\n      \"forms.customization_options\": \"Opciones de personalización\",\n      \"forms.modal_instructions\": \"Instrucciones para modal\",\n      \"forms.customize_style\": \"Personalizar estilo\",\n      \"forms.configure_actions\": \"Configurar acciones\",\n      \"forms.implement_validations\": \"Implementar validaciones\",\n      \"forms.analytics_integration\": \"Integración de analytics\",\n      \"forms.technical_considerations\": \"Consideraciones técnicas\",\n      \"forms.works_with_cms\": \"Compatible con todos los CMS\",\n      \"forms.async_loading\": \"Carga asíncrona\",\n      \"forms.secure_data\": \"Datos seguros\",\n      \"forms.spam_protection\": \"Protección anti-spam\",\n      \"forms.responsive_design\": \"Diseño responsive\",\n      \"forms.improved_response_management\": \"Gestión mejorada de respuestas\",\n      \"forms.advanced_capabilities\": \"Capacidades avanzadas\",\n      \"forms.view_responses\": \"Ver respuestas\",\n      \"forms.view_responses_desc\": \"Interfaz intuitiva para consultar envíos\",\n      \"forms.export_data\": \"Exportar datos\",\n      \"forms.export_data_desc\": \"Exportar CSV, Excel o PDF\",\n      \"forms.filter_sort\": \"Filtrar y ordenar\",\n      \"forms.filter_sort_desc\": \"Herramientas avanzadas de filtrado y ordenamiento\",\n      \"forms.automatic_analysis\": \"Análisis automático\",\n      \"forms.automatic_analysis_desc\": \"IA analiza respuestas automáticamente\",\n      \"forms.follow_up\": \"Seguimiento automático\",\n      \"forms.follow_up_desc\": \"Emails de seguimiento personalizados\",\n      \"forms.realtime_notifications\": \"Notificaciones en tiempo real\",\n      \"forms.realtime_notifications_desc\": \"Alertas instantáneas para nuevos envíos\",\n      \"forms.widget_integration\": \"Integración de widget\",\n      \"forms.widget_integration_desc\": \"Formularios integrados en chat\",\n      \"forms.present_forms\": \"Presentar formularios\",\n      \"forms.autocomplete_fields\": \"Campos autocompletados\",\n      \"forms.continue_conversation\": \"Continuar conversación\",\n      \"forms.provide_assistance\": \"Proporcionar asistencia\",\n      \"forms.popular_use_cases\": \"Casos de uso populares\",\n      \"forms.education_use\": \"Uso educativo\",\n      \"forms.education_use_desc\": \"Inscripciones, evaluaciones, feedback estudiantil\",\n      \"forms.business_use\": \"Uso comercial\",\n      \"forms.business_use_desc\": \"Generación leads, encuestas satisfacción\",\n      \"forms.professional_use\": \"Uso profesional\",\n      \"forms.professional_use_desc\": \"Consultas, citas, calificaciones\",\n      \"forms.ecommerce_use\": \"Uso e-commerce\",\n      \"forms.ecommerce_use_desc\": \"Pedidos personalizados, soporte cliente\",\n      \"forms.create_first_button\": \"Crear tu primer formulario\",\n      \n      // Implementation Guide\n      \"implementation.intro_text\": \"Guía de implementación completa\",\n      \"implementation.process_title\": \"Proceso en 4 pasos\",\n      \"implementation.step1_title\": \"1. Elegir tu widget\",\n      \"implementation.step1_desc\": \"Selecciona el tipo de interfaz que mejor se adapte\",\n      \"implementation.widget_option\": \"Widget burbuja - Botón flotante pequeño\",\n      \"implementation.fullscreen_option\": \"Pantalla completa - Interfaz completa\",\n      \"implementation.wordpress_note\": \"Compatible con WordPress y todos los CMS\",\n      \"implementation.step2_title\": \"2. Personalizar la apariencia\",\n      \"implementation.step2_desc\": \"Adapta el diseño a tu marca\",\n      \"implementation.customize_colors\": \"Colores y tema\",\n      \"implementation.customize_position\": \"Posición y tamaño\",\n      \"implementation.customize_welcome\": \"Mensaje de bienvenida\",\n      \"implementation.customize_languages\": \"Idiomas soportados\",\n      \"implementation.customize_personality\": \"Personalidad del asistente\",\n      \"implementation.step3_title\": \"3. Entrenar tu IA\",\n      \"implementation.step3_desc\": \"Alimenta la base de conocimientos\",\n      \"implementation.upload_pdf\": \"Subir archivos PDF\",\n      \"implementation.upload_docx\": \"Subir documentos Word\",\n      \"implementation.upload_excel\": \"Subir archivos Excel\",\n      \"implementation.write_instructions\": \"Escribir instrucciones personalizadas\",\n      \"implementation.urls_note\": \"O proporcionar URLs para analizar\",\n      \"implementation.step4_title\": \"4. Monitorear y optimizar\",\n      \"implementation.step4_desc\": \"Analiza el rendimiento y mejora\",\n      \"implementation.monitor_conversations\": \"Monitorear conversaciones\",\n      \"implementation.review_metrics\": \"Revisar métricas\",\n      \"implementation.access_leads\": \"Acceder a leads generados\",\n      \"implementation.refine_training\": \"Refinar el entrenamiento\",\n      \"implementation.isolated_stats\": \"Estadísticas detalladas por integración\",\n      \"implementation.technical_requirements\": \"Requisitos técnicos\",\n      \"implementation.compatibility_intro\": \"Compatible con todas las tecnologías\",\n      \"implementation.cms_compatibility\": \"Todos los CMS (WordPress, Drupal, Joomla)\",\n      \"implementation.html_compatibility\": \"Sitios HTML estáticos\",\n      \"implementation.js_compatibility\": \"Aplicaciones JavaScript\",\n      \"implementation.no_server_mods\": \"No requiere modificaciones del servidor\",\n      \"implementation.start_button\": \"Comenzar implementación\",\n      \n      // Business Use Cases\n      \"business.intro_text\": \"Soluciones comerciales para empresas modernas\",\n      \"business.specific_benefits\": \"Beneficios específicos\",\n      \"business.lead_generation\": \"Generación de leads\",\n      \"business.lead_gen1\": \"Calificación automática de prospectos\",\n      \"business.lead_gen2\": \"Captura de información estratégica\",\n      \"business.lead_gen3\": \"Seguimiento personalizado de oportunidades\",\n      \"business.customer_support\": \"Soporte al cliente\",\n      \"business.support1\": \"Respuestas instantáneas 24/7\",\n      \"business.support2\": \"Escalado inteligente a humanos\",\n      \"business.support3\": \"Base de conocimientos evolutiva\",\n      \"business.catalog_presentation\": \"Presentación de catálogo\",\n      \"business.catalog1\": \"Recomendaciones personalizadas\",\n      \"business.catalog2\": \"Navegación asistida por IA\",\n      \"business.catalog3\": \"Comparación inteligente de productos\",\n      \"business.sales_optimization\": \"Optimización de ventas\",\n      \"business.sales_opt1\": \"Proceso de venta guiado\",\n      \"business.sales_opt2\": \"Objeciones manejadas automáticamente\",\n      \"business.sales_opt3\": \"Upselling y cross-selling inteligentes\",\n      \"business.behavior_analysis\": \"Análisis comportamental\",\n      \"business.behavior1\": \"Seguimiento de interacciones de clientes\",\n      \"business.behavior2\": \"Patrones de compra identificados\",\n      \"business.behavior3\": \"Optimización del customer journey\",\n      \"business.behavior4\": \"Insights predictivos avanzados\",\n      \"business.testimonials\": \"Testimonios\",\n      \"business.testimonial_text\": \"AIPPS aumentó nuestras conversiones en 300%\",\n      \"business.testimonial_author\": \"Director comercial\",\n      \"business.implement_button\": \"Implementar para tu empresa\",\n      \n      // Education Use Cases\n      \"education.intro_text\": \"Soluciones educativas para instituciones de enseñanza\",\n      \"education.specific_benefits\": \"Beneficios específicos\",\n      \"education.admission_process\": \"Proceso de admisión\",\n      \"education.admission_benefit1\": \"Orientación de candidatos\",\n      \"education.admission_benefit2\": \"Información sobre programas\",\n      \"education.admission_benefit3\": \"Asistencia en solicitudes\",\n      \"education.program_presentation\": \"Presentación de programas\",\n      \"education.program_detail1\": \"Detalles de los currículos\",\n      \"education.program_detail2\": \"Prerrequisitos y salidas profesionales\",\n      \"education.program_detail3\": \"Testimonios de estudiantes\",\n      \"education.lead_capture\": \"Captura de prospectos estudiantiles\",\n      \"education.lead_capture1\": \"Recolección de información calificada\",\n      \"education.lead_capture2\": \"Seguimiento personalizado de candidatos\",\n      \"education.lead_capture3\": \"Nurturing automatizado\",\n      \"education.international_support\": \"Soporte internacional\",\n      \"education.international1\": \"Soporte multilingüe\",\n      \"education.international2\": \"Información sobre visas\",\n      \"education.international3\": \"Acompañamiento cultural\",\n      \"education.trend_analysis\": \"Análisis de tendencias\",\n      \"education.trend1\": \"Programas más demandados\",\n      \"education.trend2\": \"Preguntas frecuentes identificadas\",\n      \"education.trend3\": \"Optimización de comunicaciones\",\n      \"education.trend4\": \"Predicción de inscripciones\",\n      \"education.testimonials\": \"Testimonios\",\n      \"education.testimonial_text\": \"AIPPS simplificó nuestro proceso de admisión\",\n      \"education.testimonial_author\": \"Responsable de admisiones\",\n      \"education.implement_button\": \"Implementar para tu institución\",\n      \n      // Contact Page\n      \"contact.title\": \"Contáctanos\",\n      \"contact.subtitle\": \"Estamos aquí para ayudarte\",\n      \"contact.info.title\": \"Información de contacto\",\n      \"contact.info.email\": \"Email\",\n      \"contact.info.phone\": \"Teléfono\",\n      \"contact.info.address\": \"Dirección\",\n      \"contact.info.hours\": \"Horario de atención\",\n      \"contact.info.hours_details\": \"Lunes - Viernes: 9:00 - 18:00 EST\",\n      \"contact.form.title\": \"Envíanos un mensaje\",\n      \"contact.form.name\": \"Nombre\",\n      \"contact.form.name_placeholder\": \"Tu nombre completo\",\n      \"contact.form.email\": \"Email\",\n      \"contact.form.email_placeholder\": \"tu@email.com\",\n      \"contact.form.subject\": \"Asunto\",\n      \"contact.form.subject_placeholder\": \"¿Cómo podemos ayudarte?\",\n      \"contact.form.message\": \"Mensaje\",\n      \"contact.form.message_placeholder\": \"Describe tu pregunta o solicitud...\",\n      \"contact.form.send\": \"Enviar mensaje\",\n      \n      // Documentation\n      \"documentation.overview.start_button\": \"Comenzar ahora\",\n      \n      // Get Started Page\n      \"getStartedPage.title\": \"Comenzar\",\n      \"getStartedPage.subtitle\": \"Integra AIPPS en tu sitio web en pocos minutos\",\n      \"getStartedPage.tabs.widget\": \"Widget\",\n      \"getStartedPage.tabs.fullscreen\": \"Pantalla completa\",\n      \"getStartedPage.tabs.form\": \"Formulario\",\n      \"getStartedPage.widget.step1.title\": \"Paso 1: Agrega este código a tu sitio web\",\n      \"getStartedPage.widget.step1.wordpress_note\": \"Si usas WordPress: Puedes agregarlo en el tema en footer.php o instalar un plugin que permita insertar código HTML.\",\n      \"getStartedPage.widget.step2.title\": \"Paso 2: Personaliza tu widget (opcional)\",\n      \"getStartedPage.widget.step2.description\": \"Puedes personalizar el comportamiento y apariencia del widget agregando parámetros adicionales:\",\n      \"getStartedPage.widget.step2.customization_title\": \"Opciones de personalización:\",\n      \"getStartedPage.widget.step2.position\": \"Posición del widget en la página\",\n      \"getStartedPage.widget.step2.theme_color\": \"Color principal del widget\",\n      \"getStartedPage.widget.step2.assistant_name\": \"Nombre del asistente\",\n      \"getStartedPage.widget.step2.welcome_message\": \"Mensaje de bienvenida personalizado\",\n      \"getStartedPage.widget.step2.configure_dashboard\": \"Configura estas opciones desde el panel de administración:\",\n      \"getStartedPage.widget.step2.dashboard_steps.0\": \"Accede a la sección \\\"Integraciones\\\" del panel\",\n      \"getStartedPage.widget.step2.dashboard_steps.1\": \"Selecciona la integración que quieres configurar\",\n      \"getStartedPage.widget.step2.dashboard_steps.2\": \"Personaliza los colores, posición y mensajes\",\n      \"getStartedPage.widget.step2.dashboard_steps.3\": \"Los cambios se aplicarán automáticamente\",\n      \"getStartedPage.buttons.go_to_integrations\": \"Ir a integraciones\",\n      \"getStartedPage.widget.step3.title\": \"Paso 3: Entrena tu asistente (opcional)\",\n      \"getStartedPage.widget.step3.description\": \"Para que tu asistente proporcione respuestas útiles y relevantes, puedes entrenarlo con:\",\n      \"getStartedPage.buttons.manage_content\": \"Gestionar contenido\",\n      \"getStartedPage.widget.step3.step4_title\": \"Paso 4: Configura formularios (opcional)\",\n      \"getStartedPage.widget.step3.step4_description\": \"Alimenta tu widget con formularios personalizados para capturar leads e información específica:\",\n      \"getStartedPage.buttons.create_forms\": \"Crear formularios\",\n      \"getStartedPage.cta.forms_title\": \"¿Listo para crear tus formularios?\",\n      \"getStartedPage.cta.forms_description\": \"Crea formularios personalizados para capturar leads y recopilar información importante de tus visitantes.\",\n      \"getStartedPage.buttons.forms_guide\": \"Guía de formularios\",\n      \"getStartedPage.support.title\": \"¿Necesitas ayuda?\",\n      \"getStartedPage.support.description\": \"Consulta nuestra documentación o contacta nuestro soporte para obtener ayuda.\",\n      \"getStartedPage.buttons.view_docs\": \"Ver documentación\",\n      \"getStartedPage.buttons.contact_support\": \"Contactar soporte\",\n      \"getStartedPage.form.step3.dashboard_steps\": [\n        \"Accede a la sección \\\"Integraciones\\\" del panel\",\n        \"Selecciona la integración que quieres configurar\",\n        \"Personaliza los colores, posición y mensajes\",\n        \"Los cambios se aplicarán automáticamente\"\n      ],\n      \n      // Fullscreen Mode\n      \"getStartedPage.fullscreen.step1.title\": \"Paso 1: Agrega este código a tu sitio web\",\n      \"getStartedPage.fullscreen.step1.description\": \"Copia y pega este código en el HTML de tu sitio web, justo antes de la etiqueta de cierre </body>:\",\n      \"getStartedPage.fullscreen.step1.wordpress_note\": \"Si usas WordPress: Puedes agregarlo en el tema en footer.php o instalar un plugin que permita insertar código HTML.\",\n      \"getStartedPage.fullscreen.step2.title\": \"Paso 2: Personaliza tu experiencia (opcional)\",\n      \"getStartedPage.fullscreen.step2.description\": \"El modo pantalla completa crea una experiencia inmersiva similar a ChatGPT. Puedes personalizarlo con:\",\n      \"getStartedPage.fullscreen_features.title\": \"Características del modo pantalla completa:\",\n      \"getStartedPage.fullscreen_features.register_login\": \"Registro e inicio de sesión de usuarios\",\n      \"getStartedPage.fullscreen_features.personal_history\": \"Historial personal de conversaciones\",\n      \"getStartedPage.fullscreen_features.auto_titles\": \"Generación automática de títulos\",\n      \"getStartedPage.fullscreen_features.conversation_management\": \"Gestión de conversaciones\",\n      \"getStartedPage.fullscreen_features.user_info\": \"Información de usuario avanzada\",\n      \"getStartedPage.fullscreen_features.jwt_security\": \"Seguridad JWT integrada\",\n      \"getStartedPage.fullscreen_features.visual_customization\": \"Personalización visual completa\",\n      \"getStartedPage.fullscreen_features.brand_colors\": \"Colores de marca\",\n      \"getStartedPage.fullscreen_features.welcome_messages\": \"Mensajes de bienvenida\",\n      \"getStartedPage.fullscreen_features.registration_config\": \"Configuración de registro\",\n      \"getStartedPage.fullscreen_features.privacy_settings\": \"Configuraciones de privacidad\",\n      \"getStartedPage.buttons.configure_auth\": \"Configurar autenticación\",\n      \n      // Ignored Sections\n      \"getStartedPage.ignored_sections.step3_title\": \"Paso 3: Secciones ignoradas (opcional)\",\n      \"getStartedPage.ignored_sections.title\": \"Secciones ignoradas inteligentes\",\n      \"getStartedPage.ignored_sections.description\": \"Configura secciones de tu sitio web que el asistente debe ignorar durante el análisis automático:\",\n      \"getStartedPage.ignored_sections.benefit_1\": \"Evita el análisis de contenido irrelevante\",\n      \"getStartedPage.ignored_sections.benefit_2\": \"Mejora la precisión de las respuestas\",\n      \"getStartedPage.ignored_sections.benefit_3\": \"Reduce el ruido en la base de conocimientos\",\n      \"getStartedPage.ignored_sections.benefit_4\": \"Optimiza el rendimiento de la IA\",\n      \"getStartedPage.ignored_sections.config_example\": \"Ejemplo de configuración:\",\n      \"getStartedPage.ignored_sections.config_description\": \"Para configurar las secciones ignoradas:\",\n      \"getStartedPage.ignored_sections.step_1\": \"Identifica los selectores CSS de los elementos a ignorar\",\n      \"getStartedPage.ignored_sections.step_2\": \"Agrégalos en la configuración de integración\",\n      \"getStartedPage.ignored_sections.step_3\": \"El asistente ignorará automáticamente estas secciones\",\n      \"getStartedPage.ignored_sections.step_4\": \"Prueba y ajusta según sea necesario\",\n      \"getStartedPage.buttons.configure_sections\": \"Configurar secciones\",\n      \n      // Fullscreen Steps 4-5\n      \"getStartedPage.fullscreen.step4.title\": \"Paso 4: Entrena tu asistente\",\n      \"getStartedPage.fullscreen.step4.description\": \"Optimiza tu asistente con contenido especializado:\",\n      \"getStartedPage.fullscreen.step4.feature_1\": \"Documentos PDF y DOCX\",\n      \"getStartedPage.fullscreen.step4.feature_2\": \"Instrucciones personalizadas\",\n      \"getStartedPage.fullscreen.step4.feature_3\": \"URLs para analizar\",\n      \"getStartedPage.fullscreen.step4.feature_4\": \"Base de conocimientos evolutiva\",\n      \"getStartedPage.buttons.configure_assistant\": \"Configurar asistente\",\n      \"getStartedPage.fullscreen.step5.title\": \"Paso 5: Formularios avanzados\",\n      \"getStartedPage.fullscreen.step5.description\": \"Integra formularios inteligentes para capturar leads:\",\n      \"getStartedPage.fullscreen.step5.feature_1\": \"Formularios adaptativos\",\n      \"getStartedPage.fullscreen.step5.feature_2\": \"Validación inteligente\",\n      \"getStartedPage.fullscreen.step5.feature_3\": \"Integración CRM\",\n      \"getStartedPage.fullscreen.step5.feature_4\": \"Analytics avanzados\",\n      \"getStartedPage.buttons.configure_advanced_forms\": \"Configurar formularios avanzados\",\n      \n      // Form Mode\n      \"getStartedPage.form.step1.title\": \"Paso 1: Crea tu formulario\",\n      \"getStartedPage.form.step1.description\": \"Comienza creando un formulario desde tu panel:\",\n      \"getStartedPage.form.step2.title\": \"Paso 2: Integra el formulario\",\n      \"getStartedPage.form.step2.description\": \"Usa este código para integrar tu formulario en tu sitio web:\",\n      \"getStartedPage.form.step2.basic_attributes\": \"Atributos básicos:\",\n      \"getStartedPage.form.step2.attributes.form_id\": \"ID del formulario a mostrar\",\n      \"getStartedPage.form.step2.attributes.display_type\": \"Tipo de visualización (modal, inline)\",\n      \"getStartedPage.form.step2.attributes.position\": \"Posición del botón\",\n      \"getStartedPage.form.step2.attributes.button_text\": \"Texto del botón\",\n      \"getStartedPage.form.step2.customization_attributes\": \"Atributos de personalización:\",\n      \"getStartedPage.form.step2.attributes.theme_color\": \"Color del tema\",\n      \"getStartedPage.form.step2.attributes.icon\": \"Icono del botón\",\n      \"getStartedPage.form.step2.attributes.button_size\": \"Tamaño del botón\",\n      \"getStartedPage.form.step2.attributes.auto_show\": \"Visualización automática\",\n      \"getStartedPage.form.step2.example_title\": \"Ejemplo de configuración personalizada:\",\n      \"getStartedPage.form.step3.title\": \"Paso 3: Configuración del panel\",\n      \"getStartedPage.form.step3.description\": \"Configura estas opciones desde el panel de administración:\",\n      \"getStartedPage.buttons.go_to_forms\": \"Ir a formularios\",\n      \n      // Pricing Page\n      \"pricing.plans\": \"Planes\",\n      \"pricing.title\": \"Precios\",\n      \"pricing.subtitle\": \"Elige el plan que se adapte a tus necesidades\",\n      \"pricing.monthly_billing\": \"Facturación mensual\",\n      \"pricing.toggle_billing\": \"Cambiar facturación\",\n      \"pricing.annual_billing\": \"Facturación anual\",\n      \"pricing.save_percentage\": \"Ahorra {{percentage}}%\",\n      \"pricing.take_offer\": \"Aprovechar oferta\",\n      \"pricing.subscribe\": \"Suscribirse\",\n      \"pricing.promotional_price_duration\": \"Precio promocional por {{months}} meses\",\n      \"pricing.contact_us\": \"Contactanos\",\n      \"pricing.discount_duration\": \"{{discount}}% de descuento por {{months}} meses\",\n      \"pricing.take_annual_offer\": \"Aprovechar oferta anual\",\n      \"pricing.start_free\": \"Comenzar gratis\",\n      \"pricing.processing\": \"Procesando...\",\n      \"pricing.free\": \"Gratis\",\n      \"pricing.from\": \"Desde\",\n      \"pricing.month\": \"mes\",\n      \"pricing.year\": \"año\",\n      \"pricing.recommended\": \"Recomendado\",\n      \"pricing.login_required\": \"Inicio de sesión requerido\",\n      \"pricing.login_description\": \"Por favor inicia sesión para continuar\",\n      \"pricing.success\": \"Éxito\",\n      \"pricing.error\": \"Error\",\n      \"pricing.process_error\": \"Error al procesar\",\n      \"pricing.free_plan_activated\": \"Plan gratuito activado\",\n      \"pricing.pricing_note\": \"¿Necesitas automatizaciones o más funcionalidades? ¡Contáctanos!\",\n      \"pricing.limited_launch_offer\": \"Oferta de lanzamiento limitada\",\n      \"pricing.spots_remaining\": \"{{remaining}} lugares restantes de {{total}}\",\n      \"pricing.spots_left_of_total\": \"{{remaining}} lugares restantes de {{total}}\",\n      \"pricing.take_advantage_unique_prices\": \"¡Aprovecha estos precios únicos ahora!\",\n      \n      // Integration Analytics\n      \"analytics_for\": \"Análisis para\",\n      \"view_performance_metrics_for_integration\": \"Ver métricas de rendimiento para la integración\",\n      \"view_conversations\": \"Ver conversaciones\",\n      \"download_pdf\": \"Descargar PDF\",\n      \"Total conversations\": \"Total de conversaciones\",\n      \"no_messages\": \"Sin mensajes\",\n      \"no_conversations_to_resolve\": \"Sin conversaciones por resolver\",\n      \"message_distribution\": \"Distribución de mensajes\",\n      \"user_vs_assistant_messages\": \"Mensajes de usuario vs asistente\",\n      \"conversations_over_time\": \"Conversaciones a lo largo del tiempo\",\n      \"resolution_status\": \"Estado de resolución\",\n      \"resolved_vs_active_conversations\": \"Conversaciones resueltas vs activas\",\n      \"top_products\": \"Productos principales\",\n      \"most_mentioned_products\": \"Productos más mencionados\",\n      \"top_topics\": \"Temas principales\",\n      \"most_discussed_topics\": \"Temas más discutidos\",\n      \"keyword_cloud\": \"Nube de palabras clave\",\n      \"frequently_mentioned_keywords\": \"Palabras clave mencionadas frecuentemente\",\n      \"what_does_it_mean\": \"¿Qué significa?\",\n      \"keywords_explanation\": \"Explicación de palabras clave\",\n      \n      // Pricing Button Actions\n      \"Feature\": \"Característica\",\n      \"LearnMore\": \"Saber más\",\n      \"Features\": \"Características\",\n      \"Learn More\": \"Saber más\",\n      \"feature\": \"característica\",\n      \"learn_more\": \"saber más\",\n      \"features\": \"características\",\n      \n      // Chat Interface\n      \"chat.placeholder\": \"Escribe tu mensaje...\",\n      \n      // Login Page\n      \"loginPage.title\": \"Iniciar Sesión\",\n      \"loginPage.subtitle\": \"Accede a tu cuenta de AIPPS\",\n      \"loginPage.username\": \"Nombre de usuario\",\n      \"loginPage.username_placeholder\": \"Ingresa tu nombre de usuario\",\n      \"loginPage.password\": \"Contraseña\",\n      \"loginPage.password_placeholder\": \"Ingresa tu contraseña\",\n      \"loginPage.submit\": \"Iniciar sesión\",\n      \"loginPage.submitting\": \"Iniciando sesión...\",\n      \"loginPage.success_title\": \"Inicio de sesión exitoso\",\n      \"loginPage.success_message\": \"Has iniciado sesión correctamente\",\n      \"loginPage.failed_title\": \"Error de inicio de sesión\",\n      \"loginPage.failed_message\": \"Usuario o contraseña incorrectos\",\n      \n      // Footer\n      footer: {\n        company_description: \"Descripción de la empresa\",\n        product: \"Producto\",\n        company: \"Empresa\",\n        support: \"Soporte\", \n        features: \"Características\",\n        pricing: \"Precios\",\n        documentation: \"Documentación\",\n        get_started: \"Comenzar\",\n        about_us: \"Acerca de nosotros\",\n        contact: \"Contacto\",\n        privacy_policy: \"Política de privacidad\",\n        terms_of_service: \"Términos de servicio\",\n        help_center: \"Centro de ayuda\",\n        all_rights_reserved: \"Todos los derechos reservados\"\n      }\n    }\n  },\n  en: {\n    translation: {\n      // Navegación básica\n      documentation: \"Documentation\",\n      pricing: \"Pricing\",\n      get_started: \"Get Started\",\n      visitor: \"Visitor\", \n      anonymous: \"Anonymous\",\n      visitors_helped: \"Visitors helped\",\n      \n      // Tiempo\n      weeks_ago_plural: \"{{count}} weeks ago\",\n      weeks_ago: \"{{count}} week ago\",\n      months_ago_plural: \"{{count}} months ago\",\n      months_ago: \"{{count}} month ago\", \n      days_ago_plural: \"{{count}} days ago\",\n      days_ago: \"{{count}} day ago\",\n      hours_ago_plural: \"{{count}} hours ago\",\n      hours_ago: \"{{count}} hour ago\",\n      minutes_ago_plural: \"{{count}} minutes ago\", \n      minutes_ago: \"{{count}} minute ago\",\n      just_now: \"Just now\",\n      \n      // Dashboard básico\n      dashboard: \"Dashboard\",\n      conversations: \"Conversations\",\n      integrations: \"Integrations\", \n      analytics: \"Analytics\",\n      settings: \"Settings\",\n      logout: \"Logout\",\n      login: \"Login\",\n      signup: \"Sign up\",\n      forms: \"Forms\",\n      automation: \"Automation\",\n      task_automation: \"Task Automation\",\n      profile: \"Profile\",\n      \n      // AI Assistant Settings\n      ai_assistant_settings: \"AI Assistant Settings\",\n      assistant_name: \"Assistant Name\",\n      default_greeting: \"Default Greeting\",\n      conversation_style: \"Conversation Style\",\n      chat_font: \"Chat Font\",\n      user_message_color: \"User Message Color\",\n      show_availability: \"Show Availability\",\n      assistant_message_color: \"Assistant Message Color\",\n      welcome_chat: \"Welcome Chat\",\n      status: \"Status\",\n      enabled: \"Enabled\",\n      disabled: \"Disabled\",\n      welcome_message: \"Welcome Message\",\n      bubble_color: \"Bubble Color\",\n      text_color: \"Text Color\",\n      edit_settings: \"Edit Settings\",\n      no_settings_found: \"No settings found\",\n      no_settings_description: \"Configure your AI assistant to get started\",\n      configure_settings: \"Configure Settings\",\n      appearance: \"Appearance\",\n      professional: \"Professional\",\n      yes: \"Yes\",\n      no: \"No\",\n      system_default: \"System default\",\n      settings_description: \"Configure your AIPI assistant settings\",\n      \n      // Forms\n      forms_description: \"Create and manage your forms\",\n      refresh: \"Refresh\",\n      create_form: \"Create Form\",\n      no_description: \"No description\",\n      responses: \"Responses\",\n      delete: \"Delete\",\n      confirm_delete: \"Confirm Delete\",\n      delete_form_confirmation: \"Are you sure you want to delete this form? This action cannot be undone and will also delete all responses.\",\n      cancel: \"Cancel\",\n      deleting: \"Deleting...\",\n      no_forms: \"No forms yet\",\n      forms_empty_message: \"Create a new form to collect information from your visitors\",\n      \n      // Automation\n      task_automation_description: \"Set up automated tasks and workflows powered by AI\",\n      create_automation: \"Create Automation\",\n      view_logs: \"View Logs\",\n      no_automations: \"No automations yet\",\n      automations_empty_message: \"Create your first automation to streamline repetitive tasks with AI\",\n      \n      // Form template descriptions\n      \"form_template_waitlist\": \"Model to capture users on waiting list\",\n      \"form_template_survey\": \"Please complete the requested information to get started\",\n      \"form_template_standard\": \"Standard form to collect information\",\n      \n      // Form Editor\n      \"formEditor.integrate\": \"Integrate\",\n      \"formEditor.save_changes\": \"Save changes\",\n      \"formEditor.content\": \"Content\",\n      \"formEditor.appearance\": \"Appearance\",\n      \"formEditor.settings\": \"Settings\",\n      \"formEditor.basic_info\": \"Basic information\",\n      \"formEditor.basic_info_desc\": \"Configure the basic information of your form\",\n      \"formEditor.form_title\": \"Form title\",\n      \"formEditor.unique_id\": \"Unique ID\",\n      \"formEditor.description\": \"Description\",\n      \"formEditor.form_draft\": \"Form draft\",\n      \"formEditor.form_type\": \"Form type\",\n      \"formEditor.form_types.waitlist\": \"Waitlist\",\n      \"formEditor.form_fields\": \"Form fields\",\n      \"formEditor.form_fields_desc\": \"Add and configure your form fields\",\n      \"formEditor.field_types.text\": \"Text\",\n      \"formEditor.field_types.email\": \"Email\",\n      \"formEditor.field_types.select\": \"Select\",\n      \"formEditor.edit\": \"Edit\",\n      \"formEditor.delete\": \"Delete\",\n      \"formEditor.placeholder\": \"Placeholder\",\n      \"formEditor.required\": \"Required\",\n      \"formEditor.options\": \"Options\",\n      \"formEditor.add_field\": \"Add field\",\n      \"formEditor.visual_style\": \"Visual style\",\n      \"formEditor.visual_style_desc\": \"Customize the appearance of your form\",\n      \"formEditor.theme\": \"Theme\",\n      \"formEditor.themes.light\": \"Light\",\n      \"formEditor.themes.dark\": \"Dark\",\n      \"formEditor.themes.auto\": \"Auto\",\n      \"formEditor.primary_color\": \"Primary color\",\n      \"formEditor.typography\": \"Typography\",\n      \"formEditor.border_radius\": \"Border radius\",\n      \"formEditor.radius.none\": \"None\",\n      \"formEditor.radius.medium\": \"Medium\",\n      \"formEditor.radius.large\": \"Large\",\n      \"formEditor.configuration\": \"Configuration\",\n      \"formEditor.advanced_settings\": \"Advanced settings\",\n      \"formEditor.success_message\": \"Success message\",\n\n      // Common\n      \"common.yes\": \"Yes\",\n      \"common.no\": \"No\",\n\n      // Estados\n      active: \"Active\",\n      inactive: \"Inactive\",\n      testing: \"Testing\",\n      resolved: \"Resolved\",\n      loading: \"Loading...\",\n      back: \"Back\",\n      edit_integration: \"Edit integration\",\n      view_analytics: \"View analytics\",\n      new: \"New\", \n      messages: \"messages\",\n      edit: \"Edit\",\n      last_modified: \"Last modified\",\n      processed: \"Processed\",\n      item: \"item\",\n      items: \"items\",\n      \n      // Conversaciones\n      conversations_for: \"Conversations for\",\n      view_all_conversations_for_integration: \"View all conversations for this integration\",\n      search_conversations: \"Search conversations\",\n      \n      // Analytics\n      analytics_description: \"Detailed performance and metrics analysis\",\n      integration_performance: \"Integration performance\",\n      advanced_analysis: \"Advanced analysis\",\n      advanced_metrics: \"Advanced metrics\",\n      avg_messages: \"Average messages\",\n      messages_per_conversation: \"Messages per conversation\",\n      total_conversations: \"Total conversations\",\n      resolution_rate: \"Resolution rate\",\n      avg_response_time: \"Average response time\",\n      \n      // PDF Report\n      pdf_report_title: \"AIPI Analytics Report\",\n      pdf_generated: \"Generated on\",\n      pdf_summary: \"Statistics Summary\",\n      pdf_metric: \"Metric\",\n      pdf_value: \"Value\",\n      pdf_products_demanded: \"Most Demanded Products\",\n      pdf_products_description: \"Analysis of products mentioned in conversations\",\n      pdf_products_description2: \"Identifies customer interests and opportunities\",\n      pdf_product: \"Product\",\n      pdf_mentions: \"Mentions\",\n      pdf_no_products_data: \"No product data available\",\n      pdf_topics_discussed: \"Most Discussed Topics\",\n      pdf_topics_description: \"Conversation sentiment analysis\",\n      pdf_topics_description2: \"Understand customer concerns and satisfaction\",\n      pdf_topic: \"Topic\",\n      pdf_sentiment: \"Sentiment\",\n      pdf_no_topics_data: \"No topic data available\",\n      pdf_conversation_trend: \"Conversation Trend\",\n      pdf_trend_description: \"Evolution of conversation volume over time\",\n      \n      // Analytics Charts\n      products_services_most_demanded: \"Most Demanded Products/Services\",\n      products_analysis_description: \"Analysis of mentioned products\",\n      what_does_it_mean_products_bars_explanation: \"What do the product bars mean?\",\n      topics_and_sentiment: \"Topics and Sentiment\",\n      topics_analysis_description: \"Analysis of topics and sentiments\",\n      what_does_it_mean_topics_bars_explanation: \"What do the topic bars mean?\",\n      conversation_trend: \"Conversation Trend\",\n      conversation_trend_description: \"Conversation trend over time\",\n      what_does_it_mean_conversation_trend_explanation: \"What does the conversation trend mean?\",\n      keywords: \"Keywords\",\n      keywords_description: \"Keywords description\",\n      what_does_it_mean_keywords_explanation: \"What do the keywords mean?\",\n      \n      // Additional Analytics Terms\n      avg_duration: \"Average duration\",\n      time_per_conversation: \"Time per conversation\",\n      peak_hours: \"Peak hours\",\n      highest_activity: \"Highest activity\",\n      devices: \"Devices\",\n      mobile_desktop: \"Mobile/Desktop\",\n      export_pdf: \"Export PDF\",\n      back_to_dashboard: \"Back to dashboard\",\n      \n      // Dashboard and Navigation\n      dashboard_title: \"Dashboard title\",\n      manage_assistant: \"Manage assistant\",\n      \n      // Language Selector\n      language: {\n        select: \"Select language\",\n        fr: \"Français\",\n        es: \"Español\",\n        en: \"English\"\n      },\n      \n      // Home Page\n      \"welcome\": \"Welcome to AIPPS\",\n      \"getStarted\": \"Get Started\",\n      \"learnMore\": \"Learn More\",\n      \"home.description\": \"Transform your website with the most advanced conversational AI. Create interactive experiences that engage your visitors and convert more effectively.\",\n      \"home.stats.websites\": \"1000+\",\n      \"home.stats.websitesLabel\": \"Active websites\",\n      \"home.stats.conversations\": \"50k+\",\n      \"home.stats.conversationsLabel\": \"Monthly conversations\",\n      \"home.stats.languages\": \"25+\", \n      \"home.stats.languagesLabel\": \"Supported languages\",\n      \n      // Features Page\n      \"features.title\": \"Features\",\n      \"features.subtitle\": \"Discover our features\",\n      \"features.detailedDescription\": \"AIPPS offers a complete suite of conversational AI tools designed to transform how your visitors interact with your website. From simple automation to complex integrations, we have everything you need.\",\n      \"features.advanced.title\": \"Advanced features\",\n      \"features.advanced.multilingual.title\": \"Complete multilingual support\",\n      \"features.advanced.multilingual.description\": \"Communicate with your visitors in their preferred language thanks to our advanced automatic translation system.\",\n      \"features.advanced.multilingual.feature1\": \"Real-time automatic translation\",\n      \"features.advanced.multilingual.feature2\": \"Automatic language detection\",\n      \"features.advanced.multilingual.feature3\": \"25+ supported languages\",\n      \"features.advanced.security.title\": \"Security and privacy\",\n      \"features.advanced.security.description\": \"Your data and your users' data are protected by the highest security standards.\",\n      \"features.advanced.security.feature1\": \"End-to-end encryption\",\n      \"features.advanced.security.feature2\": \"GDPR and CCPA compliance\",\n      \"features.advanced.security.feature3\": \"Secure JWT authentication\",\n      \"features.advanced.customization.title\": \"Complete customization\",\n      \"features.advanced.customization.description\": \"Perfectly adapt the assistant to your brand and specific needs.\",\n      \"features.advanced.customization.feature1\": \"Customizable interface\",\n      \"features.advanced.customization.feature2\": \"Custom conversation flows\",\n      \"features.advanced.customization.feature3\": \"Flexible API integration\",\n      \"features.conversationalAI.title\": \"Conversational AI\",\n      \"features.conversationalAI.description\": \"Intelligent AI assistant for natural conversations\",\n      \"features.taskAutomation.title\": \"Task Automation\",\n      \"features.taskAutomation.description\": \"Automate your repetitive processes\",\n      \"features.easyIntegration.title\": \"Easy Integration\",\n      \"features.easyIntegration.description\": \"Easily integrate with your existing systems\",\n      \"features.analytics.title\": \"Analytics\",\n      \"features.analytics.description\": \"Detailed analytics and reports\",\n      \"cta.title\": \"Ready to Start\",\n      \"cta.subtitle\": \"Join us today\",\n      \"cta.getStartedFree\": \"Get Started Free\",\n      \"cta.scheduleDemo\": \"Schedule Demo\",\n      \n      // Terms of Service\n      \"terms.title\": \"Terms of Service\",\n      \"terms.subtitle\": \"Please read these terms carefully\",\n      \"terms.acceptance.title\": \"Acceptance of terms\",\n      \"terms.acceptance.description\": \"By using our services, you agree to these terms.\",\n      \"terms.services.title\": \"Service description\",\n      \"terms.services.description\": \"Our services include:\",\n      \"terms.services.item1\": \"Conversational AI assistant\",\n      \"terms.services.item2\": \"Chat widget integration\",\n      \"terms.services.item3\": \"Analytics and reports\",\n      \"terms.services.item4\": \"Technical support\",\n      \"terms.user_obligations.title\": \"User obligations\",\n      \"terms.user_obligations.description\": \"You agree to:\",\n      \"terms.user_obligations.item1\": \"Use services legally\",\n      \"terms.user_obligations.item2\": \"Respect others' rights\",\n      \"terms.user_obligations.item3\": \"Provide accurate information\",\n      \"terms.user_obligations.item4\": \"Maintain account security\",\n      \"terms.payment.title\": \"Payment and billing\",\n      \"terms.payment.description\": \"Payment terms:\",\n      \"terms.payment.item1\": \"Payments are processed monthly\",\n      \"terms.payment.item2\": \"All prices are in CAD\",\n      \"terms.payment.item3\": \"Refunds according to our policy\",\n      \"terms.payment.item4\": \"Late fees may apply\",\n      \"terms.intellectual_property.title\": \"Intellectual property\",\n      \"terms.intellectual_property.description\": \"Rights and licenses:\",\n      \"terms.intellectual_property.item1\": \"We retain all rights to our technology\",\n      \"terms.intellectual_property.item2\": \"You retain rights to your content\",\n      \"terms.intellectual_property.item3\": \"Limited use license granted\",\n      \"terms.limitation.title\": \"Limitation of liability\",\n      \"terms.limitation.description\": \"Our liability is limited under applicable law.\",\n      \"terms.termination.title\": \"Termination\",\n      \"terms.termination.description\": \"Termination conditions:\",\n      \"terms.termination.item1\": \"You can cancel anytime\",\n      \"terms.termination.item2\": \"We may suspend for violations\",\n      \"terms.termination.item3\": \"Data is deleted after termination\",\n      \"terms.contact.title\": \"Contact\",\n      \"terms.contact.description\": \"For any legal questions:\",\n      \"terms.contact.address\": \"Montreal, QC, Canada\",\n      \"terms.last_updated\": \"January 2025\",\n      \n      // Help Center\n      \"help.title\": \"Help Center\",\n      \"help.subtitle\": \"Find answers to your questions\",\n      \"help.search_placeholder\": \"Search help...\",\n      \"help.popular.title\": \"Popular articles\",\n      \"help.popular.article1\": \"How to get started with AIPPS\",\n      \"help.popular.badge\": \"Popular\",\n      \"help.popular.article2\": \"Integrate the chat widget\",\n      \"help.popular.article3\": \"Configure your AI assistant\",\n      \"help.popular.article4\": \"Understanding your billing\",\n      \"help.popular.article5\": \"Troubleshoot connection issues\",\n      \"help.categories.title\": \"Help categories\",\n      \"help.categories.getting_started.title\": \"Getting started\",\n      \"help.categories.getting_started.description\": \"Guide to begin with AIPPS\",\n      \"help.categories.getting_started.article1\": \"Create your account\",\n      \"help.categories.getting_started.article2\": \"First chat widget\",\n      \"help.categories.getting_started.article3\": \"Basic setup\",\n      \"help.categories.getting_started.article4\": \"First conversation\",\n      \"help.categories.configuration.title\": \"Configuration\",\n      \"help.categories.configuration.description\": \"Customize your experience\",\n      \"help.categories.configuration.article1\": \"Widget settings\",\n      \"help.categories.configuration.article2\": \"Customize assistant\",\n      \"help.categories.configuration.article3\": \"Manage integrations\",\n      \"help.categories.configuration.article4\": \"Advanced options\",\n      \"help.categories.integration.title\": \"Integration\",\n      \"help.categories.integration.description\": \"Connect AIPPS with your tools\",\n      \"help.categories.integration.article1\": \"API and webhooks\",\n      \"help.categories.integration.article2\": \"WordPress integration\",\n      \"help.categories.integration.article3\": \"Integration code\",\n      \"help.categories.integration.article4\": \"Integration testing\",\n      \"help.categories.billing.title\": \"Billing\",\n      \"help.categories.billing.description\": \"Manage your subscription\",\n      \"help.categories.billing.article1\": \"Plans and pricing\",\n      \"help.categories.billing.article2\": \"Change your plan\",\n      \"help.categories.billing.article3\": \"Payment history\",\n      \"help.categories.billing.article4\": \"Refund policy\",\n      \"help.categories.troubleshooting.title\": \"Troubleshooting\",\n      \"help.categories.troubleshooting.description\": \"Resolve issues\",\n      \"help.categories.troubleshooting.article1\": \"Widget not displaying\",\n      \"help.categories.troubleshooting.article2\": \"Connection problems\",\n      \"help.categories.troubleshooting.article3\": \"Messages not sending\",\n      \"help.categories.troubleshooting.article4\": \"Common errors\",\n      \"help.categories.account.title\": \"Account\",\n      \"help.categories.account.description\": \"Manage your account\",\n      \"help.categories.account.article1\": \"Edit profile\",\n      \"help.categories.account.article2\": \"Account security\",\n      \"help.categories.account.article3\": \"Notifications\",\n      \"help.categories.account.article4\": \"Delete account\",\n      \"help.contact_support.title\": \"Contact support\",\n      \"help.contact_support.description\": \"Need additional help?\",\n      \"help.contact_support.contact_button\": \"Contact support\",\n      \"help.contact_support.email_button\": \"Send email\",\n      \n      // Privacy Policy\n      \"privacy.title\": \"Privacy Policy\",\n      \"privacy.subtitle\": \"How we protect your data\",\n      \"privacy.data_collection.title\": \"Data collection\",\n      \"privacy.data_collection.description\": \"We collect the following information:\",\n      \"privacy.data_collection.item1\": \"Contact and account information\",\n      \"privacy.data_collection.item2\": \"Usage and analytics data\",\n      \"privacy.data_collection.item3\": \"Conversations and interactions\",\n      \"privacy.data_collection.item4\": \"Technical and session information\",\n      \"privacy.data_usage.title\": \"Data usage\",\n      \"privacy.data_usage.description\": \"Your data is used to:\",\n      \"privacy.data_usage.item1\": \"Provide and improve our services\",\n      \"privacy.data_usage.item2\": \"Personalize your experience\",\n      \"privacy.data_usage.item3\": \"Customer and technical support\",\n      \"privacy.data_usage.item4\": \"Analytics and research\",\n      \"privacy.data_sharing.title\": \"Data sharing\",\n      \"privacy.data_sharing.description\": \"We only share your data:\",\n      \"privacy.data_sharing.item1\": \"With your explicit consent\",\n      \"privacy.data_sharing.item2\": \"To comply with legal obligations\",\n      \"privacy.data_sharing.item3\": \"With trusted partners under contract\",\n      \"privacy.security.title\": \"Security\",\n      \"privacy.security.description\": \"Our security measures include:\",\n      \"privacy.security.item1\": \"Data encryption in transit and at rest\",\n      \"privacy.security.item2\": \"Two-factor authentication\",\n      \"privacy.security.item3\": \"Regular security audits\",\n      \"privacy.security.item4\": \"Strict access controls\",\n      \"privacy.user_rights.title\": \"Your rights\",\n      \"privacy.user_rights.description\": \"You have the right to:\",\n      \"privacy.user_rights.item1\": \"Access your personal data\",\n      \"privacy.user_rights.item2\": \"Correct inaccurate information\",\n      \"privacy.user_rights.item3\": \"Delete your data\",\n      \"privacy.user_rights.item4\": \"Transfer your data\",\n      \"privacy.contact.title\": \"Contact\",\n      \"privacy.contact.description\": \"For any privacy questions:\",\n      \"privacy.contact.address\": \"Montreal, QC, Canada\",\n      \"privacy.last_updated\": \"January 2025\",\n      \n      // About Page\n      \"about.title\": \"About\",\n      \"about.subtitle\": \"Our mission and vision\",\n      \"about.mission.title\": \"Our Mission\",\n      \"about.mission.description\": \"Democratize artificial intelligence for all businesses.\",\n      \"about.vision.title\": \"Our Vision\",\n      \"about.vision.description\": \"A world where every business can deliver exceptional customer experiences through AI.\",\n      \"about.global.title\": \"Global Reach\",\n      \"about.global.description\": \"We serve customers worldwide with multilingual solutions.\",\n      \"about.innovation.title\": \"Innovation\",\n      \"about.innovation.description\": \"At the forefront of conversational AI technology.\",\n      \"about.story.title\": \"Our Story\",\n      \"about.story.paragraph1\": \"AIPPS was founded with the vision of making artificial intelligence accessible to all businesses.\",\n      \"about.story.paragraph2\": \"We believe that every business, regardless of size, should be able to deliver exceptional customer experiences.\",\n      \"about.story.paragraph3\": \"Today, we continue to innovate to shape the future of customer interaction.\",\n      \n      // Pricing Page\n      \"pricing.faq.title\": \"Frequently Asked Questions\",\n      \"pricing.faq.q1\": \"Can I change plans anytime?\",\n      \"pricing.faq.a1\": \"Yes, you can change plans anytime from your dashboard.\",\n      \"pricing.support.title\": \"Support\",\n      \"pricing.support.q1\": \"What level of support will I receive?\",\n      \"pricing.support.a1\": \"All plans include email support. Higher plans include priority support.\",\n      \"pricing.security.title\": \"Security\",\n      \"pricing.security.q1\": \"Is my data protected?\",\n      \"pricing.security.a1\": \"We use enterprise-grade encryption and comply with GDPR standards to protect your information.\",\n      \n      // Documentation\n      \"documentation.title\": \"Documentation\",\n      \"documentation.download_pdf\": \"Download PDF\",\n      \"documentation.subtitle\": \"Complete guide to using AIPPS\",\n      \"documentation.overview\": \"Overview\",\n      \"documentation.features\": \"Features\",\n      \"documentation.widget_integration\": \"Widget integration\",\n      \"documentation.contextual_understanding\": \"Contextual understanding\",\n      \"documentation.document_training\": \"Document training\",\n      \"documentation.lead_capture\": \"Lead capture\",\n      \"documentation.analytics\": \"Analytics\",\n      \"documentation.task_automation\": \"Task automation\",\n      \"documentation.form_creation\": \"Form creation\",\n      \"documentation.forms\": \"Forms\",\n      \"documentation.education\": \"Education\",\n      \"documentation.business\": \"Business\",\n      \"documentation.professional\": \"Professional\",\n      \"documentation.implementation\": \"Implementation\",\n      \n      // Documentation Overview\n      \"documentation.overview.title\": \"Overview\",\n      \"documentation.overview.introduction\": \"Complete introduction to AIPPS\",\n      \"documentation.overview.problem_title\": \"The Problem\",\n      \"documentation.overview.problem_description\": \"Businesses struggle to provide effective 24/7 customer support\",\n      \"documentation.overview.solution_intro\": \"Our AI solution revolutionizes customer interaction\",\n      \"documentation.overview.solution_point_1\": \"Intelligent AI assistant available 24/7\",\n      \"documentation.overview.solution_point_2\": \"Easy integration in minutes\",\n      \"documentation.overview.solution_point_3\": \"Detailed analytics and insights\",\n      \"documentation.overview.solution_point_4\": \"Complete multilingual support\",\n      \"documentation.overview.card1_title\": \"Conversational AI\",\n      \"documentation.overview.card1_text\": \"Intelligent assistant for natural interactions\",\n      \"documentation.overview.card2_title\": \"Simple Integration\",\n      \"documentation.overview.card2_text\": \"Deploy in minutes on your website\",\n      \"documentation.overview.card3_title\": \"Advanced Analytics\",\n      \"documentation.overview.card3_text\": \"Detailed insights on customer interactions\",\n      \"documentation.overview.card4_title\": \"Multilingual Support\",\n      \"documentation.overview.card4_text\": \"Communicate in multiple languages\",\n      \n      // Professional Services\n      \"professional.intro_text\": \"Professional solutions for expert services\",\n      \"professional.specific_benefits\": \"Specific benefits\",\n      \"professional.client_qualification\": \"Client qualification\",\n      \"professional.qualification1\": \"Client needs identification\",\n      \"professional.qualification2\": \"Automatic pre-qualification\",\n      \"professional.qualification3\": \"Routing to appropriate expert\",\n      \"professional.appointment_scheduling\": \"Appointment scheduling\",\n      \"professional.scheduling1\": \"Intelligent integrated calendar\",\n      \"professional.scheduling2\": \"Automatic confirmation\",\n      \"professional.scheduling3\": \"Personalized reminders\",\n      \"professional.client_education\": \"Client education\",\n      \"professional.education1\": \"Automatic informational resources\",\n      \"professional.education2\": \"Dynamic FAQs\",\n      \"professional.education3\": \"Step-by-step guides\",\n      \"professional.expectation_management\": \"Expectation management\",\n      \"professional.expectation1\": \"Clear process communication\",\n      \"professional.expectation2\": \"Transparent timelines\",\n      \"professional.expectation3\": \"Proactive follow-up\",\n      \"professional.content_marketing\": \"Content marketing\",\n      \"professional.marketing1\": \"Qualified lead generation\",\n      \"professional.marketing2\": \"Automated nurturing\",\n      \"professional.marketing3\": \"Message personalization\",\n      \"professional.marketing4\": \"Intelligent segmentation\",\n      \"professional.marketing5\": \"Measurable ROI\",\n      \"professional.testimonials\": \"Testimonials\",\n      \"professional.testimonial_text\": \"AIPPS has transformed our practice\",\n      \"professional.testimonial_author\": \"Expert consultant\",\n      \"professional.implement_button\": \"Implement now\",\n      \n      // Forms Documentation\n      \"forms.intro_text\": \"Create and manage intelligent forms easily\",\n      \"forms.available_types\": \"Available form types\",\n      \"forms.templates_intro\": \"Pre-designed templates for all your needs\",\n      \"forms.contact_form\": \"Contact form\",\n      \"forms.contact_form_desc\": \"Collect contact information easily\",\n      \"forms.waitlist_form\": \"Waitlist form\",\n      \"forms.waitlist_form_desc\": \"Manage your waitlists efficiently\",\n      \"forms.survey_form\": \"Survey form\",\n      \"forms.survey_form_desc\": \"Collect opinions and feedback\",\n      \"forms.feedback_form\": \"Feedback form\",\n      \"forms.feedback_form_desc\": \"Improve your services with customer feedback\",\n      \"forms.lead_capture_form\": \"Lead capture form\",\n      \"forms.lead_capture_form_desc\": \"Convert visitors into prospects\",\n      \"forms.custom_form\": \"Custom form\",\n      \"forms.custom_form_desc\": \"Create tailored forms\",\n      \"forms.main_features\": \"Main features\",\n      \"forms.flexible_design\": \"Flexible design\",\n      \"forms.flexible_design_desc\": \"Customize appearance according to your brand\",\n      \"forms.configurable_fields\": \"Configurable fields\",\n      \"forms.configurable_fields_desc\": \"Add and modify fields easily\",\n      \"forms.advanced_validation\": \"Advanced validation\",\n      \"forms.advanced_validation_desc\": \"Validate data in real-time\",\n      \"forms.conditional_logic\": \"Conditional logic\",\n      \"forms.conditional_logic_desc\": \"Dynamic fields based on responses\",\n      \"forms.ai_integration\": \"AI integration\",\n      \"forms.ai_integration_desc\": \"AI assistant integrated into forms\",\n      \"forms.captcha_protection\": \"CAPTCHA protection\",\n      \"forms.captcha_protection_desc\": \"Block automated submissions\",\n      \"forms.email_notifications\": \"Email notifications\",\n      \"forms.email_notifications_desc\": \"Automatic alerts for new submissions\",\n      \"forms.detailed_analytics\": \"Detailed analytics\",\n      \"forms.detailed_analytics_desc\": \"Complete statistics on performance\",\n      \"forms.response_sorting\": \"Response sorting\",\n      \"forms.response_sorting_desc\": \"Organize and filter submissions\",\n      \"forms.creation_process\": \"Creation process\",\n      \"forms.access_dashboard\": \"Access dashboard\",\n      \"forms.access_dashboard_desc\": \"Log into your admin space\",\n      \"forms.create_new\": \"Create new form\",\n      \"forms.create_new_desc\": \"Start with a template or from scratch\",\n      \"forms.basic_config\": \"Basic configuration\",\n      \"forms.basic_config_desc\": \"Define title, description and parameters\",\n      \"forms.design_fields\": \"Field design\",\n      \"forms.design_fields_desc\": \"Add and organize your fields\",\n      \"forms.customization\": \"Customization\",\n      \"forms.customization_desc\": \"Adapt design and behavior\",\n      \"forms.advanced_config\": \"Advanced configuration\",\n      \"forms.advanced_config_desc\": \"Expert settings and integrations\",\n      \"forms.preview\": \"Preview\",\n      \"forms.preview_desc\": \"Test your form before publishing\",\n      \"forms.publication\": \"Publication\",\n      \"forms.publication_desc\": \"Deploy on your website\",\n      \"forms.integration_methods\": \"Integration methods\",\n      \"forms.simplified_process\": \"Simplified process\",\n      \"forms.direct_embed\": \"Direct integration\",\n      \"forms.direct_embed_desc\": \"Simple HTML code to copy and paste\",\n      \"forms.get_code\": \"Get code\",\n      \"forms.get_code_desc\": \"Copy the generated integration code\",\n      \"forms.copy_code\": \"Copy code\",\n      \"forms.copy_code_desc\": \"Ready-to-use HTML code\",\n      \"forms.insert_code\": \"Insert code\",\n      \"forms.insert_code_desc\": \"Paste into your website\",\n      \"forms.code_example\": \"Code example\",\n      \"forms.customization_options\": \"Customization options\",\n      \"forms.modal_instructions\": \"Modal instructions\",\n      \"forms.customize_style\": \"Customize style\",\n      \"forms.configure_actions\": \"Configure actions\",\n      \"forms.implement_validations\": \"Implement validations\",\n      \"forms.analytics_integration\": \"Analytics integration\",\n      \"forms.technical_considerations\": \"Technical considerations\",\n      \"forms.works_with_cms\": \"Works with all CMS\",\n      \"forms.async_loading\": \"Asynchronous loading\",\n      \"forms.secure_data\": \"Secure data\",\n      \"forms.spam_protection\": \"Spam protection\",\n      \"forms.responsive_design\": \"Responsive design\",\n      \"forms.improved_response_management\": \"Improved response management\",\n      \"forms.advanced_capabilities\": \"Advanced capabilities\",\n      \"forms.view_responses\": \"View responses\",\n      \"forms.view_responses_desc\": \"Intuitive interface to view submissions\",\n      \"forms.export_data\": \"Export data\",\n      \"forms.export_data_desc\": \"Export CSV, Excel or PDF\",\n      \"forms.filter_sort\": \"Filter and sort\",\n      \"forms.filter_sort_desc\": \"Advanced sorting and filtering tools\",\n      \"forms.automatic_analysis\": \"Automatic analysis\",\n      \"forms.automatic_analysis_desc\": \"AI analyzes responses automatically\",\n      \"forms.follow_up\": \"Automatic follow-up\",\n      \"forms.follow_up_desc\": \"Personalized follow-up emails\",\n      \"forms.realtime_notifications\": \"Real-time notifications\",\n      \"forms.realtime_notifications_desc\": \"Instant alerts for new submissions\",\n      \"forms.widget_integration\": \"Widget integration\",\n      \"forms.widget_integration_desc\": \"Forms integrated into chat\",\n      \"forms.present_forms\": \"Present forms\",\n      \"forms.autocomplete_fields\": \"Autocompleted fields\",\n      \"forms.continue_conversation\": \"Continue conversation\",\n      \"forms.provide_assistance\": \"Provide assistance\",\n      \"forms.popular_use_cases\": \"Popular use cases\",\n      \"forms.education_use\": \"Educational use\",\n      \"forms.education_use_desc\": \"Registrations, evaluations, student feedback\",\n      \"forms.business_use\": \"Business use\",\n      \"forms.business_use_desc\": \"Lead generation, satisfaction surveys\",\n      \"forms.professional_use\": \"Professional use\",\n      \"forms.professional_use_desc\": \"Consultations, appointments, qualifications\",\n      \"forms.ecommerce_use\": \"E-commerce use\",\n      \"forms.ecommerce_use_desc\": \"Custom orders, customer support\",\n      \"forms.create_first_button\": \"Create your first form\",\n      \n      // Implementation Guide\n      \"implementation.intro_text\": \"Complete implementation guide\",\n      \"implementation.process_title\": \"4-step process\",\n      \"implementation.step1_title\": \"1. Choose your widget\",\n      \"implementation.step1_desc\": \"Select the interface type that fits best\",\n      \"implementation.widget_option\": \"Bubble widget - Small floating button\",\n      \"implementation.fullscreen_option\": \"Fullscreen - Complete interface\",\n      \"implementation.wordpress_note\": \"Compatible with WordPress and all CMS\",\n      \"implementation.step2_title\": \"2. Customize appearance\",\n      \"implementation.step2_desc\": \"Adapt the design to your brand\",\n      \"implementation.customize_colors\": \"Colors and theme\",\n      \"implementation.customize_position\": \"Position and size\",\n      \"implementation.customize_welcome\": \"Welcome message\",\n      \"implementation.customize_languages\": \"Supported languages\",\n      \"implementation.customize_personality\": \"Assistant personality\",\n      \"implementation.step3_title\": \"3. Train your AI\",\n      \"implementation.step3_desc\": \"Feed the knowledge base\",\n      \"implementation.upload_pdf\": \"Upload PDF files\",\n      \"implementation.upload_docx\": \"Upload Word documents\",\n      \"implementation.upload_excel\": \"Upload Excel files\",\n      \"implementation.write_instructions\": \"Write custom instructions\",\n      \"implementation.urls_note\": \"Or provide URLs to analyze\",\n      \"implementation.step4_title\": \"4. Monitor and optimize\",\n      \"implementation.step4_desc\": \"Analyze performance and improve\",\n      \"implementation.monitor_conversations\": \"Monitor conversations\",\n      \"implementation.review_metrics\": \"Review metrics\",\n      \"implementation.access_leads\": \"Access generated leads\",\n      \"implementation.refine_training\": \"Refine training\",\n      \"implementation.isolated_stats\": \"Detailed statistics per integration\",\n      \"implementation.technical_requirements\": \"Technical requirements\",\n      \"implementation.compatibility_intro\": \"Compatible with all technologies\",\n      \"implementation.cms_compatibility\": \"All CMS (WordPress, Drupal, Joomla)\",\n      \"implementation.html_compatibility\": \"Static HTML sites\",\n      \"implementation.js_compatibility\": \"JavaScript applications\",\n      \"implementation.no_server_mods\": \"No server modifications required\",\n      \"implementation.start_button\": \"Start implementation\",\n      \n      // Business Use Cases\n      \"business.intro_text\": \"Commercial solutions for modern businesses\",\n      \"business.specific_benefits\": \"Specific benefits\",\n      \"business.lead_generation\": \"Lead generation\",\n      \"business.lead_gen1\": \"Automatic prospect qualification\",\n      \"business.lead_gen2\": \"Strategic information capture\",\n      \"business.lead_gen3\": \"Personalized opportunity tracking\",\n      \"business.customer_support\": \"Customer support\",\n      \"business.support1\": \"Instant 24/7 responses\",\n      \"business.support2\": \"Intelligent escalation to humans\",\n      \"business.support3\": \"Evolving knowledge base\",\n      \"business.catalog_presentation\": \"Catalog presentation\",\n      \"business.catalog1\": \"Personalized recommendations\",\n      \"business.catalog2\": \"AI-assisted navigation\",\n      \"business.catalog3\": \"Intelligent product comparison\",\n      \"business.sales_optimization\": \"Sales optimization\",\n      \"business.sales_opt1\": \"Guided sales process\",\n      \"business.sales_opt2\": \"Automatically handled objections\",\n      \"business.sales_opt3\": \"Intelligent upselling and cross-selling\",\n      \"business.behavior_analysis\": \"Behavioral analysis\",\n      \"business.behavior1\": \"Customer interaction tracking\",\n      \"business.behavior2\": \"Purchase patterns identified\",\n      \"business.behavior3\": \"Customer journey optimization\",\n      \"business.behavior4\": \"Advanced predictive insights\",\n      \"business.testimonials\": \"Testimonials\",\n      \"business.testimonial_text\": \"AIPPS increased our conversions by 300%\",\n      \"business.testimonial_author\": \"Sales director\",\n      \"business.implement_button\": \"Implement for your business\",\n      \n      // Education Use Cases\n      \"education.intro_text\": \"Educational solutions for teaching institutions\",\n      \"education.specific_benefits\": \"Specific benefits\",\n      \"education.admission_process\": \"Admission process\",\n      \"education.admission_benefit1\": \"Candidate guidance\",\n      \"education.admission_benefit2\": \"Program information\",\n      \"education.admission_benefit3\": \"Application assistance\",\n      \"education.program_presentation\": \"Program presentation\",\n      \"education.program_detail1\": \"Curriculum details\",\n      \"education.program_detail2\": \"Prerequisites and career outcomes\",\n      \"education.program_detail3\": \"Student testimonials\",\n      \"education.lead_capture\": \"Student prospect capture\",\n      \"education.lead_capture1\": \"Qualified information collection\",\n      \"education.lead_capture2\": \"Personalized candidate tracking\",\n      \"education.lead_capture3\": \"Automated nurturing\",\n      \"education.international_support\": \"International support\",\n      \"education.international1\": \"Multilingual support\",\n      \"education.international2\": \"Visa information\",\n      \"education.international3\": \"Cultural guidance\",\n      \"education.trend_analysis\": \"Trend analysis\",\n      \"education.trend1\": \"Most requested programs\",\n      \"education.trend2\": \"Frequently asked questions identified\",\n      \"education.trend3\": \"Communication optimization\",\n      \"education.trend4\": \"Enrollment prediction\",\n      \"education.testimonials\": \"Testimonials\",\n      \"education.testimonial_text\": \"AIPPS simplified our admission process\",\n      \"education.testimonial_author\": \"Admissions manager\",\n      \"education.implement_button\": \"Implement for your institution\",\n      \n      // Contact Page\n      \"contact.title\": \"Contact us\",\n      \"contact.subtitle\": \"We're here to help\",\n      \"contact.info.title\": \"Contact information\",\n      \"contact.info.email\": \"Email\",\n      \"contact.info.phone\": \"Phone\",\n      \"contact.info.address\": \"Address\",\n      \"contact.info.hours\": \"Business hours\",\n      \"contact.info.hours_details\": \"Monday - Friday: 9:00 AM - 6:00 PM EST\",\n      \"contact.form.title\": \"Send us a message\",\n      \"contact.form.name\": \"Name\",\n      \"contact.form.name_placeholder\": \"Your full name\",\n      \"contact.form.email\": \"Email\",\n      \"contact.form.email_placeholder\": \"your@email.com\",\n      \"contact.form.subject\": \"Subject\",\n      \"contact.form.subject_placeholder\": \"How can we help you?\",\n      \"contact.form.message\": \"Message\",\n      \"contact.form.message_placeholder\": \"Describe your question or request...\",\n      \"contact.form.send\": \"Send message\",\n      \n      // Documentation\n      \"documentation.overview.start_button\": \"Get started now\",\n      \n      // Get Started Page\n      \"getStartedPage.title\": \"Get Started\",\n      \"getStartedPage.subtitle\": \"Integrate AIPPS into your website in just a few minutes\",\n      \"getStartedPage.tabs.widget\": \"Widget\",\n      \"getStartedPage.tabs.fullscreen\": \"Fullscreen\",\n      \"getStartedPage.tabs.form\": \"Form\",\n      \"getStartedPage.widget.step1.title\": \"Step 1: Add this code to your website\",\n      \"getStartedPage.widget.step1.wordpress_note\": \"If you use WordPress: You can add it in the theme in footer.php or install a plugin that allows inserting HTML code.\",\n      \"getStartedPage.widget.step2.title\": \"Step 2: Customize your widget (optional)\",\n      \"getStartedPage.widget.step2.description\": \"You can customize the widget's behavior and appearance by adding additional parameters:\",\n      \"getStartedPage.widget.step2.customization_title\": \"Customization options:\",\n      \"getStartedPage.widget.step2.position\": \"Widget position on the page\",\n      \"getStartedPage.widget.step2.theme_color\": \"Widget primary color\",\n      \"getStartedPage.widget.step2.assistant_name\": \"Assistant name\",\n      \"getStartedPage.widget.step2.welcome_message\": \"Custom welcome message\",\n      \"getStartedPage.widget.step2.configure_dashboard\": \"Configure these options from the admin panel:\",\n      \"getStartedPage.widget.step2.dashboard_steps.0\": \"Access the \\\"Integrations\\\" section of the panel\",\n      \"getStartedPage.widget.step2.dashboard_steps.1\": \"Select the integration you want to configure\",\n      \"getStartedPage.widget.step2.dashboard_steps.2\": \"Customize colors, position and messages\",\n      \"getStartedPage.widget.step2.dashboard_steps.3\": \"Changes will be applied automatically\",\n      \"getStartedPage.buttons.go_to_integrations\": \"Go to integrations\",\n      \"getStartedPage.widget.step3.title\": \"Step 3: Train your assistant (optional)\",\n      \"getStartedPage.widget.step3.description\": \"For your assistant to provide helpful and relevant responses, you can train it with:\",\n      \"getStartedPage.buttons.manage_content\": \"Manage content\",\n      \"getStartedPage.widget.step3.step4_title\": \"Step 4: Configure forms (optional)\",\n      \"getStartedPage.widget.step3.step4_description\": \"Feed your widget with custom forms to capture leads and specific information:\",\n      \"getStartedPage.buttons.create_forms\": \"Create forms\",\n      \"getStartedPage.cta.forms_title\": \"Ready to create your forms?\",\n      \"getStartedPage.cta.forms_description\": \"Create custom forms to capture leads and collect important information from your visitors.\",\n      \"getStartedPage.buttons.forms_guide\": \"Forms guide\",\n      \"getStartedPage.support.title\": \"Need help?\",\n      \"getStartedPage.support.description\": \"Check our documentation or contact our support to get help.\",\n      \"getStartedPage.buttons.view_docs\": \"View documentation\",\n      \"getStartedPage.buttons.contact_support\": \"Contact support\",\n      \"getStartedPage.form.step3.dashboard_steps\": [\n        \"Access the \\\"Integrations\\\" section of the panel\",\n        \"Select the integration you want to configure\",\n        \"Customize colors, position and messages\",\n        \"Changes will be applied automatically\"\n      ],\n      \n      // Fullscreen Mode\n      \"getStartedPage.fullscreen.step1.title\": \"Step 1: Add this code to your website\",\n      \"getStartedPage.fullscreen.step1.description\": \"Copy and paste this code into your website's HTML, just before the closing </body> tag:\",\n      \"getStartedPage.fullscreen.step1.wordpress_note\": \"If you use WordPress: You can add it in the theme in footer.php or install a plugin that allows inserting HTML code.\",\n      \"getStartedPage.fullscreen.step2.title\": \"Step 2: Customize your experience (optional)\",\n      \"getStartedPage.fullscreen.step2.description\": \"Fullscreen mode creates an immersive experience similar to ChatGPT. You can customize it with:\",\n      \"getStartedPage.fullscreen_features.title\": \"Fullscreen mode features:\",\n      \"getStartedPage.fullscreen_features.register_login\": \"User registration and login\",\n      \"getStartedPage.fullscreen_features.personal_history\": \"Personal conversation history\",\n      \"getStartedPage.fullscreen_features.auto_titles\": \"Automatic title generation\",\n      \"getStartedPage.fullscreen_features.conversation_management\": \"Conversation management\",\n      \"getStartedPage.fullscreen_features.user_info\": \"Advanced user information\",\n      \"getStartedPage.fullscreen_features.jwt_security\": \"Integrated JWT security\",\n      \"getStartedPage.fullscreen_features.visual_customization\": \"Complete visual customization\",\n      \"getStartedPage.fullscreen_features.brand_colors\": \"Brand colors\",\n      \"getStartedPage.fullscreen_features.welcome_messages\": \"Welcome messages\",\n      \"getStartedPage.fullscreen_features.registration_config\": \"Registration configuration\",\n      \"getStartedPage.fullscreen_features.privacy_settings\": \"Privacy settings\",\n      \"getStartedPage.buttons.configure_auth\": \"Configure authentication\",\n      \n      // Ignored Sections\n      \"getStartedPage.ignored_sections.step3_title\": \"Step 3: Ignored sections (optional)\",\n      \"getStartedPage.ignored_sections.title\": \"Smart ignored sections\",\n      \"getStartedPage.ignored_sections.description\": \"Configure sections of your website that the assistant should ignore during automatic analysis:\",\n      \"getStartedPage.ignored_sections.benefit_1\": \"Avoids analyzing irrelevant content\",\n      \"getStartedPage.ignored_sections.benefit_2\": \"Improves response accuracy\",\n      \"getStartedPage.ignored_sections.benefit_3\": \"Reduces noise in the knowledge base\",\n      \"getStartedPage.ignored_sections.benefit_4\": \"Optimizes AI performance\",\n      \"getStartedPage.ignored_sections.config_example\": \"Configuration example:\",\n      \"getStartedPage.ignored_sections.config_description\": \"To configure ignored sections:\",\n      \"getStartedPage.ignored_sections.step_1\": \"Identify CSS selectors of elements to ignore\",\n      \"getStartedPage.ignored_sections.step_2\": \"Add them in integration settings\",\n      \"getStartedPage.ignored_sections.step_3\": \"The assistant will automatically ignore these sections\",\n      \"getStartedPage.ignored_sections.step_4\": \"Test and adjust as needed\",\n      \"getStartedPage.buttons.configure_sections\": \"Configure sections\",\n      \n      // Fullscreen Steps 4-5\n      \"getStartedPage.fullscreen.step4.title\": \"Step 4: Train your assistant\",\n      \"getStartedPage.fullscreen.step4.description\": \"Optimize your assistant with specialized content:\",\n      \"getStartedPage.fullscreen.step4.feature_1\": \"PDF and DOCX documents\",\n      \"getStartedPage.fullscreen.step4.feature_2\": \"Custom instructions\",\n      \"getStartedPage.fullscreen.step4.feature_3\": \"URLs to analyze\",\n      \"getStartedPage.fullscreen.step4.feature_4\": \"Evolving knowledge base\",\n      \"getStartedPage.buttons.configure_assistant\": \"Configure assistant\",\n      \"getStartedPage.fullscreen.step5.title\": \"Step 5: Advanced forms\",\n      \"getStartedPage.fullscreen.step5.description\": \"Integrate smart forms to capture leads:\",\n      \"getStartedPage.fullscreen.step5.feature_1\": \"Adaptive forms\",\n      \"getStartedPage.fullscreen.step5.feature_2\": \"Smart validation\",\n      \"getStartedPage.fullscreen.step5.feature_3\": \"CRM integration\",\n      \"getStartedPage.fullscreen.step5.feature_4\": \"Advanced analytics\",\n      \"getStartedPage.buttons.configure_advanced_forms\": \"Configure advanced forms\",\n      \n      // Form Mode\n      \"getStartedPage.form.step1.title\": \"Step 1: Create your form\",\n      \"getStartedPage.form.step1.description\": \"Start by creating a form from your dashboard:\",\n      \"getStartedPage.form.step2.title\": \"Step 2: Integrate the form\",\n      \"getStartedPage.form.step2.description\": \"Use this code to integrate your form on your website:\",\n      \"getStartedPage.form.step2.basic_attributes\": \"Basic attributes:\",\n      \"getStartedPage.form.step2.attributes.form_id\": \"Form ID to display\",\n      \"getStartedPage.form.step2.attributes.display_type\": \"Display type (modal, inline)\",\n      \"getStartedPage.form.step2.attributes.position\": \"Button position\",\n      \"getStartedPage.form.step2.attributes.button_text\": \"Button text\",\n      \"getStartedPage.form.step2.customization_attributes\": \"Customization attributes:\",\n      \"getStartedPage.form.step2.attributes.theme_color\": \"Theme color\",\n      \"getStartedPage.form.step2.attributes.icon\": \"Button icon\",\n      \"getStartedPage.form.step2.attributes.button_size\": \"Button size\",\n      \"getStartedPage.form.step2.attributes.auto_show\": \"Auto display\",\n      \"getStartedPage.form.step2.example_title\": \"Custom configuration example:\",\n      \"getStartedPage.form.step3.title\": \"Step 3: Dashboard configuration\",\n      \"getStartedPage.form.step3.description\": \"Configure these options from the admin panel:\",\n      \"getStartedPage.buttons.go_to_forms\": \"Go to forms\",\n      \n      // Pricing Page\n      \"pricing.plans\": \"Plans\",\n      \"pricing.title\": \"Pricing\",\n      \"pricing.subtitle\": \"Choose the plan that fits your needs\",\n      \"pricing.monthly_billing\": \"Monthly billing\",\n      \"pricing.toggle_billing\": \"Toggle billing\",\n      \"pricing.annual_billing\": \"Annual billing\",\n      \"pricing.save_percentage\": \"Save {{percentage}}%\",\n      \"pricing.take_offer\": \"Take offer\",\n      \"pricing.subscribe\": \"Subscribe\",\n      \"pricing.promotional_price_duration\": \"Promotional price for {{months}} months\",\n      \"pricing.contact_us\": \"Contact us\",\n      \"pricing.discount_duration\": \"{{discount}}% discount for {{months}} months\",\n      \"pricing.take_annual_offer\": \"Take annual offer\",\n      \"pricing.start_free\": \"Start free\",\n      \"pricing.processing\": \"Processing...\",\n      \"pricing.free\": \"Free\",\n      \"pricing.from\": \"From\",\n      \"pricing.month\": \"month\",\n      \"pricing.year\": \"year\",\n      \"pricing.recommended\": \"Recommended\",\n      \"pricing.login_required\": \"Login required\",\n      \"pricing.login_description\": \"Please log in to continue\",\n      \"pricing.success\": \"Success\",\n      \"pricing.error\": \"Error\",\n      \"pricing.process_error\": \"Error processing\",\n      \"pricing.free_plan_activated\": \"Free plan activated\",\n      \"pricing.pricing_note\": \"Need automations or advanced features? Contact us!\",\n      \"pricing.limited_launch_offer\": \"Limited launch offer\",\n      \"pricing.spots_remaining\": \"{{remaining}} spots remaining out of {{total}}\",\n      \"pricing.spots_left_of_total\": \"{{remaining}} spots left out of {{total}}\",\n      \"pricing.take_advantage_unique_prices\": \"Take advantage of these unique prices now!\",\n      \n      // Integration Analytics\n      \"analytics_for\": \"Analytics for\",\n      \"view_performance_metrics_for_integration\": \"View performance metrics for integration\",\n      \"view_conversations\": \"View conversations\",\n      \"download_pdf\": \"Download PDF\",\n      \"Total conversations\": \"Total conversations\",\n      \"no_messages\": \"No messages\",\n      \"no_conversations_to_resolve\": \"No conversations to resolve\",\n      \"message_distribution\": \"Message distribution\",\n      \"user_vs_assistant_messages\": \"User vs assistant messages\",\n      \"conversations_over_time\": \"Conversations over time\",\n      \"resolution_status\": \"Resolution status\",\n      \"resolved_vs_active_conversations\": \"Resolved vs active conversations\",\n      \"top_products\": \"Top products\",\n      \"most_mentioned_products\": \"Most mentioned products\",\n      \"top_topics\": \"Top topics\",\n      \"most_discussed_topics\": \"Most discussed topics\",\n      \"keyword_cloud\": \"Keyword cloud\",\n      \"frequently_mentioned_keywords\": \"Frequently mentioned keywords\",\n      \"what_does_it_mean\": \"What does it mean\",\n      \"keywords_explanation\": \"Keywords explanation\",\n      \n      // Pricing Button Actions\n      \"Feature\": \"Feature\",\n      \"LearnMore\": \"Learn More\",\n      \"Features\": \"Features\",\n      \"Learn More\": \"Learn More\",\n      \"feature\": \"feature\",\n      \"learn_more\": \"learn more\",\n      \"features\": \"features\",\n      \n      // Chat Interface\n      \"chat.placeholder\": \"Type your message...\",\n      \n      // Login Page\n      \"loginPage.title\": \"Login\",\n      \"loginPage.subtitle\": \"Sign in to your AIPPS account\",\n      \"loginPage.username\": \"Username\",\n      \"loginPage.username_placeholder\": \"Enter your username\",\n      \"loginPage.password\": \"Password\",\n      \"loginPage.password_placeholder\": \"Enter your password\",\n      \"loginPage.submit\": \"Sign in\",\n      \"loginPage.submitting\": \"Signing in...\",\n      \"loginPage.success_title\": \"Login successful\",\n      \"loginPage.success_message\": \"You are now signed in\",\n      \"loginPage.failed_title\": \"Login failed\",\n      \"loginPage.failed_message\": \"Incorrect username or password\",\n      \n      // Footer\n      footer: {\n        company_description: \"Company description\",\n        product: \"Product\", \n        company: \"Company\",\n        support: \"Support\",\n        features: \"Features\",\n        pricing: \"Pricing\",\n        documentation: \"Documentation\",\n        get_started: \"Get started\",\n        about_us: \"About us\",\n        contact: \"Contact\",\n        privacy_policy: \"Privacy policy\",\n        terms_of_service: \"Terms of service\",\n        help_center: \"Help center\",\n        all_rights_reserved: \"All rights reserved\"\n      }\n    }\n  }\n};\n\nconsole.log('🔍 I18N DEBUG - Manual resources loaded:', {\n  fr: {\n    pricing: typeof resources.fr.translation.pricing,\n    documentation: typeof resources.fr.translation.documentation,\n    get_started: typeof resources.fr.translation.get_started\n  },\n  es: {\n    pricing: typeof resources.es.translation.pricing,\n    documentation: typeof resources.es.translation.documentation, \n    get_started: typeof resources.es.translation.get_started\n  },\n  en: {\n    pricing: typeof resources.en.translation.pricing,\n    documentation: typeof resources.en.translation.documentation,\n    get_started: typeof resources.en.translation.get_started\n  }\n});\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    fallbackLng: {\n      'fr-CA': ['fr'],     // ← Francés canadiense usa francés\n      'fr-FR': ['fr'],     // ← Francés francés usa francés  \n      'en-US': ['en'],     // ← Inglés americano usa inglés\n      'en-CA': ['en'],     // ← Inglés canadiense usa inglés\n      'es-ES': ['es'],     // ← Español España usa español\n      'es-MX': ['es'],     // ← Español México usa español\n      'default': ['en']    // ← Por defecto inglés\n    },\n    debug: false,\n    \n    interpolation: {\n      escapeValue: false,\n    },\n    \n    detection: {\n      order: ['localStorage', 'cookie', 'navigator'],\n      caches: ['localStorage', 'cookie'],\n    },\n  });\n\nexport default i18n;\n","size_bytes":165525},"client/src/i18n/i18n_old.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\n// Definir recursos manualmente para solucionar problemas de importación de Vite\n\n// Crear recursos manualmente para evitar problemas de Vite\nconst resources = {\n  fr: {\n    translation: {\n      menu: \"Menu\",\n      common: {\n        error: \"Erreur\",\n        yes: \"Oui\", \n        no: \"Non\",\n        cancel: \"Annuler\",\n        spanish: \"Espagnol\",\n        english: \"Anglais\",\n        french: \"Français\"\n      },\n      language: {\n        select: \"Sélectionner la langue\",\n        fr: \"Français\",\n        es: \"Espagnol\", \n        en: \"Anglais\"\n      },\n      refresh: \"Actualiser\",\n      edit: \"Modifier\",\n      conversations: \"Conversations\",\n      analytics: \"Analyses\",\n      delete: \"Supprimer\",\n      visitors_helped: \"Visiteurs aidés\",\n      installed: \"Installé\",\n      confirm_delete_title: \"Êtes-vous sûr?\",\n      confirm_delete_description: \"Cette action supprimera définitivement l'intégration \\\"{{name}}\\\" et ne peut pas être annulée. Le widget cessera de fonctionner sur votre site web.\",\n      welcome: \"Bienvenue chez AIPI\",\n      task_automation: \"Automatisation des Tâches\",\n      task_automation_description: \"Configurez des tâches et flux de travail automatisés alimentés par l'IA.\",\n      create_automation: \"Créer une Automatisation\",\n      conversations_for: \"Conversations pour\",\n      view_all_conversations_for_integration: \"Voir toutes les conversations pour cette intégration\",\n      search_conversations: \"Rechercher dans les conversations...\",\n      edit_integration: \"Modifier l'intégration\",\n      view_conversations: \"Voir les conversations\",\n      view_analytics: \"Voir les analyses\",\n      resolved: \"Résolu\",\n      unresolved: \"Non résolu\",\n      messages: \"messages\",\n      loading: \"Chargement...\",\n      back: \"Retour\",\n      no_conversations_found: \"Aucune conversation trouvée\",\n      details: \"Détails\",\n      settings: \"Paramètres\",\n      settings_description: \"Configurez les paramètres de votre assistant AIPPS.\",\n      ai_assistant_settings: \"Paramètres de l'Assistant IA\",\n      assistant_name: \"Nom de l'Assistant\",\n      default_greeting: \"Salutation par Défaut\",\n      conversation_style: \"Style de Conversation\",\n      show_availability: \"Afficher la Disponibilité\",\n      appearance: \"Apparence\",\n      chat_font: \"Police du Chat\",\n      user_message_color: \"Couleur du Message Utilisateur\",\n      assistant_message_color: \"Couleur du Message Assistant\",\n      welcome_chat: \"Chat de Bienvenue\",\n      status: \"État\",\n      welcome_message: \"Message de Bienvenue\",\n      bubble_color: \"Couleur de Bulle\",\n      text_color: \"Couleur du Texte\",\n      enabled: \"Activé\",\n      disabled: \"Désactivé\",\n      system_default: \"Par Défaut du Système\",\n      professional_label: \"Professionnel\",\n      edit_settings: \"Modifier les Paramètres\",\n      no_settings_found: \"Aucun paramètre trouvé\",\n      no_settings_description: \"Créez les paramètres de votre assistant pour personnaliser votre expérience AIPPS\",\n      configure_settings: \"Configurer les Paramètres\",\n      integrations: \"Intégrations\",\n      integrations_description: \"Créez et gérez les intégrations de sites web pour AIPPS.\",\n      create_integration: \"Créer une Intégration\",\n      no_integrations: \"Pas encore d'intégrations\",\n      add_new_integration_desc: \"Ajoutez une nouvelle intégration de site web pour connecter AIPPS à votre site\",\n      forms: \"Formulaires\",\n      forms_description: \"Créez et gérez vos formulaires.\",\n      create_form: \"Créer un Formulaire\",\n      conversations_description: \"Examinez et gérez les conversations avec vos visiteurs.\",\n      new: \"Nouveau\",\n      no_conversations_matching_search: \"Aucune conversation trouvée correspondant à votre recherche\",\n      no_conversations_for_integration: \"Pas encore de conversations pour cette intégration\",\n      recent_conversations: \"Conversations Récentes\",\n      total_conversations: \"Total des Conversations\",\n      resolution_rate: \"Taux de Résolution\",\n      average_response_time: \"Temps de Réponse Moyen\",\n      minutes: \"minutes\",\n      yes: \"Oui\",\n      no: \"Non\",\n      no_conversations: \"Pas encore de conversations\",\n      conversations_empty_message: \"Lorsque les visiteurs interagissent avec votre widget de chat, les conversations apparaîtront ici\",\n      success: \"Succès\",\n      error: \"Erreur\",\n      form_deleted_successfully: \"Formulaire supprimé avec succès\",\n      error_deleting_form: \"Erreur lors de la suppression du formulaire\",\n      no_description: \"Aucune description\",\n      responses: \"réponses\",\n      no_forms: \"Pas encore de formulaires\",\n      forms_empty_message: \"Créez votre premier formulaire pour commencer à capturer des données de visiteurs\",\n      dashboard_title: \"Tableau de Bord\",\n      manage_assistant: \"Gérez votre assistant IA et configurez les intégrations\",\n      avg_response_time: \"Temps de Réponse Moyen\",\n      confirm_delete: \"Confirmer la Suppression\",\n      delete_form_confirmation: \"Êtes-vous sûr de vouloir supprimer ce formulaire ? Cette action ne peut pas être annulée et supprimera également toutes les réponses.\",\n      cancel: \"Annuler\",\n      deleting: \"Suppression...\",\n      no_automations: \"Pas encore d'automatisations\",\n      automations_empty_message: \"Créez votre première automatisation pour rationaliser les tâches répétitives avec l'IA\",\n      view_logs: \"Voir les Journaux\",\n      active: \"Actif\",\n      inactive: \"Inactif\",\n      testing: \"Test\",\n      anonymous: \"Anonyme\",\n      completed: \"Terminé\",\n      view: \"Voir\",\n      last_message: \"Dernier message\",\n      getStarted: \"Commencer\",\n      learnMore: \"En savoir plus\",\n      features: {\n        title: \"Caractéristiques Principales\",\n        subtitle: \"Découvrez les fonctionnalités qui font d'AIPI le meilleur choix pour votre site web\",\n        conversationalAI: {\n          title: \"IA Conversationnelle\",\n          description: \"Interactions intelligentes et naturelles avec vos visiteurs\"\n        },\n        taskAutomation: {\n          title: \"Automatisation des Tâches\",\n          description: \"Automatisez les réponses et processus pour améliorer l'efficacité\"\n        },\n        easyIntegration: {\n          title: \"Intégration Facile\",\n          description: \"Implémentez en minutes avec une simple ligne de code\"\n        },\n        analytics: {\n          title: \"Analyses Avancées\",\n          description: \"Obtenez des insights précieux sur les interactions de vos utilisateurs\"\n        }\n      },\n      cta: {\n        title: \"Prêt à transformer votre site web ?\",\n        subtitle: \"Rejoignez des milliers d'entreprises qui utilisent déjà AIPI pour améliorer l'expérience de leurs utilisateurs\",\n        getStartedFree: \"Commencer Gratuitement\",\n        scheduleDemo: \"Planifier une Démo\"\n      },\n      footer: {\n        company_description: \"AIPI - Plateforme avancée d'IA conversationnelle pour sites web.\",\n        product: \"Produit\",\n        company: \"Entreprise\",\n        about_us: \"À propos\",\n        contact: \"Contact\",\n        privacy_policy: \"Politique de confidentialité\",\n        terms_of_service: \"Conditions d'utilisation\",\n        support: \"Support\",\n        help_center: \"Centre d'aide\",\n        all_rights_reserved: \"Tous droits réservés.\"\n      },\n      pricing: {\n        plans: \"Plans\",\n        title: \"Choisissez Votre Plan Parfait\",\n        subtitle: \"Sélectionnez le plan qui correspond le mieux à vos besoins et développez votre entreprise avec l'IA conversationnelle.\",\n        monthly_billing: \"Facturation Mensuelle\",\n        annual_billing: \"Facturation Annuelle\",\n        toggle_billing: \"Basculer le type de facturation\",\n        save_percentage: \"Économisez 20%\",\n        recommended: \"Recommandé\",\n        free: \"Gratuit\",\n        from: \"À partir de\",\n        month: \"mois\",\n        year: \"année\",\n        contact_us: \"Nous Contacter\",\n        take_offer: \"Profiter de l'Offre\",\n        take_annual_offer: \"Profiter de l'Offre Annuelle\",\n        start_free: \"Commencer Gratuitement\",\n        subscribe: \"S'abonner\",\n        processing: \"Traitement...\",\n        spots_remaining: \"Il ne reste que {{remaining}} places sur {{total}}\",\n        discount_duration: \"{{discount}}% de réduction pendant {{months}} mois\",\n        promotional_price_duration: \"Prix promotionnel pendant {{months}} mois\",\n        limited_launch_offer: \"Offre de Lancement Limitée\",\n        spots_left_of_total: \"Il ne reste que {{remaining}} places sur {{total}} dans cette promotion spéciale.\",\n        take_advantage_unique_prices: \"Profitez de ces prix uniques avant qu'ils ne reviennent aux prix réguliers.\",\n        pricing_note: \"Tous les plans incluent un support complet et des mises à jour gratuites.\",\n        login_required: \"Connexion requise\",\n        login_description: \"Vous devez vous connecter pour vous abonner à un plan\",\n        success: \"Succès !\",\n        error: \"Erreur\",\n        free_plan_activated: \"Plan gratuit activé avec succès\",\n        process_error: \"Erreur lors du traitement de la demande\",\n        faq: {\n          title: \"Questions Fréquentes\",\n          q1: \"Puis-je changer de plan à tout moment ?\",\n          a1: \"Oui, vous pouvez mettre à niveau ou réduire votre plan à tout moment depuis votre tableau de bord.\"\n        },\n        support: {\n          title: \"Support\",\n          q1: \"Quel type de support est inclus ?\",\n          a1: \"Tous les plans incluent un support par email. Les plans Pro et Enterprise incluent un support prioritaire.\"\n        },\n        refund: {\n          title: \"Politique de Remboursement\",\n          q1: \"Offrez-vous une garantie de remboursement ?\",\n          a1: \"Nous offrons une garantie de remboursement de 30 jours pour tous les plans payants.\"\n        }\n      },\n      help: {\n        title: \"Centre d'Aide\",\n        subtitle: \"Trouvez des réponses à vos questions et apprenez à utiliser AIPPS\",\n        search_placeholder: \"Rechercher des articles d'aide...\",\n        popular: {\n          title: \"Articles Populaires\",\n          badge: \"Populaire\",\n          article1: \"Comment intégrer le widget sur votre site web\",\n          article2: \"Personnaliser l'assistant conversationnel\",\n          article3: \"Configurer les formulaires de capture de leads\",\n          article4: \"Analyser les métriques et conversations\",\n          article5: \"Entraîner votre assistant avec des documents\"\n        },\n        categories: {\n          title: \"Catégories d'Aide\",\n          getting_started: {\n            title: \"Premiers Pas\",\n            description: \"Tout ce dont vous avez besoin pour commencer avec AIPPS\",\n            article1: \"Créer votre premier compte AIPPS\",\n            article2: \"Configuration initiale du tableau de bord\",\n            article3: \"Guide de démarrage rapide pour les widgets\",\n            article4: \"Bases de l'IA conversationnelle\"\n          },\n          configuration: {\n            title: \"Configuration\",\n            description: \"Personnalisez AIPPS selon vos besoins\",\n            article1: \"Personnaliser les couleurs et le thème du widget\",\n            article2: \"Configurer les messages de bienvenue\",\n            article3: \"Définir les heures de disponibilité\",\n            article4: \"Gestion des langues et traductions\"\n          },\n          integration: {\n            title: \"Intégration\",\n            description: \"Connectez AIPPS avec votre site web et vos outils\",\n            article1: \"Intégrer le widget dans WordPress\",\n            article2: \"Implémentation Shopify\",\n            article3: \"Code d'intégration personnalisé\",\n            article4: \"Intégration CRM et outils\"\n          },\n          billing: {\n            title: \"Facturation\",\n            description: \"Gérez votre abonnement et vos paiements\",\n            article1: \"Changer de plan d'abonnement\",\n            article2: \"Informations de facturation et paiement\",\n            article3: \"Politique de remboursement\",\n            article4: \"Questions fréquemment posées sur les prix\"\n          },\n          troubleshooting: {\n            title: \"Dépannage\",\n            description: \"Résolvez les problèmes techniques courants\",\n            article1: \"Le widget n'apparaît pas sur mon site\",\n            article2: \"Problèmes de connexion du chat\",\n            article3: \"L'assistant ne répond pas correctement\",\n            article4: \"Problèmes avec les formulaires\"\n          },\n          account: {\n            title: \"Compte\",\n            description: \"Gérez votre profil et les paramètres de compte\",\n            article1: \"Changer le mot de passe et les données de profil\",\n            article2: \"Paramètres de notification\",\n            article3: \"Gérer les utilisateurs et permissions\",\n            article4: \"Supprimer ou fermer le compte\"\n          }\n        },\n        contact_support: {\n          title: \"Besoin d'Aide Supplémentaire ?\",\n          description: \"Si vous ne trouvez pas ce que vous cherchez, notre équipe est là pour vous aider\",\n          contact_button: \"Contacter le Support\",\n          email_button: \"Envoyer un Email\"\n        }\n      },\n      about: {\n        title: \"À Propos d'AIPPS\",\n        subtitle: \"Découvrez notre mission de transformer la communication web avec l'intelligence artificielle\",\n        mission: {\n          title: \"Notre Mission\",\n          description: \"Démocratiser l'accès à l'IA conversationnelle pour tous les sites web du monde\"\n        },\n        vision: {\n          title: \"Notre Vision\",\n          description: \"Créer un avenir où chaque interaction web est intelligente et personnalisée\"\n        },\n        global: {\n          title: \"Portée Mondiale\",\n          description: \"Nous servons des entreprises de toutes tailles dans plus de 50 pays\"\n        },\n        innovation: {\n          title: \"Innovation\",\n          description: \"Pionniers de la technologie d'IA conversationnelle avec plus de 5 ans d'expérience\"\n        }\n      },\n      contact: {\n        title: \"Contactez-Nous\",\n        subtitle: \"Nous sommes là pour vous aider. Contactez notre équipe\",\n        info: {\n          title: \"Informations de Contact\",\n          email: \"support@aipps.ca\",\n          phone: \"+1 (555) 123-4567\",\n          address: \"123 Innovation Street, Tech City, TC 12345\",\n          hours: \"Lundi au Vendredi : 9h00 - 18h00 (EST)\"\n        },\n        form: {\n          title: \"Envoyez-nous un Message\",\n          name_label: \"Nom\",\n          name_placeholder: \"Votre nom\",\n          email_label: \"Email\",\n          email_placeholder: \"votre@email.com\",\n          subject_label: \"Sujet\",\n          subject_placeholder: \"Comment pouvons-nous vous aider ?\",\n          message_label: \"Message\",\n          message_placeholder: \"Décrivez votre demande...\",\n          send_button: \"Envoyer le Message\",\n          sending_button: \"Envoi en cours...\",\n          success_title: \"Message Envoyé\",\n          success_message: \"Merci de nous avoir contactés. Nous vous répondrons bientôt.\"\n        }\n      },\n      privacy: {\n        title: \"Politique de Confidentialité\",\n        subtitle: \"Comment nous collectons, utilisons et protégeons vos informations\",\n        data_collection: {\n          title: \"Collecte de Données\",\n          description: \"Nous collectons des informations pour fournir et améliorer nos services :\",\n          item1: \"Informations de compte (nom, email, détails de contact)\",\n          item2: \"Données d'utilisation et d'analyse du widget\",\n          item3: \"Informations techniques (IP, navigateur, appareil)\",\n          item4: \"Contenu des conversations pour l'entraînement de l'IA\"\n        },\n        data_usage: {\n          title: \"Utilisation des Données\",\n          description: \"Nous utilisons vos données aux fins suivantes :\",\n          item1: \"Fournir et maintenir nos services\",\n          item2: \"Améliorer l'expérience utilisateur\",\n          item3: \"Analyse et statistiques de performance\",\n          item4: \"Communications de support et mises à jour\"\n        },\n        data_sharing: {\n          title: \"Partage de Données\",\n          description: \"Nous ne vendons ni ne louons vos informations personnelles. Nous ne les partageons que dans ces cas :\",\n          item1: \"Avec des fournisseurs de services nécessaires au fonctionnement\",\n          item2: \"Lorsque requis par la loi\",\n          item3: \"Avec votre consentement explicite\"\n        },\n        security: {\n          title: \"Sécurité\",\n          description: \"Nous mettons en place des mesures de sécurité pour protéger vos informations\",\n          item1: \"Chiffrement des données en transit et au repos\",\n          item2: \"Authentification à deux facteurs disponible\",\n          item3: \"Audits de sécurité réguliers\",\n          item4: \"Conformité aux normes de sécurité internationales\"\n        },\n        user_rights: {\n          title: \"Vos Droits\",\n          description: \"Vous avez le droit d'accéder, corriger ou supprimer vos informations personnelles\",\n          item1: \"Accéder à vos données personnelles stockées\",\n          item2: \"Demander la correction d'informations incorrectes\",\n          item3: \"Supprimer votre compte et les données associées\",\n          item4: \"Exporter vos données dans un format portable\"\n        },\n        contact: {\n          title: \"Contact\",\n          description: \"Pour les questions de confidentialité, contactez-nous à privacy@aipps.ca\"\n        }\n      },\n      terms: {\n        title: \"Conditions d'Utilisation\",\n        subtitle: \"Termes et conditions d'utilisation d'AIPPS\",\n        acceptance: {\n          title: \"Acceptation des Conditions\",\n          description: \"En utilisant AIPPS, vous acceptez ces termes et conditions\"\n        },\n        services: {\n          title: \"Description du Service\",\n          description: \"AIPPS fournit des outils d'IA conversationnelle pour sites web :\",\n          item1: \"Widgets de chat intelligents\",\n          item2: \"Formulaires de capture de leads\",\n          item3: \"Analyses et métriques\",\n          item4: \"Intégration de sites web\"\n        },\n        user_obligations: {\n          title: \"Obligations de l'Utilisateur\",\n          description: \"En tant qu'utilisateur, vous vous engagez à :\",\n          item1: \"Utiliser le service de manière légale et éthique\",\n          item2: \"Ne pas interférer avec le fonctionnement du système\",\n          item3: \"Maintenir la sécurité de votre compte\",\n          item4: \"Respecter les droits de propriété intellectuelle\"\n        },\n        payment: {\n          title: \"Conditions de Paiement\",\n          description: \"Les conditions de paiement incluent :\",\n          item1: \"Facturation mensuelle ou annuelle selon le plan choisi\",\n          item2: \"Les paiements ne sont pas remboursables sauf exceptions\",\n          item3: \"Les prix peuvent changer avec préavis\",\n          item4: \"La suspension pour non-paiement est immédiate\"\n        },\n        intellectual_property: {\n          title: \"Propriété Intellectuelle\",\n          description: \"Tous les droits de propriété intellectuelle d'AIPPS nous appartiennent :\",\n          item1: \"Logiciel et technologie AIPPS\",\n          item2: \"Marques commerciales et logos\",\n          item3: \"Contenu et documentation\"\n        },\n        limitation: {\n          title: \"Limitation de Responsabilité\",\n          description: \"AIPPS n'est pas responsable des dommages indirects ou de la perte de données\"\n        },\n        termination: {\n          title: \"Résiliation\",\n          description: \"Toute partie peut résilier l'accord :\",\n          item1: \"L'utilisateur peut annuler à tout moment\",\n          item2: \"AIPPS peut suspendre les comptes pour violation des conditions\",\n          item3: \"Les données seront supprimées selon la politique de rétention\"\n        }\n      },\n      documentation: {\n        title: \"Documentation AIPPS\",\n        subtitle: \"Guide complet pour implémenter et utiliser AIPPS sur votre site web\",\n        implementation: \"Implémentation\",\n        api_reference: \"Référence API\",\n        support: \"Support\",\n        widget_integration: \"Intégration de Widget\",\n        contextual_understanding: \"Compréhension Contextuelle\",\n        document_training: \"Entraînement avec Documents\",\n        lead_capture: \"Capture de Leads\",\n        analytics: \"Analytiques\",\n        task_automation: \"Automatisation des Tâches\",\n        form_creation: \"Création de Formulaires\",\n        overview_content: \"AIPPS est une plateforme d'IA conversationnelle avancée qui permet aux sites web d'offrir des expériences de chat intelligentes et personnalisées.\",\n        generated_on: \"Généré le\",\n        language: \"Langue\",\n        table_of_contents: \"Table des Matières\",\n        download_pdf: \"Télécharger PDF\",\n        forms: \"Formulaires\",\n        education: \"Éducation\",\n        business: \"Entreprises\",\n        professional_label: \"Professionnel\", \n        page: \"Page\",\n        of: \"de\",\n        features_content: \"AIPPS offre une large gamme de fonctionnalités conçues pour améliorer l'expérience utilisateur et augmenter les conversions sur votre site web.\",\n        widget_integration_content: \"Intégrez facilement des widgets de chat sur votre site web avec une simple ligne de code. Compatible avec WordPress, Shopify, React et plus.\",\n        contextual_understanding_content: \"Notre assistant IA comprend le contexte des conversations et fournit des réponses pertinentes et utiles.\",\n        document_training_content: \"Entraînez votre assistant avec des documents PDF, DOCX et autres formats pour qu'il puisse répondre aux questions spécifiques sur votre entreprise.\",\n        lead_capture_content: \"Capturez des leads intelligemment avec des formulaires adaptatifs qui s'ajustent au comportement de l'utilisateur.\",\n        analytics_content: \"Obtenez des insights détaillés sur les interactions des utilisateurs, les patterns de comportement et les métriques de conversion.\",\n        task_automation_content: \"Automatisez les tâches répétitives comme répondre aux questions fréquentes, programmer des rendez-vous et envoyer des informations produit.\",\n        form_creation_content: \"Créez des formulaires dynamiques et intelligents qui s'adaptent aux besoins spécifiques de chaque visiteur.\",\n        implementation_content: \"Guide complet étape par étape pour implémenter AIPPS sur votre site web, de l'installation à la configuration avancée.\",\n        api_reference_content: \"Documentation complète de l'API AIPPS pour les intégrations personnalisées et fonctionnalités avancées.\",\n        support_content: \"Accédez à notre centre de support 24/7 avec documentation, tutoriels et assistance technique spécialisée.\",\n        overview: {\n          title: \"Introduction à AIPPS\",\n          introduction: \"AIPPS est une plateforme révolutionnaire d'IA conversationnelle conçue pour transformer la façon dont les sites web interagissent avec leurs visiteurs. Nous offrons des solutions intelligentes et personnalisées qui améliorent l'expérience utilisateur et augmentent les conversions.\",\n          problem_title: \"Le Problème que Nous Résolvons\",\n          problem_description: \"De nombreux sites web ont du mal à maintenir l'engagement de leurs visiteurs et à convertir le trafic en leads de qualité. Les méthodes traditionnelles de communication web sont souvent statiques et impersonnelles, ce qui se traduit par des taux de rebond élevés et des opportunités manquées.\",\n          solution_intro: \"AIPPS fournit une solution complète avec les fonctionnalités clés suivantes :\",\n          solution_point_1: \"Widgets de chat intelligents qui comprennent le contexte et fournissent des réponses pertinentes\",\n          solution_point_2: \"Formulaires dynamiques qui s'adaptent au comportement de l'utilisateur\",\n          solution_point_3: \"Analytiques avancées pour optimiser l'expérience utilisateur\",\n          solution_point_4: \"Intégration transparente avec n'importe quel site web en quelques minutes\",\n          card1_title: \"IA Conversationnelle Avancée\",\n          card1_text: \"Notre assistant virtuel utilise une technologie de pointe pour comprendre les requêtes des utilisateurs et fournir des réponses précises et utiles en temps réel.\",\n          card2_title: \"Capture de Leads Intelligente\",\n          card2_text: \"Convertissez plus de visiteurs en leads avec des formulaires adaptatifs et des flux de conversation conçus pour maximiser les conversions.\",\n          card3_title: \"Intégration Sans Effort\",\n          card3_text: \"Implémentez AIPPS sur votre site web avec une simple ligne de code. Compatible avec toutes les plateformes web principales.\",\n          card4_title: \"Analytiques Détaillées\",\n          card4_text: \"Obtenez des insights précieux sur le comportement de vos visiteurs et optimisez continuellement l'expérience utilisateur.\",\n          start_button: \"Commencer Maintenant\"\n        },\n        features: {\n          title: \"Fonctionnalités Principales\"\n        }\n      },\n      education: {\n        intro_text: \"AIPPS révolutionne le secteur éducatif avec des solutions d'IA conversationnelle conçues spécifiquement pour les institutions académiques, universités et centres de formation.\",\n        specific_benefits: \"Avantages Spécifiques pour l'Éducation\",\n        admission_process: \"Processus d'Admission Automatisé\",\n        admission_benefit1: \"Réponses instantanées aux questions sur les programmes académiques\",\n        admission_benefit2: \"Guide personnalisé pendant le processus d'inscription\",\n        admission_benefit3: \"Suivi automatique des candidats potentiels\",\n        program_presentation: \"Présentation Interactive des Programmes\",\n        program_detail1: \"Information détaillée sur les carrières et spécialisations\",\n        program_detail2: \"Comparaison automatique entre différents programmes\",\n        program_detail3: \"Recommandations basées sur les intérêts de l'étudiant\",\n        lead_capture: \"Capture d'Étudiants Potentiels\",\n        lead_capture1: \"Formulaires adaptatifs pour demandes d'information\",\n        lead_capture2: \"Segmentation automatique par domaine d'intérêt\",\n        lead_capture3: \"Suivi de l'entonnoir de conversion académique\",\n        international_support: \"Support International\",\n        international1: \"Assistance multilingue pour étudiants étrangers\",\n        international2: \"Information sur visas et procédures migratoires\",\n        international3: \"Orientation culturelle et académique personnalisée\",\n        trend_analysis: \"Analyse des Tendances Éducatives\",\n        trend1: \"Identification des programmes les plus demandés\",\n        trend2: \"Analyse du comportement des candidats\",\n        trend3: \"Optimisation des stratégies de captation\",\n        trend4: \"Prédiction des tendances d'inscription\",\n        testimonials: \"Témoignages\",\n        testimonial_text: \"AIPPS a transformé notre captation d'étudiants. Nous avons augmenté les consultations de 300% et significativement amélioré l'expérience du candidat.\",\n        testimonial_author: \"Dr. Marie Dubois, Université Technologique\",\n        implement_button: \"Implémenter pour l'Éducation\"\n      },\n      business: {\n        intro_text: \"Transformez votre entreprise avec AIPPS, la plateforme d'IA conversationnelle qui booste les ventes, améliore le service client et optimise l'expérience commerciale.\",\n        specific_benefits: \"Avantages Spécifiques pour les Entreprises\",\n        lead_generation: \"Génération de Leads Avancée\",\n        lead_gen1: \"Qualification automatique des prospects en temps réel\",\n        lead_gen2: \"Formulaires intelligents qui s'adaptent au comportement\",\n        lead_gen3: \"Suivi automatisé du cycle de vente\",\n        customer_support: \"Support Client 24/7\",\n        support1: \"Réponses instantanées aux questions fréquentes\",\n        support2: \"Escalade intelligente vers agents humains quand nécessaire\",\n        support3: \"Résolution proactive des problèmes courants\",\n        catalog_presentation: \"Présentation Intelligente du Catalogue\",\n        catalog1: \"Recommandations personnalisées de produits\",\n        catalog2: \"Comparaison automatique entre options\",\n        catalog3: \"Information détaillée et mise à jour en temps réel\",\n        sales_optimization: \"Optimisation des Ventes\",\n        sales_opt1: \"Identification d'opportunités de vente croisée\",\n        sales_opt2: \"Analyse prédictive du comportement d'achat\",\n        sales_opt3: \"Automatisation du processus de devis\",\n        behavior_analysis: \"Analyse du Comportement Client\",\n        behavior1: \"Suivi en temps réel des interactions\",\n        behavior2: \"Identification des patterns d'abandon\",\n        behavior3: \"Optimisation de l'entonnoir de conversion\",\n        behavior4: \"Personnalisation dynamique de l'expérience\",\n        testimonials: \"Témoignages\",\n        testimonial_text: \"Avec AIPPS nous avons augmenté nos conversions de 250% et réduit les temps de réponse clients d'heures à secondes.\",\n        testimonial_author: \"Pierre Martin, CEO de TechCommerce\",\n        implement_button: \"Implémenter pour les Entreprises\"\n      },\n      professional: {\n        intro_text: \"AIPPS révolutionne les services professionnels avec des solutions d'IA conversationnelle conçues spécifiquement pour les consultants, avocats, médecins, comptables et professionnels de services.\",\n        specific_benefits: \"Avantages Spécifiques pour les Professionnels\",\n        client_qualification: \"Qualification Intelligente des Clients\",\n        qualification1: \"Évaluation automatique des besoins et du budget du client\",\n        qualification2: \"Segmentation intelligente par type de service et urgence\",\n        qualification3: \"Pré-qualification avant la consultation humaine\",\n        appointment_scheduling: \"Programmation Automatisée de Rendez-vous\",\n        scheduling1: \"Intégration du calendrier en temps réel et disponibilité\",\n        scheduling2: \"Confirmation automatique et envoi de rappels\",\n        scheduling3: \"Gestion des reprogrammations et annulations\",\n        client_education: \"Éducation et Préparation du Client\",\n        education1: \"Information sur les services et processus avant consultation\",\n        education2: \"Collecte et préparation des documents requis\",\n        education3: \"Établissement clair des attentes sur les délais et coûts\",\n        expectation_management: \"Gestion des Attentes Professionnelles\",\n        expectation1: \"Communication transparente sur la portée du service\",\n        expectation2: \"Estimation réaliste des délais et coûts\",\n        expectation3: \"Mises à jour proactives de statut tout au long du processus\",\n        content_marketing: \"Marketing de Contenu Professionnel\",\n        marketing1: \"Partage d'articles et ressources pertinents\",\n        marketing2: \"Contenu éducatif sur les changements légaux ou professionnels\",\n        marketing3: \"Études de cas et histoires de succès\",\n        marketing4: \"Analyse des tendances de l'industrie et recommandations\",\n        marketing5: \"Contenu personnalisé basé sur le profil du client\",\n        testimonials: \"Témoignages\",\n        testimonial_text: \"Avec AIPPS nous avons amélioré notre qualification client de 180% et réduit le temps de consultation initial tout en augmentant la satisfaction client.\",\n        testimonial_author: \"Dr. Sophie Dubois, Cabinet de Conseil Juridique\",\n        implement_button: \"Implémenter pour les Professionnels\"\n      },\n      // Analytics translations\n      products_services_most_demanded: \"Produits/Services les Plus Demandés\",\n      products_analysis_description: \"Analyse des produits et services mentionnés dans les conversations client.\",\n      what_does_it_mean: \"Que signifie cela ?\",\n      products_bars_explanation: \"Les barres représentent la fréquence à laquelle chaque produit ou service est mentionné dans les conversations.\",\n      keywords: \"Mots-clés\",\n      keywords_description: \"Mots-clés les plus fréquents extraits des conversations client.\",\n      keywords_explanation: \"Plus un mot-clé est grand, plus il apparaît fréquemment dans vos conversations.\",\n      queries: \"requêtes\",\n      of_total: \"du total\",\n      conversation_trend: \"Tendance des Conversations\",\n      conversation_trend_description: \"Évolution du volume des conversations au fil du temps.\",\n      avg_messages: \"Messages Moyens\",\n      avg_duration: \"Durée Moyenne\",\n      peak_hours: \"Heures de Pointe\",\n      mobile_desktop: \"Mobile/Desktop\",\n      analytics_description: \"Analytics et insights détaillés de vos conversations client.\",\n      highest_activity: \"Activité la Plus Élevée\",\n      all_integrations: \"Toutes les Intégrations\",\n      time_per_conversation: \"Temps par Conversation\",\n      messages_per_conversation: \"Messages par Conversation\",\n      needs_improvement: \"Nécessite Amélioration\",\n      fast_responses: \"Réponses Rapides\",\n      export_pdf: \"Exporter PDF\",\n      back_to_dashboard: \"Retour au Tableau de Bord\",\n      topics_and_sentiment: \"Sujets et Sentiment\",\n      topics_analysis_description: \"Analyse des sujets et du sentiment des conversations client.\",\n      advanced_analysis: \"Analyse Avancée\",\n      advanced_metrics: \"Métriques Avancées\",\n      // Integration Analytics\n      analytics_for: \"Analytics pour\",\n      view_performance_metrics_for_integration: \"Voir les métriques de performance pour cette intégration\",\n      total_messages: \"{{count}} messages totaux\",\n      no_messages: \"Aucun message\",\n      conversation_trend_chart: \"Tendance des Conversations\",\n      conversation_volume_over_time: \"Volume des conversations au fil du temps\",\n      resolution_status: \"État de Résolution\",\n      resolved_vs_active_conversations: \"Conversations résolues vs actives\",\n      top_products: \"Produits Principaux\",\n      most_mentioned_products: \"Produits les plus mentionnés\",\n      top_topics: \"Sujets Principaux\", \n      most_discussed_topics: \"Sujets les plus discutés\",\n      keyword_cloud: \"Nuage de Mots-Clés\",\n      frequently_mentioned_keywords: \"Mots-clés fréquemment mentionnés\",\n      message_distribution: \"Distribution des Messages\",\n      conversations_over_time: \"Conversations au fil du temps\",\n      user_vs_assistant_messages: \"Messages utilisateur vs assistant\",\n      resolved_conversations_count: \"{{count}} sur {{total}} résolues\",\n      no_conversations_to_resolve: \"Aucune conversation à résoudre\",\n      add_form_to_website: \"Ajouter le Formulaire au Site Web\",\n      embed_form_description: \"Copiez et collez ce code dans votre site web pour intégrer le formulaire\",\n      paste_embed_code_anywhere: \"Collez ce code n'importe où dans votre HTML\",\n      weeks_ago_plural: \"il y a {{count}} semaines\",\n      weeks_ago: \"il y a {{count}} semaine\",\n      months_ago_plural: \"il y a {{count}} mois\",\n      months_ago: \"il y a {{count}} mois\",\n      days_ago_plural: \"il y a {{count}} jours\",\n      days_ago: \"il y a {{count}} jour\",\n      hours_ago_plural: \"il y a {{count}} heures\",\n      hours_ago: \"il y a {{count}} heure\",\n      minutes_ago_plural: \"il y a {{count}} minutes\",\n      minutes_ago: \"il y a {{count}} minute\",\n      time: {\n        months_ago_plural: \"il y a {{count}} mois\",\n        months_ago: \"il y a {{count}} mois\"\n      },\n      getStartedPage: {\n        title: \"Commencer\",\n        subtitle: \"Intégrez AIPPS dans votre site web en quelques minutes\",\n        tabs: {\n          widget: \"Widget\",\n          fullscreen: \"Plein écran\",\n          form: \"Formulaire\"\n        },\n        widget: {\n          step1: {\n            title: \"Étape 1: Ajoutez ce code à votre site web\",\n            description: \"Copiez et collez ce code dans le HTML de votre site web, juste avant la balise de fermeture </body>:\",\n            copied: \"✓ Code copié dans le presse-papiers\",\n            wordpress_note: \"Si vous utilisez WordPress: Vous pouvez l'ajouter dans le thème dans footer.php ou installer un plugin qui permet d'insérer du code HTML.\"\n          },\n          step2: {\n            title: \"Étape 2: Personnalisez votre widget (optionnel)\",\n            description: \"Vous pouvez personnaliser le comportement et l'apparence du widget en ajoutant des paramètres supplémentaires:\",\n            customization_title: \"Options de personnalisation:\",\n            position: \"Position du widget sur la page\",\n            theme_color: \"Couleur principale du widget\",\n            assistant_name: \"Nom de l'assistant\",\n            welcome_message: \"Message de bienvenue personnalisé\",\n            example_title: \"Exemple de configuration personnalisée:\",\n            configure_dashboard: \"Configurez ces options depuis le panneau d'administration:\",\n            dashboard_steps: {\n              \"0\": \"Accédez à la section \\\"Intégrations\\\" du panneau\",\n              \"1\": \"Sélectionnez l'intégration que vous souhaitez configurer\",\n              \"2\": \"Personnalisez les couleurs, position et messages\",\n              \"3\": \"Les changements seront appliqués automatiquement\"\n            }\n          },\n          step3: {\n            title: \"Étape 3: Entraînez votre assistant (optionnel)\",\n            description: \"Pour que votre assistant fournisse des réponses utiles et pertinentes, vous pouvez l'entraîner avec:\",\n            training_options: [\n              \"Documents PDF avec des informations sur vos produits ou services\",\n              \"Fichiers DOCX avec des questions fréquemment posées et leurs réponses\",\n              \"Fichiers Excel avec des données structurées\",\n              \"Instructions spécifiques sur le ton et le style des réponses\"\n            ],\n            step4_title: \"Étape 4: Configurez les Formulaires (Optionnel)\",\n            step4_description: \"Alimentez votre widget avec des formulaires personnalisés pour capturer des leads et des informations spécifiques:\",\n            form_options: [\n              \"Formulaires de contact et capture de leads\",\n              \"Enquêtes de satisfaction et feedback\",\n              \"Formulaires d'inscription à des événements\",\n              \"Intégration automatique avec votre CRM\"\n            ]\n          }\n        },\n        fullscreen: {\n          step1: {\n            title: \"Étape 1: Ajoutez ce code à votre site web\",\n            description: \"Copiez et collez ce code dans le HTML de votre site web, juste avant la balise de fermeture </body>:\",\n            copied: \"✓ Code copié dans le presse-papiers\",\n            wordpress_note: \"Si vous utilisez WordPress: Vous pouvez l'ajouter dans le thème dans footer.php ou installer un plugin qui permet d'insérer du code HTML.\"\n          },\n          step2: {\n            title: \"Étape 2: Personnalisez votre expérience (optionnel)\",\n            description: \"Le mode plein écran crée une expérience immersive similaire à ChatGPT. Vous pouvez le personnaliser avec:\",\n            customization_title: \"Options de personnalisation:\",\n            position: \"Position du bouton d'activation\",\n            theme_color: \"Couleurs et thème du chat\",\n            assistant_name: \"Nom de l'assistant\",\n            welcome_message: \"Message de bienvenue personnalisé\",\n            example_title: \"Exemple de configuration personnalisée:\",\n            configure_dashboard: \"Configurez ces options depuis le panneau d'administration:\",\n            dashboard_steps: {\n              \"0\": \"Accédez à la section \\\"Intégrations\\\" du panneau\",\n              \"1\": \"Sélectionnez l'intégration que vous souhaitez configurer\",\n              \"2\": \"Personnalisez les couleurs, position et messages\",\n              \"3\": \"Les changements seront appliqués automatiquement\"\n            }\n          },\n          step4: {\n            title: \"Étape 4: Configurer l'Authentification (Optionnel)\",\n            description: \"Activez les fonctionnalités avancées avec le système d'utilisateurs:\",\n            feature_1: \"Historique personnel des conversations\",\n            feature_2: \"Personnalisation des préférences\",\n            feature_3: \"Suivi des progrès utilisateur\",\n            feature_4: \"Analyses détaillées par utilisateur\"\n          },\n          step5: {\n            title: \"Étape 5: Configuration Avancée de l'Assistant\",\n            description: \"Optimisez l'expérience de l'assistant:\",\n            feature_1: \"Personnalité et ton des réponses\",\n            feature_2: \"Base de connaissances spécialisée\",\n            feature_3: \"Flux de conversation prédéfinis\",\n            feature_4: \"Intégration d'outils externes\"\n          }\n        },\n        form: {\n          step1: {\n            title: \"Étape 1: Ajoutez ce code à votre site web\",\n            description: \"Copiez et collez ce code dans le HTML de votre site web où vous voulez que le formulaire apparaisse:\",\n            copied: \"✓ Code copié dans le presse-papiers\"\n          },\n          step2: {\n            title: \"Étape 2: Personnalisez votre formulaire (optionnel)\",\n            description: \"Vous pouvez personnaliser le comportement et l'apparence du formulaire en ajoutant des paramètres supplémentaires:\",\n            customization_title: \"Options de personnalisation:\",\n            display_type: \"Type d'affichage (modal, intégré, etc.)\",\n            position: \"Position du bouton ou formulaire\",\n            theme_color: \"Couleur principale du formulaire\",\n            button_text: \"Texte du bouton\",\n            example_title: \"Exemple de configuration personnalisée:\",\n            basic_attributes: \"Attributs de Base:\",\n            attributes: {\n              form_id: \"ID unique du formulaire\",\n              display_type: \"Type d'affichage (modal, inline, popup)\",\n              position: \"Position sur la page\",\n              button_text: \"Texte du bouton d'activation\"\n            },\n            customization_attributes: \"Attributs de Personnalisation:\",\n            icon: \"Icône personnalisée\",\n            button_size: \"Taille du bouton\",\n            auto_show: \"Afficher automatiquement\"\n          },\n          step3: {\n            title: \"Étape 3: Gérez depuis le Tableau de Bord\",\n            description: \"Une fois le formulaire intégré, vous pouvez le gérer complètement depuis votre panneau d'administration:\",\n            dashboard_steps: [\n              \"Accédez à la section \\\"Formulaires\\\" du panneau\",\n              \"Sélectionnez le formulaire que vous souhaitez configurer\",\n              \"Personnalisez les champs, validations et réponses automatiques\",\n              \"Consultez les réponses et statistiques en temps réel\"\n            ]\n          }\n        },\n        fullscreen_features: {\n          title: \"Fonctionnalités du Mode Plein Écran\",\n          register_login: \"Inscription et connexion utilisateur\",\n          personal_history: \"Historique personnel des conversations\",\n          auto_titles: \"Titres automatiques des conversations\",\n          conversation_management: \"Gestion complète des conversations\",\n          user_info: \"Informations utilisateur intégrées\",\n          jwt_security: \"Sécurité JWT intégrée\",\n          visual_customization: \"Personnalisation visuelle avancée\",\n          brand_colors: \"Couleurs de marque personnalisables\",\n          welcome_messages: \"Messages de bienvenue configurables\",\n          registration_config: \"Configuration d'inscription flexible\",\n          privacy_settings: \"Paramètres de confidentialité granulaires\"\n        },\n        ignored_sections: {\n          step3_title: \"Étape 3: Configurer les Sections Ignorées (Optionnel)\",\n          title: \"Sections Ignorées\",\n          description: \"Définissez quelles parties de votre site web l'assistant doit ignorer lors de l'analyse du contenu:\",\n          benefit_1: \"Éviter la confusion avec des éléments non pertinents comme les menus ou la publicité\",\n          benefit_2: \"Améliorer la précision des réponses de l'assistant\",\n          benefit_3: \"Réduire le bruit dans l'entraînement automatique\",\n          benefit_4: \"Concentrer l'analyse sur le contenu pertinent\",\n          config_example: \"aipi('init', {\\n  apiKey: 'VOTRE_CLE_API',\\n  // Autres configurations...\\n  ignoredSections: ['Menu principal', 'Pied de page', 'Barre latérale', 'Publicité'],\\n});\",\n          config_description: \"Configurez depuis le panneau d'administration:\",\n          step_1: \"Accédez à \\\"Paramètres\\\" → \\\"Analyse de Contenu\\\"\",\n          step_2: \"Ajoutez des sélecteurs CSS ou noms de sections à ignorer\",\n          step_3: \"Sauvegardez les modifications pour les appliquer immédiatement\",\n          step_4: \"L'assistant mettra à jour sa compréhension automatiquement\"\n        },\n        support: {\n          title: \"Support et Ressources\",\n          description: \"Obtenez de l'aide et des ressources pour maximiser votre expérience AIPPS\"\n        },\n        buttons: {\n          go_to_integrations: \"Aller aux intégrations\",\n          login_to_manage: \"Se connecter pour gérer\",\n          manage_content: \"Gérer le contenu\",\n          create_account: \"Créer un compte\",\n          create_forms: \"Créer des formulaires\",\n          create_account_forms: \"Créer un compte pour les formulaires\",\n          configure_auth: \"Configurer l'authentification\",\n          login: \"Se connecter\",\n          configure_sections: \"Configurer les sections\",\n          configure_assistant: \"Configurer l'assistant\",\n          configure_advanced_forms: \"Configurer les formulaires avancés\",\n          create_account_advanced: \"Créer un compte avancé\",\n          go_to_forms: \"Aller aux formulaires\",\n          login_to_manage_forms: \"Se connecter pour gérer les formulaires\",\n          forms_guide: \"Guide des formulaires\",\n          view_docs: \"Voir la documentation\",\n          contact_support: \"Contacter le support\"\n        },\n        cta: {\n          forms_title: \"Prêt à créer vos formulaires ?\",\n          forms_description: \"Commencez à capturer des leads avec nos formulaires personnalisés dès aujourd'hui.\"\n        }\n      }\n    }\n  },\n  es: {\n    translation: {\n      menu: \"Menú\",\n      common: {\n        error: \"Error\",\n        yes: \"Sí\",\n        no: \"No\", \n        cancel: \"Cancelar\",\n        spanish: \"Español\",\n        english: \"Inglés\",\n        french: \"Francés\"\n      },\n      language: {\n        select: \"Seleccionar idioma\",\n        fr: \"Francés\",\n        es: \"Español\",\n        en: \"Inglés\"\n      },\n      refresh: \"Actualizar\",\n      edit: \"Editar\",\n      conversations: \"Conversaciones\",\n      analytics: \"Análisis\",\n      delete: \"Eliminar\",\n      visitors_helped: \"Visitantes ayudados\",\n      installed: \"Instalado\",\n      confirm_delete_title: \"¿Estás seguro?\",\n      confirm_delete_description: \"Esta acción eliminará permanentemente la integración \\\"{{name}}\\\" y no se puede deshacer. El widget dejará de funcionar en tu sitio web.\",\n      welcome: \"Bienvenido a AIPI\",\n      task_automation: \"Automatización de tareas\",\n      task_automation_description: \"Configura tareas y flujos de trabajo automatizados impulsados por IA.\",\n      create_automation: \"Crear Automatización\",\n      conversations_for: \"Conversaciones de\",\n      view_all_conversations_for_integration: \"Ver todas las conversaciones para esta integración\",\n      search_conversations: \"Buscar conversaciones...\",\n      edit_integration: \"Editar integración\",\n      view_conversations: \"Ver conversaciones\",\n      view_analytics: \"Ver analíticas\",\n      resolved: \"Resuelto\",\n      unresolved: \"Sin resolver\",\n      messages: \"mensajes\",\n      loading: \"Cargando...\",\n      back: \"Volver\",\n      no_conversations_found: \"No se encontraron conversaciones\",\n      details: \"Detalles\",\n      settings: \"Configuración\",\n      settings_description: \"Configura los ajustes de tu asistente AIPPS.\",\n      ai_assistant_settings: \"Configuración del Asistente IA\",\n      assistant_name: \"Nombre del Asistente\",\n      default_greeting: \"Saludo Predeterminado\",\n      conversation_style: \"Estilo de Conversación\",\n      show_availability: \"Mostrar Disponibilidad\",\n      appearance: \"Apariencia\",\n      chat_font: \"Fuente del Chat\",\n      user_message_color: \"Color del Mensaje del Usuario\",\n      assistant_message_color: \"Color del Mensaje del Asistente\",\n      welcome_chat: \"Chat de Bienvenida\",\n      status: \"Estado\",\n      welcome_message: \"Mensaje de Bienvenida\",\n      bubble_color: \"Color de Burbuja\",\n      text_color: \"Color de Texto\",\n      enabled: \"Activado\",\n      disabled: \"Desactivado\",\n      system_default: \"Predeterminado del Sistema\",\n      professional_label: \"Profesional\",\n      edit_settings: \"Editar Configuración\",\n      no_settings_found: \"No se encontraron configuraciones\",\n      no_settings_description: \"Crea la configuración de tu asistente para personalizar tu experiencia AIPPS\",\n      configure_settings: \"Configurar Configuración\",\n      integrations: \"Integraciones\",\n      integrations_description: \"Crea y gestiona integraciones de sitios web para AIPPS.\",\n      create_integration: \"Crear Integración\",\n      no_integrations: \"Sin integraciones aún\",\n      add_new_integration_desc: \"Agrega una nueva integración de sitio web para conectar AIPPS con tu sitio\",\n      forms: \"Formularios\",\n      forms_description: \"Crea y gestiona formularios para capturar leads y datos de visitantes.\",\n      create_form: \"Crear formulario\",\n      conversations_description: \"Revisa y gestiona las conversaciones con tus visitantes.\",\n      new: \"Nuevo\",\n      no_conversations_matching_search: \"No se encontraron conversaciones que coincidan con tu búsqueda\",\n      no_conversations_for_integration: \"No hay conversaciones para esta integración aún\",\n      recent_conversations: \"Conversaciones Recientes\",\n      total_conversations: \"Total de Conversaciones\",\n      resolution_rate: \"Tasa de Resolución\",\n      average_response_time: \"Tiempo Promedio de Respuesta\",\n      minutes: \"minutos\",\n      yes: \"Sí\",\n      no: \"No\",\n      no_conversations: \"Aún no hay conversaciones\",\n      conversations_empty_message: \"Cuando los visitantes interactúen con tu widget de chat, las conversaciones aparecerán aquí\",\n      success: \"Éxito\",\n      error: \"Error\",\n      form_deleted_successfully: \"Formulario eliminado exitosamente\",\n      error_deleting_form: \"Error al eliminar formulario\",\n      no_description: \"Sin descripción\",\n      responses: \"respuestas\",\n      no_forms: \"Aún no hay formularios\",\n      forms_empty_message: \"Crea tu primer formulario para comenzar a capturar datos de visitantes\",\n      dashboard_title: \"Panel de Control\",\n      manage_assistant: \"Gestiona tu asistente de IA y configura integraciones\",\n      avg_response_time: \"Tiempo Promedio de Respuesta\",\n      confirm_delete: \"Confirmar Eliminación\",\n      delete_form_confirmation: \"¿Estás seguro de que quieres eliminar este formulario? Esta acción no se puede deshacer y también eliminará todas las respuestas.\",\n      cancel: \"Cancelar\",\n      deleting: \"Eliminando...\",\n      no_automations: \"Aún no hay automatizaciones\",\n      automations_empty_message: \"Crea tu primera automatización para agilizar tareas repetitivas con IA\",\n      view_logs: \"Ver Registros\",\n      active: \"Activo\",\n      inactive: \"Inactivo\", \n      testing: \"Probando\",\n      anonymous: \"Anónimo\", \n      completed: \"Completado\",\n      view: \"Ver\",\n      last_message: \"Último mensaje\",\n      getStarted: \"Comenzar\",\n      learnMore: \"Saber más\",\n      features: {\n        title: \"Características Principales\",\n        subtitle: \"Descubre las características que hacen de AIPI la mejor opción para tu sitio web\",\n        conversationalAI: {\n          title: \"IA Conversacional\",\n          description: \"Interacciones inteligentes y naturales con tus visitantes\"\n        },\n        taskAutomation: {\n          title: \"Automatización de Tareas\",\n          description: \"Automatiza respuestas y procesos para mejorar la eficiencia\"\n        },\n        easyIntegration: {\n          title: \"Integración Fácil\",\n          description: \"Implementa en minutos con una simple línea de código\"\n        },\n        analytics: {\n          title: \"Análisis Avanzado\",\n          description: \"Obtén insights valiosos sobre las interacciones de tus usuarios\"\n        }\n      },\n      cta: {\n        title: \"¿Listo para transformar tu sitio web?\",\n        subtitle: \"Únete a miles de empresas que ya están usando AIPI para mejorar la experiencia de sus usuarios\",\n        getStartedFree: \"Comenzar Gratis\",\n        scheduleDemo: \"Agendar Demo\"\n      },\n      footer: {\n        company_description: \"AIPI - Plataforma avanzada de IA conversacional para sitios web.\",\n        product: \"Producto\",\n        company: \"Empresa\",\n        about_us: \"Sobre nosotros\",\n        contact: \"Contacto\",\n        privacy_policy: \"Política de privacidad\",\n        terms_of_service: \"Términos de servicio\",\n        support: \"Soporte\",\n        help_center: \"Centro de ayuda\",\n        all_rights_reserved: \"Todos los derechos reservados.\"\n      },\n      pricing: {\n        plans: \"Planes\",\n        title: \"Elige tu Plan Perfecto\",\n        subtitle: \"Selecciona el plan que mejor se adapte a tus necesidades y escala tu negocio con IA conversacional.\",\n        monthly_billing: \"Facturación Mensual\",\n        annual_billing: \"Facturación Anual\",\n        toggle_billing: \"Alternar tipo de facturación\",\n        save_percentage: \"Ahorra 20%\",\n        recommended: \"Recomendado\",\n        free: \"Gratis\",\n        from: \"Desde\",\n        month: \"mes\",\n        year: \"año\",\n        contact_us: \"Habla con Nosotros\",\n        take_offer: \"Aprovechar Oferta\",\n        take_annual_offer: \"Aprovechar Oferta Anual\",\n        start_free: \"Comenzar Gratis\",\n        subscribe: \"Suscribirse\",\n        processing: \"Procesando...\",\n        spots_remaining: \"Solo quedan {{remaining}} lugares de {{total}}\",\n        discount_duration: \"{{discount}}% de descuento por {{months}} meses\",\n        promotional_price_duration: \"Precio promocional por {{months}} meses\",\n        limited_launch_offer: \"Oferta de Lanzamiento Limitada\",\n        spots_left_of_total: \"Solo quedan {{remaining}} lugares de {{total}} en esta promoción especial.\",\n        take_advantage_unique_prices: \"Aprovecha estos precios únicos antes de que vuelvan a los precios regulares.\",\n        pricing_note: \"Todos los planes incluyen soporte completo y actualizaciones gratuitas.\",\n        login_required: \"Inicio de sesión requerido\",\n        login_description: \"Necesitas iniciar sesión para suscribirte a un plan\",\n        success: \"¡Éxito!\",\n        error: \"Error\",\n        free_plan_activated: \"Plan gratuito activado correctamente\",\n        process_error: \"Error al procesar la solicitud\",\n        faq: {\n          title: \"Preguntas Frecuentes\",\n          q1: \"¿Puedo cambiar de plan en cualquier momento?\",\n          a1: \"Sí, puedes actualizar o reducir tu plan en cualquier momento desde tu panel de control.\"\n        },\n        support: {\n          title: \"Soporte\",\n          q1: \"¿Qué tipo de soporte está incluido?\",\n          a1: \"Todos los planes incluyen soporte por email. Los planes Pro y Enterprise incluyen soporte prioritario.\"\n        },\n        refund: {\n          title: \"Política de Reembolso\",\n          q1: \"¿Ofrecen garantía de devolución de dinero?\",\n          a1: \"Ofrecemos una garantía de devolución de dinero de 30 días para todos los planes de pago.\"\n        }\n      },\n      help: {\n        title: \"Centro de Ayuda\",\n        subtitle: \"Encuentra respuestas a tus preguntas y aprende a usar AIPPS\",\n        search_placeholder: \"Buscar artículos de ayuda...\",\n        popular: {\n          title: \"Artículos Populares\",\n          badge: \"Popular\",\n          article1: \"Cómo integrar el widget en tu sitio web\",\n          article2: \"Personalizar el asistente conversacional\",\n          article3: \"Configurar formularios de captura de leads\",\n          article4: \"Analizar métricas y conversaciones\",\n          article5: \"Entrenar tu asistente con documentos\"\n        },\n        categories: {\n          title: \"Categorías de Ayuda\",\n          getting_started: {\n            title: \"Primeros Pasos\",\n            description: \"Todo lo que necesitas para comenzar con AIPPS\",\n            article1: \"Crear tu primera cuenta en AIPPS\",\n            article2: \"Configuración inicial del panel de control\",\n            article3: \"Guía de inicio rápido para widgets\",\n            article4: \"Conceptos básicos de IA conversacional\"\n          },\n          configuration: {\n            title: \"Configuración\",\n            description: \"Personaliza AIPPS según tus necesidades\",\n            article1: \"Personalizar colores y tema del widget\",\n            article2: \"Configurar mensajes de bienvenida\",\n            article3: \"Establecer horarios de disponibilidad\",\n            article4: \"Gestión de idiomas y traducciones\"\n          },\n          integration: {\n            title: \"Integración\",\n            description: \"Conecta AIPPS con tu sitio web y herramientas\",\n            article1: \"Integrar widget en WordPress\",\n            article2: \"Implementación en Shopify\",\n            article3: \"Código de integración personalizado\",\n            article4: \"Integración con CRM y herramientas\"\n          },\n          billing: {\n            title: \"Facturación\",\n            description: \"Gestiona tu suscripción y pagos\",\n            article1: \"Cambiar de plan de suscripción\",\n            article2: \"Información de facturación y pagos\",\n            article3: \"Política de reembolsos\",\n            article4: \"Preguntas frecuentes sobre precios\"\n          },\n          troubleshooting: {\n            title: \"Solución de Problemas\",\n            description: \"Resuelve problemas técnicos comunes\",\n            article1: \"El widget no aparece en mi sitio\",\n            article2: \"Problemas de conexión del chat\",\n            article3: \"El asistente no responde correctamente\",\n            article4: \"Problemas con formularios\"\n          },\n          account: {\n            title: \"Cuenta\",\n            description: \"Gestiona tu perfil y configuración de cuenta\",\n            article1: \"Cambiar contraseña y datos de perfil\",\n            article2: \"Configuración de notificaciones\",\n            article3: \"Gestionar usuarios y permisos\",\n            article4: \"Eliminar o cerrar cuenta\"\n          }\n        },\n        contact_support: {\n          title: \"¿Necesitas más ayuda?\",\n          description: \"Si no encuentras lo que buscas, nuestro equipo está aquí para ayudarte\",\n          contact_button: \"Contactar Soporte\",\n          email_button: \"Enviar Email\"\n        }\n      },\n      about: {\n        title: \"Acerca de AIPPS\",\n        subtitle: \"Conoce nuestra misión de transformar la comunicación web con inteligencia artificial\",\n        mission: {\n          title: \"Nuestra Misión\",\n          description: \"Democratizar el acceso a la IA conversacional para todos los sitios web del mundo\"\n        },\n        vision: {\n          title: \"Nuestra Visión\",\n          description: \"Crear un futuro donde cada interacción web sea inteligente y personalizada\"\n        },\n        global: {\n          title: \"Alcance Global\",\n          description: \"Servimos a empresas de todos los tamaños en más de 50 países\"\n        },\n        innovation: {\n          title: \"Innovación\",\n          description: \"Pioneros en tecnología de IA conversacional con más de 5 años de experiencia\"\n        }\n      },\n      contact: {\n        title: \"Contáctanos\",\n        subtitle: \"Estamos aquí para ayudarte. Ponte en contacto con nuestro equipo\",\n        info: {\n          title: \"Información de Contacto\",\n          email: \"support@aipps.ca\",\n          phone: \"+1 (555) 123-4567\",\n          address: \"123 Innovation Street, Tech City, TC 12345\",\n          hours: \"Lunes a Viernes: 9:00 AM - 6:00 PM (EST)\"\n        },\n        form: {\n          title: \"Envíanos un Mensaje\",\n          name_label: \"Nombre\",\n          name_placeholder: \"Tu nombre\",\n          email_label: \"Email\",\n          email_placeholder: \"tu@email.com\",\n          subject_label: \"Asunto\",\n          subject_placeholder: \"¿En qué podemos ayudarte?\",\n          message_label: \"Mensaje\",\n          message_placeholder: \"Describe tu consulta...\",\n          send_button: \"Enviar Mensaje\",\n          sending_button: \"Enviando...\",\n          success_title: \"Mensaje Enviado\",\n          success_message: \"Gracias por contactarnos. Te responderemos pronto.\"\n        }\n      },\n      privacy: {\n        title: \"Política de Privacidad\",\n        subtitle: \"Cómo recopilamos, usamos y protegemos tu información\",\n        data_collection: {\n          title: \"Recopilación de Datos\",\n          description: \"Recopilamos información para brindar y mejorar nuestros servicios:\",\n          item1: \"Información de cuenta (nombre, email, datos de contacto)\",\n          item2: \"Datos de uso y análisis del widget\",\n          item3: \"Información técnica (IP, navegador, dispositivo)\",\n          item4: \"Contenido de conversaciones para entrenamiento de IA\"\n        },\n        data_usage: {\n          title: \"Uso de Datos\",\n          description: \"Utilizamos tus datos para los siguientes propósitos:\",\n          item1: \"Proporcionar y mantener nuestros servicios\",\n          item2: \"Mejorar la experiencia del usuario\",\n          item3: \"Análisis y estadísticas de rendimiento\",\n          item4: \"Comunicaciones de soporte y actualizaciones\"\n        },\n        data_sharing: {\n          title: \"Compartir Datos\",\n          description: \"No vendemos ni alquilamos tu información personal. Solo la compartimos en estos casos:\",\n          item1: \"Con proveedores de servicios necesarios para el funcionamiento\",\n          item2: \"Cuando sea requerido por ley\",\n          item3: \"Con tu consentimiento explícito\"\n        },\n        security: {\n          title: \"Seguridad\",\n          description: \"Implementamos medidas de seguridad para proteger tu información\",\n          item1: \"Cifrado de datos en tránsito y reposo\",\n          item2: \"Autenticación de dos factores disponible\",\n          item3: \"Auditorías de seguridad regulares\",\n          item4: \"Cumplimiento con estándares internacionales de seguridad\"\n        },\n        user_rights: {\n          title: \"Tus Derechos\",\n          description: \"Tienes derecho a acceder, corregir o eliminar tu información personal\",\n          item1: \"Acceder a tus datos personales almacenados\",\n          item2: \"Solicitar corrección de información incorrecta\",\n          item3: \"Eliminar tu cuenta y datos asociados\",\n          item4: \"Exportar tus datos en formato portable\"\n        },\n        contact: {\n          title: \"Contacto\",\n          description: \"Para preguntas sobre privacidad, contáctanos en privacy@aipps.ca\"\n        }\n      },\n      terms: {\n        title: \"Términos de Servicio\",\n        subtitle: \"Términos y condiciones de uso de AIPPS\",\n        acceptance: {\n          title: \"Aceptación de Términos\",\n          description: \"Al usar AIPPS, aceptas estos términos y condiciones\"\n        },\n        services: {\n          title: \"Descripción del Servicio\",\n          description: \"AIPPS proporciona herramientas de IA conversacional para sitios web:\",\n          item1: \"Widgets de chat inteligentes\",\n          item2: \"Formularios de captura de leads\",\n          item3: \"Análisis y métricas\",\n          item4: \"Integración con sitios web\"\n        },\n        user_obligations: {\n          title: \"Obligaciones del Usuario\",\n          description: \"Como usuario, te comprometes a:\",\n          item1: \"Usar el servicio de manera legal y ética\",\n          item2: \"No interferir con el funcionamiento del sistema\",\n          item3: \"Mantener la seguridad de tu cuenta\",\n          item4: \"Respetar los derechos de propiedad intelectual\"\n        },\n        payment: {\n          title: \"Términos de Pago\",\n          description: \"Los términos de pago incluyen:\",\n          item1: \"Facturación mensual o anual según el plan elegido\",\n          item2: \"Los pagos son no reembolsables salvo excepciones\",\n          item3: \"Los precios pueden cambiar con aviso previo\",\n          item4: \"La suspensión por falta de pago es inmediata\"\n        },\n        intellectual_property: {\n          title: \"Propiedad Intelectual\",\n          description: \"Todos los derechos de propiedad intelectual de AIPPS nos pertenecen:\",\n          item1: \"Software y tecnología de AIPPS\",\n          item2: \"Marcas comerciales y logotipos\",\n          item3: \"Contenido y documentación\"\n        },\n        limitation: {\n          title: \"Limitación de Responsabilidad\",\n          description: \"AIPPS no se hace responsable por daños indirectos o pérdidas de datos\"\n        },\n        termination: {\n          title: \"Terminación\",\n          description: \"Cualquier parte puede terminar el acuerdo:\",\n          item1: \"El usuario puede cancelar en cualquier momento\",\n          item2: \"AIPPS puede suspender cuentas por violación de términos\",\n          item3: \"Los datos se eliminarán según la política de retención\"\n        }\n      },\n      documentation: {\n        title: \"Documentación AIPPS\",\n        subtitle: \"Guía completa para implementar y usar AIPPS en tu sitio web\",\n\n        implementation: \"Implementación\",\n        api_reference: \"Referencia API\",\n        support: \"Soporte\",\n        widget_integration: \"Integración de Widget\",\n        contextual_understanding: \"Comprensión Contextual\",\n        document_training: \"Entrenamiento con Documentos\",\n        lead_capture: \"Captura de Leads\",\n        analytics: \"Análisis\",\n        task_automation: \"Automatización de Tareas\",\n        form_creation: \"Creación de Formularios\",\n        overview_content: \"AIPPS es una plataforma avanzada de IA conversacional que permite a los sitios web ofrecer experiencias de chat inteligentes y personalizadas.\",\n        generated_on: \"Generado el\",\n        language: \"Idioma\",\n        table_of_contents: \"Índice de Contenidos\",\n        download_pdf: \"Descargar PDF\",\n        forms: \"Formularios\",\n        education: \"Educación\",\n        business: \"Negocios\",\n        professional_label: \"Profesional\",\n        page: \"Página\",\n        of: \"de\",\n        features_content: \"AIPPS ofrece una amplia gama de funcionalidades diseñadas para mejorar la experiencia del usuario y aumentar las conversiones en tu sitio web.\",\n        widget_integration_content: \"Integra fácilmente widgets de chat en tu sitio web con una simple línea de código. Compatible con WordPress, Shopify, React y más.\",\n        contextual_understanding_content: \"Nuestro asistente de IA comprende el contexto de las conversaciones y proporciona respuestas relevantes y útiles.\",\n        document_training_content: \"Entrena tu asistente con documentos PDF, DOCX y otros formatos para que pueda responder preguntas específicas sobre tu negocio.\",\n        lead_capture_content: \"Captura leads de manera inteligente con formularios adaptativos que se ajustan al comportamiento del usuario.\",\n        analytics_content: \"Obtén insights detallados sobre las interacciones de los usuarios, patrones de comportamiento y métricas de conversión.\",\n        task_automation_content: \"Automatiza tareas repetitivas como responder preguntas frecuentes, programar citas y enviar información de productos.\",\n        form_creation_content: \"Crea formularios dinámicos e inteligentes que se adaptan a las necesidades específicas de cada visitante.\",\n        implementation_content: \"Guía completa paso a paso para implementar AIPPS en tu sitio web, desde la instalación hasta la configuración avanzada.\",\n        api_reference_content: \"Documentación completa de la API de AIPPS para integraciones personalizadas y funcionalidades avanzadas.\",\n        support_content: \"Accede a nuestro centro de soporte 24/7 con documentación, tutoriales y asistencia técnica especializada.\",\n        overview: {\n          title: \"Introducción a AIPPS\",\n          introduction: \"AIPPS es una plataforma revolucionaria de IA conversacional diseñada para transformar la manera en que los sitios web interactúan con sus visitantes. Ofrecemos soluciones inteligentes y personalizadas que mejoran la experiencia del usuario y aumentan las conversiones.\",\n          problem_title: \"El Problema que Resolvemos\",\n          problem_description: \"Muchos sitios web luchan por mantener a sus visitantes comprometidos y convertir el tráfico en leads de calidad. Los métodos tradicionales de comunicación web a menudo son estáticos e impersonales, lo que resulta en altas tasas de rebote y oportunidades perdidas.\",\n          solution_intro: \"AIPPS proporciona una solución completa con las siguientes características clave:\",\n          solution_point_1: \"Widgets de chat inteligentes que entienden el contexto y proporcionan respuestas relevantes\",\n          solution_point_2: \"Formularios dinámicos que se adaptan al comportamiento del usuario\",\n          solution_point_3: \"Análisis avanzados para optimizar la experiencia del usuario\",\n          solution_point_4: \"Integración perfecta con cualquier sitio web en minutos\",\n          card1_title: \"IA Conversacional Avanzada\",\n          card1_text: \"Nuestro asistente virtual utiliza tecnología de punta para comprender las consultas de los usuarios y proporcionar respuestas precisas y útiles en tiempo real.\",\n          card2_title: \"Captura de Leads Inteligente\",\n          card2_text: \"Convierte más visitantes en leads con formularios adaptativos y flujos de conversación diseñados para maximizar las conversiones.\",\n          card3_title: \"Integración Sin Esfuerzo\",\n          card3_text: \"Implementa AIPPS en tu sitio web con una simple línea de código. Compatible con todas las plataformas web principales.\",\n          card4_title: \"Análisis Detallados\",\n          card4_text: \"Obtén insights valiosos sobre el comportamiento de tus visitantes y optimiza continuamente la experiencia del usuario.\",\n          start_button: \"Comenzar Ahora\"\n        },\n        features: {\n          title: \"Características Principales\"\n        }\n      },\n      education: {\n        intro_text: \"AIPPS está revolucionando el sector educativo con soluciones de IA conversacional diseñadas específicamente para instituciones académicas, universidades y centros de formación.\",\n        specific_benefits: \"Beneficios Específicos para Educación\",\n        admission_process: \"Proceso de Admisión Automatizado\",\n        admission_benefit1: \"Respuestas instantáneas a consultas sobre programas académicos\",\n        admission_benefit2: \"Guía personalizada durante el proceso de inscripción\",\n        admission_benefit3: \"Seguimiento automático de candidatos potenciales\",\n        program_presentation: \"Presentación Interactiva de Programas\",\n        program_detail1: \"Información detallada sobre carreras y especializaciones\",\n        program_detail2: \"Comparación automática entre diferentes programas\",\n        program_detail3: \"Recomendaciones basadas en intereses del estudiante\",\n        lead_capture: \"Captura de Estudiantes Potenciales\",\n        lead_capture1: \"Formularios adaptativos para solicitudes de información\",\n        lead_capture2: \"Segmentación automática por área de interés\",\n        lead_capture3: \"Seguimiento del embudo de conversión académico\",\n        international_support: \"Soporte Internacional\",\n        international1: \"Asistencia multiidioma para estudiantes extranjeros\",\n        international2: \"Información sobre visas y procedimientos migratorios\",\n        international3: \"Orientación cultural y académica personalizada\",\n        trend_analysis: \"Análisis de Tendencias Educativas\",\n        trend1: \"Identificación de programas más demandados\",\n        trend2: \"Análisis del comportamiento de candidatos\",\n        trend3: \"Optimización de estrategias de captación\",\n        trend4: \"Predicción de tendencias de matrícula\",\n        testimonials: \"Testimonios\",\n        testimonial_text: \"AIPPS ha transformado nuestra captación de estudiantes. Hemos aumentado las consultas en un 300% y mejorado significativamente la experiencia del candidato.\",\n        testimonial_author: \"Dr. María González, Universidad Tecnológica\",\n        implement_button: \"Implementar para Educación\"\n      },\n      business: {\n        intro_text: \"Transforma tu negocio con AIPPS, la plataforma de IA conversacional que impulsa las ventas, mejora el servicio al cliente y optimiza la experiencia comercial.\",\n        specific_benefits: \"Beneficios Específicos para Negocios\",\n        lead_generation: \"Generación de Leads Avanzada\",\n        lead_gen1: \"Calificación automática de prospectos en tiempo real\",\n        lead_gen2: \"Formularios inteligentes que se adaptan al comportamiento\",\n        lead_gen3: \"Seguimiento automatizado del ciclo de ventas\",\n        customer_support: \"Soporte al Cliente 24/7\",\n        support1: \"Respuestas instantáneas a preguntas frecuentes\",\n        support2: \"Escalación inteligente a agentes humanos cuando es necesario\",\n        support3: \"Resolución proactiva de problemas comunes\",\n        catalog_presentation: \"Presentación Inteligente de Catálogo\",\n        catalog1: \"Recomendaciones personalizadas de productos\",\n        catalog2: \"Comparación automática entre opciones\",\n        catalog3: \"Información detallada y actualizada en tiempo real\",\n        sales_optimization: \"Optimización de Ventas\",\n        sales_opt1: \"Identificación de oportunidades de venta cruzada\",\n        sales_opt2: \"Análisis predictivo del comportamiento de compra\",\n        sales_opt3: \"Automatización del proceso de cotización\",\n        behavior_analysis: \"Análisis de Comportamiento del Cliente\",\n        behavior1: \"Tracking en tiempo real de interacciones\",\n        behavior2: \"Identificación de patrones de abandono\",\n        behavior3: \"Optimización del embudo de conversión\",\n        behavior4: \"Personalización dinámica de la experiencia\",\n        testimonials: \"Testimonios\",\n        testimonial_text: \"Con AIPPS hemos aumentado nuestras conversiones en un 250% y reducido los tiempos de respuesta a clientes de horas a segundos.\",\n        testimonial_author: \"Carlos Ruiz, CEO de TechCommerce\",\n        implement_button: \"Implementar para Negocios\"\n      },\n      professional: {\n        intro_text: \"AIPPS revoluciona los servicios profesionales con soluciones de IA conversacional diseñadas específicamente para consultores, abogados, médicos, contadores y profesionales de servicios.\",\n        specific_benefits: \"Beneficios Específicos para Profesionales\",\n        client_qualification: \"Calificación Inteligente de Clientes\",\n        qualification1: \"Evaluación automática de necesidades y presupuesto del cliente\",\n        qualification2: \"Segmentación inteligente por tipo de servicio y urgencia\",\n        qualification3: \"Pre-calificación antes de la consulta humana\",\n        appointment_scheduling: \"Programación Automatizada de Citas\",\n        scheduling1: \"Integración en tiempo real del calendario y disponibilidad\",\n        scheduling2: \"Confirmación automática y envío de recordatorios\",\n        scheduling3: \"Gestión de reprogramación y cancelaciones\",\n        client_education: \"Educación y Preparación del Cliente\",\n        education1: \"Información sobre servicios y procesos antes de la consulta\",\n        education2: \"Recopilación y preparación de documentos requeridos\",\n        education3: \"Establecimiento claro de expectativas sobre tiempos y costos\",\n        expectation_management: \"Gestión de Expectativas Profesionales\",\n        expectation1: \"Comunicación transparente sobre el alcance del servicio\",\n        expectation2: \"Estimación realista de tiempos y costos\",\n        expectation3: \"Actualizaciones proactivas de estado durante todo el proceso\",\n        content_marketing: \"Marketing de Contenido Profesional\",\n        marketing1: \"Compartir artículos y recursos relevantes\",\n        marketing2: \"Contenido educativo sobre cambios legales o profesionales\",\n        marketing3: \"Casos de estudio y historias de éxito\",\n        marketing4: \"Análisis de tendencias de la industria y recomendaciones\",\n        marketing5: \"Contenido personalizado basado en el perfil del cliente\",\n        testimonials: \"Testimonios\",\n        testimonial_text: \"Con AIPPS hemos mejorado nuestra calificación de clientes en un 180% y reducido el tiempo de consulta inicial mientras aumentamos la satisfacción del cliente.\",\n        testimonial_author: \"Dra. María Fernández, Firma de Consultoría Legal\",\n        implement_button: \"Implementar para Profesionales\"\n      },\n      // Analytics translations\n      products_services_most_demanded: \"Productos/Servicios Más Demandados\",\n      products_analysis_description: \"Análisis de productos y servicios mencionados en las conversaciones de clientes.\",\n      what_does_it_mean: \"¿Qué significa esto?\",\n      products_bars_explanation: \"Las barras representan la frecuencia con la que se menciona cada producto o servicio en las conversaciones.\",\n      keywords: \"Palabras Clave\",\n      keywords_description: \"Palabras clave más frecuentes extraídas de las conversaciones de clientes.\",\n      keywords_explanation: \"Mientras más grande sea una palabra clave, más frecuentemente aparece en tus conversaciones.\",\n      queries: \"consultas\",\n      of_total: \"del total\",\n      conversation_trend: \"Tendencia de Conversaciones\",\n      conversation_trend_description: \"Evolución del volumen de conversaciones a lo largo del tiempo.\",\n      avg_messages: \"Mensajes Promedio\",\n      avg_duration: \"Duración Promedio\",\n      peak_hours: \"Horas Pico\",\n      mobile_desktop: \"Móvil/Escritorio\",\n      analytics_description: \"Analytics e insights detallados de tus conversaciones de clientes.\",\n      highest_activity: \"Mayor Actividad\",\n      all_integrations: \"Todas las Integraciones\",\n      time_per_conversation: \"Tiempo por Conversación\",\n      messages_per_conversation: \"Mensajes por Conversación\",\n      needs_improvement: \"Necesita Mejora\",\n      fast_responses: \"Respuestas Rápidas\",\n      export_pdf: \"Exportar PDF\",\n      back_to_dashboard: \"Volver al Panel\",\n      topics_and_sentiment: \"Temas y Sentimiento\",\n      topics_analysis_description: \"Análisis de temas y sentimiento de conversaciones de clientes.\",\n      advanced_analysis: \"Análisis Avanzado\",\n      advanced_metrics: \"Métricas Avanzadas\",\n      // Integration Analytics\n      analytics_for: \"Analytics para\",\n      view_performance_metrics_for_integration: \"Ver métricas de rendimiento para esta integración\",\n      total_messages: \"{{count}} mensajes totales\",\n      no_messages: \"Sin mensajes\",\n      conversation_trend_chart: \"Tendencia de Conversaciones\",\n      conversation_volume_over_time: \"Volumen de conversaciones a lo largo del tiempo\",\n      resolution_status: \"Estado de Resolución\",\n      resolved_vs_active_conversations: \"Conversaciones resueltas vs activas\",\n      top_products: \"Productos Principales\",\n      most_mentioned_products: \"Productos más mencionados\",\n      top_topics: \"Temas Principales\",\n      most_discussed_topics: \"Temas más discutidos\",\n      keyword_cloud: \"Nube de Palabras Clave\",\n      frequently_mentioned_keywords: \"Palabras clave mencionadas frecuentemente\",\n      message_distribution: \"Distribución de Mensajes\",\n      conversations_over_time: \"Conversaciones a lo largo del tiempo\",\n      user_vs_assistant_messages: \"Mensajes de usuario vs asistente\",\n      resolved_conversations_count: \"{{count}} de {{total}} resueltas\",\n      no_conversations_to_resolve: \"No hay conversaciones para resolver\",\n      add_form_to_website: \"Agregar Formulario al Sitio Web\",\n      embed_form_description: \"Copia y pega este código en tu sitio web para integrar el formulario\",\n      paste_embed_code_anywhere: \"Pega este código en cualquier lugar de tu HTML\",\n      weeks_ago_plural: \"hace {{count}} semanas\",\n      weeks_ago: \"hace {{count}} semana\",\n      months_ago_plural: \"hace {{count}} meses\",\n      months_ago: \"hace {{count}} mes\",\n      days_ago_plural: \"hace {{count}} días\",\n      days_ago: \"hace {{count}} día\",\n      hours_ago_plural: \"hace {{count}} horas\",\n      hours_ago: \"hace {{count}} hora\",\n      minutes_ago_plural: \"hace {{count}} minutos\",\n      minutes_ago: \"hace {{count}} minuto\",\n      time: {\n        months_ago_plural: \"hace {{count}} meses\",\n        months_ago: \"hace {{count}} mes\"\n      },\n      getStartedPage: {\n        title: \"Comienza Ahora\",\n        subtitle: \"Integra AIPPS en tu sitio web en minutos\",\n        tabs: {\n          widget: \"Widget\",\n          fullscreen: \"Pantalla\",\n          form: \"Formulario\"\n        },\n        widget: {\n          step1: {\n            title: \"Paso 1: Agrega este código a tu sitio web\",\n            description: \"Copia y pega este código en el HTML de tu sitio web, justo antes de la etiqueta de cierre </body>:\",\n            copied: \"✓ Código copiado al portapapeles\",\n            wordpress_note: \"Si usas WordPress: Puedes agregarlo en el tema en footer.php o instalar un plugin que permita insertar código HTML.\"\n          },\n          step2: {\n            title: \"Paso 2: Personaliza tu widget (opcional)\",\n            description: \"Puedes personalizar el comportamiento y apariencia del widget agregando parámetros adicionales:\",\n            customization_title: \"Opciones de personalización:\",\n            position: \"Posición del widget en la página\",\n            theme_color: \"Color principal del widget\",\n            assistant_name: \"Nombre del asistente\",\n            welcome_message: \"Mensaje de bienvenida personalizado\",\n            example_title: \"Ejemplo de configuración personalizada:\",\n            configure_dashboard: \"Configura estas opciones desde el panel de administración:\",\n            dashboard_steps: {\n              \"0\": \"Accede a la sección \\\"Integraciones\\\" del panel\",\n              \"1\": \"Selecciona la integración que deseas configurar\",\n              \"2\": \"Personaliza colores, posición y mensajes\",\n              \"3\": \"Los cambios se aplicarán automáticamente\"\n            }\n          },\n          step3: {\n            title: \"Paso 3: Entrena tu asistente (opcional)\",\n            description: \"Para que tu asistente proporcione respuestas útiles y relevantes, puedes entrenarlo con:\",\n            training_options: [\n              \"Documentos PDF con información sobre tus productos o servicios\",\n              \"Archivos DOCX con preguntas frecuentes y sus respuestas\",\n              \"Archivos Excel con datos estructurados\",\n              \"Instrucciones específicas sobre el tono y estilo de las respuestas\"\n            ],\n            step4_title: \"Paso 4: Configura Formularios (Opcional)\",\n            step4_description: \"Potencia tu widget con formularios personalizados para capturar leads y información específica:\",\n            form_options: [\n              \"Formularios de contacto y captura de leads\",\n              \"Encuestas de satisfacción y feedback\",\n              \"Formularios de registro para eventos\",\n              \"Integración automática con tu CRM\"\n            ]\n          }\n        },\n        fullscreen: {\n          step1: {\n            title: \"Paso 1: Agrega este código a tu sitio web\",\n            description: \"Copia y pega este código en el HTML de tu sitio web, justo antes de la etiqueta de cierre </body>:\",\n            copied: \"✓ Código copiado al portapapeles\",\n            wordpress_note: \"Si usas WordPress: Puedes agregarlo en el tema en footer.php o instalar un plugin que permita insertar código HTML.\"\n          },\n          step2: {\n            title: \"Paso 2: Personaliza tu experiencia (opcional)\",\n            description: \"El modo pantalla completa crea una experiencia inmersiva similar a ChatGPT. Puedes personalizarlo con:\",\n            customization_title: \"Opciones de personalización:\",\n            position: \"Posición del botón de activación\",\n            theme_color: \"Colores y tema del chat\",\n            assistant_name: \"Nombre del asistente\",\n            welcome_message: \"Mensaje de bienvenida personalizado\",\n            example_title: \"Ejemplo de configuración personalizada:\",\n            configure_dashboard: \"Configura estas opciones desde el panel de administración:\",\n            dashboard_steps: {\n              \"0\": \"Accede a la sección \\\"Integraciones\\\" del panel\",\n              \"1\": \"Selecciona la integración que deseas configurar\",\n              \"2\": \"Personaliza colores, posición y mensajes\",\n              \"3\": \"Los cambios se aplicarán automáticamente\"\n            }\n          },\n          step4: {\n            title: \"Paso 4: Configurar Autenticación (Opcional)\",\n            description: \"Habilita funciones avanzadas con sistema de usuarios:\",\n            feature_1: \"Historial personal de conversaciones\",\n            feature_2: \"Personalización de preferencias\",\n            feature_3: \"Seguimiento de progreso usuario\",\n            feature_4: \"Análisis detallados por usuario\"\n          },\n          step5: {\n            title: \"Paso 5: Configuración Avanzada del Asistente\",\n            description: \"Optimiza la experiencia del asistente:\",\n            feature_1: \"Personalidad y tono de respuestas\",\n            feature_2: \"Base de conocimiento especializada\",\n            feature_3: \"Flujos de conversación predefinidos\",\n            feature_4: \"Integración con herramientas externas\"\n          }\n        },\n        form: {\n          step1: {\n            title: \"Paso 1: Agrega este código a tu sitio web\",\n            description: \"Copia y pega este código en el HTML de tu sitio web donde quieras que aparezca el formulario:\",\n            copied: \"✓ Código copiado al portapapeles\"\n          },\n          step2: {\n            title: \"Paso 2: Personaliza tu formulario (opcional)\",\n            description: \"Puedes personalizar el comportamiento y apariencia del formulario agregando parámetros adicionales:\",\n            customization_title: \"Opciones de personalización:\",\n            display_type: \"Tipo de visualización (modal, embebido, etc.)\",\n            position: \"Posición del botón o formulario\",\n            theme_color: \"Color principal del formulario\",\n            button_text: \"Texto del botón\",\n            example_title: \"Ejemplo de configuración personalizada:\",\n            basic_attributes: \"Atributos Básicos:\",\n            attributes: {\n              form_id: \"ID único del formulario\",\n              display_type: \"Tipo de visualización (modal, inline, popup)\",\n              position: \"Posición en la página\",\n              button_text: \"Texto del botón de activación\"\n            },\n            customization_attributes: \"Atributos de Personalización:\",\n            icon: \"Icono personalizado\",\n            button_size: \"Tamaño del botón\",\n            auto_show: \"Mostrar automáticamente\"\n          },\n          step3: {\n            title: \"Paso 3: Gestiona desde el Dashboard\",\n            description: \"Una vez integrado el formulario, puedes gestionarlo completamente desde tu panel de administración:\",\n            dashboard_steps: [\n              \"Accede a la sección \\\"Formularios\\\" del panel\",\n              \"Selecciona el formulario que deseas configurar\",\n              \"Personaliza campos, validaciones y respuestas automáticas\",\n              \"Revisa las respuestas y estadísticas en tiempo real\"\n            ]\n          }\n        },\n        fullscreen_features: {\n          title: \"Características del Modo Pantalla Completa\",\n          register_login: \"Registro e inicio de sesión de usuarios\",\n          personal_history: \"Historial personal de conversaciones\",\n          auto_titles: \"Títulos automáticos para conversaciones\",\n          conversation_management: \"Gestión completa de conversaciones\",\n          user_info: \"Información de usuario integrada\",\n          jwt_security: \"Seguridad JWT incorporada\",\n          visual_customization: \"Personalización visual avanzada\",\n          brand_colors: \"Colores de marca personalizables\",\n          welcome_messages: \"Mensajes de bienvenida configurables\",\n          registration_config: \"Configuración de registro flexible\",\n          privacy_settings: \"Configuración de privacidad granular\"\n        },\n        ignored_sections: {\n          step3_title: \"Paso 3: Configura Secciones Ignoradas (Opcional)\",\n          title: \"Secciones Ignoradas\",\n          description: \"Define qué partes de tu sitio web debe ignorar el asistente al analizar contenido:\",\n          benefit_1: \"Evita confusión con elementos irrelevantes como menús o publicidad\",\n          benefit_2: \"Mejora la precisión de las respuestas del asistente\",\n          benefit_3: \"Reduce el ruido en el entrenamiento automático\",\n          benefit_4: \"Enfoca el análisis en contenido relevante\",\n          config_example: \"aipi('init', {\\n  apiKey: 'TU_API_KEY',\\n  // Otras configuraciones...\\n  ignoredSections: ['Menú principal', 'Footer', 'Sidebar', 'Publicidad'],\\n});\",\n          config_description: \"Configura desde el panel de administración:\",\n          step_1: \"Accede a \\\"Configuración\\\" → \\\"Análisis de Contenido\\\"\",\n          step_2: \"Agrega selectores CSS o nombres de secciones a ignorar\",\n          step_3: \"Guarda cambios para aplicar inmediatamente\",\n          step_4: \"El asistente actualizará su comprensión automáticamente\"\n        },\n        support: {\n          title: \"Soporte y Recursos\",\n          description: \"Obtén ayuda y recursos para maximizar tu experiencia con AIPPS\"\n        },\n        buttons: {\n          go_to_integrations: \"Ir a integraciones\",\n          login_to_manage: \"Iniciar sesión para gestionar\",\n          manage_content: \"Gestionar contenido\",\n          create_account: \"Crear cuenta\",\n          create_forms: \"Crear formularios\",\n          create_account_forms: \"Crear cuenta para formularios\",\n          configure_auth: \"Configurar autenticación\",\n          login: \"Iniciar sesión\",\n          configure_sections: \"Configurar secciones\",\n          configure_assistant: \"Configurar asistente\",\n          configure_advanced_forms: \"Configurar formularios avanzados\",\n          create_account_advanced: \"Crear cuenta avanzada\",\n          go_to_forms: \"Ir a formularios\",\n          login_to_manage_forms: \"Iniciar sesión para gestionar formularios\",\n          forms_guide: \"Guía de formularios\",\n          view_docs: \"Ver documentación\",\n          contact_support: \"Contactar soporte\"\n        },\n        cta: {\n          forms_title: \"¿Listo para crear tus formularios?\",\n          forms_description: \"Comienza a capturar leads con nuestros formularios personalizados hoy mismo.\"\n        }\n      }\n    }\n  },\n  en: {\n    translation: {\n      menu: \"Menu\",\n      common: {\n        error: \"Error\",\n        yes: \"Yes\",\n        no: \"No\",\n        cancel: \"Cancel\",\n        spanish: \"Spanish\",\n        english: \"English\", \n        french: \"French\"\n      },\n      language: {\n        select: \"Select language\",\n        fr: \"French\",\n        es: \"Spanish\",\n        en: \"English\"\n      },\n      refresh: \"Refresh\",\n      edit: \"Edit\",\n      conversations: \"Conversations\",\n      analytics: \"Analytics\",\n      delete: \"Delete\",\n      visitors_helped: \"Visitors helped\",\n      installed: \"Installed\",\n      confirm_delete_title: \"Are you sure?\",\n      confirm_delete_description: \"This action will permanently delete the integration \\\"{{name}}\\\" and cannot be undone. The widget will stop working on your website.\",\n      welcome: \"Welcome to AIPI\",\n      task_automation: \"Task Automation\",\n      task_automation_description: \"Set up automated tasks and workflows powered by AI.\",\n      create_automation: \"Create Automation\",\n      conversations_for: \"Conversations for\",\n      view_all_conversations_for_integration: \"View all conversations for this integration\",\n      search_conversations: \"Search conversations...\",\n      edit_integration: \"Edit integration\",\n      view_conversations: \"View conversations\",\n      view_analytics: \"View analytics\",\n      resolved: \"Resolved\",\n      unresolved: \"Unresolved\",\n      messages: \"messages\",\n      loading: \"Loading...\",\n      back: \"Back\",\n      no_conversations_found: \"No conversations found\",\n      details: \"Details\",\n      settings: \"Settings\",\n      settings_description: \"Configure your AIPPS assistant settings.\",\n      ai_assistant_settings: \"AI Assistant Settings\",\n      assistant_name: \"Assistant Name\",\n      default_greeting: \"Default Greeting\",\n      conversation_style: \"Conversation Style\",\n      show_availability: \"Show Availability\",\n      appearance: \"Appearance\",\n      chat_font: \"Chat Font\",\n      user_message_color: \"User Message Color\",\n      assistant_message_color: \"Assistant Message Color\",\n      welcome_chat: \"Welcome Chat\",\n      status: \"Status\",\n      welcome_message: \"Welcome Message\",\n      bubble_color: \"Bubble Color\",\n      text_color: \"Text Color\",\n      enabled: \"Enabled\",\n      disabled: \"Disabled\",\n      system_default: \"System Default\",\n      professional_label: \"Professional\",\n      edit_settings: \"Edit Settings\",\n      no_settings_found: \"No settings found\",\n      no_settings_description: \"Create your assistant settings to customize your AIPPS experience\",\n      configure_settings: \"Configure Settings\",\n      integrations: \"Integrations\",\n      integrations_description: \"Create and manage website integrations for AIPPS.\",\n      create_integration: \"Create Integration\",\n      no_integrations: \"No integrations yet\",\n      add_new_integration_desc: \"Add a new website integration to connect AIPPS with your site\",\n      forms: \"Forms\",\n      forms_description: \"Create and manage your forms.\",\n      create_form: \"Create Form\",\n      conversations_description: \"Review and manage conversations with your visitors.\",\n      new: \"New\",\n      no_conversations_matching_search: \"No conversations found matching your search\",\n      no_conversations_for_integration: \"No conversations for this integration yet\",\n      recent_conversations: \"Recent Conversations\",\n      total_conversations: \"Total Conversations\",\n      resolution_rate: \"Resolution Rate\",\n      average_response_time: \"Average Response Time\",\n      minutes: \"minutes\",\n      yes: \"Yes\",\n      no: \"No\",\n      no_conversations: \"No conversations yet\",\n      conversations_empty_message: \"When visitors interact with your chat widget, their conversations will appear here\",\n      success: \"Success\",\n      error: \"Error\",\n      form_deleted_successfully: \"Form deleted successfully\",\n      error_deleting_form: \"Error deleting form\",\n      no_description: \"No description\",\n      responses: \"responses\",\n      no_forms: \"No forms yet\",\n      forms_empty_message: \"Create your first form to start capturing visitor data\",\n      dashboard_title: \"Dashboard\",\n      manage_assistant: \"Manage your AI assistant and configure integrations\",\n      avg_response_time: \"Average Response Time\", \n      confirm_delete: \"Confirm Delete\",\n      delete_form_confirmation: \"Are you sure you want to delete this form? This action cannot be undone and will also delete all responses.\",\n      cancel: \"Cancel\",\n      deleting: \"Deleting...\",\n      no_automations: \"No automations yet\",\n      automations_empty_message: \"Create your first automation to streamline repetitive tasks with AI\",\n      view_logs: \"View Logs\",\n      active: \"Active\",\n      inactive: \"Inactive\",\n      testing: \"Testing\",\n      anonymous: \"Anonymous\",\n      completed: \"Completed\", \n      view: \"View\",\n      last_message: \"Last message\",\n      getStarted: \"Get Started\",\n      learnMore: \"Learn More\",\n      features: {\n        title: \"Main Features\",\n        subtitle: \"Discover the features that make AIPI the best choice for your website\",\n        conversationalAI: {\n          title: \"Conversational AI\",\n          description: \"Smart and natural interactions with your visitors\"\n        },\n        taskAutomation: {\n          title: \"Task Automation\",\n          description: \"Automate responses and processes to improve efficiency\"\n        },\n        easyIntegration: {\n          title: \"Easy Integration\",\n          description: \"Implement in minutes with a simple line of code\"\n        },\n        analytics: {\n          title: \"Advanced Analytics\",\n          description: \"Get valuable insights about your users' interactions\"\n        }\n      },\n      cta: {\n        title: \"Ready to transform your website?\",\n        subtitle: \"Join thousands of companies already using AIPI to improve their users' experience\",\n        getStartedFree: \"Get Started Free\",\n        scheduleDemo: \"Schedule Demo\"\n      },\n      footer: {\n        company_description: \"AIPI - Advanced conversational AI platform for websites.\",\n        product: \"Product\",\n        company: \"Company\",\n        about_us: \"About us\",\n        contact: \"Contact\",\n        privacy_policy: \"Privacy policy\",\n        terms_of_service: \"Terms of service\",\n        support: \"Support\",\n        help_center: \"Help center\",\n        all_rights_reserved: \"All rights reserved.\"\n      },\n      pricing: {\n        plans: \"Plans\",\n        title: \"Choose Your Perfect Plan\",\n        subtitle: \"Select the plan that best fits your needs and scale your business with conversational AI.\",\n        monthly_billing: \"Monthly Billing\",\n        annual_billing: \"Annual Billing\",\n        toggle_billing: \"Toggle billing type\",\n        save_percentage: \"Save 20%\",\n        recommended: \"Recommended\",\n        free: \"Free\",\n        from: \"From\",\n        month: \"month\",\n        year: \"year\",\n        contact_us: \"Contact Us\",\n        take_offer: \"Take Offer\",\n        take_annual_offer: \"Take Annual Offer\",\n        start_free: \"Start Free\",\n        subscribe: \"Subscribe\",\n        processing: \"Processing...\",\n        spots_remaining: \"Only {{remaining}} spots left out of {{total}}\",\n        discount_duration: \"{{discount}}% discount for {{months}} months\",\n        promotional_price_duration: \"Promotional price for {{months}} months\",\n        limited_launch_offer: \"Limited Launch Offer\",\n        spots_left_of_total: \"Only {{remaining}} spots left out of {{total}} in this special promotion.\",\n        take_advantage_unique_prices: \"Take advantage of these unique prices before they return to regular prices.\",\n        pricing_note: \"All plans include full support and free updates.\",\n        login_required: \"Login required\",\n        login_description: \"You need to log in to subscribe to a plan\",\n        success: \"Success!\",\n        error: \"Error\",\n        free_plan_activated: \"Free plan activated successfully\",\n        process_error: \"Error processing request\",\n        faq: {\n          title: \"Frequently Asked Questions\",\n          q1: \"Can I change plans at any time?\",\n          a1: \"Yes, you can upgrade or downgrade your plan at any time from your dashboard.\"\n        },\n        support: {\n          title: \"Support\",\n          q1: \"What type of support is included?\",\n          a1: \"All plans include email support. Pro and Enterprise plans include priority support.\"\n        },\n        refund: {\n          title: \"Refund Policy\",\n          q1: \"Do you offer a money-back guarantee?\",\n          a1: \"We offer a 30-day money-back guarantee for all paid plans.\"\n        }\n      },\n      help: {\n        title: \"Help Center\",\n        subtitle: \"Find answers to your questions and learn how to use AIPPS\",\n        search_placeholder: \"Search help articles...\",\n        popular: {\n          title: \"Popular Articles\",\n          badge: \"Popular\",\n          article1: \"How to integrate the widget on your website\",\n          article2: \"Customize the conversational assistant\",\n          article3: \"Set up lead capture forms\",\n          article4: \"Analyze metrics and conversations\",\n          article5: \"Train your assistant with documents\"\n        },\n        categories: {\n          title: \"Help Categories\",\n          getting_started: {\n            title: \"Getting Started\",\n            description: \"Everything you need to begin with AIPPS\",\n            article1: \"Create your first AIPPS account\",\n            article2: \"Initial dashboard setup\",\n            article3: \"Quick start guide for widgets\",\n            article4: \"Conversational AI basics\"\n          },\n          configuration: {\n            title: \"Configuration\",\n            description: \"Customize AIPPS according to your needs\",\n            article1: \"Customize widget colors and theme\",\n            article2: \"Configure welcome messages\",\n            article3: \"Set availability hours\",\n            article4: \"Language and translation management\"\n          },\n          integration: {\n            title: \"Integration\",\n            description: \"Connect AIPPS with your website and tools\",\n            article1: \"Integrate widget in WordPress\",\n            article2: \"Shopify implementation\",\n            article3: \"Custom integration code\",\n            article4: \"CRM and tools integration\"\n          },\n          billing: {\n            title: \"Billing\",\n            description: \"Manage your subscription and payments\",\n            article1: \"Change subscription plan\",\n            article2: \"Billing and payment information\",\n            article3: \"Refund policy\",\n            article4: \"Pricing frequently asked questions\"\n          },\n          troubleshooting: {\n            title: \"Troubleshooting\",\n            description: \"Resolve common technical issues\",\n            article1: \"Widget doesn't appear on my site\",\n            article2: \"Chat connection problems\",\n            article3: \"Assistant not responding correctly\",\n            article4: \"Form issues\"\n          },\n          account: {\n            title: \"Account\",\n            description: \"Manage your profile and account settings\",\n            article1: \"Change password and profile data\",\n            article2: \"Notification settings\",\n            article3: \"Manage users and permissions\",\n            article4: \"Delete or close account\"\n          }\n        },\n        contact_support: {\n          title: \"Need More Help?\",\n          description: \"If you can't find what you're looking for, our team is here to help\",\n          contact_button: \"Contact Support\",\n          email_button: \"Send Email\"\n        }\n      },\n      about: {\n        title: \"About AIPPS\",\n        subtitle: \"Learn about our mission to transform web communication with artificial intelligence\",\n        mission: {\n          title: \"Our Mission\",\n          description: \"Democratize access to conversational AI for all websites in the world\"\n        },\n        vision: {\n          title: \"Our Vision\",\n          description: \"Create a future where every web interaction is intelligent and personalized\"\n        },\n        global: {\n          title: \"Global Reach\",\n          description: \"We serve businesses of all sizes in more than 50 countries\"\n        },\n        innovation: {\n          title: \"Innovation\",\n          description: \"Pioneers in conversational AI technology with over 5 years of experience\"\n        }\n      },\n      contact: {\n        title: \"Contact Us\",\n        subtitle: \"We're here to help. Get in touch with our team\",\n        info: {\n          title: \"Contact Information\",\n          email: \"support@aipps.ca\",\n          phone: \"+1 (555) 123-4567\",\n          address: \"123 Innovation Street, Tech City, TC 12345\",\n          hours: \"Monday to Friday: 9:00 AM - 6:00 PM (EST)\"\n        },\n        form: {\n          title: \"Send Us a Message\",\n          name_label: \"Name\",\n          name_placeholder: \"Your name\",\n          email_label: \"Email\",\n          email_placeholder: \"your@email.com\",\n          subject_label: \"Subject\",\n          subject_placeholder: \"How can we help you?\",\n          message_label: \"Message\",\n          message_placeholder: \"Describe your inquiry...\",\n          send_button: \"Send Message\",\n          sending_button: \"Sending...\",\n          success_title: \"Message Sent\",\n          success_message: \"Thanks for contacting us. We'll get back to you soon.\"\n        }\n      },\n      privacy: {\n        title: \"Privacy Policy\",\n        subtitle: \"How we collect, use and protect your information\",\n        data_collection: {\n          title: \"Data Collection\",\n          description: \"We collect information to provide and improve our services:\",\n          item1: \"Account information (name, email, contact details)\",\n          item2: \"Widget usage and analytics data\",\n          item3: \"Technical information (IP, browser, device)\",\n          item4: \"Conversation content for AI training\"\n        },\n        data_usage: {\n          title: \"Data Usage\",\n          description: \"We use your data for the following purposes:\",\n          item1: \"Provide and maintain our services\",\n          item2: \"Improve user experience\",\n          item3: \"Performance analysis and statistics\",\n          item4: \"Support communications and updates\"\n        },\n        data_sharing: {\n          title: \"Data Sharing\",\n          description: \"We do not sell or rent your personal information. We only share it in these cases:\",\n          item1: \"With service providers necessary for operation\",\n          item2: \"When required by law\",\n          item3: \"With your explicit consent\"\n        },\n        security: {\n          title: \"Security\",\n          description: \"We implement security measures to protect your information\",\n          item1: \"Data encryption in transit and at rest\",\n          item2: \"Two-factor authentication available\",\n          item3: \"Regular security audits\",\n          item4: \"Compliance with international security standards\"\n        },\n        user_rights: {\n          title: \"Your Rights\",\n          description: \"You have the right to access, correct or delete your personal information\",\n          item1: \"Access your stored personal data\",\n          item2: \"Request correction of incorrect information\",\n          item3: \"Delete your account and associated data\",\n          item4: \"Export your data in portable format\"\n        },\n        contact: {\n          title: \"Contact\",\n          description: \"For privacy questions, contact us at privacy@aipps.ca\"\n        }\n      },\n      terms: {\n        title: \"Terms of Service\",\n        subtitle: \"AIPPS terms and conditions of use\",\n        acceptance: {\n          title: \"Acceptance of Terms\",\n          description: \"By using AIPPS, you accept these terms and conditions\"\n        },\n        services: {\n          title: \"Service Description\",\n          description: \"AIPPS provides conversational AI tools for websites:\",\n          item1: \"Intelligent chat widgets\",\n          item2: \"Lead capture forms\",\n          item3: \"Analytics and metrics\",\n          item4: \"Website integration\"\n        },\n        user_obligations: {\n          title: \"User Obligations\",\n          description: \"As a user, you commit to:\",\n          item1: \"Use the service legally and ethically\",\n          item2: \"Not interfere with system operation\",\n          item3: \"Maintain the security of your account\",\n          item4: \"Respect intellectual property rights\"\n        },\n        payment: {\n          title: \"Payment Terms\",\n          description: \"Payment terms include:\",\n          item1: \"Monthly or annual billing according to chosen plan\",\n          item2: \"Payments are non-refundable except for exceptions\",\n          item3: \"Prices may change with prior notice\",\n          item4: \"Suspension for non-payment is immediate\"\n        },\n        intellectual_property: {\n          title: \"Intellectual Property\",\n          description: \"All intellectual property rights of AIPPS belong to us:\",\n          item1: \"AIPPS software and technology\",\n          item2: \"Trademarks and logos\",\n          item3: \"Content and documentation\"\n        },\n        limitation: {\n          title: \"Limitation of Liability\",\n          description: \"AIPPS is not responsible for indirect damages or data loss\"\n        },\n        termination: {\n          title: \"Termination\",\n          description: \"Either party may terminate the agreement:\",\n          item1: \"User can cancel at any time\",\n          item2: \"AIPPS can suspend accounts for terms violation\",\n          item3: \"Data will be deleted according to retention policy\"\n        }\n      },\n      documentation: {\n        title: \"AIPPS Documentation\",\n        subtitle: \"Complete guide to implement and use AIPPS on your website\",\n        implementation: \"Implementation\",\n        api_reference: \"API Reference\",\n        support: \"Support\",\n        widget_integration: \"Widget Integration\",\n        contextual_understanding: \"Contextual Understanding\",\n        document_training: \"Document Training\",\n        lead_capture: \"Lead Capture\",\n        analytics: \"Analytics\",\n        task_automation: \"Task Automation\",\n        form_creation: \"Form Creation\",\n        overview_content: \"AIPPS is an advanced conversational AI platform that allows websites to offer intelligent and personalized chat experiences.\",\n        generated_on: \"Generated on\",\n        language: \"Language\",\n        table_of_contents: \"Table of Contents\", \n        download_pdf: \"Download PDF\",\n        forms: \"Forms\",\n        education: \"Education\",\n        business: \"Business\", \n        professional_label: \"Professional\",\n        page: \"Page\",\n        of: \"of\",\n        features_content: \"AIPPS offers a wide range of features designed to enhance user experience and increase conversions on your website.\",\n        widget_integration_content: \"Easily integrate chat widgets into your website with a simple line of code. Compatible with WordPress, Shopify, React and more.\",\n        contextual_understanding_content: \"Our AI assistant understands conversation context and provides relevant and helpful responses.\",\n        document_training_content: \"Train your assistant with PDF, DOCX documents and other formats so it can answer specific questions about your business.\",\n        lead_capture_content: \"Intelligently capture leads with adaptive forms that adjust to user behavior.\",\n        analytics_content: \"Get detailed insights into user interactions, behavior patterns and conversion metrics.\",\n        task_automation_content: \"Automate repetitive tasks like answering frequently asked questions, scheduling appointments and sending product information.\",\n        form_creation_content: \"Create dynamic and intelligent forms that adapt to the specific needs of each visitor.\",\n        implementation_content: \"Complete step-by-step guide to implement AIPPS on your website, from installation to advanced configuration.\",\n        api_reference_content: \"Complete AIPPS API documentation for custom integrations and advanced functionalities.\",\n        support_content: \"Access our 24/7 support center with documentation, tutorials and specialized technical assistance.\",\n        overview: {\n          title: \"Introduction to AIPPS\",\n          introduction: \"AIPPS is a revolutionary conversational AI platform designed to transform the way websites interact with their visitors. We offer intelligent and personalized solutions that enhance user experience and increase conversions.\",\n          problem_title: \"The Problem We Solve\",\n          problem_description: \"Many websites struggle to keep their visitors engaged and convert traffic into quality leads. Traditional web communication methods are often static and impersonal, resulting in high bounce rates and missed opportunities.\",\n          solution_intro: \"AIPPS provides a comprehensive solution with the following key features:\",\n          solution_point_1: \"Smart chat widgets that understand context and provide relevant responses\",\n          solution_point_2: \"Dynamic forms that adapt to user behavior\",\n          solution_point_3: \"Advanced analytics to optimize user experience\",\n          solution_point_4: \"Seamless integration with any website in minutes\",\n          card1_title: \"Advanced Conversational AI\",\n          card1_text: \"Our virtual assistant uses cutting-edge technology to understand user queries and provide accurate and helpful responses in real-time.\",\n          card2_title: \"Smart Lead Capture\",\n          card2_text: \"Convert more visitors into leads with adaptive forms and conversation flows designed to maximize conversions.\",\n          card3_title: \"Effortless Integration\",\n          card3_text: \"Implement AIPPS on your website with a simple line of code. Compatible with all major web platforms.\",\n          card4_title: \"Detailed Analytics\",\n          card4_text: \"Get valuable insights into your visitors' behavior and continuously optimize the user experience.\",\n          start_button: \"Get Started Now\"\n        },\n        features: {\n          title: \"Key Features\"\n        }\n      },\n      education: {\n        intro_text: \"AIPPS is revolutionizing the education sector with conversational AI solutions designed specifically for academic institutions, universities, and training centers.\",\n        specific_benefits: \"Specific Benefits for Education\",\n        admission_process: \"Automated Admission Process\",\n        admission_benefit1: \"Instant responses to academic program inquiries\",\n        admission_benefit2: \"Personalized guidance during enrollment process\",\n        admission_benefit3: \"Automatic tracking of potential candidates\",\n        program_presentation: \"Interactive Program Presentation\",\n        program_detail1: \"Detailed information about careers and specializations\",\n        program_detail2: \"Automatic comparison between different programs\",\n        program_detail3: \"Recommendations based on student interests\",\n        lead_capture: \"Potential Student Capture\",\n        lead_capture1: \"Adaptive forms for information requests\",\n        lead_capture2: \"Automatic segmentation by area of interest\",\n        lead_capture3: \"Academic conversion funnel tracking\",\n        international_support: \"International Support\",\n        international1: \"Multilingual assistance for foreign students\",\n        international2: \"Information about visas and immigration procedures\",\n        international3: \"Personalized cultural and academic orientation\",\n        trend_analysis: \"Educational Trend Analysis\",\n        trend1: \"Identification of most demanded programs\",\n        trend2: \"Candidate behavior analysis\",\n        trend3: \"Optimization of recruitment strategies\",\n        trend4: \"Enrollment trend prediction\",\n        testimonials: \"Testimonials\",\n        testimonial_text: \"AIPPS has transformed our student recruitment. We've increased inquiries by 300% and significantly improved the candidate experience.\",\n        testimonial_author: \"Dr. Sarah Johnson, Technology University\",\n        implement_button: \"Implement for Education\"\n      },\n      business: {\n        intro_text: \"Transform your business with AIPPS, the conversational AI platform that drives sales, improves customer service, and optimizes commercial experience.\",\n        specific_benefits: \"Specific Benefits for Business\",\n        lead_generation: \"Advanced Lead Generation\",\n        lead_gen1: \"Real-time automatic prospect qualification\",\n        lead_gen2: \"Smart forms that adapt to behavior\",\n        lead_gen3: \"Automated sales cycle tracking\",\n        customer_support: \"24/7 Customer Support\",\n        support1: \"Instant responses to frequently asked questions\",\n        support2: \"Intelligent escalation to human agents when necessary\",\n        support3: \"Proactive resolution of common issues\",\n        catalog_presentation: \"Smart Catalog Presentation\",\n        catalog1: \"Personalized product recommendations\",\n        catalog2: \"Automatic comparison between options\",\n        catalog3: \"Detailed and real-time updated information\",\n        sales_optimization: \"Sales Optimization\",\n        sales_opt1: \"Cross-selling opportunity identification\",\n        sales_opt2: \"Predictive analysis of purchasing behavior\",\n        sales_opt3: \"Quote process automation\",\n        behavior_analysis: \"Customer Behavior Analysis\",\n        behavior1: \"Real-time interaction tracking\",\n        behavior2: \"Abandonment pattern identification\",\n        behavior3: \"Conversion funnel optimization\",\n        behavior4: \"Dynamic experience personalization\",\n        testimonials: \"Testimonials\",\n        testimonial_text: \"With AIPPS we've increased our conversions by 250% and reduced customer response times from hours to seconds.\",\n        testimonial_author: \"Michael Smith, CEO of TechCommerce\",\n        implement_button: \"Implement for Business\"\n      },\n      professional: {\n        intro_text: \"AIPPS revolutionizes professional services with conversational AI solutions designed specifically for consultants, lawyers, doctors, accountants, and service professionals.\",\n        specific_benefits: \"Specific Benefits for Professionals\",\n        client_qualification: \"Intelligent Client Qualification\",\n        qualification1: \"Automatic assessment of client needs and budget\",\n        qualification2: \"Smart segmentation by service type and urgency\",\n        qualification3: \"Pre-qualification before human consultation\",\n        appointment_scheduling: \"Automated Appointment Scheduling\",\n        scheduling1: \"Real-time calendar integration and availability\",\n        scheduling2: \"Automatic confirmation and reminder sending\",\n        scheduling3: \"Rescheduling and cancellation management\",\n        client_education: \"Client Education and Preparation\",\n        education1: \"Information about services and processes before consultation\",\n        education2: \"Required document collection and preparation\",\n        education3: \"Clear expectation setting about timelines and costs\",\n        expectation_management: \"Professional Expectation Management\",\n        expectation1: \"Transparent communication about service scope\",\n        expectation2: \"Realistic timeline and cost estimation\",\n        expectation3: \"Proactive status updates throughout the process\",\n        content_marketing: \"Professional Content Marketing\",\n        marketing1: \"Sharing of relevant articles and resources\",\n        marketing2: \"Educational content about legal or professional changes\",\n        marketing3: \"Case studies and success stories\",\n        marketing4: \"Industry trend analysis and recommendations\",\n        marketing5: \"Personalized content based on client profile\",\n        testimonials: \"Testimonials\",\n        testimonial_text: \"With AIPPS we've improved our client qualification by 180% and reduced initial consultation time while increasing client satisfaction.\",\n        testimonial_author: \"Dr. Jennifer Wilson, Legal Consulting Firm\",\n        implement_button: \"Implement for Professionals\"\n      },\n      // Analytics translations\n      products_services_most_demanded: \"Most Demanded Products/Services\",\n      products_analysis_description: \"Analysis of products and services mentioned in customer conversations.\",\n      what_does_it_mean: \"What does it mean?\",\n      products_bars_explanation: \"The bars represent how frequently each product or service is mentioned in conversations.\",\n      keywords: \"Keywords\",\n      keywords_description: \"Most frequent keywords extracted from customer conversations.\",\n      keywords_explanation: \"The larger a keyword appears, the more frequently it shows up in your conversations.\",\n      queries: \"queries\",\n      of_total: \"of total\",\n      conversation_trend: \"Conversation Trend\",\n      conversation_trend_description: \"Evolution of conversation volume over time.\",\n      avg_messages: \"Average Messages\",\n      avg_duration: \"Average Duration\",\n      peak_hours: \"Peak Hours\",\n      mobile_desktop: \"Mobile/Desktop\",\n      analytics_description: \"Detailed analytics and insights from your customer conversations.\",\n      highest_activity: \"Highest Activity\",\n      all_integrations: \"All Integrations\",\n      time_per_conversation: \"Time per Conversation\",\n      messages_per_conversation: \"Messages per Conversation\",\n      needs_improvement: \"Needs Improvement\",\n      fast_responses: \"Fast Responses\",\n      export_pdf: \"Export PDF\",\n      back_to_dashboard: \"Back to Dashboard\",\n      topics_and_sentiment: \"Topics and Sentiment\",\n      topics_analysis_description: \"Analysis of topics and sentiment from customer conversations.\",\n      advanced_analysis: \"Advanced Analysis\",\n      advanced_metrics: \"Advanced Metrics\",\n      // Integration Analytics\n      analytics_for: \"Analytics for\",\n      view_performance_metrics_for_integration: \"View performance metrics for this integration\",\n      total_messages: \"{{count}} total messages\",\n      no_messages: \"No messages\",\n      conversation_trend_chart: \"Conversation Trend\",\n      conversation_volume_over_time: \"Conversation volume over time\",\n      resolution_status: \"Resolution Status\",\n      resolved_vs_active_conversations: \"Resolved vs active conversations\",\n      top_products: \"Top Products\",\n      most_mentioned_products: \"Most mentioned products\",\n      top_topics: \"Top Topics\",\n      most_discussed_topics: \"Most discussed topics\",\n      keyword_cloud: \"Keyword Cloud\",\n      frequently_mentioned_keywords: \"Frequently mentioned keywords\",\n      message_distribution: \"Message Distribution\",\n      conversations_over_time: \"Conversations over time\",\n      user_vs_assistant_messages: \"User vs assistant messages\",\n      resolved_conversations_count: \"{{count}} out of {{total}} resolved\",\n      no_conversations_to_resolve: \"No conversations to resolve\",\n      add_form_to_website: \"Add Form to Website\",\n      embed_form_description: \"Copy and paste this code into your website to integrate the form\",\n      paste_embed_code_anywhere: \"Paste this code anywhere in your HTML\",\n      weeks_ago_plural: \"{{count}} weeks ago\",\n      weeks_ago: \"{{count}} week ago\",\n      months_ago_plural: \"{{count}} months ago\",\n      months_ago: \"{{count}} month ago\",\n      days_ago_plural: \"{{count}} days ago\",\n      days_ago: \"{{count}} day ago\",\n      hours_ago_plural: \"{{count}} hours ago\",\n      hours_ago: \"{{count}} hour ago\",\n      minutes_ago_plural: \"{{count}} minutes ago\",\n      minutes_ago: \"{{count}} minute ago\",\n      time: {\n        months_ago_plural: \"{{count}} months ago\",\n        months_ago: \"{{count}} month ago\"\n      },\n      getStartedPage: {\n        title: \"Get Started\",\n        subtitle: \"Integrate AIPPS into your website in minutes\",\n        tabs: {\n          widget: \"Widget\",\n          fullscreen: \"Fullscreen\",\n          form: \"Form\"\n        },\n        widget: {\n          step1: {\n            title: \"Step 1: Add this code to your website\",\n            description: \"Copy and paste this code into your website's HTML, just before the closing </body> tag:\",\n            copied: \"✓ Code copied to clipboard\",\n            wordpress_note: \"If you use WordPress: You can add it in the theme in footer.php or install a plugin that allows inserting HTML code.\"\n          },\n          step2: {\n            title: \"Step 2: Customize your widget (optional)\",\n            description: \"You can customize the widget's behavior and appearance by adding additional parameters:\",\n            customization_title: \"Customization options:\",\n            position: \"Widget position on the page\",\n            theme_color: \"Widget primary color\",\n            assistant_name: \"Assistant name\",\n            welcome_message: \"Custom welcome message\",\n            example_title: \"Custom configuration example:\",\n            configure_dashboard: \"Configure these options from the admin panel:\",\n            dashboard_steps: {\n              \"0\": \"Access the \\\"Integrations\\\" section of the panel\",\n              \"1\": \"Select the integration you want to configure\",\n              \"2\": \"Customize colors, position and messages\",\n              \"3\": \"Changes will be applied automatically\"\n            }\n          },\n          step3: {\n            title: \"Step 3: Train your assistant (optional)\",\n            description: \"For your assistant to provide useful and relevant responses, you can train it with:\",\n            training_options: [\n              \"PDF documents with information about your products or services\",\n              \"DOCX files with frequently asked questions and their answers\",\n              \"Excel files with structured data\",\n              \"Specific instructions about response tone and style\"\n            ],\n            step4_title: \"Step 4: Configure Forms (Optional)\",\n            step4_description: \"Power your widget with custom forms to capture leads and specific information:\",\n            form_options: [\n              \"Contact forms and lead capture\",\n              \"Satisfaction surveys and feedback\",\n              \"Event registration forms\",\n              \"Automatic CRM integration\"\n            ]\n          }\n        },\n        fullscreen: {\n          step1: {\n            title: \"Step 1: Add this code to your website\",\n            description: \"Copy and paste this code into your website's HTML, just before the closing </body> tag:\",\n            copied: \"✓ Code copied to clipboard\",\n            wordpress_note: \"If you use WordPress: You can add it in the theme in footer.php or install a plugin that allows inserting HTML code.\"\n          },\n          step2: {\n            title: \"Step 2: Customize your experience (optional)\",\n            description: \"Fullscreen mode creates an immersive experience similar to ChatGPT. You can customize it with:\",\n            customization_title: \"Customization options:\",\n            position: \"Activation button position\",\n            theme_color: \"Chat colors and theme\",\n            assistant_name: \"Assistant name\",\n            welcome_message: \"Custom welcome message\",\n            example_title: \"Custom configuration example:\",\n            configure_dashboard: \"Configure these options from the admin panel:\",\n            dashboard_steps: {\n              \"0\": \"Access the \\\"Integrations\\\" section of the panel\",\n              \"1\": \"Select the integration you want to configure\",\n              \"2\": \"Customize colors, position and messages\",\n              \"3\": \"Changes will be applied automatically\"\n            }\n          },\n          step4: {\n            title: \"Step 4: Configure Authentication (Optional)\",\n            description: \"Enable advanced features with user system:\",\n            feature_1: \"Personal conversation history\",\n            feature_2: \"Preference customization\",\n            feature_3: \"User progress tracking\",\n            feature_4: \"Detailed user analytics\"\n          },\n          step5: {\n            title: \"Step 5: Advanced Assistant Configuration\",\n            description: \"Optimize assistant experience:\",\n            feature_1: \"Response personality and tone\",\n            feature_2: \"Specialized knowledge base\",\n            feature_3: \"Predefined conversation flows\",\n            feature_4: \"External tool integration\"\n          }\n        },\n        form: {\n          step1: {\n            title: \"Step 1: Add this code to your website\",\n            description: \"Copy and paste this code into your website's HTML where you want the form to appear:\",\n            copied: \"✓ Code copied to clipboard\"\n          },\n          step2: {\n            title: \"Step 2: Customize your form (optional)\",\n            description: \"You can customize the form's behavior and appearance by adding additional parameters:\",\n            customization_title: \"Customization options:\",\n            display_type: \"Display type (modal, embedded, etc.)\",\n            position: \"Button or form position\",\n            theme_color: \"Form primary color\",\n            button_text: \"Button text\",\n            example_title: \"Custom configuration example:\",\n            basic_attributes: \"Basic Attributes:\",\n            attributes: {\n              form_id: \"Unique form ID\",\n              display_type: \"Display type (modal, inline, popup)\",\n              position: \"Position on page\",\n              button_text: \"Activation button text\"\n            },\n            customization_attributes: \"Customization Attributes:\",\n            icon: \"Custom icon\",\n            button_size: \"Button size\",\n            auto_show: \"Show automatically\"\n          },\n          step3: {\n            title: \"Step 3: Manage from Dashboard\",\n            description: \"Once the form is integrated, you can manage it completely from your admin panel:\",\n            dashboard_steps: [\n              \"Access the \\\"Forms\\\" section of the panel\",\n              \"Select the form you want to configure\",\n              \"Customize fields, validations and automatic responses\",\n              \"Review responses and statistics in real time\"\n            ]\n          }\n        },\n        fullscreen_features: {\n          title: \"Fullscreen Mode Features\",\n          register_login: \"User registration and login\",\n          personal_history: \"Personal conversation history\",\n          auto_titles: \"Automatic conversation titles\",\n          conversation_management: \"Complete conversation management\",\n          user_info: \"Integrated user information\",\n          jwt_security: \"Built-in JWT security\",\n          visual_customization: \"Advanced visual customization\",\n          brand_colors: \"Customizable brand colors\",\n          welcome_messages: \"Configurable welcome messages\",\n          registration_config: \"Flexible registration configuration\",\n          privacy_settings: \"Granular privacy settings\"\n        },\n        ignored_sections: {\n          step3_title: \"Step 3: Configure Ignored Sections (Optional)\",\n          title: \"Ignored Sections\",\n          description: \"Define which parts of your website the assistant should ignore when analyzing content:\",\n          benefit_1: \"Avoid confusion with irrelevant elements like menus or advertising\",\n          benefit_2: \"Improve assistant response accuracy\",\n          benefit_3: \"Reduce noise in automatic training\",\n          benefit_4: \"Focus analysis on relevant content\",\n          config_example: \"aipi('init', {\\n  apiKey: 'YOUR_API_KEY',\\n  // Other configurations...\\n  ignoredSections: ['Main menu', 'Footer', 'Sidebar', 'Advertising'],\\n});\",\n          config_description: \"Configure from admin panel:\",\n          step_1: \"Access \\\"Settings\\\" → \\\"Content Analysis\\\"\",\n          step_2: \"Add CSS selectors or section names to ignore\",\n          step_3: \"Save changes to apply immediately\",\n          step_4: \"Assistant will update its understanding automatically\"\n        },\n        support: {\n          title: \"Support and Resources\",\n          description: \"Get help and resources to maximize your AIPPS experience\"\n        },\n        buttons: {\n          go_to_integrations: \"Go to integrations\",\n          login_to_manage: \"Log in to manage\",\n          manage_content: \"Manage content\",\n          create_account: \"Create account\",\n          create_forms: \"Create forms\",\n          create_account_forms: \"Create account for forms\",\n          configure_auth: \"Configure authentication\",\n          login: \"Log in\",\n          configure_sections: \"Configure sections\",\n          configure_assistant: \"Configure assistant\",\n          configure_advanced_forms: \"Configure advanced forms\",\n          create_account_advanced: \"Create advanced account\",\n          go_to_forms: \"Go to forms\",\n          login_to_manage_forms: \"Log in to manage forms\",\n          forms_guide: \"Forms guide\",\n          view_docs: \"View documentation\",\n          contact_support: \"Contact support\"\n        },\n        cta: {\n          forms_title: \"Ready to create your forms?\",\n          forms_description: \"Start capturing leads with our custom forms today.\"\n        }\n      }\n    }\n  }\n};\n\n// Debug de los recursos cargados\nconsole.log('🔍 I18N DEBUG - Manual resources loaded:', {\n  fr: {\n    pricing: Object.keys(resources.fr.translation.pricing),\n    language: Object.keys(resources.fr.translation.language),\n    getStartedPage: Object.keys(resources.fr.translation.getStartedPage)\n  },\n  es: {\n    pricing: Object.keys(resources.es.translation.pricing),\n    language: Object.keys(resources.es.translation.language),\n    getStartedPage: Object.keys(resources.es.translation.getStartedPage)\n  },\n  en: {\n    pricing: Object.keys(resources.en.translation.pricing),\n    language: Object.keys(resources.en.translation.language),\n    getStartedPage: Object.keys(resources.en.translation.getStartedPage)\n  }\n});\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: localStorage.getItem('i18nextLng') || 'es',\n    fallbackLng: 'en',\n    debug: false, // Reducir debug para limpiar consola\n    returnObjects: false,\n    \n    interpolation: {\n      escapeValue: false,\n    },\n\n    detection: {\n      order: ['localStorage', 'cookie', 'navigator'],\n      lookupLocalStorage: 'i18nextLng',\n      caches: ['localStorage', 'cookie'],\n    },\n    \n    react: {\n      useSuspense: false,\n    }\n  });\n\nexport default i18n;","size_bytes":133227},"client/src/i18n/translations.ts":{"content":"// Traducciones simplificadas sin duplicados\nexport const translations = {\n  fr: {\n    translation: {\n      // Navegación básica\n      documentation: \"Documentation\",\n      pricing: \"Tarification\", \n      get_started: \"Commencer\",\n      visitor: \"Visiteur\",\n      anonymous: \"Anonyme\",\n      registered_user: \"Utilisateur enregistré\",\n      visitors_helped: \"Visiteurs aidés\",\n\n      // Tiempo\n      weeks_ago_plural: \"il y a {{count}} semaines\",\n      weeks_ago: \"il y a {{count}} semaine\", \n      months_ago_plural: \"il y a {{count}} mois\",\n      months_ago: \"il y a {{count}} mois\",\n      days_ago_plural: \"il y a {{count}} jours\",\n      days_ago: \"il y a {{count}} jour\",\n      hours_ago_plural: \"il y a {{count}} heures\", \n      hours_ago: \"il y a {{count}} heure\",\n      minutes_ago_plural: \"il y a {{count}} minutes\",\n      minutes_ago: \"il y a {{count}} minute\",\n\n      // Dashboard básico\n      dashboard: \"Tableau de bord\",\n      conversations: \"Conversations\",\n      integrations: \"Intégrations\",\n      analytics: \"Analytiques\",\n      settings: \"Paramètres\",\n      logout: \"Déconnexion\",\n\n      // Estados\n      active: \"Actif\",\n      resolved: \"Résolu\",\n      loading: \"Chargement...\",\n      back: \"Retour\",\n      edit_integration: \"Modifier l'intégration\",\n      view_analytics: \"Voir les analytiques\",\n      new: \"Nouveau\",\n      messages: \"messages\",\n\n      // Conversaciones\n      conversations_for: \"Conversations pour\",\n      view_all_conversations_for_integration: \"Voir toutes les conversations pour cette intégration\",\n      search_conversations: \"Rechercher des conversations\",\n\n      // Sistema de límites por plan\n      upgrade: {\n        modal: {\n          title: \"Vous avez atteint votre limite de plan\"\n        },\n        progress: {\n          title: \"Utilisation actuelle :\",\n          unlimited: \"{{used}} utilisés\",\n          usage: \"{{used}} de {{limit}} utilisés\",\n          integrations: \"Vous avez atteint la limite maximale d'intégrations\",\n          forms: \"Vous avez atteint la limite maximale de formulaires\",\n          conversations: \"Vous avez atteint la limite maximale de conversations\"\n        },\n        integrations: {\n          message: \"Votre {{planName}} a atteint la limite d'intégrations.\",\n          description: \"Pour connecter plus de services et automatiser votre entreprise, vous devez mettre à jour votre plan.\"\n        },\n        forms: {\n          message: \"Votre {{planName}} a atteint la limite de formulaires.\",\n          description: \"Pour créer plus de formulaires personnalisés et capturer plus de prospects, mettez à jour votre plan.\"\n        },\n        conversations: {\n          message: \"Votre {{planName}} a atteint la limite de conversations.\",\n          description: \"Pour gérer plus de conversations avec vos clients, vous devez mettre à jour votre plan.\"\n        },\n        general: {\n          message: \"Votre {{planName}} a atteint ses limites.\",\n          description: \"Pour accéder à plus de fonctionnalités et développer votre entreprise, mettez à jour votre plan.\"\n        },\n        benefits: {\n          title: \"Avantages de la mise à jour :\",\n          startup: {\n            conversations: \"2 000 conversations/mois\",\n            forms: \"5 formulaires personnalisables\",\n            widgets: \"Widgets bulle + plein écran\",\n            sites: \"Jusqu'à 3 sites web\",\n            analytics: \"Analyses avancées\"\n          },\n          professional: {\n            conversations: \"10 000 conversations/mois\",\n            forms: \"Formulaires illimités\",\n            sites: \"Sites web illimités\",\n            automation: \"Automatisations de base\",\n            crm: \"Intégration CRM\"\n          },\n          enterprise: {\n            conversations: \"Conversations illimitées\",\n            all: \"Tout inclus\",\n            ai: \"Automatisations IA\",\n            support: \"Support dédié 24/7\",\n            manager: \"Gestionnaire de compte\"\n          },\n          general: {\n            integrations: \"Plus d'intégrations et de formulaires\",\n            analytics: \"Analyses et rapports avancés\",\n            support: \"Support prioritaire\",\n            customization: \"Personnalisation complète\"\n          }\n        },\n        button: {\n          primary: \"Voir les plans\",\n          secondary: \"Plus tard\"\n        }\n      }\n    }\n  },\n  es: {\n    translation: {\n      // Navegación básica\n      documentation: \"Documentación\",\n      pricing: \"Precios\",\n      get_started: \"Comenzar\", \n      visitor: \"Visitante\",\n      anonymous: \"Anónimo\",\n      registered_user: \"Usuario Registrado\",\n      visitors_helped: \"Visitantes atendidos\",\n\n      // Tiempo\n      weeks_ago_plural: \"hace {{count}} semanas\",\n      weeks_ago: \"hace {{count}} semana\",\n      months_ago_plural: \"hace {{count}} meses\", \n      months_ago: \"hace {{count}} mes\",\n      days_ago_plural: \"hace {{count}} días\",\n      days_ago: \"hace {{count}} día\",\n      hours_ago_plural: \"hace {{count}} horas\",\n      hours_ago: \"hace {{count}} hora\",\n      minutes_ago_plural: \"hace {{count}} minutos\",\n      minutes_ago: \"hace {{count}} minuto\",\n\n      // Dashboard básico\n      dashboard: \"Panel de control\",\n      conversations: \"Conversaciones\", \n      integrations: \"Integraciones\",\n      analytics: \"Analíticas\",\n      settings: \"Configuración\",\n      logout: \"Cerrar sesión\",\n\n      // Estados\n      active: \"Activo\",\n      resolved: \"Resuelto\",\n      loading: \"Cargando...\",\n      back: \"Atrás\",\n      edit_integration: \"Editar integración\",\n      view_analytics: \"Ver analíticas\", \n      new: \"Nuevo\",\n      messages: \"mensajes\",\n\n      // Conversaciones\n      conversations_for: \"Conversaciones para\",\n      view_all_conversations_for_integration: \"Ver todas las conversaciones para esta integración\",\n      search_conversations: \"Buscar conversaciones\",\n\n      // Sistema de límites por plan\n      upgrade: {\n        modal: {\n          title: \"Has alcanzado el límite de tu plan\"\n        },\n        progress: {\n          title: \"Uso actual:\",\n          unlimited: \"{{used}} utilizados\",\n          usage: \"{{used}} de {{limit}} utilizados\",\n          integrations: \"Has alcanzado el límite máximo de integraciones\",\n          forms: \"Has alcanzado el límite máximo de formularios\",\n          conversations: \"Has alcanzado el límite máximo de conversaciones\"\n        },\n        integrations: {\n          message: \"Tu {{planName}} ha alcanzado el límite de integraciones.\",\n          description: \"Para conectar más servicios y automatizar tu negocio, necesitas actualizar tu plan.\"\n        },\n        forms: {\n          message: \"Tu {{planName}} ha alcanzado el límite de formularios.\",\n          description: \"Para crear más formularios personalizados y capturar más leads, actualiza tu plan.\"\n        },\n        conversations: {\n          message: \"Tu {{planName}} ha alcanzado el límite de conversaciones.\",\n          description: \"Para manejar más conversaciones con tus clientes, necesitas actualizar tu plan.\"\n        },\n        general: {\n          message: \"Tu {{planName}} ha alcanzado sus límites.\",\n          description: \"Para acceder a más funcionalidades y expandir tu negocio, actualiza tu plan.\"\n        },\n        benefits: {\n          title: \"Beneficios de actualizar:\",\n          startup: {\n            conversations: \"2,000 conversaciones/mes\",\n            forms: \"5 formularios personalizables\",\n            widgets: \"Widgets burbuja + pantalla completa\",\n            sites: \"Hasta 3 sitios web\",\n            analytics: \"Analíticas avanzadas\"\n          },\n          professional: {\n            conversations: \"10,000 conversaciones/mes\",\n            forms: \"Formularios ilimitados\",\n            sites: \"Sitios web ilimitados\",\n            automation: \"Automatizaciones básicas\",\n            crm: \"Integración CRM\"\n          },\n          enterprise: {\n            conversations: \"Conversaciones ilimitadas\",\n            all: \"Todo incluido\",\n            ai: \"Automatizaciones IA\",\n            support: \"Soporte dedicado 24/7\",\n            manager: \"Gerente de cuenta\"\n          },\n          general: {\n            integrations: \"Más integraciones y formularios\",\n            analytics: \"Analíticas y reportes avanzados\",\n            support: \"Soporte prioritario\",\n            customization: \"Personalización completa\"\n          }\n        },\n        button: {\n          primary: \"Ver planes\",\n          secondary: \"Más tarde\"\n        }\n      }\n    }\n  },\n  en: {\n    translation: {\n      // Navegación básica\n      documentation: \"Documentation\",\n      pricing: \"Pricing\",\n      get_started: \"Get Started\",\n      visitor: \"Visitor\", \n      anonymous: \"Anonymous\",\n      registered_user: \"Registered User\",\n      visitors_helped: \"Visitors helped\",\n\n      // Tiempo\n      weeks_ago_plural: \"{{count}} weeks ago\",\n      weeks_ago: \"{{count}} week ago\",\n      months_ago_plural: \"{{count}} months ago\",\n      months_ago: \"{{count}} month ago\", \n      days_ago_plural: \"{{count}} days ago\",\n      days_ago: \"{{count}} day ago\",\n      hours_ago_plural: \"{{count}} hours ago\",\n      hours_ago: \"{{count}} hour ago\",\n      minutes_ago_plural: \"{{count}} minutes ago\",\n      minutes_ago: \"{{count}} minute ago\",\n\n      // Dashboard básico\n      dashboard: \"Dashboard\",\n      conversations: \"Conversations\",\n      integrations: \"Integrations\", \n      analytics: \"Analytics\",\n      settings: \"Settings\",\n      logout: \"Logout\",\n\n      // Estados\n      active: \"Active\",\n      resolved: \"Resolved\",\n      loading: \"Loading...\",\n      back: \"Back\",\n      edit_integration: \"Edit integration\",\n      view_analytics: \"View analytics\",\n      new: \"New\", \n      messages: \"messages\",\n\n      // Conversaciones\n      conversations_for: \"Conversations for\",\n      view_all_conversations_for_integration: \"View all conversations for this integration\",\n      search_conversations: \"Search conversations\",\n\n      // Sistema de límites por plan\n      upgrade: {\n        modal: {\n          title: \"You have reached your plan limit\"\n        },\n        progress: {\n          title: \"Current usage:\",\n          unlimited: \"{{used}} used\",\n          usage: \"{{used}} of {{limit}} used\",\n          integrations: \"You have reached the maximum integration limit\",\n          forms: \"You have reached the maximum form limit\", \n          conversations: \"You have reached the maximum conversation limit\"\n        },\n        integrations: {\n          message: \"Your {{planName}} has reached the integration limit.\",\n          description: \"To connect more services and automate your business, you need to upgrade your plan.\"\n        },\n        forms: {\n          message: \"Your {{planName}} has reached the form limit.\",\n          description: \"To create more custom forms and capture more leads, upgrade your plan.\"\n        },\n        conversations: {\n          message: \"Your {{planName}} has reached the conversation limit.\",\n          description: \"To handle more conversations with your customers, you need to upgrade your plan.\"\n        },\n        general: {\n          message: \"Your {{planName}} has reached its limits.\",\n          description: \"To access more features and grow your business, upgrade your plan.\"\n        },\n        benefits: {\n          title: \"Benefits of upgrading:\",\n          startup: {\n            conversations: \"2,000 conversations/month\",\n            forms: \"5 customizable forms\",\n            widgets: \"Bubble + fullscreen widgets\",\n            sites: \"Up to 3 websites\",\n            analytics: \"Advanced analytics\"\n          },\n          professional: {\n            conversations: \"10,000 conversations/month\",\n            forms: \"Unlimited forms\",\n            sites: \"Unlimited websites\",\n            automation: \"Basic automations\",\n            crm: \"CRM integration\"\n          },\n          enterprise: {\n            conversations: \"Unlimited conversations\",\n            all: \"Everything included\",\n            ai: \"AI automations\",\n            support: \"24/7 dedicated support\",\n            manager: \"Account manager\"\n          },\n          general: {\n            integrations: \"More integrations and forms\",\n            analytics: \"Advanced analytics and reports\",\n            support: \"Priority support\",\n            customization: \"Complete customization\"\n          }\n        },\n        button: {\n          primary: \"View plans\",\n          secondary: \"Later\"\n        }\n      }\n    }\n  }\n};\n","size_bytes":12427},"client/src/layouts/dashboard-layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  User,\n  Settings,\n  BellRing,\n  LogOut,\n  ChevronDown,\n  Inbox,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/context/auth-context\";\n\ninterface DashboardLayoutProps {\n  children: ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const { t } = useTranslation();\n  const [, navigate] = useLocation();\n  const { logout, user } = useAuth();\n  \n  // Obtener perfil del usuario para mostrar nombre y avatar\n  const { data: profile } = useQuery({\n    queryKey: [\"/api/profile\"],\n    enabled: !!user,\n  });\n\n  const handleLogout = () => {\n    logout();\n    navigate(\"/login\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50 dark:bg-gray-950\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-10 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800\">\n        <div className=\"container flex items-center justify-between h-16\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              className=\"font-semibold text-lg\"\n              onClick={() => navigate(\"/dashboard\")}\n            >\n              AIPI\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                  <BellRing className=\"h-5 w-5\" />\n                  <span className=\"absolute top-1 right-1 w-2 h-2 bg-primary rounded-full\"></span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuLabel>{t('notifications')}</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <div className=\"max-h-[300px] overflow-auto\">\n                  <div className=\"p-4 text-sm text-center text-gray-500 dark:text-gray-400\">\n                    {t('no_new_notifications')}\n                  </div>\n                </div>\n              </DropdownMenuContent>\n            </DropdownMenu>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <User className=\"h-4 w-4 text-primary\" />\n                  </div>\n                  <div className=\"flex flex-col items-start\">\n                    <span className=\"text-sm font-medium\">\n                      {profile?.username || user?.username || t('user')}\n                    </span>\n                  </div>\n                  <ChevronDown className=\"h-4 w-4 text-gray-500 dark:text-gray-400\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuLabel>{t('account')}</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => navigate(\"/dashboard?tab=settings\")}>\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>{t('settings')}</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate(\"/dashboard?tab=subscription\")}>\n                  <Inbox className=\"mr-2 h-4 w-4\" />\n                  <span>{t('subscription')}</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleLogout}>\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>{t('logout')}</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </header>\n      \n      {/* Main content */}\n      <main className=\"flex-1 bg-gray-50 dark:bg-gray-950\">\n        {children}\n      </main>\n      \n      {/* Footer */}\n      <footer className=\"bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800 py-6\">\n        <div className=\"container\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                © 2025 AIPI.\n              </span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"link\"\n                size=\"sm\"\n                className=\"text-gray-500 dark:text-gray-400\"\n                onClick={() => navigate(\"/docs\")}\n              >\n                {t('documentation')}\n              </Button>\n              <Button\n                variant=\"link\"\n                size=\"sm\"\n                className=\"text-gray-500 dark:text-gray-400\"\n                onClick={() => navigate(\"/pricing\")}\n              >\n                {t('pricing')}\n              </Button>\n              <Button\n                variant=\"link\"\n                size=\"sm\"\n                className=\"text-gray-500 dark:text-gray-400\"\n                onClick={() => navigate(\"/get-started\")}\n              >\n                {t('get_started')}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":5748},"client/src/lib/openai.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\ninterface ChatCompletionRequest {\n  messages: Array<{\n    role: string;\n    content: string;\n  }>;\n  context?: string;\n  language?: string;\n}\n\ninterface ChatCompletionResponse {\n  message: {\n    role: string;\n    content: string;\n  };\n}\n\nexport const generateChatCompletion = async (\n  messages: Array<{ role: string; content: string }>,\n  context?: string,\n  language?: string\n): Promise<string> => {\n  try {\n    const response = await apiRequest(\"POST\", \"/api/openai/completion\", {\n      messages,\n      context,\n      language\n    });\n\n    const result: ChatCompletionResponse = await response.json();\n    return result.message.content;\n  } catch (error) {\n    console.error(\"Error generating chat completion:\", error);\n    throw error;\n  }\n};\n\nexport const analyzeSentiment = async (text: string): Promise<{\n  rating: number;\n  confidence: number;\n}> => {\n  try {\n    const response = await apiRequest(\"POST\", \"/api/openai/sentiment\", {\n      text\n    });\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error analyzing sentiment:\", error);\n    throw error;\n  }\n};\n\nexport const summarizeText = async (text: string): Promise<string> => {\n  try {\n    const response = await apiRequest(\"POST\", \"/api/openai/summarize\", {\n      text\n    });\n\n    const result = await response.json();\n    return result.summary;\n  } catch (error) {\n    console.error(\"Error summarizing text:\", error);\n    throw error;\n  }\n};\n","size_bytes":1480},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Configurar los headers básicos\n  const headers: Record<string, string> = data \n    ? { \"Content-Type\": \"application/json\" } \n    : {};\n  \n  // Añadir token de autenticación si existe en localStorage\n  const authToken = localStorage.getItem('auth_token');\n  if (authToken) {\n    headers['Authorization'] = `Bearer ${authToken}`;\n  }\n  \n  // Configurar URL base para producción\nconst baseUrl = import.meta.env.VITE_API_BASE_URL || '';\nconst fullUrl = url.startsWith('http') ? url : `${baseUrl}${url}`;\n\nconst res = await fetch(fullUrl, {\n    method,\n    headers: headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\", // Mantener cookies como respaldo\n  });\n\n  await throwIfResNotOk(res);\n  \n  // Si es una respuesta de login, extraer y guardar el token\n  if (url.includes('/auth/login') && res.ok) {\n    const setCookieHeader = res.headers.get('Set-Cookie');\n    if (setCookieHeader) {\n      const tokenMatch = setCookieHeader.match(/auth_token=([^;]+)/);\n      if (tokenMatch && tokenMatch[1]) {\n        localStorage.setItem('auth_token', tokenMatch[1]);\n        console.log(\"Token guardado en localStorage desde apiRequest\");\n      }\n    }\n  }\n  \n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    console.log(\"Ejecutando consulta para:\", queryKey[0]);\n    // Obtener el token del localStorage como respaldo\n    const authToken = localStorage.getItem('auth_token');\n    \n    const headers: Record<string, string> = {};\n    if (authToken) {\n      headers['Authorization'] = `Bearer ${authToken}`;\n    }\n    \n    // Configurar URL base para producción\nconst baseUrl = import.meta.env.VITE_API_BASE_URL || '';\nconst fullUrl = (queryKey[0] as string).startsWith('http') ? queryKey[0] as string : `${baseUrl}${queryKey[0]}`;\n\nconst res = await fetch(fullUrl, {\n      credentials: \"include\",\n      headers: headers,\n    });\n    \n    console.log(\"Respuesta:\", res.status, res.statusText);\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2938},"client/src/lib/upgrade-interceptor.ts":{"content":"// Global error interceptor for plan limit errors\nimport { useEffect } from 'react';\nimport { useUpgradeModal } from '@/hooks/use-upgrade-modal';\n\nlet globalUpgradeHandler: ((error: Error) => void) | null = null;\n\nexport const setGlobalUpgradeHandler = (handler: (error: Error) => void) => {\n  globalUpgradeHandler = handler;\n};\n\nexport const handleGlobalPlanLimitError = (error: Error) => {\n  if (error.message && error.message.includes(\"límite\") && globalUpgradeHandler) {\n    globalUpgradeHandler(error);\n  }\n};\n\n// Hook to initialize global error handling\nexport const useGlobalUpgradeInterceptor = () => {\n  const upgradeModal = useUpgradeModal();\n  \n  useEffect(() => {\n    setGlobalUpgradeHandler((error: Error) => {\n      upgradeModal.handlePlanLimitError(error.message);\n    });\n    \n    return () => {\n      setGlobalUpgradeHandler(() => {});\n    };\n  }, [upgradeModal]);\n};","size_bytes":885},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Target, Globe, Zap } from \"lucide-react\";\n\nexport default function About() {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"py-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n              {t('about.title')}\n            </h1>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              {t('about.subtitle')}\n            </p>\n          </div>\n        </section>\n\n        <section className=\"py-16\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              <Card className=\"text-center\">\n                <CardHeader>\n                  <Users className=\"h-12 w-12 text-primary-600 mx-auto mb-4\" />\n                  <CardTitle>{t('about.mission.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription>\n                    {t('about.mission.description')}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardHeader>\n                  <Target className=\"h-12 w-12 text-primary-600 mx-auto mb-4\" />\n                  <CardTitle>{t('about.vision.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription>\n                    {t('about.vision.description')}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardHeader>\n                  <Globe className=\"h-12 w-12 text-primary-600 mx-auto mb-4\" />\n                  <CardTitle>{t('about.global.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription>\n                    {t('about.global.description')}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardHeader>\n                  <Zap className=\"h-12 w-12 text-primary-600 mx-auto mb-4\" />\n                  <CardTitle>{t('about.innovation.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription>\n                    {t('about.innovation.description')}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"mt-16 text-center\">\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8\">\n                {t('about.story.title')}\n              </h2>\n              <div className=\"max-w-4xl mx-auto text-lg text-gray-700 dark:text-gray-300 space-y-6\">\n                <p>{t('about.story.paragraph1')}</p>\n                <p>{t('about.story.paragraph2')}</p>\n                <p>{t('about.story.paragraph3')}</p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":3547},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from \"react-i18next\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue, SelectLabel } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { PlusCircle, Trash, RefreshCw } from \"lucide-react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport {\n  BarChart,\n  Users,\n  MessageSquare,\n  UserPlus,\n  Settings,\n  Database,\n  AlertTriangle,\n  Search,\n  Edit,\n  User,\n  CreditCard,\n  Percent,\n  TagIcon,\n  Copy,\n  Package\n} from \"lucide-react\";\n\n// Interfaces\ninterface AdminStats {\n  users: {\n    total_users: number;\n    new_users_last_7_days: number;\n  };\n  conversations: {\n    total_conversations: number;\n    new_conversations_last_7_days: number;\n    resolved_conversations: number;\n    avg_duration: number;\n  };\n  messages: {\n    total_messages: number;\n    assistant_messages: number;\n    user_messages: number;\n    new_messages_last_7_days: number;\n  };\n  subscriptions: {\n    total_subscriptions: number;\n    free_subscriptions: number;\n    basic_subscriptions: number;\n    professional_subscriptions: number;\n    enterprise_subscriptions: number;\n    active_subscriptions: number;\n  };\n  tokens: {\n    estimated_tokens_used: number;\n    estimated_cost_usd: number;\n  };\n  limits: {\n    users_near_limit: number;\n    users_over_limit: number;\n  };\n  discount_codes?: {\n    total_codes: number;\n    active_codes: number;\n  };\n}\n\ninterface UserInfo {\n  id: number;\n  username: string;\n  email: string;\n  full_name: string;\n  created_at: string;\n  api_key: string;\n  stripe_customer_id: string | null;\n  stripe_subscription_id: string | null;\n}\n\ninterface UserDetails {\n  user: UserInfo;\n  subscriptions: Array<{\n    id: number;\n    tier: string;\n    status: string;\n    interactions_limit: number;\n    interactions_used: number;\n    created_at: string;\n    start_date: string;\n    end_date: string | null;\n  }>;\n  integrations: Array<{\n    id: number;\n    name: string;\n    url: string;\n    theme_color: string;\n    position: string;\n    active: boolean;\n    api_key: string;\n    visitor_count: number;\n    created_at: string;\n    bot_behavior: string | null;\n    widget_type: string | null;\n  }>;\n  recentConversations: Array<{\n    id: number;\n    integration_id: number;\n    visitor_id: string;\n    resolved: boolean;\n    duration: number;\n    created_at: string;\n    updated_at: string;\n    integration_name: string;\n  }>;\n  usage: {\n    total_conversations: number;\n    total_messages: number;\n    resolved_conversations: number;\n    assistant_messages: number;\n    user_messages: number;\n    estimated_tokens: number;\n  };\n}\n\ninterface UserOverLimit {\n  id: number;\n  username: string;\n  email: string;\n  full_name: string;\n  tier: string;\n  interactions_limit: number;\n  interactions_used: number;\n  end_date: string | null;\n  status: string;\n  usage_percentage: number;\n}\n\ninterface PricingPlan {\n  id: number;\n  name: string;\n  description: string;\n  tier: string;\n  interactionsLimit: number;\n  planId: string;\n  price: number;\n  priceDisplay: string;\n  currency: string;\n  billingPeriod: string;\n  features: string[];\n  popular: boolean;\n  available: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst formatDate = (dateString: string) => {\n  if (!dateString) return 'N/A';\n  return new Date(dateString).toLocaleDateString('es-ES', {\n    year: 'numeric', \n    month: 'short', \n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\nexport default function AdminPanel() {\n  const { user, refreshAuth } = useAuth();\n  const { toast } = useToast();\n  const [location, navigate] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const { t } = useTranslation();\n  const [selectedUser, setSelectedUser] = useState<number | null>(null);\n  const [userSearch, setUserSearch] = useState(\"\");\n  const [usersOverLimit, setUsersOverLimit] = useState<UserOverLimit[]>([]);\n  const [authError, setAuthError] = useState(false);\n  const [planSortOrder, setPlanSortOrder] = useState<\"price-asc\" | \"price-desc\" | \"name-asc\" | \"name-desc\" | \"tier-asc\" | \"tier-desc\">(\"price-asc\");\n  \n  // Modals\n  const [userDetailsModal, setUserDetailsModal] = useState(false);\n  const [createUserModal, setCreateUserModal] = useState(false);\n  const [editUserModal, setEditUserModal] = useState(false);\n  const [subscriptionModal, setSubscriptionModal] = useState(false);\n  const [discountCodeModal, setDiscountCodeModal] = useState(false);\n  const [editDiscountCodeModal, setEditDiscountCodeModal] = useState(false);\n  const [selectedDiscountCode, setSelectedDiscountCode] = useState<any>(null);\n  const [pricingPlanModal, setPricingPlanModal] = useState(false);\n  const [editPricingPlanModal, setEditPricingPlanModal] = useState(false);\n  const [selectedPricingPlan, setSelectedPricingPlan] = useState<PricingPlan | null>(null);\n  \n  // Form states\n  const [newUser, setNewUser] = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    fullName: \"\",\n    tier: \"free\"\n  });\n  \n  const [editUserData, setEditUserData] = useState({\n    id: 0,\n    username: \"\",\n    email: \"\",\n    fullName: \"\",\n    password: \"\"\n  });\n  \n  const [editSubscriptionData, setEditSubscriptionData] = useState({\n    userId: 0,\n    username: \"\",\n    tier: \"\",\n    status: \"active\",\n    interactionsLimit: 0,\n    endDate: \"\"\n  });\n  \n  const [newDiscountCode, setNewDiscountCode] = useState({\n    name: \"\",\n    discountPercentage: 10,\n    applicableTier: \"all\",\n    expiresAt: \"\",\n    usageLimit: 0,\n    isActive: true\n  });\n  \n  const [editDiscountCodeData, setEditDiscountCodeData] = useState({\n    id: 0,\n    name: \"\",\n    discountPercentage: 0,\n    applicableTier: \"all\",\n    expiresAt: \"\",\n    usageLimit: 0,\n    isActive: true\n  });\n  \n  const [newPricingPlan, setNewPricingPlan] = useState({\n    name: \"\",\n    description: \"\",\n    tier: \"free\",\n    interactionsLimit: 20,\n    planId: \"\",\n    price: 0,\n    priceDisplay: \"$0 CAD\",\n    currency: \"CAD\",\n    billingPeriod: \"monthly\",\n    features: [] as string[],\n    popular: false,\n    available: true\n  });\n  \n  const [editPricingPlanData, setEditPricingPlanData] = useState({\n    id: 0,\n    name: \"\",\n    description: \"\",\n    tier: \"\",\n    interactionsLimit: 0,\n    planId: \"\",\n    price: 0,\n    priceDisplay: \"\",\n    currency: \"CAD\",\n    billingPeriod: \"monthly\",\n    features: [] as string[],\n    popular: false,\n    available: true\n  });\n  \n  // Query para obtener códigos de descuento\n  const { data: discountCodes, isLoading: isLoadingDiscountCodes, refetch: refetchDiscountCodes } = useQuery({\n    queryKey: [\"/api/discount-codes\"],\n    enabled: !!user && user.username === 'admin' && activeTab === \"discount-codes\",\n  });\n  \n  // Query para obtener planes de precios\n  const { data: pricingPlans, isLoading: isLoadingPricingPlans, refetch: refetchPricingPlans } = useQuery<PricingPlan[]>({\n    queryKey: [\"/api/admin/pricing-plans\"],\n    enabled: !!user && user.username === 'admin' && activeTab === \"pricing-plans\",\n  });\n\n  // Crear un nuevo código de descuento\n  const handleCreateDiscountCode = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newDiscountCode.name || !newDiscountCode.discountPercentage) {\n      toast({\n        title: \"Error\",\n        description: \"El nombre y el porcentaje de descuento son obligatorios\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      await apiRequest(\"POST\", \"/api/discount-codes\", newDiscountCode);\n      \n      toast({\n        title: \"Código creado\",\n        description: \"El código de descuento ha sido creado exitosamente\"\n      });\n      \n      // Cerrar modal y refrescar datos\n      setDiscountCodeModal(false);\n      setNewDiscountCode({\n        name: \"\",\n        discountPercentage: 10,\n        applicableTier: \"all\",\n        expiresAt: \"\",\n        usageLimit: 0,\n        isActive: true\n      });\n      \n      // Refrescar lista de códigos\n      refetchDiscountCodes();\n      refetchStats();\n    } catch (error) {\n      console.error(\"Error creating discount code:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear el código de descuento. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n\n\n  // Verificar si el usuario es administrador e implementar verificación mejorada de autenticación\n  useEffect(() => {\n    const checkAdminAuth = async () => {\n      console.log(\"Verificando autenticación para panel de administración...\");\n      // Primero verificar si hay sesión activa usando refreshAuth\n      const isAuthenticated = await refreshAuth();\n      \n      if (!isAuthenticated || !user) {\n        console.log(\"No hay sesión activa. Redirigiendo al login...\");\n        setAuthError(true);\n        toast({\n          title: \"Sesión no iniciada\",\n          description: \"Debes iniciar sesión como administrador para acceder al panel\",\n          variant: \"destructive\"\n        });\n        // Redirigir al inicio de sesión después de un breve retraso\n        setTimeout(() => {\n          navigate(\"/login\");\n        }, 1500);\n        return;\n      }\n      \n      // Verificar si es administrador\n      if (user.username !== 'admin') {\n        console.log(\"Acceso denegado al panel de administración para:\", user.username);\n        setAuthError(true);\n        toast({\n          title: \"Acceso restringido\",\n          description: \"No tienes permisos para acceder al panel de administración\",\n          variant: \"destructive\"\n        });\n        // Redirigir al dashboard\n        setTimeout(() => {\n          navigate(\"/dashboard\");\n        }, 1500);\n      } else {\n        console.log(\"Acceso autorizado al panel de administración para:\", user.username);\n        setAuthError(false);\n      }\n    };\n    \n    checkAdminAuth();\n    \n    // REMOVED: Periodic admin auth check to prevent 429 rate limiting\n    // Authentication is handled by AuthContext with appropriate throttling\n    \n    return () => {}; // No cleanup needed\n  }, []); // Empty deps - solo ejecutar UNA VEZ al montar, evita loop infinito\n  \n  // Query para obtener estadísticas de administrador\n  const { data: adminStats, isLoading: isLoadingStats, refetch: refetchStats } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: !!user && user.username === 'admin',\n    // Removed refetchInterval to prevent 429 errors - manual refresh only\n  });\n  \n  // Query para obtener lista de usuarios\n  const { data: users, isLoading: isLoadingUsers, refetch: refetchUsers } = useQuery<UserInfo[]>({\n    queryKey: [\"/api/admin/users\"],\n    enabled: !!user && user.username === 'admin' && activeTab === \"users\",\n  });\n  \n  // Query para obtener detalles de un usuario específico\n  const { data: userDetails, isLoading: isLoadingUserDetails, refetch: refetchUserDetails } = useQuery<UserDetails>({\n    queryKey: [\"/api/admin/users\", selectedUser],\n    enabled: !!selectedUser,\n  });\n  \n  // Query para obtener usuarios cercanos al límite\n  const { data: usersNearLimit, isLoading: isLoadingUsersNearLimit } = useQuery<UserOverLimit[]>({\n    queryKey: [\"/api/admin/users/near-limit\"],\n    enabled: !!user && user.username === 'admin' && activeTab === \"limits\",\n  });\n  \n  // Actualizar estado cuando los datos cambien\n  useEffect(() => {\n    if (usersNearLimit) {\n      setUsersOverLimit(usersNearLimit);\n    }\n  }, [usersNearLimit]);\n  \n  // Crear un nuevo usuario\n  const handleCreateUser = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newUser.username || !newUser.password || !newUser.email) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor completa todos los campos requeridos\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      await apiRequest(\"POST\", \"/api/admin/users\", newUser);\n      \n      toast({\n        title: \"Usuario creado\",\n        description: \"El usuario ha sido creado exitosamente\"\n      });\n      \n      // Cerrar modal y refrescar datos\n      setCreateUserModal(false);\n      setNewUser({\n        username: \"\",\n        password: \"\",\n        email: \"\",\n        fullName: \"\",\n        tier: \"free\"\n      });\n      \n      // Refrescar lista de usuarios sin recargar la página\n      refetchUsers();\n      refetchStats();\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear el usuario. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  // Editar un usuario existente\n  const handleEditUser = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Al menos un campo debe estar completado\n    if (!editUserData.username && !editUserData.email && !editUserData.fullName && !editUserData.password) {\n      toast({\n        title: \"Error\",\n        description: \"Debes modificar al menos un campo\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      // Construir objeto con solo los campos que tienen valor\n      const updateData: any = {};\n      if (editUserData.username) updateData.username = editUserData.username;\n      if (editUserData.email) updateData.email = editUserData.email;\n      if (editUserData.fullName) updateData.fullName = editUserData.fullName;\n      if (editUserData.password) updateData.password = editUserData.password;\n      \n      await apiRequest(\"PATCH\", `/api/admin/users/${editUserData.id}`, updateData);\n      \n      toast({\n        title: \"Usuario actualizado\",\n        description: \"El usuario ha sido actualizado exitosamente\"\n      });\n      \n      // Cerrar modal y refrescar datos\n      setEditUserModal(false);\n      \n      // Refrescar detalles del usuario si está seleccionado\n      if (selectedUser === editUserData.id) {\n        setUserDetailsModal(true);\n      }\n      \n      // Refrescar lista de usuarios\n      refetchUsers();\n      refetchStats();\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el usuario. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  // Editar suscripción de un usuario\n  const handleEditSubscription = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const updateData: any = {};\n      if (editSubscriptionData.tier) updateData.tier = editSubscriptionData.tier;\n      if (editSubscriptionData.status) updateData.status = editSubscriptionData.status;\n      \n      // Siempre incluir el interactionsLimit, incluso si es 0\n      updateData.interactionsLimit = parseInt(editSubscriptionData.interactionsLimit.toString());\n      \n      if (editSubscriptionData.endDate) updateData.endDate = editSubscriptionData.endDate;\n      \n      await apiRequest(\n        \"PATCH\", \n        `/api/admin/users/${editSubscriptionData.userId}/subscription`, \n        updateData\n      );\n      \n      toast({\n        title: \"Suscripción actualizada\",\n        description: \"La suscripción ha sido actualizada exitosamente\"\n      });\n      \n      // Cerrar modal y refrescar datos\n      setSubscriptionModal(false);\n      \n      // Refrescar datos sin recargar la página\n      refetchUsers();\n      refetchStats();\n      \n      // Si hay un usuario seleccionado, refrescar sus detalles\n      if (selectedUser === editSubscriptionData.userId) {\n        refetchUserDetails();\n        setUserDetailsModal(true);\n      }\n    } catch (error) {\n      console.error(\"Error updating subscription:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar la suscripción. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  // Ver detalles de un usuario\n  const handleViewUserDetails = (userId: number) => {\n    setSelectedUser(userId);\n    setUserDetailsModal(true);\n  };\n  \n  // Preparar la edición de un usuario\n  const handlePrepareEditUser = (user: UserInfo) => {\n    setEditUserData({\n      id: user.id,\n      username: user.username || \"\",\n      email: user.email || \"\",\n      fullName: user.full_name || \"\",\n      password: \"\"\n    });\n    setEditUserModal(true);\n  };\n  \n  // Preparar la edición de una suscripción\n  const handlePrepareEditSubscription = (userId: number, username: string = \"\", subscription?: UserDetails['subscriptions'][0]) => {\n    setEditSubscriptionData({\n      userId,\n      username,\n      tier: subscription?.tier || \"free\",\n      status: subscription?.status || \"active\",\n      interactionsLimit: subscription?.interactions_limit || 0,\n      endDate: subscription?.end_date ? new Date(subscription.end_date).toISOString().split('T')[0] : \"\"\n    });\n    setSubscriptionModal(true);\n  };\n  \n  // Preparar la edición de un código de descuento\n  const handlePrepareEditDiscountCode = (code: any) => {\n    console.log(\"Preparing edit for discount code:\", code);\n    setEditDiscountCodeData({\n      id: code.id,\n      name: code.name,\n      discountPercentage: code.discountPercentage,\n      applicableTier: code.applicableTier,\n      expiresAt: code.expiresAt ? new Date(code.expiresAt).toISOString().split('T')[0] : \"\",\n      usageLimit: code.usageLimit || 0,\n      isActive: code.isActive\n    });\n    setEditDiscountCodeModal(true);\n  };\n  \n  // Editar código de descuento\n  const handleEditDiscountCode = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!editDiscountCodeData.name || !editDiscountCodeData.discountPercentage) {\n      toast({\n        title: \"Error\",\n        description: \"El nombre y el porcentaje de descuento son obligatorios\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      const updateData: any = {\n        name: editDiscountCodeData.name,\n        discountPercentage: editDiscountCodeData.discountPercentage,\n        applicableTier: editDiscountCodeData.applicableTier,\n        isActive: editDiscountCodeData.isActive\n      };\n      \n      if (editDiscountCodeData.expiresAt) {\n        updateData.expiresAt = editDiscountCodeData.expiresAt;\n      }\n      \n      if (editDiscountCodeData.usageLimit) {\n        updateData.usageLimit = parseInt(editDiscountCodeData.usageLimit.toString());\n      }\n      \n      await apiRequest(\"PATCH\", `/api/discount-codes/${editDiscountCodeData.id}`, updateData);\n      \n      toast({\n        title: \"Código actualizado\",\n        description: \"El código de descuento ha sido actualizado exitosamente\"\n      });\n      \n      // Cerrar modal y refrescar datos\n      setEditDiscountCodeModal(false);\n      \n      // Refrescar lista de códigos\n      refetchDiscountCodes();\n      refetchStats();\n    } catch (error) {\n      console.error(\"Error updating discount code:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el código de descuento. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  // Preparar la edición de un plan de precios\n  const handlePrepareEditPricingPlan = (plan: PricingPlan) => {\n    setEditPricingPlanData({\n      id: plan.id,\n      name: plan.name,\n      description: plan.description,\n      tier: plan.tier,\n      interactionsLimit: plan.interactionsLimit,\n      planId: plan.planId,\n      price: plan.price,\n      priceDisplay: plan.priceDisplay,\n      currency: plan.currency,\n      billingPeriod: plan.billingPeriod,\n      features: Array.isArray(plan.features) ? plan.features : [],\n      popular: !!plan.popular,\n      available: !!plan.available\n    });\n    setEditPricingPlanModal(true);\n  };\n  \n  // Crear un nuevo plan de precios\n  // Sincronizar todos los planes con Stripe\n  const handleSyncPlansWithStripe = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/admin/pricing-plans/sync-with-stripe\", {});\n      const result = await response.json();\n      \n      toast({\n        title: \"Planes sincronizados\",\n        description: result.message || `${result.plans?.length || 0} planes sincronizados con Stripe`\n      });\n      \n      // Refrescar lista de planes\n      refetchPricingPlans();\n    } catch (error) {\n      console.error(\"Error sincronizando planes con Stripe:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudieron sincronizar los planes con Stripe. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  const handleCreatePricingPlan = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newPricingPlan.name || !newPricingPlan.description || !newPricingPlan.planId) {\n      toast({\n        title: \"Error\",\n        description: \"El nombre, la descripción y el ID del plan son obligatorios\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      // Asegurarse de que las características estén en formato correcto\n      let features = newPricingPlan.features;\n      if (typeof features === 'string') {\n        features = (features as string).split('\\n').filter(line => line.trim());\n      }\n      \n      await apiRequest(\"POST\", \"/api/admin/pricing-plans\", {\n        ...newPricingPlan,\n        features\n      });\n      \n      toast({\n        title: \"Plan creado\",\n        description: \"El plan de precios ha sido creado exitosamente\"\n      });\n      \n      // Cerrar modal y refrescar datos\n      setPricingPlanModal(false);\n      setNewPricingPlan({\n        name: \"\",\n        description: \"\",\n        tier: \"free\",\n        interactionsLimit: 20,\n        planId: \"\",\n        price: 0,\n        priceDisplay: \"$0 CAD\",\n        currency: \"CAD\",\n        billingPeriod: \"monthly\",\n        features: [],\n        popular: false,\n        available: true\n      });\n      \n      // Refrescar lista de planes\n      refetchPricingPlans();\n    } catch (error) {\n      console.error(\"Error creating pricing plan:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear el plan de precios. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  // Editar un plan de precios existente\n  const handleEditPricingPlan = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!editPricingPlanData.name || !editPricingPlanData.description || !editPricingPlanData.planId) {\n      toast({\n        title: \"Error\",\n        description: \"El nombre, la descripción y el ID del plan son obligatorios\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      // Asegurarse de que las características estén en formato correcto\n      let features = editPricingPlanData.features;\n      if (typeof features === 'string') {\n        features = (features as string).split('\\n').filter(line => line.trim());\n      }\n      \n      await apiRequest(\"PUT\", `/api/admin/pricing-plans/${editPricingPlanData.id}`, {\n        ...editPricingPlanData,\n        features\n      });\n      \n      toast({\n        title: \"Plan actualizado\",\n        description: \"El plan de precios ha sido actualizado exitosamente\"\n      });\n      \n      // Cerrar modal y refrescar datos\n      setEditPricingPlanModal(false);\n      \n      // Refrescar lista de planes\n      refetchPricingPlans();\n    } catch (error) {\n      console.error(\"Error updating pricing plan:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el plan de precios. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  // Eliminar un plan de precios\n  const handleDeletePricingPlan = async (id: number) => {\n    if (!window.confirm(\"¿Estás seguro de que deseas eliminar este plan de precios? Esta acción no se puede deshacer.\")) {\n      return;\n    }\n    \n    try {\n      await apiRequest(\"DELETE\", `/api/admin/pricing-plans/${id}`);\n      \n      toast({\n        title: \"Plan eliminado\",\n        description: \"El plan de precios ha sido eliminado exitosamente\"\n      });\n      \n      // Refrescar lista de planes\n      refetchPricingPlans();\n    } catch (error) {\n      console.error(\"Error deleting pricing plan:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el plan de precios. Por favor, intenta de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  // Filtrar usuarios por búsqueda\n  const filteredUsers = users \n    ? users.filter(user => \n        user.username.toLowerCase().includes(userSearch.toLowerCase()) ||\n        user.email.toLowerCase().includes(userSearch.toLowerCase()) ||\n        (user.full_name && user.full_name.toLowerCase().includes(userSearch.toLowerCase()))\n      )\n    : [];\n  \n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Error de autenticación */}\n          {authError && (\n            <Alert variant=\"destructive\" className=\"mb-6\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>Error de autenticación</AlertTitle>\n              <AlertDescription>\n                No tienes una sesión activa o no cuentas con permisos para acceder al panel de administración.\n                Serás redirigido en unos momentos.\n              </AlertDescription>\n            </Alert>\n          )}\n          \n          {/* Panel Header */}\n          <div className=\"mb-8 flex flex-wrap justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Panel de Administración</h1>\n              <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n                Gestión de usuarios, suscripciones y monitorización del sistema\n              </p>\n            </div>\n          </div>\n          \n          {/* Verificar si es administrador */}\n          {user && user.username === 'admin' ? (\n            <Tabs defaultValue=\"dashboard\" value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"mb-8\">\n                <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n                <TabsTrigger value=\"users\">Usuarios</TabsTrigger>\n                <TabsTrigger value=\"limits\">Límites</TabsTrigger>\n                <TabsTrigger value=\"discount-codes\">Códigos de Descuento</TabsTrigger>\n                <TabsTrigger value=\"pricing-plans\">Planes de Precios</TabsTrigger>\n              </TabsList>\n              \n              {/* Dashboard Tab */}\n              <TabsContent value=\"dashboard\">\n                {isLoadingStats ? (\n                  <div className=\"py-20 text-center\">\n                    <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    <p className=\"text-lg text-gray-600 dark:text-gray-400\">Cargando estadísticas...</p>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                      <Card>\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-lg flex items-center\">\n                            <Users className=\"mr-2 h-5 w-5 text-primary\" />\n                            Usuarios\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-3xl font-bold\">{adminStats?.users.total_users || 0}</div>\n                          <p className=\"text-sm text-gray-500 mt-1\">\n                            {adminStats?.users.new_users_last_7_days || 0} nuevos en los últimos 7 días\n                          </p>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card>\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-lg flex items-center\">\n                            <MessageSquare className=\"mr-2 h-5 w-5 text-indigo-500\" />\n                            Conversaciones\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-3xl font-bold\">{adminStats?.conversations.total_conversations || 0}</div>\n                          <p className=\"text-sm text-gray-500 mt-1\">\n                            {adminStats?.conversations.new_conversations_last_7_days || 0} nuevas en los últimos 7 días\n                          </p>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card>\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-lg flex items-center\">\n                            <Database className=\"mr-2 h-5 w-5 text-emerald-500\" />\n                            Tokens utilizados\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-3xl font-bold\">{adminStats?.tokens.estimated_tokens_used.toLocaleString() || 0}</div>\n                          <p className=\"text-sm text-gray-500 mt-1\">\n                            Coste estimado: ${adminStats?.tokens.estimated_cost_usd.toFixed(2) || '0.00'}\n                          </p>\n                        </CardContent>\n                      </Card>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Distribución de Suscripciones</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-4\">\n                            <div className=\"flex justify-between items-center\">\n                              <span>Free</span>\n                              <span className=\"font-medium\">{adminStats?.subscriptions.free_subscriptions || 0}</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden\">\n                              <div \n                                className=\"bg-gray-400 h-full rounded-full\" \n                                style={{ \n                                  width: `${adminStats ? (adminStats.subscriptions.free_subscriptions / adminStats.subscriptions.total_subscriptions * 100) : 0}%` \n                                }}\n                              />\n                            </div>\n                            \n                            <div className=\"flex justify-between items-center\">\n                              <span>Basic</span>\n                              <span className=\"font-medium\">{adminStats?.subscriptions.basic_subscriptions || 0}</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden\">\n                              <div \n                                className=\"bg-blue-400 h-full rounded-full\" \n                                style={{ \n                                  width: `${adminStats ? (adminStats.subscriptions.basic_subscriptions / adminStats.subscriptions.total_subscriptions * 100) : 0}%` \n                                }}\n                              />\n                            </div>\n                            \n                            <div className=\"flex justify-between items-center\">\n                              <span>Professional</span>\n                              <span className=\"font-medium\">{adminStats?.subscriptions.professional_subscriptions || 0}</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden\">\n                              <div \n                                className=\"bg-indigo-500 h-full rounded-full\" \n                                style={{ \n                                  width: `${adminStats ? (adminStats.subscriptions.professional_subscriptions / adminStats.subscriptions.total_subscriptions * 100) : 0}%` \n                                }}\n                              />\n                            </div>\n                            \n                            <div className=\"flex justify-between items-center\">\n                              <span>Enterprise</span>\n                              <span className=\"font-medium\">{adminStats?.subscriptions.enterprise_subscriptions || 0}</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden\">\n                              <div \n                                className=\"bg-purple-600 h-full rounded-full\" \n                                style={{ \n                                  width: `${adminStats ? (adminStats.subscriptions.enterprise_subscriptions / adminStats.subscriptions.total_subscriptions * 100) : 0}%` \n                                }}\n                              />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Estado del Sistema</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"space-y-1\">\n                                <p className=\"text-sm font-medium leading-none\">\n                                  Mensajes totales\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {adminStats?.messages.assistant_messages || 0} respuestas AI / {adminStats?.messages.user_messages || 0} usuarios\n                                </p>\n                              </div>\n                              <div className=\"text-2xl font-bold\">\n                                {adminStats?.messages.total_messages || 0}\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"space-y-1\">\n                                <p className=\"text-sm font-medium leading-none\">\n                                  Tasa de resolución\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {adminStats?.conversations.resolved_conversations || 0} resueltas\n                                </p>\n                              </div>\n                              <div className=\"text-2xl font-bold\">\n                                {adminStats && adminStats.conversations.total_conversations > 0 \n                                  ? ((adminStats.conversations.resolved_conversations / adminStats.conversations.total_conversations) * 100).toFixed(1) \n                                  : 0}%\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"space-y-1\">\n                                <p className=\"text-sm font-medium leading-none\">\n                                  Duración promedio\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  Tiempo de resolución de conversaciones\n                                </p>\n                              </div>\n                              <div className=\"text-2xl font-bold\">\n                                {(adminStats?.conversations.avg_duration ? parseFloat(String(adminStats.conversations.avg_duration)).toFixed(1) : '0')}s\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center justify-between pt-2\">\n                              <Button variant=\"outline\" className=\"text-amber-600 flex items-center space-x-2\" onClick={() => setActiveTab(\"limits\")}>\n                                <AlertTriangle className=\"h-4 w-4\" />\n                                <span>Usuarios cerca del límite</span>\n                              </Button>\n                              <div className=\"text-2xl font-bold text-amber-600\">\n                                {adminStats?.limits.users_near_limit || 0}\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </>\n                )}\n              </TabsContent>\n              \n              {/* Users Tab */}\n              <TabsContent value=\"users\">\n                <div className=\"mb-6 flex items-center justify-between\">\n                  <div className=\"relative flex-1 max-w-md\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"Buscar usuarios...\" \n                      className=\"pl-10\"\n                      value={userSearch}\n                      onChange={(e) => setUserSearch(e.target.value)}\n                    />\n                  </div>\n                  <Button \n                    onClick={() => setCreateUserModal(true)}\n                    className=\"ml-4 flex items-center gap-2\"\n                  >\n                    <UserPlus className=\"h-4 w-4\" />\n                    Crear Usuario\n                  </Button>\n                </div>\n                \n                {isLoadingUsers ? (\n                  <div className=\"py-20 text-center\">\n                    <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    <p className=\"text-lg text-gray-600 dark:text-gray-400\">Cargando usuarios...</p>\n                  </div>\n                ) : (\n                  <Card>\n                    <CardContent className=\"p-0\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>ID</TableHead>\n                            <TableHead>Usuario</TableHead>\n                            <TableHead>Email</TableHead>\n                            <TableHead>Nombre</TableHead>\n                            <TableHead>Fecha de creación</TableHead>\n                            <TableHead>Acciones</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {filteredUsers.length > 0 ? (\n                            filteredUsers.map((user) => (\n                              <TableRow key={user.id}>\n                                <TableCell>{user.id}</TableCell>\n                                <TableCell>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Avatar className=\"h-8 w-8\">\n                                      <AvatarFallback className=\"bg-primary text-white\">\n                                        {user.username.charAt(0).toUpperCase()}\n                                      </AvatarFallback>\n                                    </Avatar>\n                                    <span className=\"font-medium\">{user.username}</span>\n                                  </div>\n                                </TableCell>\n                                <TableCell>{user.email}</TableCell>\n                                <TableCell>{user.full_name || '-'}</TableCell>\n                                <TableCell>{formatDate(user.created_at)}</TableCell>\n                                <TableCell>\n                                  <div className=\"flex gap-2\">\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => handleViewUserDetails(user.id)}\n                                    >\n                                      <User className=\"h-4 w-4\" />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => handlePrepareEditUser(user)}\n                                    >\n                                      <Edit className=\"h-4 w-4\" />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => handlePrepareEditSubscription(user.id, user.username)}\n                                    >\n                                      <CreditCard className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </TableCell>\n                              </TableRow>\n                            ))\n                          ) : (\n                            <TableRow>\n                              <TableCell colSpan={6} className=\"text-center py-10 text-gray-500\">\n                                {userSearch \n                                  ? \"No se encontraron usuarios que coincidan con la búsqueda\" \n                                  : \"No hay usuarios registrados\"}\n                              </TableCell>\n                            </TableRow>\n                          )}\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n              \n              {/* Limits Tab */}\n              <TabsContent value=\"limits\">\n                <Card className=\"mb-8\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center\">\n                      <AlertTriangle className=\"mr-2 h-5 w-5 text-amber-500\" />\n                      Usuarios cerca de su límite de uso\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    {isLoadingUsersNearLimit ? (\n                      <div className=\"py-10 text-center\">\n                        <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                        <p className=\"text-lg text-gray-600 dark:text-gray-400\">Cargando usuarios...</p>\n                      </div>\n                    ) : usersOverLimit.length > 0 ? (\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Usuario</TableHead>\n                            <TableHead>Email</TableHead>\n                            <TableHead>Plan</TableHead>\n                            <TableHead>Uso</TableHead>\n                            <TableHead>Expiración</TableHead>\n                            <TableHead>Acciones</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {usersOverLimit.map((user) => (\n                            <TableRow key={user.id}>\n                              <TableCell className=\"font-medium\">{user.username}</TableCell>\n                              <TableCell>{user.email}</TableCell>\n                              <TableCell>\n                                <span className={`px-2 py-1 rounded text-xs font-medium ${\n                                  user.tier === 'free' ? 'bg-gray-100 text-gray-800' :\n                                  user.tier === 'basic' ? 'bg-blue-100 text-blue-800' :\n                                  user.tier === 'professional' ? 'bg-indigo-100 text-indigo-800' :\n                                  'bg-purple-100 text-purple-800'\n                                }`}>\n                                  {user.tier.charAt(0).toUpperCase() + user.tier.slice(1)}\n                                </span>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex flex-col gap-1\">\n                                  <div className=\"flex justify-between text-xs\">\n                                    <span>{user.interactions_used} / {user.interactions_limit}</span>\n                                    <span className={user.usage_percentage >= 100 ? \"text-red-600 font-bold\" : \"text-amber-600\"}>\n                                      {user.usage_percentage}%\n                                    </span>\n                                  </div>\n                                  <div className=\"w-full bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden\">\n                                    <div \n                                      className={`h-full rounded-full ${\n                                        user.usage_percentage >= 100 ? \"bg-red-600\" : \"bg-amber-500\"\n                                      }`}\n                                      style={{ width: `${Math.min(user.usage_percentage, 100)}%` }}\n                                    />\n                                  </div>\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                {user.end_date ? formatDate(user.end_date) : \"Sin expiración\"}\n                              </TableCell>\n                              <TableCell>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => handlePrepareEditSubscription(user.id, user.username, {\n                                    id: 0,\n                                    tier: user.tier,\n                                    status: user.status,\n                                    interactions_limit: user.interactions_limit,\n                                    interactions_used: user.interactions_used,\n                                    created_at: \"\",\n                                    start_date: \"\",\n                                    end_date: user.end_date\n                                  })}\n                                >\n                                  Editar suscripción\n                                </Button>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    ) : (\n                      <div className=\"py-10 text-center text-gray-500\">\n                        <p className=\"text-lg\">No hay usuarios cercanos a su límite de uso</p>\n                        <p className=\"text-sm mt-2\">Todos los usuarios tienen suficientes interacciones disponibles</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Discount Codes Tab */}\n              <TabsContent value=\"discount-codes\">\n                <div className=\"mb-6 flex items-center justify-between\">\n                  <h2 className=\"text-2xl font-bold\">Códigos de Descuento</h2>\n                  <Button \n                    onClick={() => setDiscountCodeModal(true)}\n                    className=\"ml-4 flex items-center gap-2\"\n                  >\n                    <Percent className=\"h-4 w-4\" />\n                    Crear Código de Descuento\n                  </Button>\n                </div>\n                \n                {isLoadingDiscountCodes ? (\n                  <div className=\"py-20 text-center\">\n                    <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    <p className=\"text-lg text-gray-600 dark:text-gray-400\">Cargando códigos de descuento...</p>\n                  </div>\n                ) : (\n                  <Card>\n                    <CardContent className=\"p-0\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Código</TableHead>\n                            <TableHead>Nombre</TableHead>\n                            <TableHead>Descuento</TableHead>\n                            <TableHead>Tier Aplicable</TableHead>\n                            <TableHead>Usos</TableHead>\n                            <TableHead>Límite</TableHead>\n                            <TableHead>Expira</TableHead>\n                            <TableHead>Estado</TableHead>\n                            <TableHead>Acciones</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {discountCodes && Array.isArray(discountCodes) && discountCodes.length > 0 ? (\n                            discountCodes.map((code: any) => (\n                              <TableRow key={code.id}>\n                                <TableCell className=\"font-mono\">{code.code}</TableCell>\n                                <TableCell>{code.name}</TableCell>\n                                <TableCell>{code.discountPercentage}%</TableCell>\n                                <TableCell>\n                                  {code.applicableTier === 'all' ? 'Todos' : code.applicableTier}\n                                </TableCell>\n                                <TableCell>{code.usageCount}</TableCell>\n                                <TableCell>{code.usageLimit || 'Ilimitado'}</TableCell>\n                                <TableCell>{code.expiresAt ? formatDate(code.expiresAt) : 'Sin caducidad'}</TableCell>\n                                <TableCell>\n                                  <div className={`px-2 py-1 rounded-full text-xs font-medium inline-block \n                                    ${code.isActive \n                                      ? 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-300' \n                                      : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'\n                                    }`}\n                                  >\n                                    {code.isActive ? 'Activo' : 'Inactivo'}\n                                  </div>\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"flex gap-2\">\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => handlePrepareEditDiscountCode(code)}\n                                    >\n                                      <Edit className=\"h-4 w-4\" />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => {\n                                        navigator.clipboard.writeText(code.code);\n                                        toast({\n                                          title: \"Código copiado\",\n                                          description: \"El código ha sido copiado al portapapeles\"\n                                        });\n                                      }}\n                                    >\n                                      <Copy className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </TableCell>\n                              </TableRow>\n                            ))\n                          ) : (\n                            <TableRow>\n                              <TableCell colSpan={9} className=\"text-center py-10 text-gray-500\">\n                                No hay códigos de descuento creados aún. ¡Crea tu primer código!\n                              </TableCell>\n                            </TableRow>\n                          )}\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n              \n              {/* Pricing Plans Tab */}\n              <TabsContent value=\"pricing-plans\">\n                <div className=\"mb-6 flex items-center justify-between\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Planes de Precios</h2>\n                  <div className=\"flex items-center gap-2\">\n                    <Select\n                      value={planSortOrder}\n                      onValueChange={(value) => setPlanSortOrder(value as any)}\n                    >\n                      <SelectTrigger className=\"w-[180px] mr-2\">\n                        <SelectValue placeholder=\"Ordenar por\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectGroup>\n                          <SelectLabel>Ordenar por</SelectLabel>\n                          <SelectItem value=\"price-asc\">Precio (menor a mayor)</SelectItem>\n                          <SelectItem value=\"price-desc\">Precio (mayor a menor)</SelectItem>\n                          <SelectItem value=\"name-asc\">Nombre (A-Z)</SelectItem>\n                          <SelectItem value=\"name-desc\">Nombre (Z-A)</SelectItem>\n                          <SelectItem value=\"tier-asc\">Nivel (A-Z)</SelectItem>\n                          <SelectItem value=\"tier-desc\">Nivel (Z-A)</SelectItem>\n                        </SelectGroup>\n                      </SelectContent>\n                    </Select>\n                    <Button \n                      onClick={handleSyncPlansWithStripe} \n                      variant=\"outline\"\n                      className=\"flex items-center gap-2\"\n                    >\n                      <RefreshCw className=\"h-4 w-4\" />\n                      Sincronizar con Stripe\n                    </Button>\n                    <Button \n                      onClick={() => setPricingPlanModal(true)} \n                      className=\"flex items-center gap-2\"\n                    >\n                      <PlusCircle className=\"h-4 w-4\" />\n                      Crear Plan\n                    </Button>\n                  </div>\n                </div>\n\n                {isLoadingPricingPlans ? (\n                  <div className=\"py-20 text-center\">\n                    <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    <p className=\"text-lg text-gray-600 dark:text-gray-400\">Cargando planes de precios...</p>\n                  </div>\n                ) : (\n                  <Card>\n                    <CardContent className=\"p-0\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Nombre</TableHead>\n                            <TableHead>Plan ID</TableHead>\n                            <TableHead>Nivel</TableHead>\n                            <TableHead>Límite</TableHead>\n                            <TableHead>Precio</TableHead>\n                            <TableHead>Periodo</TableHead>\n                            <TableHead>Estado</TableHead>\n                            <TableHead>Acciones</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {pricingPlans && pricingPlans.length > 0 ? (\n                            [...pricingPlans]\n                              .sort((a, b) => {\n                                switch (planSortOrder) {\n                                  case 'price-asc':\n                                    return a.price - b.price;\n                                  case 'price-desc':\n                                    return b.price - a.price;\n                                  case 'name-asc':\n                                    return a.name.localeCompare(b.name);\n                                  case 'name-desc':\n                                    return b.name.localeCompare(a.name);\n                                  case 'tier-asc':\n                                    return a.tier.localeCompare(b.tier);\n                                  case 'tier-desc':\n                                    return b.tier.localeCompare(a.tier);\n                                  default:\n                                    return a.price - b.price;\n                                }\n                              })\n                              .map((plan) => (\n                              <TableRow key={plan.id}>\n                                <TableCell className=\"font-medium\">\n                                  <div className=\"flex items-center\">\n                                    {plan.name}\n                                    {plan.popular && (\n                                      <Badge variant=\"outline\" className=\"ml-2 bg-amber-100 dark:bg-amber-900 text-amber-600 dark:text-amber-300 border-amber-300\">\n                                        Popular\n                                      </Badge>\n                                    )}\n                                  </div>\n                                </TableCell>\n                                <TableCell>{plan.planId}</TableCell>\n                                <TableCell className=\"capitalize\">{plan.tier}</TableCell>\n                                <TableCell>{plan.interactionsLimit.toLocaleString()} interacciones</TableCell>\n                                <TableCell>{plan.priceDisplay}</TableCell>\n                                <TableCell className=\"capitalize\">\n                                  {plan.billingPeriod === 'monthly' ? 'Mensual' : 'Anual'}\n                                </TableCell>\n                                <TableCell>\n                                  <Badge variant={plan.available ? \"outline\" : \"destructive\"} className=\"capitalize\">\n                                    {plan.available ? 'Activo' : 'Inactivo'}\n                                  </Badge>\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"flex gap-2\">\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => handlePrepareEditPricingPlan(plan)}\n                                    >\n                                      <Edit className=\"h-4 w-4\" />\n                                    </Button>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => handleDeletePricingPlan(plan.id)}\n                                    >\n                                      <Trash className=\"h-4 w-4 text-red-500\" />\n                                    </Button>\n                                  </div>\n                                </TableCell>\n                              </TableRow>\n                            ))\n                          ) : (\n                            <TableRow>\n                              <TableCell colSpan={8} className=\"h-24 text-center\">\n                                No hay planes de precios configurados\n                              </TableCell>\n                            </TableRow>\n                          )}\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n            </Tabs>\n          ) : (\n            <div className=\"py-20 text-center\">\n              <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-lg text-gray-600 dark:text-gray-400\">Verificando permisos de administrador...</p>\n            </div>\n          )}\n        </div>\n      </main>\n      \n      {/* Ver detalles de usuario modal */}\n      <Dialog open={userDetailsModal} onOpenChange={setUserDetailsModal}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Detalles del Usuario</DialogTitle>\n            <DialogDescription>\n              Información detallada del usuario y sus actividades\n            </DialogDescription>\n          </DialogHeader>\n          \n          {isLoadingUserDetails ? (\n            <div className=\"py-10 text-center\">\n              <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-lg text-gray-600 dark:text-gray-400\">Cargando detalles...</p>\n            </div>\n          ) : !userDetails || !userDetails.user ? (\n            <div className=\"py-10\">\n              <Alert variant=\"destructive\" className=\"mb-4\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertTitle>Error al cargar datos</AlertTitle>\n                <AlertDescription>\n                  No se pudo cargar la información del usuario. Esto puede deberse a un problema de conexión o a que la sesión ha expirado.\n                </AlertDescription>\n              </Alert>\n              <div className=\"flex justify-end mt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setUserDetailsModal(false);\n                    setTimeout(() => refreshAuth(), 500);\n                  }}\n                >\n                  Cerrar y verificar sesión\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {/* Información del usuario */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-lg\">Información del usuario</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <p className=\"text-sm text-gray-500\">ID</p>\n                      <p className=\"font-medium\">{userDetails?.user?.id || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Nombre de usuario</p>\n                      <p className=\"font-medium\">{userDetails?.user?.username || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Email</p>\n                      <p className=\"font-medium\">{userDetails?.user?.email || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Nombre completo</p>\n                      <p className=\"font-medium\">{userDetails?.user?.full_name || '-'}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Fecha de creación</p>\n                      <p className=\"font-medium\">{userDetails?.user?.created_at ? formatDate(userDetails.user.created_at) : 'N/A'}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-500\">API Key</p>\n                      <p className=\"font-medium text-xs truncate\">{userDetails?.user?.api_key || 'N/A'}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4 flex space-x-2\">\n                    {userDetails?.user && (\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => handlePrepareEditUser(userDetails.user)}>\n                        <Edit className=\"h-4 w-4 mr-2\" />\n                        Editar usuario\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Suscripciones */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <CardTitle className=\"text-lg\">Suscripciones</CardTitle>\n                    {userDetails.subscriptions && userDetails.subscriptions.length > 0 ? (\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => handlePrepareEditSubscription(userDetails.user.id, userDetails.user.username, userDetails.subscriptions[0])}>\n                        <CreditCard className=\"h-4 w-4 mr-2\" />\n                        Editar suscripción\n                      </Button>\n                    ) : (\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => handlePrepareEditSubscription(userDetails.user.id, userDetails.user.username)}>\n                        <CreditCard className=\"h-4 w-4 mr-2\" />\n                        Agregar suscripción\n                      </Button>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {userDetails.subscriptions && userDetails.subscriptions.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {userDetails.subscriptions.map((sub) => (\n                        <div key={sub.id} className=\"border rounded-lg p-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <p className=\"text-sm text-gray-500\">Plan</p>\n                              <p className=\"font-medium\">{sub.tier.charAt(0).toUpperCase() + sub.tier.slice(1)}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-gray-500\">Estado</p>\n                              <p className={`font-medium ${\n                                sub.status === 'active' ? 'text-green-600' : 'text-gray-600'\n                              }`}>\n                                {sub.status === 'active' ? 'Activo' : 'Inactivo'}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-gray-500\">Uso de interacciones</p>\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"flex-1 bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden\">\n                                  <div \n                                    className={`h-full rounded-full ${\n                                      sub.interactions_used >= sub.interactions_limit ? \"bg-red-600\" :\n                                      sub.interactions_used >= sub.interactions_limit * 0.8 ? \"bg-amber-500\" :\n                                      \"bg-primary\"\n                                    }`}\n                                    style={{ \n                                      width: `${Math.min((sub.interactions_used / sub.interactions_limit) * 100, 100)}%` \n                                    }}\n                                  />\n                                </div>\n                                <span className=\"text-sm font-medium\">\n                                  {sub.interactions_used} / {sub.interactions_limit}\n                                </span>\n                              </div>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-gray-500\">Fecha de expiración</p>\n                              <p className=\"font-medium\">{sub.end_date ? formatDate(sub.end_date) : \"Sin expiración\"}</p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center py-4 text-gray-500\">No tiene suscripciones activas</p>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {/* Estadísticas de uso */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-lg\">Estadísticas de uso</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"border rounded-lg p-4 text-center\">\n                      <p className=\"text-sm text-gray-500\">Conversaciones</p>\n                      <p className=\"text-2xl font-bold\">{userDetails.usage?.total_conversations || 0}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {userDetails.usage?.resolved_conversations || 0} resueltas\n                      </p>\n                    </div>\n                    <div className=\"border rounded-lg p-4 text-center\">\n                      <p className=\"text-sm text-gray-500\">Mensajes</p>\n                      <p className=\"text-2xl font-bold\">{userDetails.usage?.total_messages || 0}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {userDetails.usage?.user_messages || 0} usuarios / {userDetails.usage?.assistant_messages || 0} AI\n                      </p>\n                    </div>\n                    <div className=\"border rounded-lg p-4 text-center\">\n                      <p className=\"text-sm text-gray-500\">Tokens estimados</p>\n                      <p className=\"text-2xl font-bold\">{userDetails.usage?.estimated_tokens?.toLocaleString() || 0}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        ${((userDetails.usage?.estimated_tokens || 0) / 1000000 * 5).toFixed(2)} estimados\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Integraciones */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-lg\">Integraciones ({userDetails.integrations?.length || 0})</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {userDetails.integrations && userDetails.integrations.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {userDetails.integrations.map((integration) => (\n                        <div key={integration.id} className=\"border rounded-lg p-4\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center\">\n                              <div \n                                className=\"w-3 h-3 rounded-full mr-2\" \n                                style={{ backgroundColor: integration.theme_color || '#3B82F6' }}\n                              />\n                              <h3 className=\"font-medium\">{integration.name}</h3>\n                            </div>\n                            <span className={`text-xs px-2 py-1 rounded-full ${\n                              integration.active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\n                            }`}>\n                              {integration.active ? 'Activo' : 'Inactivo'}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-600 truncate mb-2\">{integration.url}</p>\n                          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                            <div>\n                              <span className=\"text-gray-500\">{t('visitors_helped')}:</span> {integration.visitor_count || 0}\n                            </div>\n                            <div>\n                              <span className=\"text-gray-500\">Tipo de widget:</span> {integration.widget_type || 'Flotante'}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center py-4 text-gray-500\">No tiene integraciones configuradas</p>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {/* Conversaciones recientes */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-lg\">Conversaciones recientes ({userDetails.recentConversations?.length || 0})</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {userDetails.recentConversations && userDetails.recentConversations.length > 0 ? (\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>ID</TableHead>\n                            <TableHead>Integración</TableHead>\n                            <TableHead>Estado</TableHead>\n                            <TableHead>Duración</TableHead>\n                            <TableHead>Fecha</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {userDetails.recentConversations.map((conv) => (\n                            <TableRow key={conv.id}>\n                              <TableCell className=\"font-medium\">{conv.id}</TableCell>\n                              <TableCell>{conv.integration_name}</TableCell>\n                              <TableCell>\n                                <span className={`px-2 py-1 rounded-full text-xs ${\n                                  conv.resolved ? 'bg-green-100 text-green-800' : 'bg-amber-100 text-amber-800'\n                                }`}>\n                                  {conv.resolved ? 'Resuelta' : 'Pendiente'}\n                                </span>\n                              </TableCell>\n                              <TableCell>{conv.duration}s</TableCell>\n                              <TableCell>{formatDate(conv.created_at)}</TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  ) : (\n                    <p className=\"text-center py-4 text-gray-500\">No tiene conversaciones registradas</p>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n          \n          {/* Este condicional estaba sobrando, lo eliminamos */}\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setUserDetailsModal(false)}>\n              Cerrar\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Crear usuario modal */}\n      <Dialog open={createUserModal} onOpenChange={setCreateUserModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Crear nuevo usuario</DialogTitle>\n            <DialogDescription>\n              Introduce la información del nuevo usuario\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleCreateUser}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Nombre de usuario</Label>\n                <Input \n                  id=\"username\" \n                  value={newUser.username}\n                  onChange={(e) => setNewUser({...newUser, username: e.target.value})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input \n                  id=\"email\" \n                  type=\"email\"\n                  value={newUser.email}\n                  onChange={(e) => setNewUser({...newUser, email: e.target.value})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Contraseña</Label>\n                <Input \n                  id=\"password\" \n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                  value={newUser.password}\n                  onChange={(e) => setNewUser({...newUser, password: e.target.value})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Nombre completo</Label>\n                <Input \n                  id=\"fullName\" \n                  value={newUser.fullName}\n                  onChange={(e) => setNewUser({...newUser, fullName: e.target.value})}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tier\">Plan de suscripción</Label>\n                <Select\n                  value={newUser.tier}\n                  onValueChange={(value) => setNewUser({...newUser, tier: value})}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccionar plan\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectGroup>\n                      <SelectItem value=\"free\">Gratuito</SelectItem>\n                      <SelectItem value=\"basic\">Básico</SelectItem>\n                      <SelectItem value=\"professional\">Profesional</SelectItem>\n                      <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                    </SelectGroup>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setCreateUserModal(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\">Crear usuario</Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Editar usuario modal */}\n      <Dialog open={editUserModal} onOpenChange={setEditUserModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Editar usuario</DialogTitle>\n            <DialogDescription>\n              Modifica la información del usuario: <span className=\"font-medium\">{editUserData.username}</span> (ID: {editUserData.id})\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleEditUser}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-username\">Nombre de usuario</Label>\n                <Input \n                  id=\"edit-username\" \n                  value={editUserData.username}\n                  onChange={(e) => setEditUserData({...editUserData, username: e.target.value})}\n                  placeholder=\"Mantener actual\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-email\">Email</Label>\n                <Input \n                  id=\"edit-email\" \n                  type=\"email\"\n                  value={editUserData.email}\n                  onChange={(e) => setEditUserData({...editUserData, email: e.target.value})}\n                  placeholder=\"Mantener actual\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-fullName\">Nombre completo</Label>\n                <Input \n                  id=\"edit-fullName\" \n                  value={editUserData.fullName}\n                  onChange={(e) => setEditUserData({...editUserData, fullName: e.target.value})}\n                  placeholder=\"Mantener actual\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-password\">Nueva contraseña</Label>\n                <Input \n                  id=\"edit-password\" \n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                  value={editUserData.password}\n                  onChange={(e) => setEditUserData({...editUserData, password: e.target.value})}\n                  placeholder=\"Dejar en blanco para mantener actual\"\n                />\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setEditUserModal(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\">Guardar cambios</Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Editar suscripción modal */}\n      <Dialog open={subscriptionModal} onOpenChange={setSubscriptionModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Editar suscripción</DialogTitle>\n            <DialogDescription>\n              Modifica la suscripción del usuario: <span className=\"font-medium\">{editSubscriptionData.username}</span> (ID: {editSubscriptionData.userId})\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleEditSubscription}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subscription-tier\">Plan</Label>\n                <Select\n                  value={editSubscriptionData.tier}\n                  onValueChange={(value) => setEditSubscriptionData({...editSubscriptionData, tier: value})}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccionar plan\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectGroup>\n                      <SelectItem value=\"free\">Gratuito</SelectItem>\n                      <SelectItem value=\"basic\">Básico</SelectItem>\n                      <SelectItem value=\"professional\">Profesional</SelectItem>\n                      <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                    </SelectGroup>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subscription-status\">Estado</Label>\n                <Select\n                  value={editSubscriptionData.status}\n                  onValueChange={(value) => setEditSubscriptionData({...editSubscriptionData, status: value})}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccionar estado\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectGroup>\n                      <SelectItem value=\"active\">Activo</SelectItem>\n                      <SelectItem value=\"inactive\">Inactivo</SelectItem>\n                      <SelectItem value=\"expired\">Expirado</SelectItem>\n                    </SelectGroup>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subscription-limit\">Límite de interacciones</Label>\n                <Input \n                  id=\"subscription-limit\" \n                  type=\"number\"\n                  min=\"0\"\n                  value={editSubscriptionData.interactionsLimit}\n                  onChange={(e) => setEditSubscriptionData({\n                    ...editSubscriptionData, \n                    interactionsLimit: parseInt(e.target.value) || 0\n                  })}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subscription-end-date\">Fecha de expiración</Label>\n                <Input \n                  id=\"subscription-end-date\" \n                  type=\"date\"\n                  value={editSubscriptionData.endDate}\n                  onChange={(e) => setEditSubscriptionData({...editSubscriptionData, endDate: e.target.value})}\n                />\n                <p className=\"text-xs text-gray-500\">Dejar en blanco para una suscripción sin fecha de expiración</p>\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setSubscriptionModal(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\">Guardar cambios</Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Crear código de descuento modal */}\n      <Dialog open={discountCodeModal} onOpenChange={setDiscountCodeModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Crear Código de Descuento</DialogTitle>\n            <DialogDescription>\n              Crea un nuevo código de descuento para tus clientes\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleCreateDiscountCode}>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"name\" className=\"text-right\">\n                  Nombre\n                </Label>\n                <Input\n                  id=\"name\"\n                  className=\"col-span-3\"\n                  value={newDiscountCode.name}\n                  onChange={(e) => setNewDiscountCode({...newDiscountCode, name: e.target.value})}\n                  placeholder=\"Ej: Black Friday 2025\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"discountPercentage\" className=\"text-right\">\n                  Descuento %\n                </Label>\n                <Input\n                  id=\"discountPercentage\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"100\"\n                  className=\"col-span-3\"\n                  value={newDiscountCode.discountPercentage}\n                  onChange={(e) => setNewDiscountCode({...newDiscountCode, discountPercentage: parseInt(e.target.value) || 10})}\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"applicableTier\" className=\"text-right\">\n                  Tier aplicable\n                </Label>\n                <Select\n                  value={newDiscountCode.applicableTier}\n                  onValueChange={(value) => setNewDiscountCode({...newDiscountCode, applicableTier: value})}\n                >\n                  <SelectTrigger className=\"col-span-3\">\n                    <SelectValue placeholder=\"Seleccionar tier\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos los planes</SelectItem>\n                    <SelectItem value=\"basic\">Basic</SelectItem>\n                    <SelectItem value=\"professional\">Professional</SelectItem>\n                    <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"expiresAt\" className=\"text-right\">\n                  Fecha expiración\n                </Label>\n                <Input\n                  id=\"expiresAt\"\n                  type=\"date\"\n                  className=\"col-span-3\"\n                  value={newDiscountCode.expiresAt}\n                  onChange={(e) => setNewDiscountCode({...newDiscountCode, expiresAt: e.target.value})}\n                />\n                <p className=\"text-xs text-gray-500 col-span-4 text-right\">Dejar en blanco para un código sin caducidad</p>\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"usageLimit\" className=\"text-right\">\n                  Límite de usos\n                </Label>\n                <Input\n                  id=\"usageLimit\"\n                  type=\"number\"\n                  min=\"0\"\n                  className=\"col-span-3\"\n                  value={newDiscountCode.usageLimit}\n                  onChange={(e) => setNewDiscountCode({...newDiscountCode, usageLimit: parseInt(e.target.value) || 0})}\n                />\n                <p className=\"text-xs text-gray-500 col-span-4 text-right\">0 = usos ilimitados</p>\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"isActive\" className=\"text-right\">\n                  Estado\n                </Label>\n                <div className=\"flex items-center space-x-2 col-span-3\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={newDiscountCode.isActive}\n                    onCheckedChange={(checked) => setNewDiscountCode({...newDiscountCode, isActive: checked})}\n                  />\n                  <Label htmlFor=\"isActive\" className=\"cursor-pointer\">\n                    {newDiscountCode.isActive ? 'Activo' : 'Inactivo'}\n                  </Label>\n                </div>\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setDiscountCodeModal(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" className=\"flex items-center gap-2\">\n                <Percent className=\"h-4 w-4\" />\n                Crear Código\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Editar código de descuento modal */}\n      <Dialog open={editDiscountCodeModal} onOpenChange={setEditDiscountCodeModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Editar Código de Descuento</DialogTitle>\n            <DialogDescription>\n              Actualiza la configuración del código de descuento\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleEditDiscountCode}>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"edit-name\" className=\"text-right\">\n                  Nombre\n                </Label>\n                <Input\n                  id=\"edit-name\"\n                  className=\"col-span-3\"\n                  value={editDiscountCodeData.name}\n                  onChange={(e) => setEditDiscountCodeData({...editDiscountCodeData, name: e.target.value})}\n                  placeholder=\"Ej: Black Friday 2025\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"edit-discountPercentage\" className=\"text-right\">\n                  Descuento %\n                </Label>\n                <Input\n                  id=\"edit-discountPercentage\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"100\"\n                  className=\"col-span-3\"\n                  value={editDiscountCodeData.discountPercentage}\n                  onChange={(e) => setEditDiscountCodeData({...editDiscountCodeData, discountPercentage: parseInt(e.target.value) || 10})}\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"edit-applicableTier\" className=\"text-right\">\n                  Tier aplicable\n                </Label>\n                <Select\n                  value={editDiscountCodeData.applicableTier}\n                  onValueChange={(value) => setEditDiscountCodeData({...editDiscountCodeData, applicableTier: value})}\n                >\n                  <SelectTrigger className=\"col-span-3\">\n                    <SelectValue placeholder=\"Seleccionar tier\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos los planes</SelectItem>\n                    <SelectItem value=\"basic\">Basic</SelectItem>\n                    <SelectItem value=\"professional\">Professional</SelectItem>\n                    <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"edit-expiresAt\" className=\"text-right\">\n                  Fecha expiración\n                </Label>\n                <Input\n                  id=\"edit-expiresAt\"\n                  type=\"date\"\n                  className=\"col-span-3\"\n                  value={editDiscountCodeData.expiresAt}\n                  onChange={(e) => setEditDiscountCodeData({...editDiscountCodeData, expiresAt: e.target.value})}\n                />\n                <p className=\"text-xs text-gray-500 col-span-4 text-right\">Dejar en blanco para un código sin caducidad</p>\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"edit-usageLimit\" className=\"text-right\">\n                  Límite de usos\n                </Label>\n                <Input\n                  id=\"edit-usageLimit\"\n                  type=\"number\"\n                  min=\"0\"\n                  className=\"col-span-3\"\n                  value={editDiscountCodeData.usageLimit}\n                  onChange={(e) => setEditDiscountCodeData({...editDiscountCodeData, usageLimit: parseInt(e.target.value) || 0})}\n                />\n                <p className=\"text-xs text-gray-500 col-span-4 text-right\">0 = usos ilimitados</p>\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"edit-isActive\" className=\"text-right\">\n                  Estado\n                </Label>\n                <div className=\"flex items-center space-x-2 col-span-3\">\n                  <Switch\n                    id=\"edit-isActive\"\n                    checked={editDiscountCodeData.isActive}\n                    onCheckedChange={(checked) => setEditDiscountCodeData({...editDiscountCodeData, isActive: checked})}\n                  />\n                  <Label htmlFor=\"edit-isActive\" className=\"cursor-pointer\">\n                    {editDiscountCodeData.isActive ? 'Activo' : 'Inactivo'}\n                  </Label>\n                </div>\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setEditDiscountCodeModal(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" className=\"flex items-center gap-2\">\n                <Edit className=\"h-4 w-4\" />\n                Actualizar Código\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Modal para crear plan de precios */}\n      <Dialog open={pricingPlanModal} onOpenChange={setPricingPlanModal}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Crear Plan de Precios</DialogTitle>\n            <DialogDescription>\n              Configura un nuevo plan de precios para ofrecer a los clientes\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleCreatePricingPlan} className=\"space-y-4 mt-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plan-name\">Nombre del Plan</Label>\n                <Input \n                  id=\"plan-name\"\n                  value={newPricingPlan.name}\n                  onChange={(e) => setNewPricingPlan({...newPricingPlan, name: e.target.value})}\n                  placeholder=\"Basic\"\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plan-id\">ID del Plan</Label>\n                <Input \n                  id=\"plan-id\"\n                  value={newPricingPlan.planId}\n                  onChange={(e) => setNewPricingPlan({...newPricingPlan, planId: e.target.value})}\n                  placeholder=\"basic_monthly\"\n                  required\n                />\n                <p className=\"text-xs text-gray-500\">ID único para identificar este plan en el sistema y Stripe</p>\n              </div>\n              \n              <div className=\"space-y-2 col-span-2\">\n                <Label htmlFor=\"plan-description\">Descripción</Label>\n                <Textarea \n                  id=\"plan-description\"\n                  value={newPricingPlan.description}\n                  onChange={(e) => setNewPricingPlan({...newPricingPlan, description: e.target.value})}\n                  placeholder=\"Ideal para pequeñas empresas que inician con IA\"\n                  rows={2}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plan-tier\">Nivel</Label>\n                <Select \n                  value={newPricingPlan.tier}\n                  onValueChange={(value) => setNewPricingPlan({...newPricingPlan, tier: value})}\n                >\n                  <SelectTrigger id=\"plan-tier\">\n                    <SelectValue placeholder=\"Seleccionar nivel\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"free\">Free</SelectItem>\n                    <SelectItem value=\"basic\">Basic</SelectItem>\n                    <SelectItem value=\"professional\">Professional</SelectItem>\n                    <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plan-limit\">Límite de Interacciones</Label>\n                <Input \n                  id=\"plan-limit\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={newPricingPlan.interactionsLimit}\n                  onChange={(e) => setNewPricingPlan({...newPricingPlan, interactionsLimit: parseInt(e.target.value)})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plan-price\">Precio</Label>\n                <Input \n                  id=\"plan-price\"\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={newPricingPlan.price}\n                  onChange={(e) => setNewPricingPlan({...newPricingPlan, price: parseFloat(e.target.value)})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plan-price-display\">Precio mostrado</Label>\n                <Input \n                  id=\"plan-price-display\"\n                  value={newPricingPlan.priceDisplay}\n                  onChange={(e) => setNewPricingPlan({...newPricingPlan, priceDisplay: e.target.value})}\n                  placeholder=\"$50 CAD\"\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plan-currency\">Moneda</Label>\n                <Select \n                  value={newPricingPlan.currency}\n                  onValueChange={(value) => setNewPricingPlan({...newPricingPlan, currency: value})}\n                >\n                  <SelectTrigger id=\"plan-currency\">\n                    <SelectValue placeholder=\"Seleccionar moneda\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"CAD\">CAD - Dólar Canadiense</SelectItem>\n                    <SelectItem value=\"USD\">USD - Dólar Americano</SelectItem>\n                    <SelectItem value=\"EUR\">EUR - Euro</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"plan-billing\">Periodo de facturación</Label>\n                <Select \n                  value={newPricingPlan.billingPeriod}\n                  onValueChange={(value) => setNewPricingPlan({...newPricingPlan, billingPeriod: value})}\n                >\n                  <SelectTrigger id=\"plan-billing\">\n                    <SelectValue placeholder=\"Seleccionar periodo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"monthly\">Mensual</SelectItem>\n                    <SelectItem value=\"yearly\">Anual</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2 col-span-2\">\n                <Label htmlFor=\"plan-features\">Características (una por línea)</Label>\n                <Textarea \n                  id=\"plan-features\"\n                  value={Array.isArray(newPricingPlan.features) ? newPricingPlan.features.join('\\n') : newPricingPlan.features}\n                  onChange={(e) => setNewPricingPlan({...newPricingPlan, features: e.target.value.split('\\n').filter(line => line.trim())})}\n                  placeholder=\"500 interacciones al mes\nAsistente en su sitio web\nHistorial de conversaciones\nSoporte por email\"\n                  rows={4}\n                />\n              </div>\n              \n              <div className=\"space-y-2 flex items-end pb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"plan-popular\" \n                    checked={newPricingPlan.popular}\n                    onCheckedChange={(checked) => setNewPricingPlan({...newPricingPlan, popular: !!checked})}\n                  />\n                  <Label htmlFor=\"plan-popular\">Marcar como Popular</Label>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2 flex items-end pb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"plan-available\" \n                    checked={newPricingPlan.available}\n                    onCheckedChange={(checked) => setNewPricingPlan({...newPricingPlan, available: !!checked})}\n                  />\n                  <Label htmlFor=\"plan-available\">Disponible</Label>\n                </div>\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"submit\">Crear Plan</Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Modal para editar plan de precios */}\n      <Dialog open={editPricingPlanModal} onOpenChange={setEditPricingPlanModal}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Editar Plan de Precios</DialogTitle>\n            <DialogDescription>\n              Modifica los detalles del plan de precios\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleEditPricingPlan} className=\"space-y-4 mt-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan-name\">Nombre del Plan</Label>\n                <Input \n                  id=\"edit-plan-name\"\n                  value={editPricingPlanData.name}\n                  onChange={(e) => setEditPricingPlanData({...editPricingPlanData, name: e.target.value})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan-id\">ID del Plan</Label>\n                <Input \n                  id=\"edit-plan-id\"\n                  value={editPricingPlanData.planId}\n                  onChange={(e) => setEditPricingPlanData({...editPricingPlanData, planId: e.target.value})}\n                  required\n                />\n                <p className=\"text-xs text-gray-500\">ID único para identificar este plan en el sistema y Stripe</p>\n              </div>\n              \n              <div className=\"space-y-2 col-span-2\">\n                <Label htmlFor=\"edit-plan-description\">Descripción</Label>\n                <Textarea \n                  id=\"edit-plan-description\"\n                  value={editPricingPlanData.description}\n                  onChange={(e) => setEditPricingPlanData({...editPricingPlanData, description: e.target.value})}\n                  rows={2}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan-tier\">Nivel</Label>\n                <Select \n                  value={editPricingPlanData.tier}\n                  onValueChange={(value) => setEditPricingPlanData({...editPricingPlanData, tier: value})}\n                >\n                  <SelectTrigger id=\"edit-plan-tier\">\n                    <SelectValue placeholder=\"Seleccionar nivel\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"free\">Free</SelectItem>\n                    <SelectItem value=\"basic\">Basic</SelectItem>\n                    <SelectItem value=\"professional\">Professional</SelectItem>\n                    <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan-limit\">Límite de Interacciones</Label>\n                <Input \n                  id=\"edit-plan-limit\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={editPricingPlanData.interactionsLimit}\n                  onChange={(e) => setEditPricingPlanData({...editPricingPlanData, interactionsLimit: parseInt(e.target.value)})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan-price\">Precio</Label>\n                <Input \n                  id=\"edit-plan-price\"\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={editPricingPlanData.price}\n                  onChange={(e) => setEditPricingPlanData({...editPricingPlanData, price: parseFloat(e.target.value)})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan-price-display\">Precio mostrado</Label>\n                <Input \n                  id=\"edit-plan-price-display\"\n                  value={editPricingPlanData.priceDisplay}\n                  onChange={(e) => setEditPricingPlanData({...editPricingPlanData, priceDisplay: e.target.value})}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan-currency\">Moneda</Label>\n                <Select \n                  value={editPricingPlanData.currency}\n                  onValueChange={(value) => setEditPricingPlanData({...editPricingPlanData, currency: value})}\n                >\n                  <SelectTrigger id=\"edit-plan-currency\">\n                    <SelectValue placeholder=\"Seleccionar moneda\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"CAD\">CAD - Dólar Canadiense</SelectItem>\n                    <SelectItem value=\"USD\">USD - Dólar Americano</SelectItem>\n                    <SelectItem value=\"EUR\">EUR - Euro</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan-billing\">Periodo de facturación</Label>\n                <Select \n                  value={editPricingPlanData.billingPeriod}\n                  onValueChange={(value) => setEditPricingPlanData({...editPricingPlanData, billingPeriod: value})}\n                >\n                  <SelectTrigger id=\"edit-plan-billing\">\n                    <SelectValue placeholder=\"Seleccionar periodo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"monthly\">Mensual</SelectItem>\n                    <SelectItem value=\"yearly\">Anual</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2 col-span-2\">\n                <Label htmlFor=\"edit-plan-features\">Características (una por línea)</Label>\n                <Textarea \n                  id=\"edit-plan-features\"\n                  value={Array.isArray(editPricingPlanData.features) ? editPricingPlanData.features.join('\\n') : editPricingPlanData.features}\n                  onChange={(e) => setEditPricingPlanData({...editPricingPlanData, features: e.target.value.split('\\n').filter(line => line.trim())})}\n                  rows={4}\n                />\n              </div>\n              \n              <div className=\"space-y-2 flex items-end pb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"edit-plan-popular\" \n                    checked={editPricingPlanData.popular}\n                    onCheckedChange={(checked) => setEditPricingPlanData({...editPricingPlanData, popular: !!checked})}\n                  />\n                  <Label htmlFor=\"edit-plan-popular\">Marcar como Popular</Label>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2 flex items-end pb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"edit-plan-available\" \n                    checked={editPricingPlanData.available}\n                    onCheckedChange={(checked) => setEditPricingPlanData({...editPricingPlanData, available: !!checked})}\n                  />\n                  <Label htmlFor=\"edit-plan-available\">Disponible</Label>\n                </div>\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"submit\">Guardar Cambios</Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":113171},"client/src/pages/analytics.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CircleX, Clock, MessageSquare, BarChart, ArrowUp, ArrowDown, ArrowLeft, Download } from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { useTranslation } from \"react-i18next\";\nimport ProductDemandChart from \"@/components/analytics/product-demand-chart\";\nimport TopicSentimentChart from \"@/components/analytics/topic-sentiment-chart\";\nimport ConversationTrendChart from \"@/components/analytics/conversation-trend-chart\";\nimport KeywordCloud from \"@/components/analytics/keyword-cloud\";\nimport IntegrationPerformanceChart from \"@/components/analytics/integration-performance-chart\";\nimport { \n  DashboardStats, \n  ConversationAnalytics, \n  IntegrationPerformance \n} from \"@shared/schema\";\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nimport autoTable from \"jspdf-autotable\";\n\nexport default function Analytics() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n  const { t } = useTranslation();\n  \n  // Fetch dashboard stats\n  const { data: stats, isLoading: isLoadingStats, error: statsError } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: !!user,\n    staleTime: 1000 * 60, // 1 minute\n  });\n\n  // Fetch conversation analytics\n  const { \n    data: conversationAnalytics, \n    isLoading: isLoadingConversation,\n    error: conversationError\n  } = useQuery<ConversationAnalytics>({\n    queryKey: [\"/api/analytics/conversation\"],\n    enabled: !!user,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  // Fetch integration performance\n  const { \n    data: integrationPerformance,\n    isLoading: isLoadingPerformance,\n    error: performanceError\n  } = useQuery<IntegrationPerformance[]>({\n    queryKey: [\"/api/analytics/integration-performance\"],\n    enabled: !!user,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  // Format percentage\n  const formatPercentage = (value: number) => {\n    return `${Math.round(value)}%`;\n  };\n\n  // Format time in seconds to minutes and seconds\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.round(seconds % 60);\n    return `${minutes}m ${remainingSeconds}s`;\n  };\n\n  // Default stats when loading or no data\n  const dashboardStats = stats || {\n    totalConversations: 0,\n    resolutionRate: 0,\n    averageResponseTime: 0\n  };\n\n  // Verifica si hay algún error en las peticiones\n  const hasError = statsError || conversationError || performanceError;\n  const isLoading = isLoadingStats || isLoadingConversation || isLoadingPerformance;\n  \n  // Función para generar y descargar el informe PDF\n  const downloadPdfReport = async () => {\n    if (!stats || !conversationAnalytics || !integrationPerformance) return;\n    \n    try {\n      // Capturar gráficos como imágenes\n      const productsChartElement = document.getElementById('products-chart');\n      const topicsChartElement = document.getElementById('topics-chart');\n      const trendChartElement = document.getElementById('trend-chart');\n      const keywordsElement = document.getElementById('keywords-chart');\n      const integrationPerformanceElement = document.getElementById('integration-performance-chart');\n      \n      // Crear nuevo documento PDF\n      const doc = new jsPDF();\n      const pageWidth = doc.internal.pageSize.getWidth();\n      const pageHeight = doc.internal.pageSize.getHeight();\n      const date = new Date().toLocaleDateString();\n      \n      // Título y metadatos del informe\n      doc.setFontSize(18);\n      doc.text(t(\"pdf_report_title\"), pageWidth / 2, 20, { align: 'center' });\n      doc.setFontSize(10);\n      doc.text(`${t(\"pdf_generated\")}: ${date}`, pageWidth / 2, 28, { align: 'center' });\n      doc.setLineWidth(0.5);\n      doc.line(15, 35, pageWidth - 15, 35);\n      \n      // Resumen de estadísticas\n      doc.setFontSize(14);\n      doc.text(t(\"pdf_summary\"), 15, 45);\n      \n      const summaryData = [\n        [t(\"total_conversations\"), dashboardStats.totalConversations || 0],\n        [t(\"resolution_rate\"), `${formatPercentage(dashboardStats.resolutionRate)}`],\n        [t(\"avg_response_time\"), formatTime(dashboardStats.averageResponseTime)],\n      ];\n      \n      // Añadir tabla de resumen\n      autoTable(doc, {\n        head: [[t(\"pdf_metric\"), t(\"pdf_value\")]],\n        body: summaryData,\n        startY: 50,\n        theme: 'grid',\n        styles: { fontSize: 10 },\n        headStyles: { fillColor: [66, 66, 66] }\n      });\n      \n      // Obtener posición después de la tabla\n      let lastY = 120;\n      \n      // Añadir gráfico de productos más demandados\n      if (productsChartElement) {\n        try {\n          doc.setFontSize(14);\n          doc.text(t(\"pdf_products_demanded\"), 15, lastY);\n          \n          // Añadir descripción explicativa\n          doc.setFontSize(9);\n          doc.setTextColor(40, 40, 40); // Color más oscuro para mejor visibilidad\n          doc.text(t(\"pdf_products_description\"), 15, lastY + 8);\n          doc.text(t(\"pdf_products_description2\"), 15, lastY + 12);\n          \n          const productsCanvas = await html2canvas(productsChartElement);\n          const productsImgData = productsCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            productsImgData, \n            'PNG', \n            15, // x\n            lastY + 5, // y\n            imgWidth, \n            imgHeight\n          );\n          \n          lastY += imgHeight + 15;\n        } catch (error) {\n          console.error('Error al capturar gráfico de productos:', error);\n          \n          // Mostrar datos en forma de tabla si falla la captura del gráfico\n          if (conversationAnalytics?.topProducts && conversationAnalytics.topProducts.length > 0) {\n            const productsData = conversationAnalytics.topProducts.map(item => [item.name, item.count]);\n            \n            autoTable(doc, {\n              head: [[t(\"pdf_product\"), t(\"pdf_mentions\")]],\n              body: productsData,\n              startY: lastY + 5,\n              theme: 'grid',\n              styles: { fontSize: 10 },\n              headStyles: { fillColor: [66, 66, 66] }\n            });\n            lastY += 50; // Estimación después de tabla\n          } else {\n            doc.setFontSize(10);\n            doc.text(t(\"pdf_no_products_data\"), 15, lastY + 5);\n            lastY += 10;\n          }\n        }\n      }\n      \n      // Si no hay espacio suficiente, nueva página\n      if (lastY > pageHeight - 100) {\n        doc.addPage();\n        lastY = 20;\n      }\n      \n      // Añadir gráfico de temas más discutidos\n      if (topicsChartElement) {\n        try {\n          doc.setFontSize(14);\n          doc.text(t(\"pdf_topics_discussed\"), 15, lastY);\n          \n          // Añadir descripción explicativa\n          doc.setFontSize(9);\n          doc.setTextColor(40, 40, 40); // Color más oscuro para mejor visibilidad\n          doc.text(t(\"pdf_topics_description\"), 15, lastY + 8);\n          doc.text(t(\"pdf_topics_description2\"), 15, lastY + 12);\n          \n          const topicsCanvas = await html2canvas(topicsChartElement);\n          const topicsImgData = topicsCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            topicsImgData, \n            'PNG', \n            15, // x\n            lastY + 5, // y\n            imgWidth, \n            imgHeight\n          );\n          \n          lastY += imgHeight + 15;\n        } catch (error) {\n          console.error('Error al capturar gráfico de temas:', error);\n          \n          // Mostrar datos en forma de tabla si falla la captura del gráfico\n          if (conversationAnalytics?.topTopics && conversationAnalytics.topTopics.length > 0) {\n            const topicsData = conversationAnalytics.topTopics.map(item => [item.topic, item.sentiment]);\n            \n            autoTable(doc, {\n              head: [[t(\"pdf_topic\"), t(\"pdf_sentiment\")]],\n              body: topicsData,\n              startY: lastY + 5,\n              theme: 'grid',\n              styles: { fontSize: 10 },\n              headStyles: { fillColor: [66, 66, 66] }\n            });\n            lastY += 50;\n          } else {\n            doc.setFontSize(10);\n            doc.text(t(\"pdf_no_topics_data\"), 15, lastY + 5);\n            lastY += 10;\n          }\n        }\n      }\n      \n      // Nueva página para tendencia y palabras clave\n      doc.addPage();\n      lastY = 20;\n      \n      // Añadir gráfico de tendencia de conversaciones\n      if (trendChartElement) {\n        try {\n          doc.setFontSize(14);\n          doc.text(t(\"pdf_conversation_trend\"), 15, lastY);\n          \n          // Añadir descripción explicativa\n          doc.setFontSize(9);\n          doc.setTextColor(40, 40, 40); // Color más oscuro para mejor visibilidad\n          doc.text(t(\"pdf_trend_description\"), 15, lastY + 8);\n          doc.text(t(\"pdf_trend_description2\"), 15, lastY + 12);\n          \n          const trendCanvas = await html2canvas(trendChartElement);\n          const trendImgData = trendCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            trendImgData, \n            'PNG', \n            15, // x\n            lastY + 5, // y\n            imgWidth, \n            imgHeight\n          );\n          \n          lastY += imgHeight + 15;\n        } catch (error) {\n          console.error('Error al capturar gráfico de tendencia:', error);\n          \n          // Mostrar datos en forma de tabla si falla la captura del gráfico\n          if (conversationAnalytics?.conversationsByDay && conversationAnalytics.conversationsByDay.length > 0) {\n            const trendData = conversationAnalytics.conversationsByDay.map(item => [item.date, item.count]);\n            \n            autoTable(doc, {\n              head: [['Fecha', 'Número de Conversaciones']],\n              body: trendData,\n              startY: lastY + 5,\n              theme: 'grid',\n              styles: { fontSize: 10 },\n              headStyles: { fillColor: [66, 66, 66] }\n            });\n            lastY += 50;\n          } else {\n            doc.setFontSize(10);\n            doc.text('No hay datos de tendencia disponibles.', 15, lastY + 5);\n            lastY += 10;\n          }\n        }\n      }\n      \n      // Añadir nube de palabras clave\n      if (keywordsElement && lastY < pageHeight - 100) {\n        try {\n          doc.setFontSize(14);\n          doc.text(t(\"pdf_keywords\"), 15, lastY);\n          \n          // Añadir descripción explicativa\n          doc.setFontSize(9);\n          doc.setTextColor(40, 40, 40); // Color más oscuro para mejor visibilidad\n          doc.text(t(\"pdf_keywords_description\"), 15, lastY + 8);\n          doc.text(t(\"pdf_keywords_description2\"), 15, lastY + 12);\n          \n          const keywordsCanvas = await html2canvas(keywordsElement);\n          const keywordsImgData = keywordsCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            keywordsImgData, \n            'PNG', \n            15, // x\n            lastY + 16, // y\n            imgWidth, \n            imgHeight\n          );\n          \n          lastY += imgHeight + 25;\n          \n          // Si no hay espacio suficiente, nueva página\n          if (lastY > pageHeight - 100) {\n            doc.addPage();\n            lastY = 20;\n          }\n        } catch (error) {\n          console.error('Error al capturar nube de palabras:', error);\n          \n          // Mostrar mensaje si falla la captura del gráfico\n          doc.setFontSize(10);\n          doc.text(t(\"pdf_no_keywords\"), 15, lastY + 5);\n          lastY += 15;\n          \n          // Si no hay espacio suficiente, nueva página\n          if (lastY > pageHeight - 100) {\n            doc.addPage();\n            lastY = 20;\n          }\n        }\n      }\n      \n      // Si hay espacio, añadir rendimiento de integraciones\n      if (lastY < pageHeight - 100 && integrationPerformanceElement) {\n        try {\n          doc.setFontSize(14);\n          doc.text(t(\"pdf_integration_performance\"), 15, lastY);\n          \n          // Añadir descripción explicativa\n          doc.setFontSize(9);\n          doc.setTextColor(40, 40, 40); // Color más oscuro para mejor visibilidad\n          doc.text(t(\"pdf_performance_description\"), 15, lastY + 8);\n          doc.text(t(\"pdf_performance_description2\"), 15, lastY + 12);\n          \n          const performanceCanvas = await html2canvas(integrationPerformanceElement);\n          const performanceImgData = performanceCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            performanceImgData, \n            'PNG', \n            15, // x\n            lastY + 5, // y\n            imgWidth, \n            imgHeight\n          );\n          \n        } catch (error) {\n          console.error('Error al capturar gráfico de rendimiento:', error);\n          \n          // Mostrar datos en forma de tabla si falla la captura del gráfico\n          if (integrationPerformance && integrationPerformance.length > 0) {\n            const performanceData = integrationPerformance.map(item => [\n              item.integrationName || t(\"pdf_unknown\"),\n              item.conversationCount || 0,\n              `${Math.round(item.resolutionRate || 0)}%`,\n              `${Math.round(item.userSatisfaction || 0)}%`\n            ]);\n            \n            autoTable(doc, {\n              head: [[t(\"pdf_integration\"), t(\"pdf_conversations\"), t(\"pdf_resolution_rate\"), t(\"pdf_satisfaction\")]],\n              body: performanceData,\n              startY: lastY + 5,\n              theme: 'grid',\n              styles: { fontSize: 9 },\n              headStyles: { fillColor: [66, 66, 66] }\n            });\n          } else {\n            doc.setFontSize(10);\n            doc.text(t(\"pdf_no_performance_data\"), 15, lastY + 5);\n          }\n        }\n      }\n      \n      // Añadir pie de página\n      const pageCount = doc.getNumberOfPages();\n      for (let i = 1; i <= pageCount; i++) {\n        doc.setPage(i);\n        doc.setFontSize(8);\n        doc.text(t(\"pdf_page_footer\", { page: i, total: pageCount }), pageWidth / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });\n      }\n      \n      // Guardar el PDF\n      doc.save(`analytics_report_${date.replace(/\\//g, '-')}.pdf`);\n    } catch (error) {\n      console.error('Error al generar PDF:', error);\n      alert(t(\"pdf_error_generating\"));\n    }\n  };\n\n  return (\n    <div className=\"container px-4 mx-auto py-8\">\n      <div className=\"flex flex-col gap-8\">\n        <div className=\"flex flex-wrap justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">{t(\"analytics\")}</h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {t(\"analytics_description\")}\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              onClick={downloadPdfReport}\n              variant=\"default\" \n              className=\"flex items-center gap-2\"\n              disabled={Boolean(isLoading || hasError)}\n            >\n              <Download className=\"w-4 h-4\" />\n              {t(\"export_pdf\")}\n            </Button>\n            <Button \n              onClick={() => navigate('/dashboard')}\n              variant=\"outline\" \n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              {t(\"back_to_dashboard\")}\n            </Button>\n          </div>\n        </div>\n\n\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p className=\"text-gray-600 dark:text-gray-400\">{t(\"loading_analytics\")}</p>\n            </div>\n          </div>\n        ) : hasError ? (\n          <div className=\"text-center p-8 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n            <CircleX className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">{t(\"analytics_error\")}</h2>\n            <p className=\"text-gray-600 dark:text-gray-400\">{t(\"analytics_error_description\")}</p>\n          </div>\n        ) : (\n          <div>\n            {/* Analytics Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">{t(\"total_conversations\")}</CardTitle>\n                  <MessageSquare className=\"w-4 h-4 text-gray-500\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold\">{dashboardStats.totalConversations.toLocaleString()}</div>\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    {t(\"all_integrations\")}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">{t(\"resolution_rate\")}</CardTitle>\n                  <BarChart className=\"w-4 h-4 text-gray-500\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold\">{formatPercentage(dashboardStats.resolutionRate)}</div>\n                  <div className=\"mt-2\">\n                    <Progress value={dashboardStats.resolutionRate} className=\"h-2\" />\n                  </div>\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    {dashboardStats.resolutionRate >= 70 ? (\n                      <span className=\"text-green-500 flex items-center gap-1\">\n                        <ArrowUp className=\"w-3 h-3\" /> {t(\"good_performance\")}\n                      </span>\n                    ) : dashboardStats.resolutionRate >= 40 ? (\n                      <span className=\"text-yellow-500\">{t(\"average_performance\")}</span>\n                    ) : (\n                      <span className=\"text-red-500 flex items-center gap-1\">\n                        <ArrowDown className=\"w-3 h-3\" /> {t(\"needs_improvement\")}\n                      </span>\n                    )}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">{t(\"avg_response_time\")}</CardTitle>\n                  <Clock className=\"w-4 h-4 text-gray-500\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold\">{formatTime(dashboardStats.averageResponseTime)}</div>\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    {dashboardStats.averageResponseTime <= 30 ? (\n                      <span className=\"text-green-500 flex items-center gap-1\">\n                        <ArrowUp className=\"w-3 h-3\" /> {t(\"fast_responses\")}\n                      </span>\n                    ) : dashboardStats.averageResponseTime <= 60 ? (\n                      <span className=\"text-yellow-500\">{t(\"average_speed\")}</span>\n                    ) : (\n                      <span className=\"text-red-500 flex items-center gap-1\">\n                        <ArrowDown className=\"w-3 h-3\" /> {t(\"slower_than_average\")}\n                      </span>\n                    )}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Conversation Analytics Section */}\n            <div className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4\">{t(\"conversation_analysis\")}</h2>\n              \n              {/* Products and Topics Charts */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n                <ProductDemandChart \n                  data={conversationAnalytics?.topProducts || []} \n                  loading={isLoadingConversation}\n                />\n                \n                <TopicSentimentChart \n                  data={conversationAnalytics?.topTopics || []} \n                  loading={isLoadingConversation}\n                />\n              </div>\n              \n              {/* Trend and Keywords */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <ConversationTrendChart \n                  data={conversationAnalytics?.conversationsByDay || []} \n                  loading={isLoadingConversation}\n                />\n                \n                <KeywordCloud \n                  data={conversationAnalytics?.keywordFrequency || []} \n                  loading={isLoadingConversation}\n                />\n              </div>\n            </div>\n\n            {/* Integration Performance Section */}\n            <div className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-4\">{t(\"integration_performance\")}</h2>\n              \n              <IntegrationPerformanceChart \n                data={integrationPerformance || []} \n                loading={isLoadingPerformance}\n              />\n            </div>\n            \n            {/* Additional Metrics Section */}\n            <div className=\"mb-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t(\"advanced_analysis\")}</CardTitle>\n                  <CardDescription>\n                    {t(\"advanced_metrics\")}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <div className=\"p-4 backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg\">\n                      <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 card-text-enhance\">{t(\"avg_messages\")}</h3>\n                      <p className=\"text-2xl font-bold mt-1 card-text-enhance\">5.3</p>\n                      <p className=\"text-xs text-gray-500 mt-1 card-text-enhance\">{t(\"messages_per_conversation\")}</p>\n                    </div>\n                    \n                    <div className=\"p-4 backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg\">\n                      <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 card-text-enhance\">{t(\"avg_duration\")}</h3>\n                      <p className=\"text-2xl font-bold mt-1 card-text-enhance\">4m 12s</p>\n                      <p className=\"text-xs text-gray-500 mt-1 card-text-enhance\">{t(\"time_per_conversation\")}</p>\n                    </div>\n                    \n                    <div className=\"p-4 backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg\">\n                      <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 card-text-enhance\">{t(\"peak_hours\")}</h3>\n                      <p className=\"text-2xl font-bold mt-1 card-text-enhance\">14:00 - 16:00</p>\n                      <p className=\"text-xs text-gray-500 mt-1 card-text-enhance\">{t(\"highest_activity\")}</p>\n                    </div>\n                    \n                    <div className=\"p-4 backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg\">\n                      <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 card-text-enhance\">{t(\"devices\")}</h3>\n                      <p className=\"text-2xl font-bold mt-1 card-text-enhance\">68% / 32%</p>\n                      <p className=\"text-xs text-gray-500 mt-1 card-text-enhance\">{t(\"mobile_desktop\")}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":25007},"client/src/pages/checkout.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation, useRoute, useRouter } from 'wouter';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/context/auth-context\";\nimport CheckoutForm from '@/components/checkout/checkout-form';\nimport Header from '@/components/header';\nimport Footer from '@/components/footer';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useTranslation } from 'react-i18next';\n\n// Make sure to call loadStripe outside of a component's render to avoid\n// recreating the Stripe object on every render.\n// Handle missing Stripe key gracefully - payments will be disabled but app continues to work\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY)\n  : null;\n\ninterface PricingPlan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  currency: string;\n  interval: string;\n  features: string[];\n  tier: string;\n  interactionsLimit: number;\n  isAnnual: boolean;\n  discount?: number;\n}\n\nexport default function Checkout() {\n  const { t } = useTranslation();\n  const [, params] = useRoute<{ planId: string }>('/checkout/:planId');\n  const planId = params?.planId;\n  const [, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [plan, setPlan] = useState<PricingPlan | null>(null);\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [sessionUrl, setSessionUrl] = useState<string | null>(null);\n  const [paymentError, setPaymentError] = useState<string | null>(null);\n  const [processingPayment, setProcessingPayment] = useState(false);\n  \n  useEffect(() => {\n    // Redirect to pricing page if no planId is specified\n    if (!planId) {\n      navigate('/pricing');\n      return;\n    }\n    \n    // Redirect to login if not authenticated\n    if (!isAuthenticated) {\n      toast({\n        title: t('loginRequired'),\n        description: t('loginToSubscribe'),\n        variant: \"destructive\",\n      });\n      navigate('/login?redirect=/checkout/' + planId);\n      return;\n    }\n    \n    // Fetch plan details\n    const fetchPlan = async () => {\n      try {\n        setLoading(true);\n        const response = await apiRequest('GET', '/api/pricing/plans');\n        const allPlans = await response.json();\n        \n        const selectedPlan = allPlans.find((p: PricingPlan) => p.id.toLowerCase() === planId.toLowerCase());\n        if (!selectedPlan) {\n          toast({\n            title: t('planNotFound'),\n            description: t('planNotFoundDesc'),\n            variant: \"destructive\",\n          });\n          navigate('/pricing');\n          return;\n        }\n        \n        setPlan(selectedPlan);\n      } catch (error) {\n        console.error('Error fetching plan:', error);\n        toast({\n          title: t('error'),\n          description: t('errorFetchingPlan'),\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchPlan();\n  }, [planId, isAuthenticated, navigate, toast, t]);\n  \n  const handleCheckout = async () => {\n    if (!plan) return;\n    \n    try {\n      setProcessingPayment(true);\n      setPaymentError(null);\n      \n      // Get billing type from plan\n      const billingType = plan.isAnnual ? 'annual' : 'monthly';\n      \n      // Create checkout session\n      const response = await apiRequest('POST', '/api/subscription/checkout', {\n        planId: plan.id,\n        billingType\n      });\n      \n      const result = await response.json();\n      \n      if (result.success && result.sessionUrl) {\n        // Redirect to Stripe checkout\n        window.location.href = result.sessionUrl;\n      } else if (result.success && result.sessionId) {\n        // Use Elements and CheckoutForm for embedded checkout\n        setSessionId(result.sessionId);\n      } else {\n        throw new Error(result.message || t('checkoutError'));\n      }\n    } catch (error: any) {\n      console.error('Error creating checkout session:', error);\n      setPaymentError(error.message || t('checkoutError'));\n      toast({\n        title: t('paymentError'),\n        description: error.message || t('checkoutError'),\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessingPayment(false);\n    }\n  };\n  \n  // Format currency with appropriate symbol\n  const formatCurrency = (amount: number, currency: string = 'cad') => {\n    const currencySymbols: Record<string, string> = {\n      cad: 'CA$',\n      usd: '$',\n      eur: '€',\n      gbp: '£'\n    };\n    \n    const symbol = currencySymbols[currency.toLowerCase()] || currency.toUpperCase();\n    return `${symbol}${amount.toFixed(2)}`;\n  };\n  \n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <main className=\"flex-grow flex items-center justify-center\">\n          <div className=\"flex flex-col items-center justify-center gap-4 p-8\">\n            <Loader2 className=\"w-12 h-12 text-primary animate-spin\" />\n            <p className=\"text-lg\">{t('loadingPlan')}</p>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n  \n  if (!plan) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <main className=\"flex-grow flex items-center justify-center\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle className=\"text-xl\">{t('planNotFound')}</CardTitle>\n              <CardDescription>{t('planNotFoundDesc')}</CardDescription>\n            </CardHeader>\n            <CardContent className=\"flex flex-col gap-4\">\n              <Button onClick={() => navigate('/pricing')}>{t('backToPricing')}</Button>\n            </CardContent>\n          </Card>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-grow py-12 px-4 sm:px-6 max-w-6xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          {/* Order Summary */}\n          <Card className=\"h-fit\">\n            <CardHeader>\n              <CardTitle>{t('orderSummary')}</CardTitle>\n              <CardDescription>{t('reviewOrder')}</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <h3 className=\"font-semibold text-lg\">{plan.name}</h3>\n                    <Badge variant={plan.isAnnual ? \"secondary\" : \"outline\"}>\n                      {plan.isAnnual ? t('annual') : t('monthly')}\n                    </Badge>\n                  </div>\n                  <span className=\"font-semibold\">\n                    {formatCurrency(plan.price, plan.currency)}\n                    <span className=\"text-muted-foreground text-sm\">/{plan.isAnnual ? t('year') : t('month')}</span>\n                  </span>\n                </div>\n                <p className=\"text-muted-foreground\">{plan.description}</p>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-1\">\n                <h4 className=\"font-medium\">{t('included')}</h4>\n                <ul className=\"space-y-1 text-sm\">\n                  {plan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-start gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-primary mt-1 flex-shrink-0\" />\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n              \n              <Separator />\n              \n              <div>\n                <div className=\"flex justify-between font-semibold\">\n                  <span>{t('total')}</span>\n                  <span>\n                    {formatCurrency(plan.price, plan.currency)}\n                    <span className=\"text-muted-foreground text-sm\">/{plan.isAnnual ? t('year') : t('month')}</span>\n                  </span>\n                </div>\n                {plan.discount && plan.discount > 0 && (\n                  <p className=\"text-sm text-emerald-600 mt-1\">\n                    {t('saveWithAnnual', { percent: plan.discount })}\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Payment Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle>{t('payment')}</CardTitle>\n              <CardDescription>{t('paymentSecure')}</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {!stripePromise ? (\n                // Show message when Stripe is not configured\n                <div className=\"bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800 rounded-md p-4\">\n                  <div className=\"flex\">\n                    <AlertTriangle className=\"h-5 w-5 text-yellow-500 mr-2\" />\n                    <div>\n                      <p className=\"text-sm text-yellow-600 dark:text-yellow-400 font-medium\">Payment System Not Configured</p>\n                      <p className=\"text-sm text-yellow-600 dark:text-yellow-400 mt-1\">\n                        The payment system is currently being set up. Please contact support for assistance with your subscription.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ) : sessionId ? (\n                // Show Stripe Elements form for embedded checkout\n                <Elements stripe={stripePromise} options={{ clientSecret: sessionId }}>\n                  <CheckoutForm />\n                </Elements>\n              ) : (\n                <>\n                  {paymentError && (\n                    <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-md p-4 mb-4\">\n                      <div className=\"flex\">\n                        <AlertTriangle className=\"h-5 w-5 text-red-500 mr-2\" />\n                        <p className=\"text-sm text-red-600 dark:text-red-400\">{paymentError}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"space-y-2\">\n                    <p>{t('proceedToCheckout')}</p>\n                    <Button \n                      onClick={handleCheckout} \n                      className=\"w-full\" \n                      disabled={processingPayment}\n                    >\n                      {processingPayment && (\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      )}\n                      {t('payNow')} ({formatCurrency(plan.price, plan.currency)}/{plan.isAnnual ? t('year') : t('month')})\n                    </Button>\n                  </div>\n                  \n                  <div className=\"text-center space-y-2 text-sm text-muted-foreground\">\n                    <p>{t('securePayment')}</p>\n                    <p>{t('billingPeriodInfo', { \n                      period: plan.isAnnual ? t('annually') : t('monthly') \n                    })}</p>\n                    <p>{t('cancellationInfo')}</p>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":11955},"client/src/pages/contact.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Mail, Phone, MapPin, Clock } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    toast({\n      title: t('contact.form.success_title'),\n      description: t('contact.form.success_message'),\n    });\n    \n    setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    setIsSubmitting(false);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"py-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n              {t('contact.title')}\n            </h1>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              {t('contact.subtitle')}\n            </p>\n          </div>\n        </section>\n\n        <section className=\"py-16\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n              {/* Contact Information */}\n              <div>\n                <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8\">\n                  {t('contact.info.title')}\n                </h2>\n                \n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-center gap-3\">\n                        <Mail className=\"h-5 w-5 text-primary-600\" />\n                        {t('contact.info.email')}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-600 dark:text-gray-300\">support@aipps.ca</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-center gap-3\">\n                        <Phone className=\"h-5 w-5 text-primary-600\" />\n                        {t('contact.info.phone')}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-600 dark:text-gray-300\">+1 (555) 123-4567</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-center gap-3\">\n                        <MapPin className=\"h-5 w-5 text-primary-600\" />\n                        {t('contact.info.address')}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        Montreal, QC<br />\n                        Canada\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-center gap-3\">\n                        <Clock className=\"h-5 w-5 text-primary-600\" />\n                        {t('contact.info.hours')}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        {t('contact.info.hours_details')}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n\n              {/* Contact Form */}\n              <div>\n                <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8\">\n                  {t('contact.form.title')}\n                </h2>\n                \n                <Card>\n                  <CardContent className=\"p-6\">\n                    <form onSubmit={handleSubmit} className=\"space-y-6\">\n                      <div>\n                        <Label htmlFor=\"name\">{t('contact.form.name')}</Label>\n                        <Input\n                          id=\"name\"\n                          name=\"name\"\n                          type=\"text\"\n                          required\n                          value={formData.name}\n                          onChange={handleInputChange}\n                          placeholder={t('contact.form.name_placeholder')}\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"email\">{t('contact.form.email')}</Label>\n                        <Input\n                          id=\"email\"\n                          name=\"email\"\n                          type=\"email\"\n                          required\n                          value={formData.email}\n                          onChange={handleInputChange}\n                          placeholder={t('contact.form.email_placeholder')}\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"subject\">{t('contact.form.subject')}</Label>\n                        <Input\n                          id=\"subject\"\n                          name=\"subject\"\n                          type=\"text\"\n                          required\n                          value={formData.subject}\n                          onChange={handleInputChange}\n                          placeholder={t('contact.form.subject_placeholder')}\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"message\">{t('contact.form.message')}</Label>\n                        <Textarea\n                          id=\"message\"\n                          name=\"message\"\n                          required\n                          rows={5}\n                          value={formData.message}\n                          onChange={handleInputChange}\n                          placeholder={t('contact.form.message_placeholder')}\n                        />\n                      </div>\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={isSubmitting}\n                      >\n                        {isSubmitting ? t('contact.form.sending') : t('contact.form.send')}\n                      </Button>\n                    </form>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":7763},"client/src/pages/conversation-details.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Progress } from \"@/components/ui/progress\";\nimport DashboardLayout from \"@/layouts/dashboard-layout\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function ConversationDetails() {\n  const { id } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { t } = useTranslation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Obtener detalles de la conversación\n  const { data: conversation, isLoading: isLoadingConversation } = useQuery({\n    queryKey: [`/api/conversations/${id}`],\n  });\n\n  // Obtener mensajes de la conversación\n  const { data: messages, isLoading: isLoadingMessages } = useQuery({\n    queryKey: [`/api/conversations/${id}/messages`],\n  });\n\n  useEffect(() => {\n    // Si no hay ID o la conversación no existe, redirigir al dashboard\n    if (!id) {\n      navigate(\"/dashboard?tab=conversations\");\n      toast({\n        title: \"Error\",\n        description: \"ID de conversación no válido\",\n        variant: \"destructive\",\n      });\n    }\n  }, [id, navigate, toast]);\n\n  // Filtrar mensajes por búsqueda si es necesario\n  const filteredMessages = messages \n    ? searchQuery \n      ? messages.filter((msg: any) => \n          msg.content.toLowerCase().includes(searchQuery.toLowerCase()))\n      : messages\n    : [];\n\n  return (\n    <DashboardLayout>\n      <div className=\"w-full max-w-full px-6 py-6\">\n        <div className=\"flex items-center mb-6\">\n          <Button \n            variant=\"ghost\" \n            className=\"mr-2 p-2\" \n            onClick={() => navigate(\"/dashboard?tab=conversations\")}\n          >\n            <ChevronLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold\">Detalles de la Conversación</h1>\n        </div>\n\n        {isLoadingConversation ? (\n          <div className=\"w-full py-20 flex justify-center\">\n            <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : !conversation ? (\n          <Card className=\"p-6 text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">Conversación no encontrada</h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              No se pudo encontrar la conversación solicitada\n            </p>\n            <Button onClick={() => navigate(\"/dashboard?tab=conversations\")}>\n              Volver al Dashboard\n            </Button>\n          </Card>\n        ) : (\n          <>\n            <Card className=\"p-6 mb-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"text-lg font-medium mb-2\">Información de la Conversación</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n  <span className=\"text-gray-500\">{t('visitor')}:</span>\n  <span className=\"font-medium\">\n    {conversation.visitorName ? conversation.visitorName : `#${conversation.visitorId || t('anonymous')}`}\n  </span>\n</div>\n{conversation.visitorEmail && (\n  <div className=\"flex justify-between text-sm\">\n    <span className=\"text-gray-500\">Email:</span>\n    <span className=\"font-medium\">{conversation.visitorEmail}</span>\n  </div>\n)}\n{conversation.visitorEmail && (\n  <div className=\"flex justify-between text-sm\">\n    <span className=\"text-gray-500\">Email:</span>\n    <span className=\"font-medium\">{conversation.visitorEmail}</span>\n  </div>\n)}\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">{t('visitor')}:</span>\n                      <span className=\"font-medium\">#{conversation.visitorId || t('anonymous')}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Estado:</span>\n                      <span className={`font-medium ${\n                        conversation.status === 'completed' \n                          ? 'text-green-600 dark:text-green-400' \n                          : 'text-yellow-600 dark:text-yellow-400'\n                      }`}>\n                        {conversation.status === 'completed' ? 'Completada' : 'Activa'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Fecha de inicio:</span>\n                      <span className=\"font-medium\">\n                        {new Date(conversation.createdAt).toLocaleString()}\n                      </span>\n                    </div>\n                    {conversation.endedAt && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-500\">Fecha de fin:</span>\n                        <span className=\"font-medium\">\n                          {new Date(conversation.endedAt).toLocaleString()}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-medium mb-2\">Rendimiento</h3>\n                  <div className=\"space-y-4\">\n                    {conversation.score !== undefined && (\n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-500\">Puntuación de satisfacción:</span>\n                          <span className=\"font-medium\">{conversation.score}/10</span>\n                        </div>\n                        <Progress value={conversation.score * 10} className=\"h-2\" />\n                      </div>\n                    )}\n\n                    {conversation.resolution !== undefined && (\n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-500\">Resolución:</span>\n                          <span className=\"font-medium\">{conversation.resolution ? 'Resuelta' : 'No resuelta'}</span>\n                        </div>\n                      </div>\n                    )}\n\n                    {conversation.messageCount !== undefined && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-500\">Cantidad de mensajes:</span>\n                        <span className=\"font-medium\">{conversation.messageCount}</span>\n                      </div>\n                    )}\n\n                    {conversation.source && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-500\">Origen:</span>\n                        <span className=\"font-medium\">{conversation.source}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-bold mb-4\">Mensajes de la Conversación</h2>\n\n              {/* Búsqueda */}\n              <div className=\"mb-4\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Buscar en mensajes...\"\n                  className=\"w-full p-2 border border-gray-300 dark:border-gray-700 rounded-md dark:bg-gray-800\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n              </div>\n\n              {isLoadingMessages ? (\n                <div className=\"w-full py-10 flex justify-center\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\"></div>\n                </div>\n              ) : filteredMessages.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {filteredMessages.map((message: any) => (\n                    <Card \n                      key={message.id}\n                      className={`p-4 ${\n                        message.role === 'user' \n                          ? 'border-l-4 border-l-blue-400' \n                          : message.role === 'assistant'\n                            ? 'border-l-4 border-l-green-400'\n                            : 'border-l-4 border-l-gray-400'\n                      }`}\n                    >\n                      <div className=\"flex justify-between mb-2\">\n                        <span className=\"font-medium\">\n                          {message.role === 'user' \n                            ? 'Usuario' \n                            : message.role === 'assistant'\n                              ? 'Asistente'\n                              : 'Sistema'}\n                        </span>\n                        <span className=\"text-sm text-gray-500\">\n                          {new Date(message.createdAt).toLocaleString()}\n                        </span>\n                      </div>\n                      <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <Card className=\"p-6 text-center\">\n                  <h3 className=\"text-lg font-medium mb-2\">No hay mensajes</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    No se encontraron mensajes en esta conversación\n                  </p>\n                </Card>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":9957},"client/src/pages/create-integration.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/context/auth-context-stub\";\nimport { useUpgradeModal } from \"@/hooks/use-upgrade-modal\";\nimport { usePlanLimits } from \"@/hooks/use-plan-limits\";\nimport UpgradePlanModal from \"@/components/upgrade-plan-modal\";\n\n// Componentes UI\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Info, ArrowLeft, CheckCircle2, Loader, File, RefreshCw, Upload } from \"lucide-react\";\n\n// Esquema de validación para el formulario\nconst formSchema = z.object({\n  name: z.string().min(2, { message: \"El nombre debe tener al menos 2 caracteres\" }),\n  url: z.string().url({ message: \"Debe ser una URL válida\" }),\n  themeColor: z.string().default(\"#3B82F6\"),\n  position: z.enum([\"bottom-right\", \"bottom-left\", \"top-right\", \"top-left\"], {\n    required_error: \"Debes seleccionar una posición\"\n  }).default(\"bottom-right\"),\n  active: z.boolean().default(true),\n  botBehavior: z.string().optional(),\n  widgetType: z.enum([\"bubble\", \"fullscreen\"], {\n    required_error: \"Debes seleccionar un tipo de widget\"\n  }).default(\"bubble\"),\n  ignoredSections: z.array(z.string()).default([]),\n  ignoredSectionsText: z.string().optional(),\n  description: z.string().min(10, { message: \"La descripción debe tener al menos 10 caracteres\" }),\n  language: z.enum([\"es\", \"en\", \"fr\"], {\n    required_error: \"Debes seleccionar un idioma\"\n  }).default(\"es\"),\n  // Mantenemos customization para compatibilidad\n  customization: z.object({\n    assistantName: z.string().optional(),\n    defaultGreeting: z.string().optional(),\n    showAvailability: z.boolean().optional(),\n    userBubbleColor: z.string().optional(),\n    assistantBubbleColor: z.string().optional(),\n    font: z.string().optional(),\n    conversationStyle: z.string().optional(),\n  }).optional(),\n});\n\n// Tipo derivado del esquema Zod\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function CreateIntegration() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n  const [isUploadingFiles, setIsUploadingFiles] = useState(false);\n  const [isExtracting, setIsExtracting] = useState(false);\n  const [extractedContent, setExtractedContent] = useState<Array<{url: string, title: string}>>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const upgradeModal = useUpgradeModal();\n  const { canCreateResource, limits } = usePlanLimits();\n\n  // Inicializamos el formulario\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      url: \"\",\n      themeColor: \"#3B82F6\",\n      position: \"bottom-right\",\n      active: true,\n      botBehavior: \"\",\n      widgetType: \"bubble\",\n      language: \"es\",\n      ignoredSections: [],\n      ignoredSectionsText: \"\",\n      description: \"Soy un asistente inteligente especializado en ayudar a los usuarios de este sitio web. Estoy aquí para responder preguntas, brindar información y ofrecer soporte personalizado.\",\n      customization: {\n        assistantName: \"AIPI Assistant\",\n        defaultGreeting: \"¡Hola! ¿En qué puedo ayudarte hoy?\",\n        showAvailability: true,\n        userBubbleColor: \"#1e88e5\",\n        assistantBubbleColor: \"#f5f5f5\", \n        font: \"Inter\",\n        conversationStyle: \"modern\",\n      },\n    },\n  });\n\n  // Función para manejar la selección de archivos\n  const handleFileSelection = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  // Función para manejar el cambio de archivos\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      setSelectedFiles(e.target.files);\n    }\n  };\n\n  // Función para subir documentos\n  const uploadFiles = async (integrationId: number) => {\n    if (!selectedFiles || selectedFiles.length === 0) {\n      return [];\n    }\n\n    setIsUploadingFiles(true);\n    \n    try {\n      const formData = new FormData();\n      formData.append(\"integrationId\", integrationId.toString());\n      \n      for (let i = 0; i < selectedFiles.length; i++) {\n        formData.append(\"documents\", selectedFiles[i]);\n      }\n      \n      const response = await fetch(\"/api/documents/upload\", {\n        method: \"POST\",\n        body: formData,\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"auth_token\")}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Error al subir los documentos\");\n      }\n      \n      const data = await response.json();\n      \n      toast({\n        title: \"Documentos subidos\",\n        description: `Se han subido ${data.documents?.length || 0} documentos correctamente`,\n      });\n      \n      return data.documents || [];\n    } catch (error) {\n      console.error(\"Error al subir documentos:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudieron subir los documentos. Inténtalo de nuevo.\",\n        variant: \"destructive\",\n      });\n      return [];\n    } finally {\n      setIsUploadingFiles(false);\n    }\n  };\n\n  // Función para extraer contenido del sitio\n  const extractSiteContent = async (integrationId: number) => {\n    const url = form.getValues(\"url\");\n    \n    if (!url) {\n      toast({\n        title: \"Error\",\n        description: \"Debes introducir una URL válida\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n    \n    setIsExtracting(true);\n    \n    try {\n      const response = await fetch(\"/api/site-content/extract\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"auth_token\")}`,\n        },\n        body: JSON.stringify({\n          integrationId,\n          url,\n          maxPages: 5,\n        }),\n      });\n      \n      // Verificar content-type para asegurar que es JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        // Si no es JSON, leer como texto para debug\n        const textResponse = await response.text();\n        console.error(\"Respuesta no-JSON recibida:\", textResponse.substring(0, 200));\n        throw new Error(\"El servidor devolvió una respuesta inválida. Verifica la configuración.\");\n      }\n      \n      if (!response.ok) {\n        let errorMessage = \"Error al extraer el contenido\";\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorMessage;\n        } catch {\n          // Si no se puede parsear el error como JSON, usar mensaje genérico\n        }\n        throw new Error(errorMessage);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message || \"Error en la extracción del contenido\");\n      }\n      \n      setExtractedContent(data.savedContent.map((content: any) => ({\n        url: content.url,\n        title: content.title,\n      })));\n      \n      toast({\n        title: \"Extracción completada\",\n        description: `Se procesaron ${data.pagesProcessed} páginas y se guardó el contenido.`,\n      });\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error en extracción:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Ocurrió un error al procesar el sitio\";\n      toast({\n        title: \"Error en extracción\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      return false;\n    } finally {\n      setIsExtracting(false);\n    }\n  };\n\n  // Mutación para crear la integración\n  const createIntegrationMutation = useMutation({\n    mutationFn: async (data: FormValues) => {\n      // Primero creamos la integración\n      const response = await apiRequest(\"POST\", \"/api/integrations\", data);\n      const integration = await response.json();\n      \n      // Luego subimos documentos si hay seleccionados\n      if (selectedFiles && selectedFiles.length > 0) {\n        await uploadFiles(integration.id);\n      }\n      \n      // Y finalmente extraemos el contenido del sitio si hay URL\n      if (data.url) {\n        await extractSiteContent(integration.id);\n      }\n      \n      return integration;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n      toast({\n        title: \"Integración creada\",\n        description: \"La integración se ha creado correctamente\",\n        variant: \"default\",\n      });\n      navigate(\"/dashboard\");\n    },\n    onError: (error) => {\n      setIsSubmitting(false);\n      \n      // Check if it's a plan limit error (403 status)\n      if (error.message && error.message.includes(\"límite\")) {\n        upgradeModal.handlePlanLimitError(error.message);\n      } else {\n        toast({\n          title: \"Error al crear la integración\",\n          description: error.message || \"Ha ocurrido un error al crear la integración\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Verificar límites antes del envío\n  const handleSubmitWithLimitCheck = async (data: FormValues) => {\n    try {\n      // Verificar si puede crear más integraciones\n      const canCreate = await canCreateResource('integrations');\n      \n      if (!canCreate) {\n        // Mostrar modal de upgrade con información específica\n        const integrationLimit = limits?.limits?.integrations?.limit || 1;\n        const integrationUsed = limits?.limits?.integrations?.used || 0;\n        const planName = limits?.planName || \"Plan Básico\";\n        \n        upgradeModal.showUpgradeModal('integrations', integrationLimit, planName);\n        return;\n      }\n      \n      // Si puede crear, proceder normalmente\n      setIsSubmitting(true);\n      createIntegrationMutation.mutate(data);\n    } catch (error) {\n      console.error('Error verificando límites:', error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo verificar los límites de tu plan. Inténtalo de nuevo.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Manejador de envío del formulario\n  const onSubmit = (data: FormValues) => {\n    handleSubmitWithLimitCheck(data);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-5xl\">\n      <div className=\"flex items-center mb-8\">\n        <Button \n          variant=\"ghost\" \n          className=\"mr-2 p-0 h-auto\" \n          onClick={() => navigate(\"/dashboard\")}\n        >\n          <ArrowLeft className=\"h-5 w-5 mr-2\" />\n        </Button>\n        <h1 className=\"text-2xl font-bold\">Crear nueva integración</h1>\n      </div>\n\n      <Card className=\"p-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nombre de la integración</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Mi sitio web\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Un nombre descriptivo para identificar esta integración\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"url\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>URL del sitio web</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"https://ejemplo.com\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      La URL completa de tu sitio web\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"themeColor\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Color del tema</FormLabel>\n                    <div className=\"flex items-center gap-2\">\n                      <FormControl>\n                        <Input {...field} type=\"color\" className=\"w-10 h-10 p-1\" />\n                      </FormControl>\n                      <Input \n                        value={field.value} \n                        onChange={field.onChange}\n                        className=\"flex-grow\"\n                      />\n                    </div>\n                    <FormDescription>\n                      El color principal del widget\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"position\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Posición del widget</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecciona una posición\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"bottom-right\">Abajo a la derecha</SelectItem>\n                        <SelectItem value=\"bottom-left\">Abajo a la izquierda</SelectItem>\n                        <SelectItem value=\"top-right\">Arriba a la derecha</SelectItem>\n                        <SelectItem value=\"top-left\">Arriba a la izquierda</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      Dónde aparecerá el widget en la página\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"language\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Idioma del widget</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecciona un idioma\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"es\">Español</SelectItem>\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"fr\">Français</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      El idioma en que se mostrará el widget a los usuarios\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"active\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                  <FormControl>\n                    <Checkbox\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <FormLabel>\n                      Integración activa\n                    </FormLabel>\n                    <FormDescription>\n                      Si está desactivada, el widget no se mostrará en tu sitio web\n                    </FormDescription>\n                  </div>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descripción del asistente</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Ejemplo: Soy un asistente especializado en productos de tecnología. Ayudo a los clientes con información sobre nuestros servicios, precios y soporte técnico.\" \n                      className=\"resize-none h-24\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Esta descripción se mostrará como mensaje de bienvenida en widgets de pantalla completa. Describe específicamente en qué ayuda tu asistente.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"widgetType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tipo de integración</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecciona un tipo\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"bubble\">Widget flotante (burbuja)</SelectItem>\n                      <SelectItem value=\"fullscreen\">Pantalla completa (estilo ChatGPT)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormDescription>\n                    Elige cómo se mostrará el asistente en tu sitio web\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"botBehavior\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Comportamiento del bot (opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Instrucciones específicas para guiar el comportamiento del asistente...\" \n                      className=\"resize-none\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Define cómo debe comportarse el asistente al interactuar con los visitantes\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"ignoredSectionsText\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Secciones ignoradas (opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"footer, #sidebar, .navigation\" \n                      className=\"resize-none\" \n                      value={field.value}\n                      onChange={(e) => {\n                        field.onChange(e);\n                        // Actualizar también ignoredSections como array\n                        const sections = e.target.value.split(',').map(s => s.trim()).filter(Boolean);\n                        form.setValue('ignoredSections', sections);\n                      }}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Selectores CSS (separados por comas) de las secciones que quieres que el asistente ignore\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md mb-6\">\n              <h3 className=\"font-medium text-lg mb-4\">Subir documentos adicionales</h3>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                Sube documentos (PDF, DOCX, Excel) para entrenar al chatbot con información adicional que no está en tu sitio web.\n              </div>\n              \n              <input \n                type=\"file\" \n                ref={fileInputRef} \n                className=\"hidden\" \n                multiple \n                accept=\".pdf,.docx,.xlsx,.xls,.csv,.doc\" \n                onChange={handleFileChange}\n              />\n              \n              <div \n                className=\"border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-md p-6 text-center\"\n                onClick={handleFileSelection}\n              >\n                <div className=\"flex flex-col items-center justify-center\">\n                  <div className=\"mb-3\">\n                    <Upload className=\"h-10 w-10 text-gray-400\" />\n                  </div>\n                  <p className=\"mb-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    Selecciona archivos para subir\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    Arrastra archivos aquí o haz clic para seleccionarlos\n                  </p>\n                </div>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"mt-4\"\n                  onClick={handleFileSelection}\n                >\n                  {selectedFiles && selectedFiles.length > 0 ? (\n                    <span className=\"flex items-center gap-2\">\n                      <File className=\"h-4 w-4\" />\n                      {selectedFiles.length} {selectedFiles.length === 1 ? 'archivo seleccionado' : 'archivos seleccionados'}\n                    </span>\n                  ) : 'Seleccionar archivos'}\n                </Button>\n              </div>\n\n              {selectedFiles && selectedFiles.length > 0 && (\n                <div className=\"mt-4 bg-slate-100 dark:bg-slate-800 p-3 rounded-md\">\n                  <h4 className=\"font-medium mb-2\">Archivos seleccionados:</h4>\n                  <ul className=\"space-y-1\">\n                    {Array.from(selectedFiles).map((file, index) => (\n                      <li key={index} className=\"flex items-center text-sm\">\n                        <File className=\"h-4 w-4 mr-2 text-blue-500\" />\n                        <span className=\"truncate\">{file.name}</span>\n                        <span className=\"ml-2 text-gray-500 dark:text-gray-400 text-xs\">\n                          ({(file.size / 1024).toFixed(0)} KB)\n                        </span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md mb-6\">\n              <h3 className=\"font-medium text-lg mb-4\">Entrenamiento con contenido del sitio</h3>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                URL del sitio web para extraer contenido\n              </div>\n              \n              <div className=\"flex gap-2 mb-4\">\n                <Input \n                  placeholder=\"localhost\" \n                  className=\"flex-grow\"\n                  value={form.getValues(\"url\")}\n                  readOnly\n                />\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  disabled={!form.getValues(\"url\") || isExtracting}\n                  className=\"min-w-24\"\n                  onClick={() => {\n                    toast({\n                      title: \"Información\",\n                      description: \"El contenido se extraerá automáticamente después de crear la integración\",\n                    });\n                  }}\n                >\n                  {isExtracting ? (\n                    <span className=\"flex items-center gap-2\">\n                      <Loader className=\"h-4 w-4 animate-spin\" />\n                      Extrayendo...\n                    </span>\n                  ) : \"Extraer contenido\"}\n                </Button>\n              </div>\n              \n              <div className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">\n                Esta función analiza el contenido de tu sitio web para que el chat pueda responder preguntas sobre él.\n              </div>\n\n              {extractedContent.length > 0 && (\n                <div className=\"mt-4 border rounded-md p-3 max-h-48 overflow-y-auto\">\n                  <h4 className=\"font-medium mb-2 text-sm\">Contenido extraído:</h4>\n                  <ul className=\"space-y-1\">\n                    {extractedContent.map((content, index) => (\n                      <li key={index} className=\"flex items-start text-sm p-2 bg-white dark:bg-gray-800 rounded-md\">\n                        <span className=\"flex-grow overflow-hidden\">\n                          <p className=\"font-medium truncate\">{content.title || \"Sin título\"}</p>\n                          <a \n                            href={content.url} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            className=\"text-xs text-blue-500 hover:underline truncate block\"\n                          >\n                            {content.url}\n                          </a>\n                        </span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <h3 className=\"font-medium text-lg mb-4\">Opciones de personalización</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"customization.assistantName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre del asistente</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.defaultGreeting\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mensaje de bienvenida</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.userBubbleColor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Color de burbuja del usuario</FormLabel>\n                      <div className=\"flex items-center gap-2\">\n                        <FormControl>\n                          <Input {...field} type=\"color\" className=\"w-10 h-10 p-1\" />\n                        </FormControl>\n                        <Input \n                          value={field.value} \n                          onChange={field.onChange}\n                          className=\"flex-grow\"\n                        />\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.assistantBubbleColor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Color de burbuja del asistente</FormLabel>\n                      <div className=\"flex items-center gap-2\">\n                        <FormControl>\n                          <Input {...field} type=\"color\" className=\"w-10 h-10 p-1\" />\n                        </FormControl>\n                        <Input \n                          value={field.value} \n                          onChange={field.onChange}\n                          className=\"flex-grow\"\n                        />\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.font\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Fuente</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecciona una fuente\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Inter\">Inter</SelectItem>\n                          <SelectItem value=\"Roboto\">Roboto</SelectItem>\n                          <SelectItem value=\"Open Sans\">Open Sans</SelectItem>\n                          <SelectItem value=\"Lato\">Lato</SelectItem>\n                          <SelectItem value=\"Montserrat\">Montserrat</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.conversationStyle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Estilo de conversación</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecciona un estilo\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"modern\">Moderno</SelectItem>\n                          <SelectItem value=\"classic\">Clásico</SelectItem>\n                          <SelectItem value=\"minimal\">Minimalista</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.showAvailability\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel>\n                          Mostrar estado de disponibilidad\n                        </FormLabel>\n                        <FormDescription>\n                          Muestra un indicador de disponibilidad en el widget\n                        </FormDescription>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <Alert className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n              <Info className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n              <AlertTitle className=\"text-blue-800 dark:text-blue-300\">Instrucciones de instalación</AlertTitle>\n              <AlertDescription className=\"text-blue-700 dark:text-blue-400\">\n                Después de crear la integración, recibirás un código que deberás añadir a tu sitio web justo antes del cierre de la etiqueta &lt;/body&gt;.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" type=\"button\" onClick={() => navigate(\"/dashboard\")}>\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting || (limits?.limits?.integrations?.remaining === 0)}\n                className=\"gap-2\"\n                title={limits?.limits?.integrations?.remaining === 0 ? `Has alcanzado el límite de ${limits?.limits?.integrations?.limit} integraciones en tu ${limits?.planName}` : \"\"}\n              >\n                {isSubmitting && (\n                  <div className=\"animate-spin w-4 h-4 border-2 border-current border-t-transparent rounded-full\" aria-hidden=\"true\" />\n                )}\n                {limits?.limits?.integrations?.remaining === 0 ? \"Límite alcanzado\" : \"Crear integración\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </Card>\n\n      <UpgradePlanModal\n        isOpen={upgradeModal.isOpen}\n        onClose={upgradeModal.hideUpgradeModal}\n        limitType={upgradeModal.limitType}\n        currentLimit={upgradeModal.currentLimit}\n        planName={upgradeModal.planName}\n      />\n    </div>\n  );\n}","size_bytes":35219},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport StatCard from \"@/components/stat-card\";\nimport DashboardTabs from \"@/components/dashboard-tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageCircle, CheckCircle, Zap, BarChart } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Define interface for dashboard stats\ninterface DashboardStats {\n  totalConversations: number;\n  resolutionRate: number;\n  averageResponseTime: number;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [location] = useLocation();\n  const [initialTab, setInitialTab] = useState(\"automation\");\n  const { t } = useTranslation();\n  \n  // Parse URL query parameters to set the initial tab\n  useEffect(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const tabParam = searchParams.get(\"tab\");\n    \n    if (tabParam && [\"automation\", \"conversations\", \"integrations\", \"settings\", \"profile\", \"forms\"].includes(tabParam)) {\n      console.log(`Dashboard: Setting initialTab to ${tabParam} from URL query parameters`);\n      setInitialTab(tabParam);\n    }\n  }, [location]);\n  \n  // Fetch dashboard stats\n  const { data: stats, isLoading: isLoadingStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: !!user,\n  });\n  \n  // Default stats when loading or no data\n  const defaultStats = {\n    totalConversations: 0,\n    resolutionRate: 0,\n    averageResponseTime: 0,\n  };\n  \n  const dashboardStats = stats || defaultStats;\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          \n          {/* Dashboard Header */}\n          <div className=\"mb-8 flex flex-wrap justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">{t(\"dashboard_title\")}</h1>\n              <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n                {t(\"manage_assistant\")}\n              </p>\n            </div>\n            <div className=\"mt-4 md:mt-0\">\n              <Link href=\"/analytics\">\n                <Button className=\"flex items-center gap-2\">\n                  <BarChart className=\"h-4 w-4\" />\n                  {t(\"analytics\")}\n                </Button>\n              </Link>\n            </div>\n          </div>\n          \n          {/* Dashboard Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <StatCard \n              title={t(\"total_conversations\")}\n              value={isLoadingStats ? t(\"loading\") : dashboardStats.totalConversations.toLocaleString()}\n              change={12.5}\n              icon={<MessageCircle />}\n              color=\"primary\"\n            />\n            \n            <StatCard \n              title={t(\"resolution_rate\")}\n              value={isLoadingStats ? t(\"loading\") : `${dashboardStats.resolutionRate.toFixed(1)}%`}\n              change={3.2}\n              icon={<CheckCircle />}\n              color=\"secondary\"\n            />\n            \n            <StatCard \n              title={t(\"avg_response_time\")}\n              value={isLoadingStats ? t(\"loading\") : `${dashboardStats.averageResponseTime.toFixed(1)}s`}\n              change={18.3}\n              icon={<Zap />}\n              color=\"accent\"\n            />\n          </div>\n          \n          {/* Dashboard Tabs */}\n          <DashboardTabs initialTab={initialTab} />\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3898},"client/src/pages/debug-environment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function DebugEnvironment() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [envInfo, setEnvInfo] = useState<any>(null);\n  const [googleAuth, setGoogleAuth] = useState<string>(\"\");\n  const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n  useEffect(() => {\n    const fetchEnvInfo = async () => {\n      try {\n        const response = await apiRequest(\"GET\", \"/api/debug/environment\");\n        const data = await response.json();\n        setEnvInfo(data);\n      } catch (error) {\n        console.error(\"Error fetching environment info:\", error);\n        setErrorMessage(\"Error obteniendo información del entorno. Asegúrate de estar autenticado.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchEnvInfo();\n  }, []);\n\n  const getGoogleCalendarUrl = async () => {\n    try {\n      const response = await apiRequest(\"GET\", \"/api/auth/google-calendar-url\");\n      const data = await response.json();\n      setGoogleAuth(data.authUrl);\n    } catch (error) {\n      console.error(\"Error fetching Google Calendar URL:\", error);\n      setErrorMessage(\"Error obteniendo URL de Google Calendar. Asegúrate de estar autenticado.\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto py-10\">\n        <div className=\"flex items-center justify-center h-60\">\n          <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-10 space-y-8\">\n      <h1 className=\"text-3xl font-bold\">Información del Entorno de Desarrollo</h1>\n      \n      {errorMessage && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n          {errorMessage}\n        </div>\n      )}\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Información del Servidor</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"p-4 bg-gray-100 rounded-md overflow-x-auto dark:bg-gray-800\">\n            {envInfo ? JSON.stringify(envInfo, null, 2) : \"No hay información disponible\"}\n          </pre>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Pruebas de Autenticación</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"google-auth\">URL de Autenticación de Google Calendar</Label>\n            <div className=\"flex space-x-2\">\n              <Input \n                id=\"google-auth\" \n                value={googleAuth} \n                readOnly \n                className=\"flex-1\"\n              />\n              <Button onClick={getGoogleCalendarUrl}>Obtener URL</Button>\n            </div>\n          </div>\n          \n          {googleAuth && (\n            <div className=\"space-y-2\">\n              <Label>Probar Conexión</Label>\n              <Button \n                onClick={() => window.open(googleAuth, \"_blank\")}\n                className=\"w-full\"\n              >\n                Abrir URL de Google Auth en Nueva Pestaña\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3564},"client/src/pages/docs.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Database, Code, Building2, School, Headset, Rocket, BookOpen, \n  MessageSquare, BarChart, Users, Bot, File, FileText, Monitor, Smartphone, \n  ExternalLink, CheckCircle2, BarChart3, LineChart, Download\n} from \"lucide-react\";\nimport jsPDF from 'jspdf';\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function Documentation() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const { t, i18n } = useTranslation();\n  \n  // Nuevas secciones para funcionalidades específicas\n  const functionalityTabs = [\n    \"widget-integration\", \n    \"contextual-understanding\", \n    \"document-training\", \n    \"lead-capture\", \n    \"analytics\", \n    \"task-automation\",\n    \"form-creation\"\n  ];\n\n  // Función para generar y descargar la documentación completa en PDF\n  const downloadFullDocumentationPDF = () => {\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const margin = 15;\n    let yPosition = 20;\n    const currentLanguage = i18n.language;\n\n    // Función auxiliar para agregar texto con ajuste de línea\n    const addTextWithWrap = (text: string, x: number, y: number, maxWidth: number, fontSize: number = 12) => {\n      doc.setFontSize(fontSize);\n      const lines = doc.splitTextToSize(text, maxWidth);\n      doc.text(lines, x, y);\n      return y + (lines.length * (fontSize * 0.4));\n    };\n\n    // Función auxiliar para verificar si necesita nueva página\n    const checkNewPage = (requiredSpace: number) => {\n      if (yPosition + requiredSpace > 270) {\n        doc.addPage();\n        yPosition = 20;\n        return true;\n      }\n      return false;\n    };\n\n    // Título principal\n    doc.setFontSize(24);\n    doc.setFont('helvetica', 'bold');\n    doc.text(t(\"documentation.title\"), pageWidth / 2, yPosition, { align: 'center' });\n    \n    yPosition += 20;\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.subtitle\"), margin, yPosition, pageWidth - 2 * margin, 14);\n    \n    yPosition += 10;\n    doc.setFontSize(10);\n    doc.text(`${t('documentation.generated_on') || 'Generado el'}: ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: 'center' });\n    doc.text(`${t('documentation.language') || 'Idioma'}: ${currentLanguage.toUpperCase()}`, pageWidth / 2, yPosition + 5, { align: 'center' });\n    \n    // Línea separadora\n    yPosition += 15;\n    doc.setLineWidth(0.5);\n    doc.line(margin, yPosition, pageWidth - margin, yPosition);\n    yPosition += 15;\n\n    // Índice\n    checkNewPage(50);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(t('documentation.table_of_contents') || 'Índice de Contenidos', margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    const tocItems = [\n      `1. ${t(\"documentation.overview\")}`,\n      `2. ${t(\"documentation.features\")}`,\n      `3. ${t(\"documentation.widget_integration\")}`,\n      `4. ${t(\"documentation.contextual_understanding\")}`,\n      `5. ${t(\"documentation.document_training\")}`,\n      `6. ${t(\"documentation.lead_capture\")}`,\n      `7. ${t(\"documentation.analytics\")}`,\n      `8. ${t(\"documentation.task_automation\")}`,\n      `9. ${t(\"documentation.form_creation\")}`,\n      `10. ${t(\"documentation.implementation\")}`,\n      `11. ${t(\"documentation.api_reference\")}`,\n      `12. ${t(\"documentation.support\")}`\n    ];\n\n    tocItems.forEach(item => {\n      if (checkNewPage(8)) return;\n      doc.text(item, margin, yPosition);\n      yPosition += 8;\n    });\n\n    yPosition += 15;\n\n    // 1. Overview\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`1. ${t(\"documentation.overview\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.overview_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 2. Features\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`2. ${t(\"documentation.features\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.features_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 3. Widget Integration\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`3. ${t(\"documentation.widget_integration\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.widget_integration_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 10;\n\n    // Código de ejemplo\n    doc.setFontSize(10);\n    doc.setFont('courier', 'normal');\n    const exampleCode = `<script src=\"https://your-domain.com/embed.js?key=YOUR_API_KEY\" data-widget-type=\"bubble\"></script>`;\n    yPosition = addTextWithWrap(exampleCode, margin, yPosition, pageWidth - 2 * margin, 10);\n    yPosition += 15;\n\n    // 4. Contextual Understanding\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`4. ${t(\"documentation.contextual_understanding\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.contextual_understanding_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 5. Document Training\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`5. ${t(\"documentation.document_training\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.document_training_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 6. Lead Capture\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`6. ${t(\"documentation.lead_capture\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.lead_capture_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 7. Analytics\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`7. ${t(\"documentation.analytics\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.analytics_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 8. Task Automation\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`8. ${t(\"documentation.task_automation\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.task_automation_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 9. Form Creation\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`9. ${t(\"documentation.form_creation\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.form_creation_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 10. Implementation\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`10. ${t(\"documentation.implementation\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.implementation_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 11. API Reference\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`11. ${t(\"documentation.api_reference\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.api_reference_content\"), margin, yPosition, pageWidth - 2 * margin);\n    yPosition += 15;\n\n    // 12. Support\n    checkNewPage(40);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`12. ${t(\"documentation.support\")}`, margin, yPosition);\n    yPosition += 15;\n\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addTextWithWrap(t(\"documentation.support_content\"), margin, yPosition, pageWidth - 2 * margin);\n\n    // Pie de página en todas las páginas\n    const totalPages = doc.getNumberOfPages();\n    for (let i = 1; i <= totalPages; i++) {\n      doc.setPage(i);\n      doc.setFontSize(8);\n      doc.setFont('helvetica', 'normal');\n      doc.text(`${t('documentation.page') || 'Página'} ${i} ${t('documentation.of') || 'de'} ${totalPages}`, pageWidth - margin, 285, { align: 'right' });\n      doc.text(`AIPPS - ${t(\"documentation.title\")}`, margin, 285);\n    }\n\n    // Descargar el PDF\n    const fileName = `aipps-documentacion-${currentLanguage}.pdf`;\n    doc.save(fileName);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <div className=\"flex justify-center items-center mb-6\">\n              <div className=\"flex-1\"></div>\n              <div className=\"flex-1\">\n                <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n                  {t(\"documentation.title\")}\n                </h1>\n              </div>\n              <div className=\"flex-1 flex justify-end\">\n                <Button \n                  onClick={downloadFullDocumentationPDF}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  {t('documentation.download_pdf') || 'Descargar PDF'}\n                </Button>\n              </div>\n            </div>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              {t(\"documentation.subtitle\")}\n            </p>\n          </div>\n        </section>\n        \n        <section className=\"py-12\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex flex-col md:flex-row gap-8\">\n              <div className=\"md:w-1/4\">\n                <div className=\"sticky top-24 backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg p-4\">\n                  <nav className=\"space-y-1\">\n                    <a \n                      href=\"#overview\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"overview\"); }}\n                      className={`block px-3 py-2 rounded-md ${activeTab === \"overview\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <BookOpen className=\"w-5 h-5 mr-2\" />\n                        <span>{t(\"documentation.overview\")}</span>\n                      </div>\n                    </a>\n                    <a \n                      href=\"#features\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"features\"); }}\n                      className={`block px-3 py-2 rounded-md ${activeTab === \"features\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <Rocket className=\"w-5 h-5 mr-2\" />\n                        <span>{t(\"documentation.features\")}</span>\n                      </div>\n                    </a>\n\n                    {/* Funcionalidades separadas como submenú */}\n                    <a \n                      href=\"#widget-integration\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"widget-integration\"); }}\n                      className={`block px-3 py-2 pl-10 rounded-md ${activeTab === \"widget-integration\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <MessageSquare className=\"w-4 h-4 mr-2\" />\n                        <span>{t(\"documentation.widget_integration\")}</span>\n                      </div>\n                    </a>\n                    \n                    <a \n                      href=\"#contextual-understanding\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"contextual-understanding\"); }}\n                      className={`block px-3 py-2 pl-10 rounded-md ${activeTab === \"contextual-understanding\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <Database className=\"w-4 h-4 mr-2\" />\n                        <span>{t(\"documentation.contextual_understanding\")}</span>\n                      </div>\n                    </a>\n                    \n                    <a \n                      href=\"#document-training\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"document-training\"); }}\n                      className={`block px-3 py-2 pl-10 rounded-md ${activeTab === \"document-training\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <File className=\"w-4 h-4 mr-2\" />\n                        <span>{t(\"documentation.document_training\")}</span>\n                      </div>\n                    </a>\n                    \n                    <a \n                      href=\"#lead-capture\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"lead-capture\"); }}\n                      className={`block px-3 py-2 pl-10 rounded-md ${activeTab === \"lead-capture\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <Users className=\"w-4 h-4 mr-2\" />\n                        <span>{t(\"documentation.lead_capture\")}</span>\n                      </div>\n                    </a>\n                    \n                    <a \n                      href=\"#analytics\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"analytics\"); }}\n                      className={`block px-3 py-2 pl-10 rounded-md ${activeTab === \"analytics\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <BarChart className=\"w-4 h-4 mr-2\" />\n                        <span>{t(\"documentation.analytics\")}</span>\n                      </div>\n                    </a>\n                    \n                    <a \n                      href=\"#task-automation\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"task-automation\"); }}\n                      className={`block px-3 py-2 pl-10 rounded-md ${activeTab === \"task-automation\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <Bot className=\"w-4 h-4 mr-2\" />\n                        <span>{t(\"documentation.task_automation\")}</span>\n                      </div>\n                    </a>\n                    \n                    <a \n                      href=\"#form-creation\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"form-creation\"); }}\n                      className={`block px-3 py-2 pl-10 rounded-md ${activeTab === \"form-creation\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <FileText className=\"w-4 h-4 mr-2\" />\n                        <span>{t(\"documentation.form_creation\")}</span>\n                      </div>\n                    </a>\n                    \n                    <a \n                      href=\"#forms\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"forms\"); }}\n                      className={`block px-3 py-2 rounded-md ${activeTab === \"forms\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <FileText className=\"w-5 h-5 mr-2\" />\n                        <span>{t(\"documentation.forms\")}</span>\n                      </div>\n                    </a>\n                    <a \n                      href=\"#education\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"education\"); }}\n                      className={`block px-3 py-2 rounded-md ${activeTab === \"education\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <School className=\"w-5 h-5 mr-2\" />\n                        <span>{t(\"documentation.education\")}</span>\n                      </div>\n                    </a>\n                    <a \n                      href=\"#business\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"business\"); }}\n                      className={`block px-3 py-2 rounded-md ${activeTab === \"business\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <Building2 className=\"w-5 h-5 mr-2\" />\n                        <span>{t(\"documentation.business\")}</span>\n                      </div>\n                    </a>\n                    <a \n                      href=\"#professional\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"professional\"); }}\n                      className={`block px-3 py-2 rounded-md ${activeTab === \"professional\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <Headset className=\"w-5 h-5 mr-2\" />\n                        <span>{t(\"documentation.professional\")}</span>\n                      </div>\n                    </a>\n                    <a \n                      href=\"#implementation\" \n                      onClick={(e) => { e.preventDefault(); setActiveTab(\"implementation\"); }}\n                      className={`block px-3 py-2 rounded-md ${activeTab === \"implementation\" ? \"bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400\" : \"hover:bg-gray-100 dark:hover:bg-gray-800\"}`}\n                    >\n                      <div className=\"flex items-center\">\n                        <Code className=\"w-5 h-5 mr-2\" />\n                        <span>{t(\"documentation.implementation\")}</span>\n                      </div>\n                    </a>\n                  </nav>\n                </div>\n              </div>\n              \n              <div className=\"md:w-3/4\">\n                {activeTab === \"overview\" && (\n                  <div id=\"overview\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">{t(\"documentation.overview.title\")}</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          {t(\"documentation.overview.introduction\")}\n                        </p>\n                        \n                        <h3>{t(\"documentation.overview.problem_title\")}</h3>\n                        <p>\n                          {t(\"documentation.overview.problem_description\")}\n                        </p>\n                        <p>\n                          {t(\"documentation.overview.solution_intro\")}\n                        </p>\n                        <ul>\n                          <li>{t(\"documentation.overview.solution_point_1\")}</li>\n                          <li>{t(\"documentation.overview.solution_point_2\")}</li>\n                          <li>{t(\"documentation.overview.solution_point_3\")}</li>\n                          <li>{t(\"documentation.overview.solution_point_4\")}</li>\n                        </ul>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-8\">\n                      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6 border border-gray-200 dark:border-gray-700\">\n                        <div className=\"flex items-center mb-4\">\n                          <MessageSquare className=\"h-6 w-6 text-primary-600 dark:text-primary-400 mr-3\" />\n                          <h3 className=\"text-xl font-bold\">{t(\"documentation.overview.card1_title\")}</h3>\n                        </div>\n                        <p className=\"text-gray-700 dark:text-gray-300\">\n                          {t(\"documentation.overview.card1_text\")}\n                        </p>\n                      </div>\n                      \n                      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6 border border-gray-200 dark:border-gray-700\">\n                        <div className=\"flex items-center mb-4\">\n                          <Database className=\"h-6 w-6 text-primary-600 dark:text-primary-400 mr-3\" />\n                          <h3 className=\"text-xl font-bold\">{t(\"documentation.overview.card2_title\")}</h3>\n                        </div>\n                        <p className=\"text-gray-700 dark:text-gray-300\">\n                          {t(\"documentation.overview.card2_text\")}\n                        </p>\n                      </div>\n                      \n                      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6 border border-gray-200 dark:border-gray-700\">\n                        <div className=\"flex items-center mb-4\">\n                          <Users className=\"h-6 w-6 text-primary-600 dark:text-primary-400 mr-3\" />\n                          <h3 className=\"text-xl font-bold\">{t(\"documentation.overview.card3_title\")}</h3>\n                        </div>\n                        <p className=\"text-gray-700 dark:text-gray-300\">\n                          {t(\"documentation.overview.card3_text\")}\n                        </p>\n                      </div>\n                      \n                      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6 border border-gray-200 dark:border-gray-700\">\n                        <div className=\"flex items-center mb-4\">\n                          <BarChart className=\"h-6 w-6 text-primary-600 dark:text-primary-400 mr-3\" />\n                          <h3 className=\"text-xl font-bold\">{t(\"documentation.overview.card4_title\")}</h3>\n                        </div>\n                        <p className=\"text-gray-700 dark:text-gray-300\">\n                          {t(\"documentation.overview.card4_text\")}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-center mt-10\">\n                      <Button size=\"lg\" asChild>\n                        <Link href=\"/get-started\">{t(\"documentation.overview.start_button\")}</Link>\n                      </Button>\n                    </div>\n                  </div>\n                )}\n                \n                {activeTab === \"features\" && (\n                  <div id=\"features\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">{t(\"documentation.features.title\")}</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <h3>1. Integración Flexible con Sitios Web</h3>\n                        <p>\n                          AIPPS ofrece dos modalidades de integración para adaptarse a las necesidades de cada institución:\n                        </p>\n                        \n                        <h4>Widget Flotante (Burbuja):</h4>\n                        <ul>\n                          <li>Aparece discretamente en una esquina del sitio web</li>\n                          <li>Permite acceso inmediato a la asistencia sin interrumpir la navegación</li>\n                          <li>Ideal para consultas rápidas y soporte al visitante</li>\n                        </ul>\n                        \n                        <h4>Pantalla Completa (Estilo ChatGPT):</h4>\n                        <ul>\n                          <li>Experiencia de chat inmersiva tipo ChatGPT</li>\n                          <li>Historial de conversaciones accesible para los usuarios</li>\n                          <li>Perfecto para interacciones más profundas y consultas complejas</li>\n                        </ul>\n                        \n                        <h3>2. Comprensión Contextual del Contenido</h3>\n                        <p>AIPPS escanea y analiza automáticamente el contenido de su sitio web para:</p>\n                        <ul>\n                          <li>Proporcionar respuestas precisas basadas en la información oficial</li>\n                          <li>Dirigir a los visitantes a las páginas específicas que contienen la información solicitada</li>\n                          <li>Reducir la frustración de buscar información en múltiples secciones del sitio</li>\n                        </ul>\n                        \n                        <h3>3. Entrenamiento Personalizado con Documentos Específicos</h3>\n                        <p>La plataforma permite cargar y procesar:</p>\n                        <ul>\n                          <li>Documentos PDF (catálogos de cursos, folletos de programas, especificaciones de productos)</li>\n                          <li>Archivos DOCX (preguntas frecuentes, políticas institucionales)</li>\n                          <li>Hojas de cálculo Excel (horarios, tarifas, listas de programas)</li>\n                          <li>Instrucciones específicas sobre el tono y estilo de las respuestas</li>\n                        </ul>\n                        \n                        <h3>4. Captura de Leads y Seguimiento</h3>\n                        <p>Una de las características más valiosas para instituciones educativas y empresas:</p>\n                        <ul>\n                          <li>Registro detallado de todas las conversaciones con visitantes</li>\n                          <li>Identificación de consultas frecuentes y áreas de interés</li>\n                          <li>Almacenamiento de información de contacto (con consentimiento del usuario)</li>\n                          <li>Posibilidad de seguimiento posterior para ofrecer información adicional o servicios relacionados</li>\n                        </ul>\n                        \n                        <h3>5. Análisis y Estadísticas Detalladas por Usuario</h3>\n                        <p>El panel de control administrativo ofrece estadísticas personalizadas para cada cuenta de usuario:</p>\n                        <ul>\n                          <li>Métricas sobre número total de conversaciones de tus integraciones</li>\n                          <li>Tasa de resolución de consultas específica de tu cuenta</li>\n                          <li>Tiempo promedio de respuesta de tus asistentes virtuales</li>\n                          <li>Tendencias en las consultas de tus visitantes</li>\n                          <li>Rendimiento individualizado por tipo de integración</li>\n                          <li>Análisis de temas y productos de mayor interés para tus usuarios</li>\n                        </ul>\n                        \n                        <h3>6. Automatización de Tareas (Task Automation)</h3>\n                        <p>El sistema de Task Automation de AIPPS permite crear flujos de trabajo automatizados para manejar consultas repetitivas y tareas comunes sin intervención humana.</p>\n                        \n                        <h4>¿Qué es Task Automation?</h4>\n                        <p>Task Automation es una funcionalidad avanzada que permite configurar respuestas automáticas y acciones predefinidas basadas en desencadenantes específicos. Estas automatizaciones permiten que su asistente virtual realice tareas complejas como:</p>\n                        <ul>\n                          <li>Responder automáticamente preguntas frecuentes con información detallada</li>\n                          <li>Programar seguimientos basados en el interés mostrado por los visitantes</li>\n                          <li>Proporcionar información preliminar antes de conectar con un representante humano</li>\n                          <li>Recopilar datos específicos necesarios para procesos de admisión o ventas</li>\n                          <li>Generar alertas para el equipo cuando se detecten consultas prioritarias</li>\n                          <li>Clasificar automáticamente las consultas por departamento o área de interés</li>\n                        </ul>\n                        \n                        <h4>Cómo Configurar una Task Automation</h4>\n                        <p>Para crear una nueva automatización de tareas, siga estos pasos:</p>\n                        <ol>\n                          <li><strong>Acceda al Panel de Control:</strong> Inicie sesión y navegue a la pestaña \"Task Automation\" en su dashboard</li>\n                          <li><strong>Cree una Nueva Automatización:</strong> Haga clic en el botón \"Create New Automation\" para abrir el formulario de configuración</li>\n                          <li><strong>Defina la Información Básica:</strong>\n                            <ul>\n                              <li>Nombre: Asigne un nombre descriptivo a la automatización (ej. \"Consultas sobre Admisiones\")</li>\n                              <li>Descripción: Detalle el propósito de esta automatización</li>\n                              <li>Estado: Seleccione si la automatización estará activa, en pruebas o inactiva</li>\n                            </ul>\n                          </li>\n                          <li><strong>Configure los Desencadenantes (Triggers):</strong> Determine qué condiciones activarán la automatización\n                            <ul>\n                              <li>Palabras clave específicas en las consultas de los usuarios</li>\n                              <li>Categorías de preguntas identificadas por el sistema</li>\n                              <li>Patrones específicos en la conversación</li>\n                              <li>Horario (para respuestas fuera del horario de atención)</li>\n                            </ul>\n                          </li>\n                          <li><strong>Defina las Acciones:</strong> Establezca qué acciones realizará el sistema cuando se active\n                            <ul>\n                              <li>Enviar respuestas predefinidas con información detallada</li>\n                              <li>Recopilar datos del visitante (nombre, correo, teléfono)</li>\n                              <li>Generar notificaciones para el equipo de atención</li>\n                              <li>Transferir la conversación a un representante humano</li>\n                              <li>Proporcionar enlaces a recursos específicos</li>\n                            </ul>\n                          </li>\n                          <li><strong>Personalice la Experiencia:</strong> Ajuste la apariencia y comportamiento del asistente\n                            <ul>\n                              <li>Nombre del asistente para esta automatización</li>\n                              <li>Mensaje de bienvenida personalizado</li>\n                              <li>Colores y estilo visual</li>\n                              <li>Base de conocimiento específica para esta automatización</li>\n                            </ul>\n                          </li>\n                          <li><strong>Pruebe la Automatización:</strong> Active el modo de prueba para verificar su funcionamiento</li>\n                          <li><strong>Active y Monitoree:</strong> Una vez verificado su correcto funcionamiento, active la automatización y supervise su rendimiento a través del panel de análisis</li>\n                        </ol>\n                        \n                        <h4>Casos de Uso Comunes</h4>\n                        <p>Las automatizaciones de tareas son especialmente útiles para:</p>\n                        <ul>\n                          <li><strong>Instituciones Educativas:</strong> Automatizar respuestas sobre fechas de admisión, requisitos, costos de matrícula y programas disponibles</li>\n                          <li><strong>Comercios:</strong> Manejar consultas sobre disponibilidad de productos, precios, políticas de devolución y horarios de atención</li>\n                          <li><strong>Servicios Profesionales:</strong> Responder a preguntas frecuentes sobre servicios ofrecidos, tarifas y procesos de contratación</li>\n                          <li><strong>Atención al Cliente:</strong> Clasificar y priorizar automáticamente las consultas de soporte según su urgencia y complejidad</li>\n                        </ul>\n                        \n                        <h4>Beneficios de Task Automation</h4>\n                        <ul>\n                          <li><strong>Ahorro de Tiempo:</strong> Libera a su equipo de responder repetidamente las mismas preguntas</li>\n                          <li><strong>Consistencia:</strong> Garantiza que todas las consultas similares reciban la misma información precisa</li>\n                          <li><strong>Disponibilidad 24/7:</strong> Proporciona respuestas inmediatas incluso fuera del horario laboral</li>\n                          <li><strong>Escalabilidad:</strong> Permite manejar un mayor volumen de consultas sin aumentar el personal</li>\n                          <li><strong>Calificación de Leads:</strong> Identifica automáticamente los prospectos más prometedores para seguimiento prioritario</li>\n                        </ul>\n                        \n                        <h4>Ejemplo Práctico: Task Automation + Web Integration</h4>\n                        <p>A continuación se presenta un ejemplo detallado de cómo una Task Automation puede mejorar el rendimiento de una integración web:</p>\n                        \n                        <div className=\"bg-gray-50 dark:bg-gray-900 p-4 rounded-lg border border-gray-200 dark:border-gray-700 my-4\">\n                          <h5 className=\"font-bold mb-2\">Caso: Universidad que Ofrece Programas de Postgrado</h5>\n                          \n                          <p className=\"mb-3\"><strong>Escenario inicial:</strong> La universidad tiene una integración web de AIPPS en su sitio web principal, en formato widget flotante. Sin automatizaciones, el asistente responde preguntas generales sobre la universidad.</p>\n                          \n                          <p className=\"font-medium\">Implementación de Automatización:</p>\n                          <ol className=\"space-y-2 mb-3\">\n                            <li>1. Se crea una <strong>Task Automation</strong> específica llamada \"Admisiones Postgrado 2026\"</li>\n                            <li>2. Se configura con los siguientes desencadenantes:\n                              <ul className=\"list-disc pl-6 my-1\">\n                                <li>Palabras clave: \"postgrado\", \"maestría\", \"doctorado\", \"2026\", \"requisitos\"</li>\n                                <li>Rutas URL: cualquier página bajo \"/postgrados/*\" en el sitio web</li>\n                              </ul>\n                            </li>\n                            <li>3. Se definen las acciones automatizadas:\n                              <ul className=\"list-disc pl-6 my-1\">\n                                <li>Saludo personalizado: \"Bienvenido al asistente de admisiones para programas de postgrado 2026\"</li>\n                                <li>Mensaje proactivo: \"Veo que estás interesado en nuestros programas de postgrado. ¿Puedo ayudarte con información sobre algún programa específico?\"</li>\n                                <li>Recopilación de datos del visitante si muestra interés específico</li>\n                              </ul>\n                            </li>\n                            <li>4. Se carga una base de conocimiento específica:\n                              <ul className=\"list-disc pl-6 my-1\">\n                                <li>Documentos PDF con los nuevos catálogos de programas 2026</li>\n                                <li>Fechas actualizadas del proceso de admisión</li>\n                                <li>Nuevos requisitos y cambios en las becas disponibles</li>\n                              </ul>\n                            </li>\n                            <li>5. Se conecta esta automatización a la <strong>integración web existente</strong> (el widget del sitio)</li>\n                          </ol>\n                          \n                          <p className=\"font-medium\">Resultados:</p>\n                          <ul className=\"list-disc pl-6 space-y-1 mb-3\">\n                            <li>Cuando un visitante navega por la sección de postgrados, el widget cambia automáticamente su comportamiento</li>\n                            <li>Ofrece proactivamente ayuda específica sobre admisiones 2026 en lugar de esperar a que el usuario inicie la conversación</li>\n                            <li>Proporciona información precisa y actualizada de los nuevos programas</li>\n                            <li>Identifica automáticamente candidatos potenciales, solicitando su correo para enviar información detallada</li>\n                            <li>Generar reportes específicos sobre el interés en los programas de postgrado 2026</li>\n                          </ul>\n                          \n                          <p className=\"font-medium\">Métricas de impacto:</p>\n                          <ul className=\"list-disc pl-6 space-y-1\">\n                            <li>Aumento del 40% en la tasa de interacción con el widget en las páginas de postgrado</li>\n                            <li>Incremento del 25% en formularios de interés completados</li>\n                            <li>Reducción del 30% en consultas repetitivas al departamento de admisiones</li>\n                            <li>Mejora de la experiencia del usuario con un 90% de valoraciones positivas</li>\n                          </ul>\n                        </div>\n                        \n                        <p>Este ejemplo ilustra cómo una Task Automation puede transformar una integración web genérica en una herramienta de captación altamente especializada, que responde de manera contextual y proactiva según las necesidades específicas de cada sección del sitio web.</p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Sección de Widget Integration */}\n                {activeTab === \"widget-integration\" && (\n                  <div id=\"widget-integration\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Integración de Widgets en Sitios Web</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          AIPPS ofrece dos tipos diferentes de widgets para integrarse de manera flexible en tu sitio web, \n                          permitiéndote elegir la opción que mejor se adapte a las necesidades de tu organización y la \n                          experiencia que deseas ofrecer a tus visitantes.\n                        </p>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 my-6\">\n                          <div className=\"border border-primary-200 dark:border-primary-800 rounded-lg p-5 bg-primary-50 dark:bg-gray-800\">\n                            <div className=\"flex items-center mb-3\">\n                              <MessageSquare className=\"h-6 w-6 text-primary-600 dark:text-primary-400 mr-2\" />\n                              <h3 className=\"text-xl font-bold text-primary-700 dark:text-primary-400\">Widget Flotante (Burbuja)</h3>\n                            </div>\n                            <p className=\"mb-3\">\n                              Una pequeña burbuja discreta que aparece en una esquina de tu sitio web. Los visitantes pueden\n                              hacer clic en ella para abrir un panel de chat compacto sin perder visibilidad del contenido principal.\n                            </p>\n                            <h4 className=\"font-semibold mt-4 mb-2\">Características:</h4>\n                            <ul className=\"list-disc pl-5 space-y-1\">\n                              <li>Mínimamente invasivo - no interrumpe la experiencia de navegación</li>\n                              <li>Personalización de colores y posición (esquina inferior derecha o izquierda)</li>\n                              <li>Opción de mensaje de bienvenida proactivo configurable</li>\n                              <li>Interfaz de chat responsiva que se adapta a dispositivos móviles</li>\n                            </ul>\n                          </div>\n                          \n                          <div className=\"border border-primary-200 dark:border-primary-800 rounded-lg p-5 bg-primary-50 dark:bg-gray-800\">\n                            <div className=\"flex items-center mb-3\">\n                              <Monitor className=\"h-6 w-6 text-primary-600 dark:text-primary-400 mr-2\" />\n                              <h3 className=\"text-xl font-bold text-primary-700 dark:text-primary-400\">Pantalla Completa (Estilo ChatGPT)</h3>\n                            </div>\n                            <p className=\"mb-3\">\n                              Una experiencia inmersiva similar a ChatGPT que ocupa toda la pantalla, ideal para interacciones\n                              más profundas y extensas. Incluye sistema completo de autenticación para usuarios registrados.\n                            </p>\n                            <h4 className=\"font-semibold mt-4 mb-2\">Características:</h4>\n                            <ul className=\"list-disc pl-5 space-y-1\">\n                              <li>Sistema de registro y login completo para usuarios</li>\n                              <li>Historial personal de conversaciones con timestamps</li>\n                              <li>Generación automática de títulos descriptivos</li>\n                              <li>Gestión completa de conversaciones (crear, eliminar)</li>\n                              <li>Información de usuario personalizada</li>\n                              <li>Interfaz estilo ChatGPT con sidebar de conversaciones</li>\n                              <li>Soporte para cargas y descargas de archivos</li>\n                              <li>Personalización completa de la interfaz con tu imagen de marca</li>\n                            </ul>\n                          </div>\n                        </div>\n                        \n                        <h3 className=\"text-xl font-bold mt-8 mb-4\">Ejemplo Práctico: Universidad con Múltiples Facultades</h3>\n                        \n                        <div className=\"bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-5 my-4\">\n                          <h4 className=\"font-semibold text-lg mb-3\">Caso de Implementación:</h4>\n                          <p className=\"mb-3\">\n                            La Universidad Nacional de Tecnología implementó el widget flotante de AIPPS en su sitio web principal\n                            y en los sitios específicos de cada facultad con configuraciones adaptadas para cada contexto.\n                          </p>\n                          \n                          <h5 className=\"font-medium mt-4 mb-2\">Configuración:</h5>\n                          <ul className=\"list-disc pl-5 mb-4\">\n                            <li><strong>Sitio principal:</strong> Widget flotante con conocimiento general sobre admisiones, becas y vida universitaria</li>\n                            <li><strong>Facultad de Ingeniería:</strong> Widget especializado con datos sobre programas técnicos y requisitos específicos</li>\n                            <li><strong>Facultad de Medicina:</strong> Asistente con información sobre procesos de admisión especiales y pasantías clínicas</li>\n                            <li><strong>Portal de Estudiantes:</strong> Implementación pantalla completa para consultas detalladas sobre horarios y trámites</li>\n                          </ul>\n                          \n                          <h5 className=\"font-medium mt-4 mb-2\">Resultados:</h5>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-3\">\n                            <div className=\"bg-white dark:bg-gray-700 p-3 rounded-lg border border-gray-200 dark:border-gray-600\">\n                              <div className=\"flex items-center text-primary-700 dark:text-primary-400\">\n                                <CheckCircle2 className=\"w-5 h-5 mr-2\" />\n                                <span className=\"font-medium\">42% más consultas resueltas</span>\n                              </div>\n                              <p className=\"text-sm mt-1\">Sin necesidad de contactar al personal administrativo</p>\n                            </div>\n                            \n                            <div className=\"bg-white dark:bg-gray-700 p-3 rounded-lg border border-gray-200 dark:border-gray-600\">\n                              <div className=\"flex items-center text-primary-700 dark:text-primary-400\">\n                                <CheckCircle2 className=\"w-5 h-5 mr-2\" />\n                                <span className=\"font-medium\">35% reducción en emails</span>\n                              </div>\n                              <p className=\"text-sm mt-1\">De consultas básicas a departamentos académicos</p>\n                            </div>\n                            \n                            <div className=\"bg-white dark:bg-gray-700 p-3 rounded-lg border border-gray-200 dark:border-gray-600\">\n                              <div className=\"flex items-center text-primary-700 dark:text-primary-400\">\n                                <CheckCircle2 className=\"w-5 h-5 mr-2\" />\n                                <span className=\"font-medium\">27% aumento en aplicaciones</span>\n                              </div>\n                              <p className=\"text-sm mt-1\">Con información completa y correcta desde el inicio</p>\n                            </div>\n                            \n                            <div className=\"bg-white dark:bg-gray-700 p-3 rounded-lg border border-gray-200 dark:border-gray-600\">\n                              <div className=\"flex items-center text-primary-700 dark:text-primary-400\">\n                                <CheckCircle2 className=\"w-5 h-5 mr-2\" />\n                                <span className=\"font-medium\">1,250+ leads generados</span>\n                              </div>\n                              <p className=\"text-sm mt-1\">De estudiantes potenciales en un semestre</p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"mt-4 text-sm text-gray-600 dark:text-gray-400 italic\">\n                            \"El widget de AIPPS revolucionó nuestra forma de comunicarnos con estudiantes potenciales. \n                            Ahora podemos ofrecer información específica para cada facultad de manera instantánea, \n                            capturar datos de contacto y hacer seguimiento personalizado.\"\n                            <div className=\"mt-1 font-medium\">— Directora de Admisiones, Universidad Nacional de Tecnología</div>\n                          </div>\n                        </div>\n                        \n                        <h3 className=\"text-xl font-bold mt-8 mb-4\">Implementación Técnica</h3>\n                        \n                        <p className=\"mb-4\">Integrar cualquiera de los widgets en tu sitio web es extremadamente sencillo y requiere solo unas pocas líneas de código:</p>\n                        \n                        <div className=\"bg-gray-800 text-gray-200 p-4 rounded-lg overflow-x-auto\">\n                          <pre><code>{`<script>\n  (function(w,d,s,o,f,js,fjs){\n    w['AIPI-Widget']=o;w[o]=w[o]||function(){(w[o].q=w[o].q||[]).push(arguments)};\n    js=d.createElement(s),fjs=d.getElementsByTagName(s)[0];\n    js.id=o;js.src=f;js.async=1;fjs.parentNode.insertBefore(js,fjs);\n  }(window,document,'script','aipi','https://tu-dominio.com/widget.js'));\n  \n  aipi('init', { \n    apiKey: 'TU_API_KEY',\n    widgetType: 'bubble', // o 'fullscreen'\n    position: 'bottom-right',\n    themeColor: '#4F46E5',\n    welcomeMessage: '¡Hola! ¿En qué puedo ayudarte hoy?'\n  });\n</script>`}</code></pre>\n                        </div>\n                        \n                        <h4 className=\"font-semibold mt-6 mb-2\">Parámetros de Configuración:</h4>\n                        <ul className=\"list-disc pl-5 space-y-1\">\n                          <li><code className=\"bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded\">apiKey</code>: Tu clave de API única generada en el panel de control de AIPPS</li>\n                          <li><code className=\"bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded\">widgetType</code>: El tipo de widget ('bubble' o 'fullscreen')</li>\n                          <li><code className=\"bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded\">position</code>: Ubicación en la pantalla (para widget tipo burbuja)</li>\n                          <li><code className=\"bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded\">themeColor</code>: Color principal que se usará en el widget</li>\n                          <li><code className=\"bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded\">welcomeMessage</code>: Mensaje inicial que se mostrará al abrir el chat</li>\n                          <li><code className=\"bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded\">ignoredSections</code>: Array de secciones del sitio web que el asistente debe ignorar</li>\n                        </ul>\n                        \n                        <h3 className=\"text-xl font-bold mt-8 mb-4\">Función de Secciones Ignoradas</h3>\n                        \n                        <div className=\"bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800 p-4 rounded-lg my-4\">\n                          <h4 className=\"font-semibold mb-2 text-primary-800 dark:text-primary-300\">Control preciso sobre el contenido analizado</h4>\n                          <p className=\"mb-3\">\n                            La función \"Secciones ignoradas\" permite especificar qué partes de tu sitio web no deberían ser analizadas \n                            por el asistente al escanear el contenido de la página, proporcionando un control detallado sobre la \n                            información que el chatbot utiliza para responder preguntas.\n                          </p>\n                          \n                          <h5 className=\"font-medium mt-4 mb-2\">Beneficios:</h5>\n                          <ul className=\"list-disc pl-5 space-y-1 mb-4\">\n                            <li><strong>Privacidad mejorada:</strong> Excluye secciones con información sensible o confidencial</li>\n                            <li><strong>Respuestas más precisas:</strong> Elimina secciones irrelevantes como menús, pies de página o anuncios</li>\n                            <li><strong>Optimización de rendimiento:</strong> Reduce la cantidad de texto procesado</li>\n                            <li><strong>Focalización de contenido:</strong> Dirige al asistente hacia las secciones más importantes</li>\n                          </ul>\n\n                          <h5 className=\"font-medium mt-4 mb-2\">Configuración en el panel de administración:</h5>\n                          <p className=\"mb-2\">Las secciones ignoradas se pueden configurar fácilmente desde la sección \"Editar Integración\" en tu panel de AIPI:</p>\n                          <ol className=\"list-decimal pl-5 space-y-1\">\n                            <li>Navega a \"Integraciones\" y selecciona la integración a configurar</li>\n                            <li>Encuentra la sección \"Secciones a ignorar\"</li>\n                            <li>Agrega nombres descriptivos de secciones del sitio (ej: \"Testimonios\", \"Contacto\", \"Precios\")</li>\n                            <li>Guarda los cambios y el widget automáticamente filtrará estas secciones</li>\n                          </ol>\n                          \n                          <h5 className=\"font-medium mt-4 mb-2\">Implementación técnica:</h5>\n                          <div className=\"bg-gray-800 text-gray-200 p-3 rounded-lg overflow-x-auto mt-2 mb-3\">\n                            <pre><code>{`aipi('init', { \n  apiKey: 'TU_API_KEY',\n  // Otras configuraciones...\n  ignoredSections: ['Nuestros Servicios', 'Testimonios', 'Contacto']\n});`}</code></pre>\n                          </div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            Todos los widgets de AIPI (flotante, pantalla completa y simple) procesarán automáticamente \n                            esta configuración para excluir las secciones especificadas del análisis de contenido.\n                          </p>\n                        </div>\n                        \n                        <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n                          <div className=\"flex items-start\">\n                            <div className=\"flex-shrink-0\">\n                              <ExternalLink className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                            </div>\n                            <div className=\"ml-3\">\n                              <h4 className=\"text-sm font-medium text-blue-800 dark:text-blue-300\">¿Necesitas más opciones de personalización?</h4>\n                              <p className=\"mt-1 text-sm text-blue-700 dark:text-blue-400\">\n                                Visita la <a href=\"#implementation\" className=\"underline font-medium\" onClick={(e) => { e.preventDefault(); setActiveTab(\"implementation\"); }}>\n                                sección de implementación</a> para ver la documentación técnica completa con todas las opciones disponibles.\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Sección de Comprensión Contextual */}\n                {activeTab === \"contextual-understanding\" && (\n                  <div id=\"contextual-understanding\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Comprensión Contextual del Contenido Web</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          Una de las características más poderosas de AIPPS es su capacidad para comprender y analizar \n                          automáticamente el contenido de tu sitio web, brindando respuestas contextuales precisas sin \n                          necesidad de programación manual o entrenamiento específico.\n                        </p>\n                        \n                        <h3 className=\"text-xl font-bold mt-6 mb-3\">¿Cómo Funciona?</h3>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                          <div className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-800\">\n                            <h4 className=\"font-semibold mb-2 flex items-center text-primary-700 dark:text-primary-400\">\n                              <span className=\"bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-300 rounded-full w-6 h-6 flex items-center justify-center mr-2\">1</span>\n                              Escaneo Inteligente\n                            </h4>\n                            <p className=\"text-sm\">\n                              Cuando un visitante interactúa con el widget, AIPI escanea automáticamente la página \n                              actual y otras páginas relevantes del sitio para obtener contexto.\n                            </p>\n                          </div>\n                          \n                          <div className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-800\">\n                            <h4 className=\"font-semibold mb-2 flex items-center text-primary-700 dark:text-primary-400\">\n                              <span className=\"bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-300 rounded-full w-6 h-6 flex items-center justify-center mr-2\">2</span>\n                              Análisis Semántico\n                            </h4>\n                            <p className=\"text-sm\">\n                              La inteligencia artificial procesa el contenido para comprender su significado, \n                              identificando temas clave, servicios, productos y otra información relevante.\n                            </p>\n                          </div>\n                          \n                          <div className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-800\">\n                            <h4 className=\"font-semibold mb-2 flex items-center text-primary-700 dark:text-primary-400\">\n                              <span className=\"bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-300 rounded-full w-6 h-6 flex items-center justify-center mr-2\">3</span>\n                              Generación de Respuestas\n                            </h4>\n                            <p className=\"text-sm\">\n                              Con base en esta comprensión, el sistema proporciona respuestas precisas y \n                              contextuales, incluyendo enlaces a las secciones relevantes del sitio.\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <h3 className=\"text-xl font-bold mt-8 mb-4\">Ejemplo Práctico: Tienda de Comercio Electrónico</h3>\n                        \n                        <div className=\"bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-5 my-4\">\n                          <h4 className=\"font-semibold text-lg mb-3\">Caso de Implementación:</h4>\n                          <p className=\"mb-3\">\n                            TechGadgets, una tienda online especializada en productos electrónicos, implementó AIPI para \n                            mejorar la asistencia a sus clientes y aumentar las conversiones.\n                          </p>\n                          \n                          <div className=\"border-l-4 border-primary-500 pl-4 py-1 my-4 bg-primary-50 dark:bg-primary-900/20\">\n                            <h5 className=\"font-medium\">Consulta de cliente:</h5>\n                            <p className=\"italic\">\n                              \"¿Este modelo de laptop es compatible con programas de diseño gráfico profesional?\"\n                            </p>\n                          </div>\n                          \n                          <div className=\"mb-4\">\n                            <h5 className=\"font-medium mb-2\">Proceso de AIPPS:</h5>\n                            <ol className=\"list-decimal pl-5 space-y-2\">\n                              <li>\n                                <strong>Análisis de Contexto:</strong> \n                                <p className=\"text-sm\">\n                                  AIPPS detectó que el usuario estaba viendo la página de un modelo específico de laptop.\n                                </p>\n                              </li>\n                              <li>\n                                <strong>Extracción de Información:</strong> \n                                <p className=\"text-sm\">\n                                  El sistema extrajo las especificaciones técnicas del producto (procesador, memoria RAM, \n                                  tarjeta gráfica) de la página del producto.\n                                </p>\n                              </li>\n                              <li>\n                                <strong>Conexión con Conocimiento:</strong> \n                                <p className=\"text-sm\">\n                                  Relacionó estas especificaciones con los requisitos típicos de software de diseño gráfico\n                                  mencionados en otras páginas del sitio, como guías y comparativas.\n                                </p>\n                              </li>\n                            </ol>\n                          </div>\n                          \n                          <div className=\"border-l-4 border-green-500 pl-4 py-1 my-4 bg-green-50 dark:bg-green-900/20\">\n                            <h5 className=\"font-medium\">Respuesta generada:</h5>\n                            <p className=\"italic\">\n                              \"Sí, el Modelo XPS 15 que estás viendo es altamente compatible con software de diseño gráfico \n                              profesional como Adobe Photoshop, Illustrator e InDesign. Con su procesador Intel i7 de 11ª generación, \n                              32GB de RAM y tarjeta NVIDIA RTX 3050, cumple y supera los requisitos recomendados para estos programas. \n                              Además, su pantalla calibrada para precisión de color (100% Adobe RGB) lo hace ideal para trabajo gráfico. \n                              Si necesitas ver más opciones optimizadas para diseño gráfico, <a href=\"#\" className=\"text-primary-600 dark:text-primary-400\">puedes ver nuestra comparativa aquí</a>.\"\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <h3 className=\"text-xl font-bold mt-8 mb-4\">Beneficios de la Comprensión Contextual</h3>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                          <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                            <h4 className=\"font-semibold mb-2 text-primary-700 dark:text-primary-400\">Respuestas Inmediatas y Precisas</h4>\n                            <p>\n                              Los visitantes obtienen información exacta sin tener que navegar por múltiples páginas \n                              buscando respuestas específicas.\n                            </p>\n                          </div>\n                          \n                          <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                            <h4 className=\"font-semibold mb-2 text-primary-700 dark:text-primary-400\">Reducción de Abandono</h4>\n                            <p>\n                              Al resolver dudas en el momento, se evita que los visitantes abandonen tu sitio por \n                              frustración o falta de información clara.\n                            </p>\n                          </div>\n                          \n                          <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                            <h4 className=\"font-semibold mb-2 text-primary-700 dark:text-primary-400\">Cero Mantenimiento Manual</h4>\n                            <p>\n                              A diferencia de los sistemas tradicionales de FAQs, AIPPS se actualiza automáticamente \n                              cuando modificas el contenido de tu sitio web.\n                            </p>\n                          </div>\n                          \n                          <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                            <h4 className=\"font-semibold mb-2 text-primary-700 dark:text-primary-400\">Información Consistente</h4>\n                            <p>\n                              Todas las respuestas se basan en el contenido oficial de tu sitio, garantizando \n                              consistencia en la información proporcionada.\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-8 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                          <div className=\"flex\">\n                            <div className=\"flex-shrink-0\">\n                              <svg className=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                              </svg>\n                            </div>\n                            <div className=\"ml-3\">\n                              <h4 className=\"text-sm font-medium text-yellow-800 dark:text-yellow-300\">Nota Importante</h4>\n                              <p className=\"mt-2 text-sm text-yellow-700 dark:text-yellow-200\">\n                                Para mejorar aún más la precisión de las respuestas contextuales, puedes complementar \n                                esta funcionalidad con el entrenamiento específico usando documentos. Esto es \n                                especialmente útil para información que no está directamente disponible en tu sitio web.\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {activeTab === \"document-training\" && (\n                  <div id=\"document-training\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Entrenamiento con Documentos</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          AIPPS permite enriquecer la base de conocimientos de su asistente virtual mediante la carga de documentos específicos de su institución o empresa. Esta característica es fundamental para proporcionar respuestas precisas y personalizadas basadas en su información oficial.\n                        </p>\n                        \n                        <h3>Tipos de Documentos Soportados</h3>\n                        <p>La plataforma acepta diversos formatos para maximizar la flexibilidad:</p>\n                        \n                        <ul>\n                          <li><strong>Documentos PDF</strong>: Ideal para catálogos de cursos, manuales, folletos institucionales o especificaciones de productos</li>\n                          <li><strong>Archivos DOCX</strong>: Perfecto para preguntas frecuentes, políticas institucionales o contenido estructurado</li>\n                          <li><strong>Hojas de Cálculo Excel</strong>: Útil para horarios, tarifas, listas de programas o cualquier información tabulada</li>\n                          <li><strong>URLs de Sitios Web</strong>: Permite extraer información directamente de páginas web específicas</li>\n                        </ul>\n                        \n                        <h3>Proceso de Entrenamiento</h3>\n                        <ol>\n                          <li><strong>Carga de Documentos</strong>: Suba sus archivos a través de la interfaz intuitiva del dashboard</li>\n                          <li><strong>Procesamiento Automático</strong>: AIPPS analiza y estructura la información de forma inteligente</li>\n                          <li><strong>Categorización</strong>: Organice los documentos por temas para facilitar su gestión</li>\n                          <li><strong>Enriquecimiento</strong>: Añada metadatos y etiquetas para mejorar la precisión de las respuestas</li>\n                          <li><strong>Validación</strong>: Verifique la calidad de las respuestas mediante pruebas interactivas</li>\n                        </ol>\n                        \n                        <h3>Beneficios del Entrenamiento con Documentos</h3>\n                        <ul>\n                          <li><strong>Precisión Mejorada</strong>: Respuestas basadas en datos oficiales verificados</li>\n                          <li><strong>Personalización Total</strong>: Asistente adaptado específicamente a su dominio</li>\n                          <li><strong>Actualización Sencilla</strong>: Mantenga la información al día con actualizaciones regulares</li>\n                          <li><strong>Reducción de Respuestas Genéricas</strong>: Minimice las respuestas imprecisas o demasiado generales</li>\n                          <li><strong>Consistencia en la Información</strong>: Garantice que todos los visitantes reciban datos uniformes</li>\n                        </ul>\n                        \n                        <h3>Recomendaciones para un Entrenamiento Efectivo</h3>\n                        <ul>\n                          <li>Priorice documentos actualizados y de alta calidad</li>\n                          <li>Divida documentos extensos en secciones temáticas para mejorar la precisión</li>\n                          <li>Incluya preguntas frecuentes con sus respuestas oficiales</li>\n                          <li>Actualice la base de conocimientos regularmente para mantener su relevancia</li>\n                          <li>Combine múltiples formatos para una cobertura completa</li>\n                        </ul>\n                        \n                        <h3>Límites y Consideraciones</h3>\n                        <p>Para garantizar un rendimiento óptimo:</p>\n                        <ul>\n                          <li>Tamaño máximo por documento: 10 MB</li>\n                          <li>Longitud de texto recomendada: ~10,000 caracteres por documento</li>\n                          <li>Evite documentos con contenido puramente visual (use descripciones)</li>\n                          <li>Asegúrese de tener los derechos necesarios sobre el material cargado</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === \"lead-capture\" && (\n                  <div id=\"lead-capture\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Captura de Leads</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          Una de las características más valiosas de AIPPS es su capacidad para convertir las conversaciones con visitantes en oportunidades de negocio tangibles mediante la captura y gestión inteligente de leads.\n                        </p>\n                        \n                        <h3>Cómo Funciona la Captura de Leads</h3>\n                        <p>El sistema utiliza un enfoque no intrusivo para recopilar información valiosa de los visitantes interesados:</p>\n                        \n                        <ol>\n                          <li><strong>Identificación de Intenciones</strong>: El asistente detecta automáticamente cuándo un visitante muestra interés genuino en servicios o productos</li>\n                          <li><strong>Solicitud Contextual</strong>: En el momento oportuno, solicita información de contacto explicando el beneficio para el usuario</li>\n                          <li><strong>Almacenamiento Seguro</strong>: Los datos se guardan cumpliendo normativas de protección de datos</li>\n                          <li><strong>Clasificación Automática</strong>: Cada lead se categoriza según su nivel de interés y área específica</li>\n                          <li><strong>Alertas en Tiempo Real</strong>: Notificaciones inmediatas para seguimiento por parte del equipo comercial</li>\n                        </ol>\n                        \n                        <h3>Datos Capturados</h3>\n                        <p>AIPPS puede recopilar, con consentimiento explícito del usuario:</p>\n                        \n                        <ul>\n                          <li><strong>Información Básica</strong>: Nombre, correo electrónico, teléfono</li>\n                          <li><strong>Intereses Específicos</strong>: Productos, servicios o programas de interés</li>\n                          <li><strong>Nivel de Urgencia</strong>: Horizonte temporal para la toma de decisiones</li>\n                          <li><strong>Preferencias de Contacto</strong>: Canal y horario preferido para seguimiento</li>\n                          <li><strong>Contexto Completo</strong>: Historial de la conversación para entender necesidades</li>\n                        </ul>\n                        \n                        <h3>Gestión de Leads</h3>\n                        <p>Desde el dashboard, podrá gestionar eficientemente todos los leads capturados:</p>\n                        \n                        <ul>\n                          <li><strong>Vista Centralizada</strong>: Todos los leads organizados en un panel intuitivo</li>\n                          <li><strong>Filtros Avanzados</strong>: Segmentación por fecha, fuente, interés y estatus</li>\n                          <li><strong>Asignación</strong>: Distribución de leads entre miembros del equipo</li>\n                          <li><strong>Seguimiento</strong>: Registro de interacciones y próximos pasos</li>\n                          <li><strong>Etiquetado</strong>: Clasificación personalizada según sus flujos de trabajo</li>\n                          <li><strong>Exportación</strong>: Descarga en formatos compatibles con CRM (CSV, Excel)</li>\n                        </ul>\n                        \n                        <h3>Integraciones con CRM</h3>\n                        <p>Para optimizar su flujo de trabajo, AIPPS permite:</p>\n                        \n                        <ul>\n                          <li>Sincronización automática con sistemas CRM populares</li>\n                          <li>Webhooks personalizables para integraciones específicas</li>\n                          <li>Notificaciones por email a equipos comerciales</li>\n                          <li>API para desarrollar integraciones personalizadas</li>\n                        </ul>\n                        \n                        <h3>Protección de Datos</h3>\n                        <p>AIPPS cumple con las normativas de protección de datos:</p>\n                        \n                        <ul>\n                          <li>Obtención de consentimiento explícito antes de capturar datos</li>\n                          <li>Explicación clara del propósito de la recopilación</li>\n                          <li>Almacenamiento seguro con encriptación</li>\n                          <li>Acceso controlado según roles y permisos</li>\n                          <li>Política de retención y eliminación de datos configurable</li>\n                        </ul>\n                        \n                        <h3>Métricas y Análisis</h3>\n                        <p>Evalúe el rendimiento de su estrategia de captura de leads con:</p>\n                        \n                        <ul>\n                          <li><strong>Tasa de Conversión</strong>: Porcentaje de visitantes que proporcionan información</li>\n                          <li><strong>Calidad de Leads</strong>: Análisis de calificación y seguimiento efectivo</li>\n                          <li><strong>Fuentes Más Efectivas</strong>: Qué canales generan mejores leads</li>\n                          <li><strong>Tiempo de Respuesta</strong>: Velocidad de seguimiento del equipo</li>\n                          <li><strong>ROI</strong>: Retorno de inversión basado en conversiones finales</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === \"analytics\" && (\n                  <div id=\"analytics\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Análisis y Estadísticas</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          AIPPS ofrece un potente panel de análisis y estadísticas que proporciona información valiosa sobre el rendimiento de sus asistentes virtuales, las tendencias en las conversaciones y el comportamiento de los visitantes. Las herramientas de análisis están diseñadas para facilitar la toma de decisiones estratégicas basadas en datos reales.\n                        </p>\n                        \n                        <h3>Métricas Principales</h3>\n                        <p>El dashboard muestra indicadores clave para evaluar el rendimiento global:</p>\n                        \n                        <ul>\n                          <li><strong>Total de Visitantes</strong>: Número de usuarios únicos que han interactuado con su asistente</li>\n                          <li><strong>Total de Conversaciones</strong>: Cantidad total de sesiones de chat iniciadas</li>\n                          <li><strong>Tasa de Resolución</strong>: Porcentaje de consultas resueltas satisfactoriamente</li>\n                          <li><strong>Tiempo Medio de Respuesta</strong>: Velocidad promedio de respuesta del asistente</li>\n                          <li><strong>Integraciones Activas</strong>: Número de implementaciones funcionando actualmente</li>\n                          <li><strong>Tendencia de Conversaciones</strong>: Evolución temporal del volumen de interacciones</li>\n                        </ul>\n                        \n                        <h3>Análisis de Conversaciones</h3>\n                        <p>Comprenda en profundidad las interacciones de los usuarios:</p>\n                        \n                        <ul>\n                          <li><strong>Temas Populares</strong>: Asuntos más consultados por los visitantes, representados visualmente en gráficos interactivos</li>\n                          <li><strong>Palabras Clave</strong>: Términos más frecuentes en las consultas, con análisis de frecuencia</li>\n                          <li><strong>Patrones de Conversación</strong>: Flujos típicos y ramificaciones comunes</li>\n                          <li><strong>Preguntas Sin Respuesta</strong>: Identificación de vacíos de conocimiento para mejorar el entrenamiento</li>\n                          <li><strong>Sentimiento</strong>: Análisis de la satisfacción de los usuarios con métricas de sentimiento positivo, neutral y negativo</li>\n                        </ul>\n                        \n                        <h3>Rendimiento por Integración</h3>\n                        <p>Evalúe cada implementación específica:</p>\n                        \n                        <ul>\n                          <li><strong>Comparativa</strong>: Rendimiento relativo entre diferentes integraciones con clasificaciones de desempeño</li>\n                          <li><strong>Tasa de Interacción</strong>: Porcentaje de visitantes que utilizan el asistente</li>\n                          <li><strong>Duración Media</strong>: Tiempo promedio de las conversaciones</li>\n                          <li><strong>Horarios de Mayor Actividad</strong>: Distribución temporal de las consultas</li>\n                          <li><strong>Dispositivos</strong>: Uso por tipo de dispositivo (móvil, escritorio, tablet)</li>\n                        </ul>\n                        \n                        <h3>Análisis de Comercialización</h3>\n                        <p>Información orientada a la conversión de visitantes en clientes:</p>\n                        \n                        <ul>\n                          <li><strong>Productos/Servicios Más Consultados</strong>: Ofertas que generan mayor interés, visualizadas en gráficos de demanda</li>\n                          <li><strong>Tasa de Captura de Leads</strong>: Efectividad en la obtención de información de contacto</li>\n                          <li><strong>Puntos de Abandono</strong>: Momentos en que los usuarios suelen finalizar la conversación</li>\n                          <li><strong>Conversiones</strong>: Seguimiento de objetivos completados (formularios, registros)</li>\n                          <li><strong>Camino hacia la Conversión</strong>: Análisis de la ruta típica hasta la acción deseada</li>\n                        </ul>\n                        \n                        <h3>Visualización de Datos</h3>\n                        <p>AIPPS presenta la información de forma clara e intuitiva mediante:</p>\n                        \n                        <ul>\n                          <li><strong>Gráficos Interactivos</strong>: Visualizaciones dinámicas con filtros ajustables y múltiples tipos de gráficos (barras, líneas, circulares)</li>\n                          <li><strong>Tendencias Temporales</strong>: Gráficos de línea que muestran la evolución de conversaciones a lo largo del tiempo</li>\n                          <li><strong>Gráficos de Sentimiento</strong>: Visualización del sentimiento de los usuarios respecto a diferentes temas</li>\n                          <li><strong>Indicadores Comparativos</strong>: Métricas actuales vs períodos anteriores con indicadores de cambio porcentual</li>\n                          <li><strong>Dashboards Personalizables</strong>: Adapte la visualización a sus prioridades y necesidades específicas</li>\n                        </ul>\n                        \n                        <h3>Exportación e Informes en PDF</h3>\n                        <p>La plataforma ofrece capacidades avanzadas de generación de informes:</p>\n                        \n                        <ul>\n                          <li><strong>Exportación a PDF</strong>: Genere informes completos con un solo clic, incluyendo todos los gráficos y métricas relevantes</li>\n                          <li><strong>Informes Personalizados</strong>: Los PDF generados incluyen:\n                            <ul>\n                              <li>Resumen ejecutivo con métricas clave</li>\n                              <li>Gráficos de tendencias de conversación</li>\n                              <li>Análisis de temas populares con gráficos</li>\n                              <li>Rendimiento comparativo entre integraciones</li>\n                              <li>Análisis de demanda de productos/servicios</li>\n                            </ul>\n                          </li>\n                          <li><strong>Exportación de Datos</strong>: Descargue información en CSV para análisis adicionales</li>\n                          <li><strong>Presentación Profesional</strong>: Diseño optimizado para presentaciones e informes ejecutivos</li>\n                        </ul>\n                        \n                        <h3>Privacidad y Seguridad</h3>\n                        <p>Todos los análisis se realizan respetando:</p>\n                        \n                        <ul>\n                          <li>Anonimización de datos personales en todos los informes</li>\n                          <li>Cumplimiento de normativas de privacidad (GDPR, CCPA)</li>\n                          <li>Control de acceso basado en roles para informes sensibles</li>\n                          <li>Políticas de retención de datos configurables</li>\n                          <li>Cifrado de datos en informes exportados</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === \"task-automation\" && (\n                  <div id=\"task-automation\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Automatización de Tareas</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          El módulo de Automatización de Tareas (Task Automation) de AIPPS permite crear flujos de trabajo inteligentes que ejecutan acciones predefinidas en respuesta a desencadenantes específicos. Esta funcionalidad avanzada reduce la carga de trabajo manual y garantiza respuestas consistentes y rápidas a situaciones recurrentes.\n                        </p>\n                        \n                        <h3>¿Qué es la Automatización de Tareas?</h3>\n                        <p>\n                          Task Automation permite configurar respuestas automáticas y secuencias de acciones basadas en criterios predefinidos. Estas automatizaciones permiten que su asistente virtual realice tareas complejas como:\n                        </p>\n                        \n                        <ul>\n                          <li>Responder automáticamente preguntas frecuentes con información detallada</li>\n                          <li>Programar seguimientos basados en el interés mostrado por los visitantes</li>\n                          <li>Proporcionar información preliminar antes de conectar con un representante humano</li>\n                          <li>Recopilar datos específicos necesarios para procesos de admisión o ventas</li>\n                          <li>Generar alertas para el equipo cuando se detecten consultas prioritarias</li>\n                          <li>Clasificar automáticamente las consultas por departamento o área de interés</li>\n                        </ul>\n                        \n                        <h3>Componentes Principales</h3>\n                        <p>Cada automatización consta de tres elementos fundamentales:</p>\n                        \n                        <ol>\n                          <li><strong>Desencadenantes (Triggers)</strong>: Condiciones que activan la automatización\n                            <ul>\n                              <li>Palabras clave específicas en las consultas</li>\n                              <li>Patrones detectados en la conversación</li>\n                              <li>Horarios específicos (ej. fuera del horario de oficina)</li>\n                              <li>Datos proporcionados por el usuario</li>\n                              <li>Número de interacciones o duración de la conversación</li>\n                            </ul>\n                          </li>\n                          <li><strong>Condiciones</strong>: Criterios adicionales que deben cumplirse\n                            <ul>\n                              <li>Segmentación por ubicación del usuario</li>\n                              <li>Tipo de dispositivo utilizado</li>\n                              <li>Historial previo del visitante</li>\n                              <li>Estado actual de la conversación</li>\n                            </ul>\n                          </li>\n                          <li><strong>Acciones</strong>: Respuestas o tareas que se ejecutan automáticamente\n                            <ul>\n                              <li>Envío de respuestas predefinidas</li>\n                              <li>Recopilación estructurada de información</li>\n                              <li>Generación de notificaciones internas</li>\n                              <li>Transferencia a agentes humanos</li>\n                              <li>Activación de integraciones con sistemas externos</li>\n                            </ul>\n                          </li>\n                        </ol>\n                        \n                        <h3>Cómo Crear una Automatización</h3>\n                        <p>Para implementar una nueva automatización, siga estos pasos:</p>\n                        \n                        <ol>\n                          <li><strong>Acceda al Dashboard</strong>: Navegue a la sección \"Task Automation\" en su panel de control</li>\n                          <li><strong>Inicie una Nueva Automatización</strong>: Haga clic en \"Crear Nueva\" y asigne un nombre descriptivo</li>\n                          <li><strong>Configure los Desencadenantes</strong>: Defina qué condiciones activarán esta automatización</li>\n                          <li><strong>Establezca las Condiciones</strong>: Especifique criterios adicionales si es necesario</li>\n                          <li><strong>Diseñe las Acciones</strong>: Determine qué hará el sistema cuando se active</li>\n                          <li><strong>Personalice las Respuestas</strong>: Cree mensajes efectivos y adaptados a su marca</li>\n                          <li><strong>Configure Opciones Avanzadas</strong>: Ajuste prioridades, limitaciones y comportamientos secundarios</li>\n                          <li><strong>Pruebe la Automatización</strong>: Verifique su funcionamiento en un entorno de prueba</li>\n                          <li><strong>Active y Monitoree</strong>: Implemente la automatización y supervise su rendimiento</li>\n                        </ol>\n                        \n                        <h3>Escenarios de Uso Comunes</h3>\n                        \n                        <h4>Para Instituciones Educativas:</h4>\n                        <ul>\n                          <li><strong>Consultas sobre Admisiones</strong>: Proporcionar información sobre requisitos, fechas y procesos</li>\n                          <li><strong>Preguntas sobre Programas</strong>: Detallar cursos, planes de estudio y salidas profesionales</li>\n                          <li><strong>Soporte a Estudiantes</strong>: Resolver dudas frecuentes sobre procedimientos administrativos</li>\n                        </ul>\n                        \n                        <h4>Para Empresas:</h4>\n                        <ul>\n                          <li><strong>Atención al Cliente Básica</strong>: Responder preguntas frecuentes sobre productos/servicios</li>\n                          <li><strong>Calificación de Clientes Potenciales</strong>: Evaluar y categorizar leads según su potencial</li>\n                          <li><strong>Soporte Técnico Inicial</strong>: Diagnóstico preliminar y resolución de problemas comunes</li>\n                        </ul>\n                        \n                        <h4>Para Servicios Profesionales:</h4>\n                        <ul>\n                          <li><strong>Programación de Consultas</strong>: Facilitar la reserva de citas con profesionales</li>\n                          <li><strong>Evaluación Preliminar</strong>: Recopilar información relevante antes de la consulta personal</li>\n                          <li><strong>Seguimiento Post-Servicio</strong>: Mantener contacto con clientes después de una prestación</li>\n                        </ul>\n                        \n                        <h3>Mejores Prácticas</h3>\n                        <p>Para maximizar la efectividad de sus automatizaciones:</p>\n                        \n                        <ul>\n                          <li>Mantenga las respuestas concisas y conversacionales</li>\n                          <li>Combine automatizaciones con intervención humana cuando sea necesario</li>\n                          <li>Revise y actualice regularmente sus automatizaciones</li>\n                          <li>Comience con escenarios simples y evolucione hacia flujos más complejos</li>\n                          <li>Analice el rendimiento con las métricas disponibles y optimice continuamente</li>\n                          <li>Asegúrese de que las automatizaciones reflejen correctamente el tono y valores de su marca</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {activeTab === \"education\" && (\n                  <div id=\"education\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <div className=\"flex items-center mb-4\">\n                        <School className=\"h-8 w-8 text-primary-600 dark:text-primary-400 mr-3\" />\n                        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{t(\"documentation.education\")}</h2>\n                      </div>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          {t(\"education.intro_text\")}\n                        </p>\n                        \n                        <h3>{t(\"education.specific_benefits\")}</h3>\n                        \n                        <h4>{t(\"education.admission_process\")}</h4>\n                        <ul>\n                          <li>{t(\"education.admission_benefit1\")}</li>\n                          <li>{t(\"education.admission_benefit2\")}</li>\n                          <li>{t(\"education.admission_benefit3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"education.program_presentation\")}</h4>\n                        <ul>\n                          <li>{t(\"education.program_detail1\")}</li>\n                          <li>{t(\"education.program_detail2\")}</li>\n                          <li>{t(\"education.program_detail3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"education.lead_capture\")}</h4>\n                        <ul>\n                          <li>{t(\"education.lead_capture1\")}</li>\n                          <li>{t(\"education.lead_capture2\")}</li>\n                          <li>{t(\"education.lead_capture3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"education.international_support\")}</h4>\n                        <ul>\n                          <li>{t(\"education.international1\")}</li>\n                          <li>{t(\"education.international2\")}</li>\n                          <li>{t(\"education.international3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"education.trend_analysis\")}</h4>\n                        <ul>\n                          <li>{t(\"education.trend1\")}</li>\n                          <li>{t(\"education.trend2\")}</li>\n                          <li>{t(\"education.trend3\")}</li>\n                          <li>{t(\"education.trend4\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"education.testimonials\")}</h3>\n                        <blockquote>\n                          {t(\"education.testimonial_text\")}\n                          <cite>{t(\"education.testimonial_author\")}</cite>\n                        </blockquote>\n                        \n                        <div className=\"mt-8\">\n                          <Button size=\"lg\" asChild>\n                            <Link href=\"/get-started\">{t(\"education.implement_button\")}</Link>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {activeTab === \"business\" && (\n                  <div id=\"business\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <div className=\"flex items-center mb-4\">\n                        <Building2 className=\"h-8 w-8 text-primary-600 dark:text-primary-400 mr-3\" />\n                        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{t(\"documentation.business\")}</h2>\n                      </div>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          {t(\"business.intro_text\")}\n                        </p>\n                        \n                        <h3>{t(\"business.specific_benefits\")}</h3>\n                        \n                        <h4>{t(\"business.lead_generation\")}</h4>\n                        <ul>\n                          <li>{t(\"business.lead_gen1\")}</li>\n                          <li>{t(\"business.lead_gen2\")}</li>\n                          <li>{t(\"business.lead_gen3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"business.customer_support\")}</h4>\n                        <ul>\n                          <li>{t(\"business.support1\")}</li>\n                          <li>{t(\"business.support2\")}</li>\n                          <li>{t(\"business.support3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"business.catalog_presentation\")}</h4>\n                        <ul>\n                          <li>{t(\"business.catalog1\")}</li>\n                          <li>{t(\"business.catalog2\")}</li>\n                          <li>{t(\"business.catalog3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"business.sales_optimization\")}</h4>\n                        <ul>\n                          <li>{t(\"business.sales_opt1\")}</li>\n                          <li>{t(\"business.sales_opt2\")}</li>\n                          <li>{t(\"business.sales_opt3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"business.behavior_analysis\")}</h4>\n                        <ul>\n                          <li>{t(\"business.behavior1\")}</li>\n                          <li>{t(\"business.behavior2\")}</li>\n                          <li>{t(\"business.behavior3\")}</li>\n                          <li>{t(\"business.behavior4\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"business.testimonials\")}</h3>\n                        <blockquote>\n                          {t(\"business.testimonial_text\")}\n                          <cite>{t(\"business.testimonial_author\")}</cite>\n                        </blockquote>\n                        \n                        <div className=\"mt-8\">\n                          <Button size=\"lg\" asChild>\n                            <Link href=\"/get-started\">{t(\"business.implement_button\")}</Link>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {activeTab === \"professional\" && (\n                  <div id=\"professional\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <div className=\"flex items-center mb-4\">\n                        <Headset className=\"h-8 w-8 text-primary-600 dark:text-primary-400 mr-3\" />\n                        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{t(\"documentation.professional\")}</h2>\n                      </div>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          {t(\"professional.intro_text\")}\n                        </p>\n                        \n                        <h3>{t(\"professional.specific_benefits\")}</h3>\n                        \n                        <h4>{t(\"professional.client_qualification\")}</h4>\n                        <ul>\n                          <li>{t(\"professional.qualification1\")}</li>\n                          <li>{t(\"professional.qualification2\")}</li>\n                          <li>{t(\"professional.qualification3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"professional.appointment_scheduling\")}</h4>\n                        <ul>\n                          <li>{t(\"professional.scheduling1\")}</li>\n                          <li>{t(\"professional.scheduling2\")}</li>\n                          <li>{t(\"professional.scheduling3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"professional.client_education\")}</h4>\n                        <ul>\n                          <li>{t(\"professional.education1\")}</li>\n                          <li>{t(\"professional.education2\")}</li>\n                          <li>{t(\"professional.education3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"professional.expectation_management\")}</h4>\n                        <ul>\n                          <li>{t(\"professional.expectation1\")}</li>\n                          <li>{t(\"professional.expectation2\")}</li>\n                          <li>{t(\"professional.expectation3\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"professional.content_marketing\")}</h4>\n                        <ul>\n                          <li>{t(\"professional.marketing1\")}</li>\n                          <li>{t(\"professional.marketing2\")}</li>\n                          <li>{t(\"professional.marketing3\")}</li>\n                          <li>{t(\"professional.marketing4\")}</li>\n                          <li>{t(\"professional.marketing5\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"professional.testimonials\")}</h3>\n                        <blockquote>\n                          {t(\"professional.testimonial_text\")}\n                          <cite>{t(\"professional.testimonial_author\")}</cite>\n                        </blockquote>\n                        \n                        <div className=\"mt-8\">\n                          <Button size=\"lg\" asChild>\n                            <Link href=\"/get-started\">{t(\"professional.implement_button\")}</Link>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === \"form-creation\" && (\n                  <div id=\"form-creation\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">{t(\"documentation.form_creation\")}</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          {t(\"forms.intro_text\")}\n                        </p>\n                        \n                        <h3>{t(\"forms.available_types\")}</h3>\n                        <p>{t(\"forms.templates_intro\")}</p>\n                        \n                        <ul>\n                          <li><strong>{t(\"forms.contact_form\")}</strong>: {t(\"forms.contact_form_desc\")}</li>\n                          <li><strong>{t(\"forms.waitlist_form\")}</strong>: {t(\"forms.waitlist_form_desc\")}</li>\n                          <li><strong>{t(\"forms.survey_form\")}</strong>: {t(\"forms.survey_form_desc\")}</li>\n                          <li><strong>{t(\"forms.feedback_form\")}</strong>: {t(\"forms.feedback_form_desc\")}</li>\n                          <li><strong>{t(\"forms.lead_capture_form\")}</strong>: {t(\"forms.lead_capture_form_desc\")}</li>\n                          <li><strong>{t(\"forms.custom_form\")}</strong>: {t(\"forms.custom_form_desc\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"forms.main_features\")}</h3>\n                        <ul>\n                          <li><strong>{t(\"forms.flexible_design\")}</strong>: {t(\"forms.flexible_design_desc\")}</li>\n                          <li><strong>{t(\"forms.configurable_fields\")}</strong>: {t(\"forms.configurable_fields_desc\")}</li>\n                          <li><strong>{t(\"forms.advanced_validation\")}</strong>: {t(\"forms.advanced_validation_desc\")}</li>\n                          <li><strong>{t(\"forms.conditional_logic\")}</strong>: {t(\"forms.conditional_logic_desc\")}</li>\n                          <li><strong>{t(\"forms.ai_integration\")}</strong>: {t(\"forms.ai_integration_desc\")}</li>\n                          <li><strong>{t(\"forms.captcha_protection\")}</strong>: {t(\"forms.captcha_protection_desc\")}</li>\n                          <li><strong>{t(\"forms.email_notifications\")}</strong>: {t(\"forms.email_notifications_desc\")}</li>\n                          <li><strong>{t(\"forms.detailed_analytics\")}</strong>: {t(\"forms.detailed_analytics_desc\")}</li>\n                          <li><strong>{t(\"forms.response_sorting\")}</strong>: {t(\"forms.response_sorting_desc\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"forms.creation_process\")}</h3>\n                        <ol>\n                          <li><strong>{t(\"forms.access_dashboard\")}</strong>: {t(\"forms.access_dashboard_desc\")}</li>\n                          <li><strong>{t(\"forms.create_new\")}</strong>: {t(\"forms.create_new_desc\")}</li>\n                          <li><strong>{t(\"forms.basic_config\")}</strong>: {t(\"forms.basic_config_desc\")}</li>\n                          <li><strong>{t(\"forms.design_fields\")}</strong>: {t(\"forms.design_fields_desc\")}</li>\n                          <li><strong>{t(\"forms.customization\")}</strong>: {t(\"forms.customization_desc\")}</li>\n                          <li><strong>{t(\"forms.advanced_config\")}</strong>: {t(\"forms.advanced_config_desc\")}</li>\n                          <li><strong>{t(\"forms.preview\")}</strong>: {t(\"forms.preview_desc\")}</li>\n                          <li><strong>{t(\"forms.publication\")}</strong>: {t(\"forms.publication_desc\")}</li>\n                        </ol>\n                        \n                        <h3>{t(\"forms.integration_methods\")}</h3>\n                        <p>\n                          {t(\"forms.simplified_process\")}\n                        </p>\n                        \n                        <h4>{t(\"forms.direct_embed\")}</h4>\n                        <p>\n                          {t(\"forms.direct_embed_desc\")}\n                        </p>\n                        \n                        <ol>\n                          <li><strong>{t(\"forms.get_code\")}</strong>: {t(\"forms.get_code_desc\")}</li>\n                          <li><strong>{t(\"forms.copy_code\")}</strong>: {t(\"forms.copy_code_desc\")}</li>\n                          <li><strong>{t(\"forms.insert_code\")}</strong>: {t(\"forms.insert_code_desc\")}</li>\n                        </ol>\n                        \n                        <p>{t(\"forms.code_example\")}</p>\n                        \n                        <pre><code>&lt;script src=\"https://tu-dominio.com/api/forms/embed/[ID_DEL_FORMULARIO]\"&gt;&lt;/script&gt;\n&lt;div id=\"aipi-form-[ID_DEL_FORMULARIO]\"&gt;&lt;/div&gt;</code></pre>\n                        \n                        <p><strong>{t(\"forms.customization_options\")}</strong>: {t(\"forms.modal_instructions\")}</p>\n                        <ul>\n                          <li>{t(\"forms.customize_style\")}</li>\n                          <li>{t(\"forms.configure_actions\")}</li>\n                          <li>{t(\"forms.implement_validations\")}</li>\n                          <li>{t(\"forms.analytics_integration\")}</li>\n                        </ul>\n                        \n                        <p><strong>{t(\"forms.technical_considerations\")}</strong>:</p>\n                        <ul>\n                          <li>{t(\"forms.works_with_cms\")}</li>\n                          <li>{t(\"forms.async_loading\")}</li>\n                          <li>{t(\"forms.secure_data\")}</li>\n                          <li>{t(\"forms.spam_protection\")}</li>\n                          <li>{t(\"forms.responsive_design\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"forms.improved_response_management\")}</h3>\n                        <p>{t(\"forms.advanced_capabilities\")}</p>\n                        <ul>\n                          <li><strong>{t(\"forms.view_responses\")}</strong>: {t(\"forms.view_responses_desc\")}</li>\n                          <li><strong>{t(\"forms.export_data\")}</strong>: {t(\"forms.export_data_desc\")}</li>\n                          <li><strong>{t(\"forms.filter_sort\")}</strong>: {t(\"forms.filter_sort_desc\")}</li>\n                          <li><strong>{t(\"forms.automatic_analysis\")}</strong>: {t(\"forms.automatic_analysis_desc\")}</li>\n                          <li><strong>{t(\"forms.follow_up\")}</strong>: {t(\"forms.follow_up_desc\")}</li>\n                          <li><strong>{t(\"forms.realtime_notifications\")}</strong>: {t(\"forms.realtime_notifications_desc\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"forms.widget_integration\")}</h3>\n                        <p>{t(\"forms.widget_integration_desc\")}</p>\n                        <ul>\n                          <li>{t(\"forms.present_forms\")}</li>\n                          <li>{t(\"forms.autocomplete_fields\")}</li>\n                          <li>{t(\"forms.continue_conversation\")}</li>\n                          <li>{t(\"forms.provide_assistance\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"forms.popular_use_cases\")}</h3>\n                        <ul>\n                          <li><strong>{t(\"forms.education_use\")}</strong>: {t(\"forms.education_use_desc\")}</li>\n                          <li><strong>{t(\"forms.business_use\")}</strong>: {t(\"forms.business_use_desc\")}</li>\n                          <li><strong>{t(\"forms.professional_use\")}</strong>: {t(\"forms.professional_use_desc\")}</li>\n                          <li><strong>{t(\"forms.ecommerce_use\")}</strong>: {t(\"forms.ecommerce_use_desc\")}</li>\n                        </ul>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-center mt-6\">\n                      <Button size=\"lg\" asChild>\n                        <Link href=\"/dashboard/forms\">{t(\"forms.create_first_button\")}</Link>\n                      </Button>\n                    </div>\n                  </div>\n                )}\n                \n                {activeTab === \"implementation\" && (\n                  <div id=\"implementation\" className=\"space-y-8\">\n                    <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-lg p-6\">\n                      <div className=\"flex items-center mb-4\">\n                        <Code className=\"h-8 w-8 text-primary-600 dark:text-primary-400 mr-3\" />\n                        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{t(\"documentation.implementation\")}</h2>\n                      </div>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          {t(\"implementation.intro_text\")}\n                        </p>\n                        \n                        <h3>{t(\"implementation.process_title\")}</h3>\n                        \n                        <h4>{t(\"implementation.step1_title\")}</h4>\n                        <p>\n                          {t(\"implementation.step1_desc\")}\n                        </p>\n                        <ul>\n                          <li>{t(\"implementation.widget_option\")}</li>\n                          <li>{t(\"implementation.fullscreen_option\")}</li>\n                        </ul>\n                        <p>\n                          {t(\"implementation.wordpress_note\")}\n                        </p>\n                        \n                        <h4>{t(\"implementation.step2_title\")}</h4>\n                        <p>\n                          {t(\"implementation.step2_desc\")}\n                        </p>\n                        <ul>\n                          <li>{t(\"implementation.customize_colors\")}</li>\n                          <li>{t(\"implementation.customize_position\")}</li>\n                          <li>{t(\"implementation.customize_welcome\")}</li>\n                          <li>{t(\"implementation.customize_languages\")}</li>\n                          <li>{t(\"implementation.customize_personality\")}</li>\n                        </ul>\n                        \n                        <h4>{t(\"implementation.step3_title\")}</h4>\n                        <p>\n                          {t(\"implementation.step3_desc\")}\n                        </p>\n                        <ul>\n                          <li>{t(\"implementation.upload_pdf\")}</li>\n                          <li>{t(\"implementation.upload_docx\")}</li>\n                          <li>{t(\"implementation.upload_excel\")}</li>\n                          <li>{t(\"implementation.write_instructions\")}</li>\n                        </ul>\n                        <p>\n                          {t(\"implementation.urls_note\")}\n                        </p>\n                        \n                        <h4>{t(\"implementation.step4_title\")}</h4>\n                        <p>\n                          {t(\"implementation.step4_desc\")}\n                        </p>\n                        <ul>\n                          <li>{t(\"implementation.monitor_conversations\")}</li>\n                          <li>{t(\"implementation.review_metrics\")}</li>\n                          <li>{t(\"implementation.access_leads\")}</li>\n                          <li>{t(\"implementation.refine_training\")}</li>\n                          <li>{t(\"implementation.isolated_stats\")}</li>\n                        </ul>\n                        \n                        <h3>{t(\"implementation.technical_requirements\")}</h3>\n                        <p>\n                          {t(\"implementation.compatibility_intro\")}\n                        </p>\n                        <ul>\n                          <li>{t(\"implementation.cms_compatibility\")}</li>\n                          <li>{t(\"implementation.html_compatibility\")}</li>\n                          <li>{t(\"implementation.js_compatibility\")}</li>\n                          <li>{t(\"implementation.no_server_mods\")}</li>\n                        </ul>\n                        \n                        <div className=\"mt-8\">\n                          <Button size=\"lg\" asChild>\n                            <Link href=\"/get-started\">{t(\"implementation.start_button\")}</Link>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {activeTab === \"forms\" && (\n                  <div id=\"forms\" className=\"space-y-8\">\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700\">\n                      <h2 className=\"text-2xl font-bold mb-4 text-gray-900 dark:text-white\">Formularios Integrados</h2>\n                      \n                      <div className=\"prose dark:prose-invert max-w-none\">\n                        <p>\n                          AIPPS ofrece un sistema completo de formularios que se integra perfectamente con tu chatbot,\n                          permitiendo capturar información específica de usuarios y leads de manera inteligente y contextual.\n                        </p>\n                        \n                        <h3>Tipos de Formularios Disponibles</h3>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 my-6\">\n                          <div className=\"border border-primary-200 dark:border-primary-800 rounded-lg p-5 bg-primary-50 dark:bg-gray-800\">\n                            <div className=\"flex items-center mb-3\">\n                              <Users className=\"h-6 w-6 text-primary-600 dark:text-primary-400 mr-2\" />\n                              <h4 className=\"text-lg font-bold text-primary-700 dark:text-primary-400\">Formularios de Leads</h4>\n                            </div>\n                            <p className=\"mb-3\">\n                              Captura información de contacto de visitantes interesados en tus servicios o programas educativos.\n                            </p>\n                            <ul className=\"list-disc pl-5 space-y-1 text-sm\">\n                              <li>Información de contacto básica</li>\n                              <li>Intereses específicos del usuario</li>\n                              <li>Seguimiento automático por email</li>\n                              <li>Integración con CRM</li>\n                            </ul>\n                          </div>\n                          \n                          <div className=\"border border-primary-200 dark:border-primary-800 rounded-lg p-5 bg-primary-50 dark:bg-gray-800\">\n                            <div className=\"flex items-center mb-3\">\n                              <FileText className=\"h-6 w-6 text-primary-600 dark:text-primary-400 mr-2\" />\n                              <h4 className=\"text-lg font-bold text-primary-700 dark:text-primary-400\">Formularios de Registro</h4>\n                            </div>\n                            <p className=\"mb-3\">\n                              Permite a los usuarios registrarse directamente desde el chat para acceder a funcionalidades avanzadas.\n                            </p>\n                            <ul className=\"list-disc pl-5 space-y-1 text-sm\">\n                              <li>Registro de usuarios con validación</li>\n                              <li>Autenticación segura</li>\n                              <li>Perfiles personalizados</li>\n                              <li>Historial de conversaciones</li>\n                            </ul>\n                          </div>\n                        </div>\n                        \n                        <h3>Integración con Widget de Pantalla Completa</h3>\n                        <p>\n                          Los formularios se integran especialmente bien con el widget de pantalla completa, que incluye\n                          un sistema completo de autenticación de usuarios:\n                        </p>\n                        \n                        <div className=\"bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-5 my-4\">\n                          <h4 className=\"font-semibold text-lg mb-3\">Funcionalidades de Autenticación:</h4>\n                          <ul className=\"list-disc pl-5 space-y-2\">\n                            <li><strong>Sistema de Registro:</strong> Los usuarios pueden crear cuentas personalizadas directamente desde el chat</li>\n                            <li><strong>Login Seguro:</strong> Autenticación con tokens JWT para sesiones seguras</li>\n                            <li><strong>Historial Personal:</strong> Cada usuario tiene acceso a su historial completo de conversaciones</li>\n                            <li><strong>Gestión de Conversaciones:</strong> Crear, eliminar y organizar conversaciones con títulos automáticos</li>\n                            <li><strong>Información Personalizada:</strong> Perfil de usuario con timestamps y datos relevantes</li>\n                          </ul>\n                        </div>\n                        \n                        <h3>Configuración y Personalización</h3>\n                        <p>\n                          Los formularios pueden ser completamente personalizados para adaptarse a las necesidades específicas\n                          de tu organización:\n                        </p>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 my-6\">\n                          <div className=\"bg-white dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600\">\n                            <h5 className=\"font-semibold mb-2\">Campos Personalizados</h5>\n                            <p className=\"text-sm\">Agrega campos específicos según tus necesidades de negocio</p>\n                          </div>\n                          \n                          <div className=\"bg-white dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600\">\n                            <h5 className=\"font-semibold mb-2\">Validación Avanzada</h5>\n                            <p className=\"text-sm\">Reglas de validación personalizadas para garantizar calidad de datos</p>\n                          </div>\n                          \n                          <div className=\"bg-white dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600\">\n                            <h5 className=\"font-semibold mb-2\">Integración API</h5>\n                            <p className=\"text-sm\">Conecta con sistemas externos y CRMs automáticamente</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-8\">\n                          <Button size=\"lg\" asChild>\n                            <Link href=\"/get-started\">Configurar Formularios</Link>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":125791},"client/src/pages/edit-integration-old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Loader, CheckCircle, AlertCircle, Trash2, RefreshCw, Upload, File, ArrowLeft } from \"lucide-react\";\n\n// Esquema de validación para el formulario (igual que en create-integration.tsx)\nconst formSchema = z.object({\n  name: z.string().min(2, { message: \"El nombre debe tener al menos 2 caracteres\" }),\n  url: z.string().url({ message: \"Debe ser una URL válida\" }),\n  themeColor: z.string().default(\"#3B82F6\"),\n  position: z.enum([\"bottom-right\", \"bottom-left\", \"top-right\", \"top-left\"], {\n    required_error: \"Debes seleccionar una posición\"\n  }).default(\"bottom-right\"),\n  active: z.boolean().default(true),\n  botBehavior: z.string().optional(),\n  widgetType: z.enum([\"bubble\", \"fullscreen\"], {\n    required_error: \"Debes seleccionar un tipo de widget\"\n  }).default(\"bubble\"),\n  ignoredSections: z.array(z.string()).default([]),\n  ignoredSectionsText: z.string().optional(),\n  description: z.string().optional(),\n  // Campos de personalización del chatbot\n  customization: z.object({\n    assistantName: z.string().optional(),\n    defaultGreeting: z.string().optional(),\n    showAvailability: z.boolean().optional(),\n    userBubbleColor: z.string().optional(),\n    assistantBubbleColor: z.string().optional(),\n    font: z.string().optional(),\n    conversationStyle: z.string().optional(),\n  }).optional(),\n});\n\n// Tipo derivado del esquema Zod\ntype FormValues = z.infer<typeof formSchema>;\n\n// Definición de interfaces\ninterface Integration {\n  id: number;\n  userId: number;\n  name: string;\n  url: string;\n  apiKey: string;\n  themeColor: string;\n  position: string;\n  active: boolean;\n  createdAt: string;\n  visitorCount: number;\n  botBehavior?: string;\n  documentsData?: any[];\n  widgetType?: string;\n  ignoredSections?: string[];\n  description?: string;\n  ignoredSectionsText?: string;\n  customization?: {\n    assistantName?: string;\n    defaultGreeting?: string;\n    showAvailability?: boolean;\n    userBubbleColor?: string;\n    assistantBubbleColor?: string;\n    font?: string;\n    conversationStyle?: string;\n  };\n}\n\ninterface SiteContent {\n  id: number;\n  integrationId: number;\n  url: string;\n  title: string | null;\n  content: string;\n  lastUpdated: string | null;\n}\n\nexport default function EditIntegration() {\n  const { id } = useParams();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n  const [scriptExample, setScriptExample] = useState('');\n  const [scriptExampleFullscreen, setScriptExampleFullscreen] = useState('');\n  const [isScrapingLoading, setIsScrapingLoading] = useState(false);\n  const [siteContent, setSiteContent] = useState<SiteContent[]>([]);\n\n  // Inicializar el formulario con react-hook-form\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      url: \"\",\n      themeColor: \"#3B82F6\",\n      position: \"bottom-right\",\n      active: true,\n      botBehavior: \"\",\n      widgetType: \"bubble\",\n      ignoredSections: [],\n      ignoredSectionsText: \"\",\n      description: \"\",\n      customization: {\n        assistantName: \"AIPI Assistant\",\n        defaultGreeting: \"¡Hola! ¿En qué puedo ayudarte hoy?\",\n        showAvailability: true,\n        userBubbleColor: \"#1e88e5\",\n        assistantBubbleColor: \"#f5f5f5\", \n        font: \"Inter\",\n        conversationStyle: \"modern\",\n      },\n    },\n  });\n  \n  // Obtener datos de la integración\n  const { data: integration, isLoading, error } = useQuery<Integration>({\n    queryKey: [`/api/integrations/${id}`],\n    enabled: !!id,\n    staleTime: 1000 * 60, // 1 minuto\n  });\n\n  // Manejar errores y restricciones de acceso\n  useEffect(() => {\n    if (error) {\n      console.error(\"Error fetching integration:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Error desconocido\";\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage === \"Solo Pablo puede configurar el chat principal del sitio web\" \n          ? \"Solo el usuario Pablo puede editar esta integración.\"\n          : \"Error al cargar la integración. Verifica tus permisos.\",\n        variant: \"destructive\"\n      });\n      \n      navigate(\"/dashboard\");\n    }\n  }, [error, navigate, toast]);\n  \n  // Mutación para actualizar la integración\n  const updateIntegrationMutation = useMutation({\n    mutationFn: (data: any) => \n      apiRequest(\"PATCH\", `/api/integrations/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/integrations/${id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n      toast({\n        title: \"Integración actualizada\",\n        description: \"La integración ha sido actualizada exitosamente\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar la integración. Por favor, intenta de nuevo.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Cargar datos en el formulario cuando estén disponibles\n  useEffect(() => {\n    if (integration) {\n      form.reset({\n        name: integration.name || \"\",\n        url: integration.url || \"\",\n        themeColor: integration.themeColor || \"#3B82F6\",\n        position: integration.position as any || \"bottom-right\",\n        active: integration.active,\n        botBehavior: integration.botBehavior || \"\",\n        widgetType: integration.widgetType as any || \"bubble\",\n        ignoredSections: integration.ignoredSections || [],\n        ignoredSectionsText: integration.ignoredSectionsText || \"\",\n        description: integration.description || \"\",\n        customization: integration.customization || {\n          assistantName: \"AIPI Assistant\",\n          defaultGreeting: \"¡Hola! ¿En qué puedo ayudarte hoy?\",\n          showAvailability: true,\n          userBubbleColor: \"#1e88e5\",\n          assistantBubbleColor: \"#f5f5f5\", \n          font: \"Inter\",\n          conversationStyle: \"modern\",\n        },\n      });\n      \n      // Actualizar el script de ejemplo con la API Key\n      // El widget puede ser el estándar (embed.js) o el de pantalla completa estilo ChatGPT (chatgpt-embed.js)\n      const widgetType = integration.widgetType || \"bubble\";\n      // USANDO EMBED.JS PARA AMBOS TIPOS DE WIDGET\n      setScriptExample(`<script src=\"https://aipps.ca/embed.js?key=${integration.apiKey}\" data-widget-type=\"${widgetType}\"></script>`)\n      \n      // Agregar un ejemplo alternativo para el widget fullscreen\n      if (widgetType === \"fullscreen\") {\n        setScriptExampleFullscreen(`<!-- Widget pantalla completa usando embed.js -->\n<script src=\"https://aipps.ca/embed.js?key=${integration.apiKey}\" \n  data-widget-type=\"fullscreen\"\n  data-theme-color=\"${integration.themeColor || '#4f46e5'}\"\n  data-position=\"${integration.position || 'bottom-right'}\"\n  data-title=\"AIPI Asistente\"\n></script>`);\n      }\n      \n      // Cargar el contenido del sitio\n      loadSiteContent();\n    }\n  }, [integration]);\n  \n  // Función para cargar el contenido del sitio\n  const loadSiteContent = async () => {\n    if (!integration) return;\n    \n    try {\n      // Obtener el token de autenticación\n      const authToken = localStorage.getItem('auth_token');\n      const headers: Record<string, string> = {};\n      \n      if (authToken) {\n        headers['Authorization'] = `Bearer ${authToken}`;\n      }\n      \n      const response = await fetch(`/api/site-content/${integration.id}`, {\n        headers: headers,\n        credentials: \"include\"\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Error al cargar el contenido del sitio\");\n      }\n      \n      const data = await response.json();\n      setSiteContent(data);\n    } catch (error) {\n      console.error(\"Error cargando contenido:\", error);\n      // No mostrar toast de error aquí para no interrumpir la experiencia del usuario\n    }\n  };\n  \n  // Manejar cambios en el formulario\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  const handlePositionChange = (value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      position: value\n    }));\n    \n    // Actualizar el código de integración inmediatamente\n    if (integration?.apiKey) {\n      const widgetType = form.getValues('widgetType') || \"bubble\";\n      setScriptExample(`<script src=\"${window.location.origin}/embed.js?key=${integration.apiKey}\" data-widget-type=\"${widgetType}\" data-position=\"${value}:15px\"></script>`);\n      \n      if (widgetType === \"fullscreen\") {\n        setScriptExampleFullscreen(`<!-- Widget pantalla completa usando embed.js -->\n<script src=\"${window.location.origin}/embed.js?key=${integration.apiKey}\" \n  data-widget-type=\"fullscreen\"\n  data-theme-color=\"${form.getValues('themeColor') || '#4f46e5'}\"\n  data-position=\"${value}:15px\"\n  data-title=\"AIPPS Asistente\"\n></script>`);\n      }\n    }\n  };\n  \n  const handleWidgetTypeChange = (value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      widgetType: value\n    }));\n    \n    // Actualizar el código de integración inmediatamente\n    if (integration?.apiKey) {\n      setScriptExample(`<script src=\"${window.location.origin}/embed.js?key=${integration.apiKey}\" data-widget-type=\"${value}\"></script>`);\n      \n      if (value === \"fullscreen\") {\n        setScriptExampleFullscreen(`<!-- Widget pantalla completa usando embed.js -->\n<script src=\"${window.location.origin}/embed.js?key=${integration.apiKey}\" \n  data-widget-type=\"fullscreen\"\n  data-theme-color=\"${form.getValues('themeColor') || '#4f46e5'}\"\n  data-position=\"${form.getValues('position')}:15px\"\n  data-title=\"AIPPS Asistente\"\n></script>`);\n      }\n    }\n  };\n  \n  const handleActiveChange = (checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      active: checked\n    }));\n  };\n  \n  // Manejar envío del formulario usando react-hook-form\n  const onSubmit = (data: FormValues) => {\n    updateIntegrationMutation.mutate(data);\n  };\n  \n  const handleCancel = () => {\n    navigate(\"/dashboard\");\n  };\n  \n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex justify-center items-center min-h-[400px]\">\n          <Loader className=\"w-8 h-8 animate-spin text-primary\" />\n          <span className=\"ml-2\">Cargando información de la integración...</span>\n        </div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex flex-col justify-center items-center min-h-[400px]\">\n          <AlertCircle className=\"w-12 h-12 text-red-500 mb-4\" />\n          <h2 className=\"text-xl font-semibold mb-2\">Error al cargar la integración</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">No se pudo cargar la información de la integración. Por favor, intenta de nuevo.</p>\n          <Button onClick={handleCancel}>Volver al Dashboard</Button>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-5xl\">\n      <div className=\"flex items-center mb-8\">\n        <Button \n          variant=\"ghost\" \n          className=\"mr-2 p-0 h-auto\" \n          onClick={() => navigate(\"/dashboard\")}\n        >\n          <ArrowLeft className=\"h-5 w-5 mr-2\" />\n        </Button>\n        <h1 className=\"text-2xl font-bold\">Editar Integración</h1>\n      </div>\n      \n      <Card className=\"p-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nombre de la integración</Label>\n                <Input \n                  id=\"name\" \n                  name=\"name\" \n                  placeholder=\"Mi sitio web\" \n                  value={formData.name} \n                  onChange={handleInputChange} \n                  required \n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"url\">URL del sitio web</Label>\n                <Input \n                  id=\"url\" \n                  name=\"url\" \n                  placeholder=\"https://ejemplo.com\" \n                  value={formData.url} \n                  onChange={handleInputChange} \n                  required \n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"themeColor\">Color del tema</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Input \n                    id=\"themeColor\" \n                    name=\"themeColor\" \n                    type=\"color\" \n                    value={formData.themeColor} \n                    onChange={handleInputChange} \n                    className=\"w-12 h-10 p-1\" \n                  />\n                  <Input \n                    name=\"themeColor\" \n                    value={formData.themeColor} \n                    onChange={handleInputChange} \n                    className=\"flex-1\" \n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"widgetType\">Tipo de widget</Label>\n                <Select\n                  value={formData.widgetType}\n                  onValueChange={handleWidgetTypeChange}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecciona el tipo de widget\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"bubble\">Widget flotante (burbuja)</SelectItem>\n                    <SelectItem value=\"fullscreen\">Pantalla completa (estilo ChatGPT)</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Selecciona el tipo de experiencia de chat que deseas ofrecer a tus usuarios.\n                </p>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"position\">Posición del widget</Label>\n                <Select\n                  value={formData.position}\n                  onValueChange={handlePositionChange}\n                  disabled={formData.widgetType === \"fullscreen\"}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecciona la posición\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"bottom-right\">Abajo a la derecha</SelectItem>\n                    <SelectItem value=\"bottom-left\">Abajo a la izquierda</SelectItem>\n                    <SelectItem value=\"bottom-center\">Abajo al centro</SelectItem>\n                    <SelectItem value=\"top-right\">Arriba a la derecha</SelectItem>\n                    <SelectItem value=\"top-left\">Arriba a la izquierda</SelectItem>\n                  </SelectContent>\n                </Select>\n                {formData.widgetType === \"fullscreen\" && (\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    La posición no se aplica al modo de pantalla completa.\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Switch \n                  id=\"active\" \n                  checked={formData.active} \n                  onCheckedChange={handleActiveChange} \n                />\n                <Label htmlFor=\"active\">Integración activa</Label>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"botBehavior\">Comportamiento del chatbot</Label>\n                <Textarea\n                  id=\"botBehavior\"\n                  name=\"botBehavior\"\n                  placeholder=\"Ejemplo: Sé amable y profesional, responde de manera precisa a las preguntas sobre el sitio web.\"\n                  value={formData.botBehavior}\n                  onChange={handleInputChange}\n                  className=\"min-h-24\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Define la personalidad y el comportamiento del chatbot. Sea formal, amigable, profesional, etc.\n                </p>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"ignoredSections\">Secciones a ignorar</Label>\n                <div className=\"space-y-2 mt-2\">\n                  {formData.ignoredSections.map((section, index) => (\n                    <div key={index} className=\"flex items-center gap-2\">\n                      <Input\n                        value={section}\n                        onChange={(e) => {\n                          const newSections = [...formData.ignoredSections];\n                          newSections[index] = e.target.value;\n                          setFormData(prev => ({\n                            ...prev,\n                            ignoredSections: newSections\n                          }));\n                        }}\n                        placeholder=\"Ej: Nuestros Servicios\"\n                        className=\"flex-1\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => {\n                          const newSections = [...formData.ignoredSections];\n                          newSections.splice(index, 1);\n                          setFormData(prev => ({\n                            ...prev,\n                            ignoredSections: newSections\n                          }));\n                        }}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                  \n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"mt-2 w-full\"\n                    onClick={() => {\n                      setFormData(prev => ({\n                        ...prev,\n                        ignoredSections: [...prev.ignoredSections, \"\"]\n                      }));\n                    }}\n                  >\n                    Añadir sección a ignorar\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Añade nombres de secciones de tu sitio web que quieres que el chatbot ignore. Por ejemplo: \"Nuestros Servicios\", \"Contacto\", etc.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"apiKey\">API Key</Label>\n                <div className=\"relative\">\n                  <Input \n                    id=\"apiKey\" \n                    value={integration?.apiKey || \"\"} \n                    readOnly \n                    className=\"pr-10\" \n                  />\n                  <Button \n                    type=\"button\" \n                    className=\"absolute right-1 top-1 h-8 px-2\"\n                    onClick={() => {\n                      navigator.clipboard.writeText(integration?.apiKey || \"\");\n                      toast({\n                        title: \"API Key copiada\",\n                        description: \"La API Key ha sido copiada al portapapeles\",\n                      });\n                    }}\n                  >\n                    Copiar\n                  </Button>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"scriptExample\">Código de integración</Label>\n                <div className=\"relative mt-1\">\n                  <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-sm overflow-x-auto\">\n                    {scriptExample}\n                  </pre>\n                  <Button \n                    type=\"button\" \n                    className=\"absolute right-1 top-1 h-8 px-2\"\n                    onClick={() => {\n                      navigator.clipboard.writeText(scriptExample);\n                      toast({\n                        title: \"Código copiado\",\n                        description: \"El código de integración ha sido copiado al portapapeles\",\n                      });\n                    }}\n                  >\n                    Copiar\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"bg-blue-50 dark:bg-blue-900 p-4 rounded-lg mt-4\">\n                <h3 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2\">Instrucciones de integración</h3>\n                <ol className=\"list-decimal list-inside text-sm text-blue-700 dark:text-blue-300 space-y-2\">\n                  <li>Copia el código de integración mostrado arriba.</li>\n                  <li>Para cambiar la posición del widget, selecciona una de las opciones comentadas en el código.</li>\n                  <li>En tu sitio web, abre el archivo HTML donde deseas que aparezca el chat (por ejemplo, index.html).</li>\n                  <li>Localiza la etiqueta de cierre <code>&lt;/body&gt;</code> cerca del final del archivo.</li>\n                  <li>Pega el código justo antes de esta etiqueta.</li>\n                  <li>Si usas un sistema de gestión de contenido (CMS):\n                    <ul className=\"list-disc list-inside ml-4 mt-2\">\n                      <li>WordPress: Usa un plugin como \"Insert Headers and Footers\" o edita footer.php en tu tema</li>\n                      <li>Wix: Ve a Configuración del Sitio &gt; Código Personalizado &gt; Agregar Código</li>\n                      <li>Shopify: Ve a Tema &gt; Acciones &gt; Editar código &gt; footer.liquid</li>\n                    </ul>\n                  </li>\n                  <li>Guarda los cambios y actualiza tu sitio web.</li>\n                  <li>El widget de chat aparecerá automáticamente en la posición seleccionada.</li>\n                </ol>\n                \n                <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900 rounded border border-green-200 dark:border-green-800\">\n                  <h4 className=\"font-semibold text-green-800 dark:text-green-200 mb-2\">✨ Código Inteligente y Dinámico</h4>\n                  <p className=\"text-sm text-green-800 dark:text-green-200 mb-2\">\n                    <strong>¡El código se actualiza automáticamente!</strong> Cuando cambies la posición del widget usando el selector de arriba, el código de integración se actualiza instantáneamente para reflejar tu selección.\n                  </p>\n                  <ul className=\"text-sm text-green-700 dark:text-green-300 list-disc list-inside space-y-1\">\n                    <li><strong>Posición actual:</strong> {formData.position || \"bottom-right\"}</li>\n                    <li><strong>Tipo de widget:</strong> {formData.widgetType === \"fullscreen\" ? \"Pantalla completa\" : \"Flotante\"}</li>\n                    <li><strong>Distancia del borde:</strong> 15px (puedes cambiar este valor en el código)</li>\n                  </ul>\n                  <p className=\"text-sm text-green-800 dark:text-green-200 mt-2\">\n                    💡 <strong>Tip:</strong> Solo copia y pega el código mostrado arriba - ya está optimizado para la configuración que seleccionaste.\n                  </p>\n                </div>\n                \n                <div className=\"mt-4 p-3 bg-yellow-50 dark:bg-yellow-900 rounded border border-yellow-200 dark:border-yellow-800\">\n                  <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                    <strong>Nota:</strong> Asegúrate de probar el widget en una página de prueba antes de implementarlo en tu sitio web principal.\n                  </p>\n                </div>\n              </div>\n              \n              {formData.widgetType === \"fullscreen\" && (\n                <div className=\"mt-6\">\n                  <Label htmlFor=\"scriptExampleFullscreen\">Código alternativo (recomendado)</Label>\n                  <div className=\"relative mt-1\">\n                    <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-sm overflow-x-auto\">\n                      {scriptExampleFullscreen}\n                    </pre>\n                    <Button \n                      type=\"button\" \n                      className=\"absolute right-1 top-1 h-8 px-2\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(scriptExampleFullscreen);\n                        toast({\n                          title: \"Código copiado\",\n                          description: \"El código alternativo ha sido copiado al portapapeles\",\n                        });\n                      }}\n                    >\n                      Copiar\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Este código actualizado ofrece una interfaz estilo ChatGPT y más opciones de personalización. También debe colocarse justo antes de la etiqueta de cierre <code>&lt;/body&gt;</code> en tu sitio web.\n                  </p>\n                  \n                  <div className=\"bg-amber-50 dark:bg-amber-900 p-3 rounded-lg mt-3 border border-amber-200 dark:border-amber-700\">\n                    <div className=\"flex items-start\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-amber-600 dark:text-amber-400 w-5 h-5 mt-0.5 mr-2\">\n                        <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\n                        <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n                      </svg>\n                      <p className=\"text-sm text-amber-800 dark:text-amber-200\">\n                        <strong>Recomendación:</strong> Este código alternativo proporciona una interfaz estilo ChatGPT para una experiencia más familiar y profesional. Reemplaza completamente al código estándar.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <Separator className=\"my-6\" />\n          \n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Subir documentos adicionales</h3>\n            <div className=\"p-4 bg-muted/50 rounded-lg border\">\n              <div className=\"flex flex-col space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Sube documentos (PDF, DOCX, Excel) para entrenar al chatbot con información adicional que no está en tu sitio web.\n                </p>\n                \n                <div className=\"border-2 border-dashed border-muted-foreground/20 rounded-lg p-6 text-center\">\n                  <div className=\"flex flex-col items-center space-y-2\">\n                    <Upload className=\"h-8 w-8 text-muted-foreground\" />\n                    <h4 className=\"font-medium\">Selecciona archivos para subir</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Arrastra archivos aquí o haz clic para seleccionarlos\n                    </p>\n                    <Input\n                      type=\"file\"\n                      multiple\n                      className=\"hidden\"\n                      id=\"document-upload\"\n                      accept=\".pdf,.docx,.xlsx,.xls,.doc,.txt\"\n                      onChange={(e) => setSelectedFiles(e.target.files)}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => document.getElementById('document-upload')?.click()}\n                    >\n                      Seleccionar archivos\n                    </Button>\n                  </div>\n                </div>\n                \n                {selectedFiles && selectedFiles.length > 0 && (\n                  <div className=\"space-y-2 mt-4\">\n                    <h4 className=\"font-medium\">Archivos seleccionados:</h4>\n                    <ul className=\"space-y-2\">\n                      {Array.from(selectedFiles).map((file, index) => (\n                        <li key={index} className=\"flex items-center bg-background p-2 rounded-md\">\n                          <File className=\"h-4 w-4 mr-2 text-blue-500\" />\n                          <span className=\"text-sm truncate\">{file.name}</span>\n                          <span className=\"text-xs text-muted-foreground ml-2\">\n                            ({Math.round(file.size / 1024)} KB)\n                          </span>\n                        </li>\n                      ))}\n                    </ul>\n                    <div className=\"flex justify-end mt-2\">\n                      <Button\n                        type=\"button\"\n                        onClick={async () => {\n                          if (!selectedFiles || !integration) return;\n                          \n                          const formData = new FormData();\n                          Array.from(selectedFiles).forEach(file => {\n                            formData.append('documents', file);\n                          });\n                          formData.append('integrationId', integration.id.toString());\n                          \n                          try {\n                            // Obtener el token de autenticación\n                            const authToken = localStorage.getItem('auth_token');\n                            const headers: Record<string, string> = {};\n                            \n                            if (authToken) {\n                              headers['Authorization'] = `Bearer ${authToken}`;\n                            }\n                            \n                            const response = await fetch('/api/documents/upload', {\n                              method: 'POST',\n                              headers: headers,\n                              credentials: 'include',\n                              body: formData,\n                            });\n                            \n                            if (!response.ok) {\n                              throw new Error('Error al subir los documentos');\n                            }\n                            \n                            toast({\n                              title: \"Documentos subidos\",\n                              description: \"Los documentos se han subido correctamente\",\n                            });\n                            \n                            setSelectedFiles(null);\n                            \n                            // Refrescar los datos de la integración\n                            await queryClient.invalidateQueries({ queryKey: [`/api/integrations/${id}`] });\n                            \n                            // Obtener directamente la integración actualizada mediante una petición fetch\n                            try {\n                              // Obtener el token de autenticación\n                              const authToken = localStorage.getItem('auth_token');\n                              const headers: Record<string, string> = {};\n                              \n                              if (authToken) {\n                                headers['Authorization'] = `Bearer ${authToken}`;\n                              }\n                              \n                              const updatedDataResponse = await fetch(`/api/integrations/${integration.id}`, {\n                                headers: headers,\n                                credentials: \"include\"\n                              });\n                              \n                              if (updatedDataResponse.ok) {\n                                const updatedIntegration = await updatedDataResponse.json();\n                                // Recargar la página para mostrar los cambios actualizados\n                                window.location.reload();\n                              }\n                            } catch (error) {\n                              console.error(\"Error al obtener datos actualizados:\", error);\n                            }\n                            \n                            // Limpiar archivos seleccionados\n                            setSelectedFiles(null);\n                          } catch (err) {\n                            console.error(\"Error al subir documentos:\", err);\n                            toast({\n                              title: \"Error\",\n                              description: \"No se pudieron subir los documentos. Inténtalo de nuevo.\",\n                              variant: \"destructive\",\n                            });\n                          }\n                        }}\n                      >\n                        Subir documentos\n                      </Button>\n                    </div>\n                  </div>\n                )}\n                \n                {integration?.documentsData && integration.documentsData.length > 0 && (\n                  <div className=\"space-y-2 mt-4\">\n                    <h4 className=\"font-medium\">Documentos subidos:</h4>\n                    <ul className=\"space-y-2\">\n                      {integration.documentsData.map((doc, index) => (\n                        <li key={index} className=\"flex items-center justify-between bg-background p-2 rounded-md\">\n                          <div className=\"flex items-center\">\n                            <File className=\"h-4 w-4 mr-2 text-blue-500\" />\n                            <span className=\"text-sm truncate\">{doc.filename}</span>\n                            <span className=\"text-xs text-muted-foreground ml-2\">\n                              ({Math.round(doc.size / 1024)} KB)\n                            </span>\n                          </div>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-6 w-6 text-red-500 hover:text-red-700\"\n                            onClick={async () => {\n                              try {\n                                // Obtener el token de autenticación\n                                const authToken = localStorage.getItem('auth_token');\n                                const headers: Record<string, string> = {};\n                                \n                                if (authToken) {\n                                  headers['Authorization'] = `Bearer ${authToken}`;\n                                }\n                                \n                                const response = await fetch(`/api/documents/${doc.id}`, {\n                                  method: 'DELETE',\n                                  headers: headers,\n                                  credentials: 'include'\n                                });\n                                \n                                if (!response.ok) {\n                                  throw new Error('Error al eliminar el documento');\n                                }\n                                \n                                toast({\n                                  title: \"Documento eliminado\",\n                                  description: \"El documento se ha eliminado correctamente\",\n                                });\n                                \n                                // Refrescar los datos de la integración\n                                await queryClient.invalidateQueries({ queryKey: [`/api/integrations/${id}`] });\n                                \n                                // Obtener directamente la integración actualizada mediante una petición fetch\n                                try {\n                                  // Obtener el token de autenticación\n                                  const authToken = localStorage.getItem('auth_token');\n                                  const headers: Record<string, string> = {};\n                                  \n                                  if (authToken) {\n                                    headers['Authorization'] = `Bearer ${authToken}`;\n                                  }\n                                  \n                                  const updatedDataResponse = await fetch(`/api/integrations/${integration.id}`, {\n                                    headers: headers,\n                                    credentials: \"include\"\n                                  });\n                                  \n                                  if (updatedDataResponse.ok) {\n                                    // Recargar la página para mostrar los cambios actualizados\n                                    window.location.reload();\n                                  }\n                                } catch (error) {\n                                  console.error(\"Error al obtener datos actualizados:\", error);\n                                }\n                              } catch (err) {\n                                console.error(\"Error al eliminar documento:\", err);\n                                toast({\n                                  title: \"Error\",\n                                  description: \"No se pudo eliminar el documento\",\n                                  variant: \"destructive\",\n                                });\n                              }\n                            }}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <Separator className=\"my-6\" />\n          \n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Entrenamiento con contenido del sitio</h3>\n            <div className=\"p-4 bg-muted/50 rounded-lg border\">\n              <div className=\"flex flex-col space-y-4\">\n                <div className=\"flex flex-col space-y-2\">\n                  <Label htmlFor=\"websiteUrl\">URL del sitio web para extraer contenido</Label>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      id=\"websiteUrl\"\n                      placeholder=\"https://ejemplo.com\"\n                      className=\"flex-grow\"\n                      defaultValue={formData.url}\n                    />\n                    <Button \n                      type=\"button\" \n                      variant=\"secondary\"\n                      disabled={isScrapingLoading}\n                      onClick={async () => {\n                        const urlInput = document.getElementById('websiteUrl') as HTMLInputElement;\n                        const url = urlInput.value.trim();\n                        if (!url) {\n                          toast({\n                            title: \"URL vacía\",\n                            description: \"Por favor, introduce una URL válida\",\n                            variant: \"destructive\",\n                          });\n                          return;\n                        }\n                        \n                        if (!url.startsWith('http')) {\n                          toast({\n                            title: \"URL inválida\",\n                            description: \"La URL debe comenzar con http:// o https://\",\n                            variant: \"destructive\",\n                          });\n                          return;\n                        }\n                        \n                        try {\n                          setIsScrapingLoading(true);\n                          toast({\n                            title: \"Iniciando extracción...\",\n                            description: \"El proceso puede tardar unos minutos\",\n                          });\n                          \n                          // Obtener el token de autenticación\n                          const authToken = localStorage.getItem('auth_token');\n                          const headers: Record<string, string> = {\n                            'Content-Type': 'application/json',\n                          };\n                          \n                          if (authToken) {\n                            headers['Authorization'] = `Bearer ${authToken}`;\n                          }\n                          \n                          const response = await fetch('/api/scrape', {\n                            method: 'POST',\n                            headers: headers,\n                            credentials: \"include\",\n                            body: JSON.stringify({\n                              url,\n                              integrationId: integration?.id,\n                              maxPages: 5,\n                            }),\n                          });\n                          \n                          if (!response.ok) {\n                            const error = await response.json();\n                            throw new Error(error.message || 'Error al hacer extracción');\n                          }\n                          \n                          const data = await response.json();\n                          toast({\n                            title: \"Extracción completada\",\n                            description: `Se procesaron ${data.pagesProcessed} páginas y se guardó el contenido.`,\n                          });\n                          \n                          // Refrescar la lista de contenido\n                          loadSiteContent();\n                        } catch (err: any) {\n                          console.error(\"Error en extracción:\", err);\n                          toast({\n                            title: \"Error en extracción\",\n                            description: err.message || \"Ocurrió un error al procesar el sitio\",\n                            variant: \"destructive\",\n                          });\n                        } finally {\n                          setIsScrapingLoading(false);\n                        }\n                      }}\n                    >\n                      {isScrapingLoading ? (\n                        <>\n                          <Loader className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Extrayendo...\n                        </>\n                      ) : \"Extraer contenido\"}\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Esta función analiza el contenido de tu sitio web para que el chat pueda responder preguntas sobre él.\n                  </p>\n                </div>\n                \n                <Separator className=\"my-2\" />\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <h4 className=\"font-medium\">Contenido extraído</h4>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={loadSiteContent}\n                      className=\"flex items-center\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-1\" />\n                      Actualizar\n                    </Button>\n                  </div>\n                  <div className=\"max-h-60 overflow-y-auto border rounded-md p-2\">\n                    {siteContent && siteContent.length > 0 ? (\n                      <ul className=\"space-y-2\">\n                        {siteContent.map((content) => (\n                          <li key={content.id} className=\"px-3 py-2 bg-background rounded-md shadow-sm\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1 pr-2 overflow-hidden\">\n                                <p className=\"font-medium truncate\">{content.title || \"Sin título\"}</p>\n                                <a \n                                  href={content.url} \n                                  target=\"_blank\" \n                                  rel=\"noopener noreferrer\"\n                                  className=\"text-xs text-blue-500 hover:underline truncate block\"\n                                >\n                                  {content.url}\n                                </a>\n                              </div>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"icon\" \n                                className=\"h-6 w-6 text-red-500 hover:text-red-700 flex-shrink-0\"\n                                onClick={async () => {\n                                  try {\n                                    // Obtener el token de autenticación\n                                    const authToken = localStorage.getItem('auth_token');\n                                    const headers: Record<string, string> = {};\n                                    \n                                    if (authToken) {\n                                      headers['Authorization'] = `Bearer ${authToken}`;\n                                    }\n                                    \n                                    const response = await fetch(`/api/site-content/${content.id}`, {\n                                      method: 'DELETE',\n                                      headers: headers,\n                                      credentials: \"include\"\n                                    });\n                                    \n                                    if (!response.ok) {\n                                      throw new Error('Error al eliminar el contenido');\n                                    }\n                                    \n                                    toast({\n                                      title: \"Contenido eliminado\",\n                                      description: \"El contenido se ha eliminado correctamente\",\n                                    });\n                                    \n                                    // Refrescar la lista\n                                    loadSiteContent();\n                                  } catch (err) {\n                                    console.error(\"Error al eliminar contenido:\", err);\n                                    toast({\n                                      title: \"Error\",\n                                      description: \"No se pudo eliminar el contenido\",\n                                      variant: \"destructive\",\n                                    });\n                                  }\n                                }}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <div className=\"text-center py-4 text-muted-foreground\">\n                        No hay contenido extraído. Utiliza el botón \"Extraer contenido\" para analizar tu sitio web.\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-4 mt-8\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={handleCancel}\n            >\n              Cancelar\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={updateIntegrationMutation.isPending}\n              className=\"flex items-center\"\n            >\n              {updateIntegrationMutation.isPending ? (\n                <>\n                  <Loader className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Guardando...\n                </>\n              ) : (\n                <>\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Guardar cambios\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":49790},"client/src/pages/edit-integration.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Loader, CheckCircle, AlertCircle, Trash2, RefreshCw, Upload, File, ArrowLeft, Download } from \"lucide-react\";\nimport jsPDF from 'jspdf';\n\n// Esquema de validación para el formulario\nconst formSchema = z.object({\n  name: z.string().min(2, { message: \"El nombre debe tener al menos 2 caracteres\" }),\n  url: z.string().url({ message: \"Debe ser una URL válida\" }),\n  themeColor: z.string().default(\"#3B82F6\"),\n  position: z.enum([\"bottom-right\", \"bottom-left\", \"top-right\", \"top-left\"], {\n    required_error: \"Debes seleccionar una posición\"\n  }).default(\"bottom-right\"),\n  active: z.boolean().default(true),\n  botBehavior: z.string().optional(),\n  widgetType: z.enum([\"bubble\", \"fullscreen\"], {\n    required_error: \"Debes seleccionar un tipo de widget\"\n  }).default(\"bubble\"),\n  ignoredSections: z.array(z.string()).default([]),\n  ignoredSectionsText: z.string().optional(),\n  description: z.string().optional(),\n  language: z.enum([\"es\", \"en\", \"fr\"], {\n    required_error: \"Debes seleccionar un idioma\"\n  }).default(\"es\"),\n  textColor: z.enum([\"auto\", \"white\", \"black\"], {\n    required_error: \"Debes seleccionar un color de texto\"\n  }).default(\"auto\"),\n  customization: z.object({\n    assistantName: z.string().optional(),\n    defaultGreeting: z.string().optional(),\n    showAvailability: z.boolean().optional(),\n    userBubbleColor: z.string().optional(),\n    assistantBubbleColor: z.string().optional(),\n    font: z.string().optional(),\n    conversationStyle: z.string().optional(),\n  }).optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\ninterface Integration {\n  id: number;\n  userId: number;\n  name: string;\n  url: string;\n  apiKey: string;\n  themeColor: string;\n  position: \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\" | \"bottom-center\"; // Incluir bottom-center para compatibilidad\n  active: boolean;\n  createdAt: string;\n  visitorCount: number;\n  botBehavior?: string;\n  documentsData?: any[];\n  widgetType?: string;\n  ignoredSections?: string[];\n  description?: string;\n  ignoredSectionsText?: string;\n  customization?: {\n    assistantName?: string;\n    defaultGreeting?: string;\n    showAvailability?: boolean;\n    userBubbleColor?: string;\n    assistantBubbleColor?: string;\n    font?: string;\n    conversationStyle?: string;\n  };\n  language?: string;\n}\n\ninterface SiteContent {\n  id: number;\n  integrationId: number;\n  url: string;\n  title: string | null;\n  content: string;\n  lastUpdated: string | null;\n}\n\nexport default function EditIntegration() {\n  const { id } = useParams();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n  const [scriptExample, setScriptExample] = useState('');\n  const [isScrapingLoading, setIsScrapingLoading] = useState(false);\n  const [siteContent, setSiteContent] = useState<SiteContent[]>([]);\n  const [isUploadingFiles, setIsUploadingFiles] = useState(false);\n  const [isExtracting, setIsExtracting] = useState(false);\n  const [extractedContent, setExtractedContent] = useState<Array<{url: string, title: string}>>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Inicializar el formulario con react-hook-form\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      url: \"\",\n      themeColor: \"#3B82F6\",\n      position: \"bottom-right\",\n      active: true,\n      botBehavior: \"\",\n      widgetType: \"bubble\",\n      ignoredSections: [],\n      ignoredSectionsText: \"\",\n      description: \"\",\n      language: \"es\",\n      textColor: \"auto\",\n      customization: {\n        assistantName: \"AIPI Assistant\",\n        defaultGreeting: \"¡Hola! ¿En qué puedo ayudarte hoy?\",\n        showAvailability: true,\n        userBubbleColor: \"#1e88e5\",\n        assistantBubbleColor: \"#f5f5f5\", \n        font: \"Inter\",\n        conversationStyle: \"modern\",\n      },\n    },\n  });\n\n  // Obtener datos de la integración\n  const { data: integration, isLoading, error } = useQuery<Integration>({\n    queryKey: [`/api/integrations/${id}`],\n    enabled: !!id,\n    staleTime: 1000 * 60,\n  });\n\n  // Función para manejar la selección de archivos\n  const handleFileSelection = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  // Función para manejar el cambio de archivos\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      setSelectedFiles(e.target.files);\n    }\n  };\n\n  // Función para subir documentos\n  const uploadFiles = async () => {\n    if (!selectedFiles || selectedFiles.length === 0 || !integration) {\n      return [];\n    }\n\n    setIsUploadingFiles(true);\n    \n    try {\n      const formData = new FormData();\n      formData.append(\"integrationId\", integration.id.toString());\n      \n      for (let i = 0; i < selectedFiles.length; i++) {\n        formData.append(\"documents\", selectedFiles[i]);\n      }\n      \n      const response = await fetch(\"/api/documents/upload\", {\n        method: \"POST\",\n        body: formData,\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"auth_token\")}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Error al subir los documentos\");\n      }\n      \n      const data = await response.json();\n      \n      toast({\n        title: \"Documentos subidos\",\n        description: `Se han subido ${data.documents?.length || 0} documentos correctamente`,\n      });\n      \n      // Refrescar la integración para mostrar los nuevos documentos\n      queryClient.invalidateQueries({ queryKey: [`/api/integrations/${id}`] });\n      setSelectedFiles(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      \n      return data.documents || [];\n    } catch (error) {\n      console.error(\"Error al subir documentos:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudieron subir los documentos. Inténtalo de nuevo.\",\n        variant: \"destructive\",\n      });\n      return [];\n    } finally {\n      setIsUploadingFiles(false);\n    }\n  };\n\n  // Función para extraer contenido del sitio\n  const extractSiteContent = async () => {\n    const url = form.getValues(\"url\");\n    \n    if (!url || !integration) {\n      toast({\n        title: \"Error\",\n        description: \"Debes introducir una URL válida\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n    \n    setIsExtracting(true);\n    \n    try {\n      const response = await fetch(\"/api/site-content/extract\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"auth_token\")}`,\n        },\n        body: JSON.stringify({\n          integrationId: integration.id,\n          url,\n          maxPages: 5,\n        }),\n      });\n      \n      // Verificar content-type para asegurar que es JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        // Si no es JSON, leer como texto para debug\n        const textResponse = await response.text();\n        console.error(\"Respuesta no-JSON recibida:\", textResponse.substring(0, 200));\n        throw new Error(\"El servidor devolvió una respuesta inválida. Verifica la configuración.\");\n      }\n      \n      if (!response.ok) {\n        let errorMessage = \"Error al extraer el contenido\";\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorMessage;\n        } catch {\n          // Si no se puede parsear el error como JSON, usar mensaje genérico\n        }\n        throw new Error(errorMessage);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message || \"Error en la extracción del contenido\");\n      }\n      \n      setExtractedContent(data.savedContent.map((content: any) => ({\n        url: content.url,\n        title: content.title,\n      })));\n      \n      toast({\n        title: \"Extracción completada\",\n        description: `Se procesaron ${data.pagesProcessed} páginas y se guardó el contenido.`,\n      });\n      \n      // Refrescar el contenido del sitio\n      queryClient.invalidateQueries({ queryKey: [`/api/site-content/${id}`] });\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error en extracción:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Ocurrió un error al procesar el sitio\";\n      toast({\n        title: \"Error en extracción\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      return false;\n    } finally {\n      setIsExtracting(false);\n    }\n  };\n\n  // Función para eliminar un documento\n  const deleteDocument = async (documentIndex: number) => {\n    if (!integration || !integration.documentsData) return;\n    \n    try {\n      const response = await fetch(`/api/documents/delete`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"auth_token\")}`,\n        },\n        body: JSON.stringify({\n          integrationId: integration.id,\n          documentIndex,\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Error al eliminar el documento\");\n      }\n      \n      toast({\n        title: \"Documento eliminado\",\n        description: \"El documento se ha eliminado correctamente\",\n      });\n      \n      // Refrescar la integración\n      queryClient.invalidateQueries({ queryKey: [`/api/integrations/${id}`] });\n    } catch (error) {\n      console.error(\"Error al eliminar documento:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el documento\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Setup widget communication\n  useEffect(() => {\n    // Listen for widget configuration requests\n    const handleWidgetMessage = (event: MessageEvent) => {\n      if (event.data && event.data.type === 'AIPPS_REQUEST_CONFIG') {\n        console.log('Dashboard: Recibida solicitud de configuración del widget');\n        \n        const authToken = localStorage.getItem('auth_token');\n        const apiBaseUrl = window.location.origin;\n        \n        // Send configuration to widget\n        event.source?.postMessage({\n          type: 'AIPPS_DASHBOARD_CONFIG',\n          authToken: authToken,\n          apiBaseUrl: apiBaseUrl,\n          isDashboard: true\n        }, '*');\n        \n        console.log('Dashboard: Configuración enviada al widget', {\n          authToken: authToken ? 'Presente' : 'Ausente',\n          apiBaseUrl\n        });\n      }\n    };\n\n    window.addEventListener('message', handleWidgetMessage);\n    \n    return () => {\n      window.removeEventListener('message', handleWidgetMessage);\n    };\n  }, []);\n\n  // Cargar datos en el formulario cuando estén disponibles\n  useEffect(() => {\n    if (integration) {\n      form.reset({\n        name: integration.name || \"\",\n        url: integration.url || \"\",\n        themeColor: integration.themeColor || \"#3B82F6\",\n        position: integration.position === \"bottom-center\" ? \"bottom-right\" : integration.position || \"bottom-right\",\n        active: integration.active,\n        botBehavior: integration.botBehavior || \"\",\n        widgetType: integration.widgetType as any || \"bubble\",\n        ignoredSections: integration.ignoredSections || [],\n        ignoredSectionsText: integration.ignoredSectionsText || \"\",\n        description: integration.description || \"\",\n        language: integration.language || \"es\",\n        textColor: integration.textColor || \"auto\",\n        customization: integration.customization || {\n          assistantName: \"AIPI Assistant\",\n          defaultGreeting: \"¡Hola! ¿En qué puedo ayudarte hoy?\",\n          showAvailability: true,\n          userBubbleColor: \"#1e88e5\",\n          assistantBubbleColor: \"#f5f5f5\", \n          font: \"Inter\",\n          conversationStyle: \"modern\",\n        },\n      });\n\n      // Actualizar script de ejemplo - USANDO EMBED.JS PARA TODOS LOS TIPOS\n      const widgetType = integration.widgetType || \"bubble\";\n      setScriptExample(`<script src=\"https://aipps.ca/embed.js?key=${integration.apiKey}\" data-widget-type=\"${widgetType}\"></script>`);\n    }\n  }, [integration, form]);\n\n  // Mutación para actualizar la integración\n  const updateIntegrationMutation = useMutation({\n    mutationFn: (data: FormValues) => \n      apiRequest(\"PATCH\", `/api/integrations/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/integrations/${id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n      toast({\n        title: \"Integración actualizada\",\n        description: \"La integración ha sido actualizada exitosamente\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar la integración. Por favor, intenta de nuevo.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Manejar envío del formulario\n  const onSubmit = (data: FormValues) => {\n    updateIntegrationMutation.mutate(data);\n  };\n\n  const handleCancel = () => {\n    navigate(\"/dashboard\");\n  };\n\n  // Función para generar y descargar la documentación en PDF\n  const downloadDocumentationPDF = () => {\n    if (!integration) return;\n\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const margin = 15;\n    let yPosition = 20;\n\n    // Título principal\n    doc.setFontSize(20);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Documentación de Integración', pageWidth / 2, yPosition, { align: 'center' });\n    \n    yPosition += 15;\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`Integración: ${integration.name}`, pageWidth / 2, yPosition, { align: 'center' });\n    \n    yPosition += 10;\n    doc.text(`Generado: ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: 'center' });\n    \n    // Línea separadora\n    yPosition += 10;\n    doc.setLineWidth(0.5);\n    doc.line(margin, yPosition, pageWidth - margin, yPosition);\n    \n    yPosition += 20;\n\n    // Información básica\n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text('1. Información de la Integración', margin, yPosition);\n    \n    yPosition += 15;\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    \n    const basicInfo = [\n      `Nombre: ${integration.name}`,\n      `URL del sitio: ${integration.url || 'No especificada'}`,\n      `Tipo de widget: ${integration.widgetType === 'bubble' ? 'Widget flotante (burbuja)' : 'Pantalla completa (estilo ChatGPT)'}`,\n      `Posición: ${integration.position || 'bottom-right'}`,\n      `Estado: ${integration.active ? 'Activa' : 'Inactiva'}`,\n      `Color del tema: ${integration.themeColor || '#3B82F6'}`,\n    ];\n\n    basicInfo.forEach(info => {\n      if (yPosition > 250) {\n        doc.addPage();\n        yPosition = 20;\n      }\n      doc.text(info, margin, yPosition);\n      yPosition += 8;\n    });\n\n    yPosition += 15;\n\n    // Código de integración\n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text('2. Código de Integración', margin, yPosition);\n    \n    yPosition += 15;\n    doc.setFontSize(10);\n    doc.setFont('courier', 'normal');\n    \n    if (yPosition > 230) {\n      doc.addPage();\n      yPosition = 20;\n    }\n    \n    // Código HTML\n    doc.text('Copie y pegue este código en su sitio web:', margin, yPosition);\n    yPosition += 10;\n    \n    const codeLines = scriptExample ? scriptExample.split('\\n') : [];\n    codeLines.forEach(line => {\n      if (yPosition > 270) {\n        doc.addPage();\n        yPosition = 20;\n      }\n      doc.text(line, margin, yPosition);\n      yPosition += 6;\n    });\n\n    yPosition += 15;\n\n    // Instrucciones de implementación\n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text('3. Instrucciones de Implementación', margin, yPosition);\n    \n    yPosition += 15;\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n\n    const instructions = [\n      '1. Copie el código de integración mostrado arriba',\n      '2. Pegue el código en el <head> o antes del cierre </body> de su sitio web',\n      '3. Guarde y publique los cambios en su sitio web',\n      '4. El widget aparecerá automáticamente en su sitio',\n      '5. Verifique que el widget funciona correctamente visitando su sitio'\n    ];\n\n    instructions.forEach(instruction => {\n      if (yPosition > 250) {\n        doc.addPage();\n        yPosition = 20;\n      }\n      doc.text(instruction, margin, yPosition);\n      yPosition += 8;\n    });\n\n    yPosition += 15;\n\n    // Personalización\n    if (integration.customization) {\n      if (yPosition > 200) {\n        doc.addPage();\n        yPosition = 20;\n      }\n\n      doc.setFontSize(16);\n      doc.setFont('helvetica', 'bold');\n      doc.text('4. Configuración de Personalización', margin, yPosition);\n      \n      yPosition += 15;\n      doc.setFontSize(12);\n      doc.setFont('helvetica', 'normal');\n\n      const customization = integration.customization;\n      const customInfo = [\n        `Nombre del asistente: ${customization.assistantName || 'AIPI Assistant'}`,\n        `Saludo predeterminado: ${customization.defaultGreeting || '¡Hola! ¿En qué puedo ayudarte hoy?'}`,\n        `Mostrar disponibilidad: ${customization.showAvailability ? 'Sí' : 'No'}`,\n        `Color de burbuja del usuario: ${customization.userBubbleColor || '#1e88e5'}`,\n        `Color de burbuja del asistente: ${customization.assistantBubbleColor || '#f5f5f5'}`,\n        `Fuente: ${customization.font || 'Inter'}`,\n        `Estilo de conversación: ${customization.conversationStyle || 'modern'}`,\n      ];\n\n      customInfo.forEach(info => {\n        if (yPosition > 250) {\n          doc.addPage();\n          yPosition = 20;\n        }\n        doc.text(info, margin, yPosition);\n        yPosition += 8;\n      });\n    }\n\n    // Documentos adjuntos\n    if (integration.documentsData && integration.documentsData.length > 0) {\n      yPosition += 15;\n      \n      if (yPosition > 200) {\n        doc.addPage();\n        yPosition = 20;\n      }\n\n      doc.setFontSize(16);\n      doc.setFont('helvetica', 'bold');\n      doc.text('5. Documentos de Entrenamiento', margin, yPosition);\n      \n      yPosition += 15;\n      doc.setFontSize(12);\n      doc.setFont('helvetica', 'normal');\n\n      integration.documentsData.forEach((doc: any, index: number) => {\n        if (yPosition > 250) {\n          doc.addPage();\n          yPosition = 20;\n        }\n        doc.text(`${index + 1}. ${doc.originalName} (${doc.mimetype})`, margin, yPosition);\n        yPosition += 8;\n      });\n    }\n\n    // Pie de página\n    const totalPages = doc.getNumberOfPages();\n    for (let i = 1; i <= totalPages; i++) {\n      doc.setPage(i);\n      doc.setFontSize(8);\n      doc.setFont('helvetica', 'normal');\n      doc.text(`Página ${i} de ${totalPages}`, pageWidth - margin, 285, { align: 'right' });\n    }\n\n    // Descargar el PDF\n    doc.save(`documentacion-${integration.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex justify-center items-center min-h-[400px]\">\n          <Loader className=\"w-8 h-8 animate-spin text-primary\" />\n          <span className=\"ml-2\">Cargando información de la integración...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex flex-col justify-center items-center min-h-[400px]\">\n          <AlertCircle className=\"w-12 h-12 text-red-500 mb-4\" />\n          <h2 className=\"text-xl font-semibold mb-2\">Error al cargar la integración</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">No se pudo cargar la información de la integración.</p>\n          <Button onClick={handleCancel}>Volver al Dashboard</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-5xl\">\n      <div className=\"flex items-center mb-8\">\n        <Button \n          variant=\"ghost\" \n          className=\"mr-2 p-0 h-auto\" \n          onClick={() => navigate(\"/dashboard\")}\n        >\n          <ArrowLeft className=\"h-5 w-5 mr-2\" />\n        </Button>\n        <h1 className=\"text-2xl font-bold\">Editar Integración</h1>\n      </div>\n\n      <Card className=\"p-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nombre de la integración</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Mi sitio web\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Un nombre descriptivo para identificar esta integración\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"url\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>URL del sitio web</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"https://ejemplo.com\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      La URL completa de tu sitio web\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"themeColor\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Color del tema</FormLabel>\n                    <div className=\"flex items-center gap-2\">\n                      <FormControl>\n                        <Input {...field} type=\"color\" className=\"w-10 h-10 p-1\" />\n                      </FormControl>\n                      <Input \n                        value={field.value} \n                        onChange={field.onChange}\n                        className=\"flex-grow\"\n                      />\n                    </div>\n                    <FormDescription>\n                      El color principal del widget\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"position\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Posición del widget</FormLabel>\n                    <Select\n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        // Auto-save position changes\n                        const currentValues = form.getValues();\n                        updateIntegrationMutation.mutate({\n                          ...currentValues,\n                          position: value\n                        });\n                      }}\n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecciona una posición\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"bottom-right\">Abajo a la derecha</SelectItem>\n                        <SelectItem value=\"bottom-left\">Abajo a la izquierda</SelectItem>\n                        <SelectItem value=\"top-right\">Arriba a la derecha</SelectItem>\n                        <SelectItem value=\"top-left\">Arriba a la izquierda</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      Dónde aparecerá el widget en la página (se guarda automáticamente)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"language\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Idioma del widget</FormLabel>\n                    <Select\n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        // Auto-save language changes\n                        const currentValues = form.getValues();\n                        updateIntegrationMutation.mutate({\n                          ...currentValues,\n                          language: value\n                        });\n                      }}\n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecciona un idioma\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"es\">Español</SelectItem>\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"fr\">Français</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      El idioma en que se mostrará el widget a los usuarios (se guarda automáticamente)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"textColor\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Color del texto del asistente</FormLabel>\n                    <Select\n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        // Auto-save text color changes\n                        const currentValues = form.getValues();\n                        updateIntegrationMutation.mutate({\n                          ...currentValues,\n                          textColor: value\n                        });\n                      }}\n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecciona el color del texto\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"auto\">🎨 Automático (basado en contraste)</SelectItem>\n                        <SelectItem value=\"white\">⚪ Blanco</SelectItem>\n                        <SelectItem value=\"black\">⚫ Negro</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      Color del texto en los mensajes del asistente. \"Automático\" calcula el mejor contraste según el color de fondo.\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"active\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                  <FormControl>\n                    <Checkbox\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <FormLabel>\n                      Integración activa\n                    </FormLabel>\n                    <FormDescription>\n                      Si está desactivada, el widget no se mostrará en tu sitio web\n                    </FormDescription>\n                  </div>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descripción (opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Describe el propósito de esta integración...\" \n                      className=\"resize-none\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"widgetType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tipo de integración</FormLabel>\n                  <Select\n                    onValueChange={(value) => {\n                      field.onChange(value);\n                      // Update script example when widget type changes\n                      if (integration?.apiKey) {\n                        setScriptExample(`<script src=\"${window.location.origin}/embed.js?key=${integration.apiKey}\" data-widget-type=\"${value}\"></script>`);\n                      }\n                    }}\n                    value={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecciona un tipo\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"bubble\">Widget flotante (burbuja)</SelectItem>\n                      <SelectItem value=\"fullscreen\">Pantalla completa (estilo ChatGPT)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormDescription>\n                    Elige cómo se mostrará el asistente en tu sitio web\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"botBehavior\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Comportamiento del bot (opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Instrucciones específicas para guiar el comportamiento del asistente...\" \n                      className=\"resize-none\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Define cómo debe comportarse el asistente al interactuar con los visitantes\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"ignoredSectionsText\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Secciones a ignorar en el scraping (opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"footer, .cookie-banner, #ads...\" \n                      className=\"resize-none\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Selectores CSS o nombres de elementos que el scraper debe ignorar\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Sección de personalización del chatbot */}\n            <div className=\"space-y-6 border-t pt-6\">\n              <h3 className=\"text-lg font-medium\">Personalización del Chatbot</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"customization.assistantName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre del asistente</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"AIPI Assistant\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        Como se presentará el asistente a los usuarios\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.font\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Fuente tipográfica</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        value={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecciona una fuente\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Inter\">Inter</SelectItem>\n                          <SelectItem value=\"Roboto\">Roboto</SelectItem>\n                          <SelectItem value=\"Open Sans\">Open Sans</SelectItem>\n                          <SelectItem value=\"Lato\">Lato</SelectItem>\n                          <SelectItem value=\"Montserrat\">Montserrat</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Fuente que se usará en el chat\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.userBubbleColor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Color de burbujas del usuario</FormLabel>\n                      <div className=\"flex items-center gap-2\">\n                        <FormControl>\n                          <Input {...field} type=\"color\" className=\"w-10 h-10 p-1\" />\n                        </FormControl>\n                        <Input \n                          value={field.value} \n                          onChange={field.onChange}\n                          className=\"flex-grow\"\n                        />\n                      </div>\n                      <FormDescription>\n                        Color de fondo de los mensajes del usuario\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.assistantBubbleColor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Color de burbujas del asistente</FormLabel>\n                      <div className=\"flex items-center gap-2\">\n                        <FormControl>\n                          <Input {...field} type=\"color\" className=\"w-10 h-10 p-1\" />\n                        </FormControl>\n                        <Input \n                          value={field.value} \n                          onChange={field.onChange}\n                          className=\"flex-grow\"\n                        />\n                      </div>\n                      <FormDescription>\n                        Color de fondo de los mensajes del asistente\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"customization.defaultGreeting\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mensaje de bienvenida</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"¡Hola! ¿En qué puedo ayudarte hoy?\" \n                        className=\"resize-none\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Primer mensaje que verá el usuario al abrir el chat\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"customization.showAvailability\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel>\n                          Mostrar disponibilidad\n                        </FormLabel>\n                        <FormDescription>\n                          Mostrar estado \"en línea\" en el chat\n                        </FormDescription>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"customization.conversationStyle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Estilo de conversación</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        value={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecciona un estilo\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"modern\">Moderno</SelectItem>\n                          <SelectItem value=\"classic\">Clásico</SelectItem>\n                          <SelectItem value=\"minimal\">Minimalista</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Estilo visual del chat\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n            \n            {/* Sección de gestión de documentos */}\n            <div className=\"space-y-6 border-t pt-6\">\n              <h3 className=\"text-lg font-medium\">Gestión de Documentos</h3>\n              \n              <input \n                type=\"file\" \n                ref={fileInputRef} \n                className=\"hidden\" \n                multiple \n                accept=\".pdf,.docx,.xlsx,.xls,.csv,.doc\" \n                onChange={handleFileChange}\n              />\n              \n              <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n                <h4 className=\"font-medium mb-4\">Subir documentos adicionales</h4>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                  Sube documentos (PDF, DOCX, Excel) para entrenar al chatbot con información adicional.\n                </div>\n                \n                <div \n                  className=\"border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-md p-6 text-center cursor-pointer\"\n                  onClick={handleFileSelection}\n                >\n                  <div className=\"flex flex-col items-center justify-center\">\n                    <div className=\"mb-3\">\n                      <Upload className=\"h-10 w-10 text-gray-400\" />\n                    </div>\n                    <p className=\"mb-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Selecciona archivos para subir\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Arrastra archivos aquí o haz clic para seleccionarlos\n                    </p>\n                  </div>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    className=\"mt-4\"\n                    onClick={handleFileSelection}\n                  >\n                    {selectedFiles && selectedFiles.length > 0 ? (\n                      <span className=\"flex items-center gap-2\">\n                        <File className=\"h-4 w-4\" />\n                        {selectedFiles.length} {selectedFiles.length === 1 ? 'archivo seleccionado' : 'archivos seleccionados'}\n                      </span>\n                    ) : 'Seleccionar archivos'}\n                  </Button>\n                </div>\n\n                {selectedFiles && selectedFiles.length > 0 && (\n                  <div className=\"mt-4 bg-slate-100 dark:bg-slate-800 p-3 rounded-md\">\n                    <h4 className=\"font-medium mb-2\">Archivos seleccionados:</h4>\n                    <ul className=\"space-y-1\">\n                      {Array.from(selectedFiles).map((file, index) => (\n                        <li key={index} className=\"flex items-center text-sm\">\n                          <File className=\"h-4 w-4 mr-2 text-blue-500\" />\n                          <span className=\"truncate\">{file.name}</span>\n                          <span className=\"ml-2 text-gray-500 dark:text-gray-400 text-xs\">\n                            ({(file.size / 1024).toFixed(0)} KB)\n                          </span>\n                        </li>\n                      ))}\n                    </ul>\n                    <Button \n                      type=\"button\" \n                      onClick={uploadFiles}\n                      disabled={isUploadingFiles}\n                      className=\"mt-3\"\n                      size=\"sm\"\n                    >\n                      {isUploadingFiles ? (\n                        <>\n                          <Loader className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Subiendo...\n                        </>\n                      ) : (\n                        <>\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Subir archivos\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                )}\n\n                {integration?.documentsData && integration.documentsData.length > 0 && (\n                  <div className=\"mt-4 border rounded-md p-3\">\n                    <h4 className=\"font-medium mb-2\">Documentos subidos:</h4>\n                    <ul className=\"space-y-2\">\n                      {integration.documentsData.map((doc: any, index: number) => (\n                        <li key={index} className=\"flex items-center justify-between text-sm p-2 bg-white dark:bg-gray-800 rounded-md\">\n                          <div className=\"flex items-center\">\n                            <File className=\"h-4 w-4 mr-2 text-blue-500\" />\n                            <span className=\"truncate\">{doc.originalName}</span>\n                            <span className=\"ml-2 text-gray-500 dark:text-gray-400 text-xs\">\n                              ({doc.mimetype})\n                            </span>\n                          </div>\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => deleteDocument(index)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Sección de scraping */}\n            <div className=\"space-y-6 border-t pt-6\">\n              <h3 className=\"text-lg font-medium\">Entrenamiento con contenido del sitio</h3>\n              \n              <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n                <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                  Extrae contenido actualizado de tu sitio web para entrenar el chatbot\n                </div>\n                \n                <div className=\"flex gap-2 mb-4\">\n                  <Button \n                    type=\"button\"\n                    onClick={extractSiteContent}\n                    disabled={isExtracting}\n                    variant=\"outline\"\n                  >\n                    {isExtracting ? (\n                      <>\n                        <Loader className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Extrayendo...\n                      </>\n                    ) : (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2\" />\n                        Re-extraer contenido\n                      </>\n                    )}\n                  </Button>\n                </div>\n\n                {extractedContent.length > 0 && (\n                  <div className=\"mt-4 border rounded-md p-3 max-h-48 overflow-y-auto\">\n                    <h4 className=\"font-medium mb-2 text-sm\">Contenido extraído:</h4>\n                    <ul className=\"space-y-1\">\n                      {extractedContent.map((content, index) => (\n                        <li key={index} className=\"flex items-start text-sm p-2 bg-white dark:bg-gray-800 rounded-md\">\n                          <span className=\"flex-grow overflow-hidden\">\n                            <p className=\"font-medium truncate\">{content.title || \"Sin título\"}</p>\n                            <a \n                              href={content.url} \n                              target=\"_blank\" \n                              rel=\"noopener noreferrer\"\n                              className=\"text-xs text-blue-500 hover:underline truncate block\"\n                            >\n                              {content.url}\n                            </a>\n                          </span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end gap-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleCancel}>\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateIntegrationMutation.isPending}\n              >\n                {updateIntegrationMutation.isPending ? (\n                  <>\n                    <Loader className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Actualizando...\n                  </>\n                ) : (\n                  'Actualizar integración'\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </Card>\n\n      {/* Sección del código de integración */}\n      {scriptExample && (\n        <Card className=\"mt-8 p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold\">Código de integración</h3>\n            <Button \n              onClick={downloadDocumentationPDF}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Descargar documentación PDF\n            </Button>\n          </div>\n          <div className=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-md\">\n            <code className=\"text-sm\">{scriptExample}</code>\n          </div>\n          <div className=\"mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-md\">\n            <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Instrucciones de implementación:</h4>\n            <ol className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n              <li>1. Copie el código de integración mostrado arriba</li>\n              <li>2. Pegue el código en el &lt;head&gt; o antes del cierre &lt;/body&gt; de su sitio web</li>\n              <li>3. Guarde y publique los cambios en su sitio web</li>\n              <li>4. El widget aparecerá automáticamente en su sitio</li>\n              <li>5. Use el botón \"Descargar documentación PDF\" para obtener una guía completa</li>\n            </ol>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":50803},"client/src/pages/form-editor.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useRoute, useLocation } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useTranslation } from 'react-i18next';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useUpgradeModal } from '@/hooks/use-upgrade-modal';\nimport UpgradePlanModal from '@/components/upgrade-plan-modal';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Loader2, Save, ArrowLeft, Eye, Settings, Code, Layout, ArrowUp, ArrowDown, Share2 } from 'lucide-react';\nimport Header from '@/components/header';\n\n// Tipos para el formulario\ninterface FieldOption {\n  label: string;\n  value?: string;\n}\n\ninterface FormField {\n  label: string;\n  name: string;\n  type: string;\n  placeholder?: string;\n  required: boolean;\n  options?: (string | FieldOption)[];\n  defaultValue?: string;\n}\n\ninterface FormStructure {\n  fields: FormField[];\n  submitButtonText: string;\n}\n\ninterface FormStyling {\n  theme: 'light' | 'dark' | 'auto';\n  fontFamily: string;\n  primaryColor: string;\n  borderRadius: string;\n  spacing: string;\n}\n\ninterface FormSettings {\n  redirectUrl: string;\n  sendEmailNotification: boolean;\n  emailRecipients: string;\n  successMessage: string;\n  captcha: boolean;\n  storeResponses: boolean;\n}\n\ninterface FormData {\n  title: string;\n  description: string;\n  slug: string;\n  type: string;\n  published: boolean;\n  language: string;\n  structure: FormStructure;\n  styling: FormStyling;\n  settings: FormSettings;\n}\n\ninterface FieldData {\n  label: string;\n  name: string;\n  type: string;\n  placeholder: string;\n  required: boolean;\n  options: (string | FieldOption)[];\n  defaultValue: string;\n}\n\n// Función para traducir etiquetas de campos dinámicamente\nconst translateFieldLabel = (originalLabel: string, language: string): string => {\n  const translations: Record<string, Record<string, string>> = {\n    es: {\n      'Name': 'Nombre',\n      'First Name': 'Nombre',\n      'Last Name': 'Apellido', \n      'Email': 'Correo electrónico',\n      'Phone': 'Teléfono',\n      'Company': 'Empresa',\n      'Message': 'Mensaje',\n      'Subject': 'Asunto',\n      'How did you hear about us?': '¿Cómo te enteraste de nosotros?',\n      'Interests': 'Intereses',\n      'Budget': 'Presupuesto',\n      'Project Details': 'Detalles del proyecto',\n      'Rating': 'Calificación',\n      'Feedback': 'Comentarios',\n      'Suggestions': 'Sugerencias',\n      'Event Name': 'Nombre del evento',\n      'Number of Participants': 'Número de participantes',\n      'Event Date': 'Fecha del evento',\n      'Submit': 'Enviar',\n      'Tu nombre': 'Tu nombre',\n      'tu@email.com': 'tu@email.com',\n      'Redes sociales': 'Redes sociales',\n      'Búsqueda en Google': 'Búsqueda en Google',\n      'Recomendación': 'Recomendación',\n      'Otro': 'Otro'\n    },\n    en: {\n      // Traducciones ES -> EN\n      'Nombre': 'Name',\n      'Correo electrónico': 'Email',\n      'Teléfono': 'Phone',\n      'Empresa': 'Company',\n      'Mensaje': 'Message',\n      'Asunto': 'Subject',\n      '¿Cómo te enteraste de nosotros?': 'How did you hear about us?',\n      'Intereses': 'Interests',\n      'Presupuesto': 'Budget',\n      'Detalles del proyecto': 'Project Details',\n      'Calificación': 'Rating',\n      'Comentarios': 'Feedback',\n      'Sugerencias': 'Suggestions',\n      'Nombre del evento': 'Event Name',\n      'Número de participantes': 'Number of Participants',\n      'Fecha del evento': 'Event Date',\n      'Enviar': 'Submit',\n      'Tu nombre': 'Your name',\n      'tu@email.com': 'you@email.com',\n      'Redes sociales': 'Social media',\n      'Búsqueda en Google': 'Google search',\n      'Recomendación': 'Recommendation',\n      'Otro': 'Other',\n      \n      // Traducciones FR -> EN (CRÍTICAS - estas faltaban)\n      'Nom': 'Name',\n      'Email': 'Email',\n      'Téléphone': 'Phone',\n      'Entreprise': 'Company',\n      'Message': 'Message',\n      'Sujet': 'Subject',\n      'Comment avez-vous entendu parler de nous?': 'How did you hear about us?',\n      'Intérêts': 'Interests',\n      'Budget': 'Budget',\n      'Détails du projet': 'Project Details',\n      'Évaluation': 'Rating',\n      'Commentaires': 'Feedback',\n      'Suggestions': 'Suggestions',\n      'Nom de l\\'événement': 'Event Name',\n      'Nombre de participants': 'Number of Participants',\n      'Date de l\\'événement': 'Event Date',\n      'Soumettre': 'Submit',\n      'Votre nom': 'Your name',\n      'vous@email.com': 'you@email.com',\n      'Réseaux sociaux': 'Social media',\n      'Recherche Google': 'Google search',\n      'Recommandation': 'Recommendation',\n      'Autre': 'Other'\n    },\n    fr: {\n      'Name': 'Nom',\n      'Nombre': 'Nom',\n      'Email': 'Email',\n      'Correo electrónico': 'Email',\n      'Phone': 'Téléphone',\n      'Teléfono': 'Téléphone',\n      'Company': 'Entreprise',\n      'Empresa': 'Entreprise',\n      'Message': 'Message',\n      'Mensaje': 'Message',\n      'Subject': 'Sujet',\n      'Asunto': 'Sujet',\n      'How did you hear about us?': 'Comment avez-vous entendu parler de nous?',\n      '¿Cómo te enteraste de nosotros?': 'Comment avez-vous entendu parler de nous?',\n      'Interests': 'Intérêts',\n      'Intereses': 'Intérêts',\n      'Budget': 'Budget',\n      'Presupuesto': 'Budget',\n      'Project Details': 'Détails du projet',\n      'Detalles del proyecto': 'Détails du projet',\n      'Rating': 'Évaluation',\n      'Calificación': 'Évaluation',\n      'Feedback': 'Commentaires',\n      'Comentarios': 'Commentaires',\n      'Suggestions': 'Suggestions',\n      'Sugerencias': 'Suggestions',\n      'Event Name': 'Nom de l\\'événement',\n      'Nombre del evento': 'Nom de l\\'événement',\n      'Number of Participants': 'Nombre de participants',\n      'Número de participantes': 'Nombre de participants',\n      'Event Date': 'Date de l\\'événement',\n      'Fecha del evento': 'Date de l\\'événement',\n      'Submit': 'Soumettre',\n      'Enviar': 'Soumettre',\n      'Tu nombre': 'Votre nom',\n      'Your name': 'Votre nom',\n      'tu@email.com': 'vous@email.com',\n      'you@email.com': 'vous@email.com',\n      'Redes sociales': 'Réseaux sociaux',\n      'Social media': 'Réseaux sociaux',\n      'Búsqueda en Google': 'Recherche Google',\n      'Google search': 'Recherche Google',\n      'Recomendación': 'Recommandation',\n      'Recommendation': 'Recommandation',\n      'Otro': 'Autre',\n      'Other': 'Autre'\n    }\n  };\n\n  const langTranslations = translations[language] || translations.es;\n  const translated = langTranslations[originalLabel] || originalLabel;\n  console.log(`Traduciendo \"${originalLabel}\" a ${language}: \"${translated}\"`);\n  return translated;\n};\n\n// Función para traducir placeholders\nconst translatePlaceholder = (originalPlaceholder: string, language: string): string => {\n  const translations: Record<string, Record<string, string>> = {\n    es: {\n      'Your name': 'Tu nombre',\n      'you@email.com': 'tu@email.com',\n      'Tu nombre': 'Tu nombre',\n      'tu@email.com': 'tu@email.com'\n    },\n    en: {\n      'Tu nombre': 'Your name',\n      'tu@email.com': 'you@email.com',\n      'Your name': 'Your name',\n      'you@email.com': 'you@email.com',\n      // FR -> EN (CRÍTICAS - estas faltaban)\n      'Votre nom': 'Your name',\n      'vous@email.com': 'you@email.com'\n    },\n    fr: {\n      'Tu nombre': 'Votre nom',\n      'Your name': 'Votre nom',\n      'tu@email.com': 'vous@email.com',\n      'you@email.com': 'vous@email.com'\n    }\n  };\n\n  const langTranslations = translations[language] || translations.es;\n  return langTranslations[originalPlaceholder] || originalPlaceholder;\n};\n\nconst FormEditor = () => {\n  const [, navigate] = useLocation();\n  const [match, params] = useRoute<{ id: string }>('/forms/:id/edit');\n  const formId = parseInt(params?.id || '0');\n  const { toast } = useToast();\n  const { t, i18n } = useTranslation();\n  const upgradeModal = useUpgradeModal();\n  \n  // Estado para el idioma seleccionado en el editor\n  const [selectedLanguage, setSelectedLanguage] = useState(i18n.language || 'es');\n  \n  const [formData, setFormData] = useState<FormData>({\n    title: '',\n    description: '',\n    slug: '',\n    type: 'contact',\n    published: true,\n    language: i18n.language || 'es',\n    structure: {\n      fields: [],\n      submitButtonText: t('formEditor.form_types.contact') || 'Enviar'\n    },\n    styling: {\n      theme: 'light',\n      fontFamily: 'Inter',\n      primaryColor: '#3B82F6',\n      borderRadius: 'md',\n      spacing: 'md'\n    },\n    settings: {\n      redirectUrl: '',\n      sendEmailNotification: false,\n      emailRecipients: '',\n      successMessage: t('formEditor.form_saved') || 'Gracias por tu envío',\n      captcha: false,\n      storeResponses: true\n    }\n  });\n\n  // Función para aplicar traducciones a todos los campos del formulario\n  const applyTranslationsToForm = (formData: FormData, language: string): FormData => {\n    console.log(\"--- APLICANDO TRADUCCIONES ---\");\n    console.log(\"Idioma objetivo:\", language);\n    console.log(\"Campos originales:\", formData.structure.fields);\n\n    const translatedFields = formData.structure.fields.map((field, index) => {\n      const originalLabel = field.label;\n      const originalPlaceholder = field.placeholder;\n      \n      const translatedLabel = translateFieldLabel(field.label, language);\n      const translatedPlaceholder = field.placeholder ? translatePlaceholder(field.placeholder, language) : '';\n      \n      console.log(`Campo ${index}:`, {\n        original: { label: originalLabel, placeholder: originalPlaceholder },\n        translated: { label: translatedLabel, placeholder: translatedPlaceholder }\n      });\n\n      const translatedOptions = field.options ? field.options.map(option => {\n        if (typeof option === 'string') {\n          const translated = translateFieldLabel(option, language);\n          console.log(`Opción: \"${option}\" -> \"${translated}\"`);\n          return translated;\n        } else {\n          const translated = {\n            ...option,\n            label: translateFieldLabel(option.label, language)\n          };\n          console.log(`Opción objeto: \"${option.label}\" -> \"${translated.label}\"`);\n          return translated;\n        }\n      }) : [];\n\n      return {\n        ...field,\n        label: translatedLabel,\n        placeholder: translatedPlaceholder,\n        options: translatedOptions\n      };\n    });\n\n    const translatedSubmitButton = translateFieldLabel(formData.structure.submitButtonText || 'Submit', language);\n    console.log(`Botón enviar: \"${formData.structure.submitButtonText}\" -> \"${translatedSubmitButton}\"`);\n\n    const result = {\n      ...formData,\n      language: language,\n      structure: {\n        ...formData.structure,\n        fields: translatedFields,\n        submitButtonText: translatedSubmitButton\n      }\n    };\n\n    console.log(\"Resultado final:\", result);\n    return result;\n  };\n  \n  // Estado para el modal de edición de campos\n  const [showFieldModal, setShowFieldModal] = useState(false);\n  const [currentEditingField, setCurrentEditingField] = useState(-1);\n  const [fieldData, setFieldData] = useState<FieldData>({\n    label: '',\n    name: '',\n    type: 'text',\n    placeholder: '',\n    required: false,\n    options: [],\n    defaultValue: ''\n  });\n  \n  // Obtener datos del formulario\n  const { data: form, isLoading, isError } = useQuery<FormData>({\n    queryKey: [`/api/forms/${formId}`],\n    enabled: !!formId,\n    staleTime: 1000 * 60 * 5, // 5 minutos\n  });\n\n  // Cargar datos del formulario y configurar idioma inicial\n  useEffect(() => {\n    if (form) {\n      const parsedData = parseFormData(form);\n      setFormData(parsedData);\n      // Configurar el idioma seleccionado basado en el formulario cargado\n      if (form.language && form.language !== selectedLanguage) {\n        setSelectedLanguage(form.language);\n      }\n    }\n  }, [form]);\n\n  // Manejar cambio de idioma del formulario (independiente del idioma de la UI)\n  const handleLanguageChange = (language: string) => {\n    console.log(\"=== CAMBIO DE IDIOMA FORMULARIO ===\");\n    console.log(\"Idioma anterior:\", selectedLanguage);\n    console.log(\"Idioma nuevo:\", language);\n    console.log(\"Datos actuales del formulario:\", formData);\n    \n    // Actualizar el idioma seleccionado\n    setSelectedLanguage(language);\n    \n    // Aplicar traducciones inmediatamente a los datos actuales\n    if (formData.structure && formData.structure.fields) {\n      console.log(\"Aplicando traducciones...\");\n      const translatedForm = applyTranslationsToForm(formData, language);\n      console.log(\"Formulario traducido:\", translatedForm);\n      setFormData(translatedForm);\n    } else {\n      console.log(\"No hay campos para traducir\");\n    }\n  };\n\n  // Actualizar formulario\n  const updateFormMutation = useMutation({\n    mutationFn: (data: any) => {\n      // Usar apiRequest de queryClient que ya maneja la autenticación correctamente\n      return apiRequest('PUT', `/api/forms/${formId}`, data)\n        .then(res => {\n          if (!res.ok) throw new Error('Error al actualizar el formulario');\n          return res.json();\n        });\n    },\n    onSuccess: () => {\n      // Invalidar tanto el formulario específico como la lista general\n      queryClient.invalidateQueries({ queryKey: [`/api/forms/${formId}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/forms\"] });\n      toast({\n        title: 'Formulario actualizado',\n        description: 'Los cambios han sido guardados correctamente'\n      });\n    },\n    onError: (error: any) => {\n      // Check if it's a plan limit error (403 status)\n      if (error.message && error.message.includes(\"límite\")) {\n        upgradeModal.handlePlanLimitError(error.message);\n      } else {\n        toast({\n          title: 'Error',\n          description: 'No se pudo actualizar el formulario',\n          variant: 'destructive'\n        });\n      }\n    }\n  });\n\n  // Helper para convertir la respuesta de la API en un objeto con los tipos correctos\n  const parseFormData = (apiForm: any): FormData => {\n    return {\n      title: apiForm?.title || '',\n      description: apiForm?.description || '',\n      slug: apiForm?.slug || '',\n      type: apiForm?.type || 'contact',\n      published: apiForm?.published || false,\n      language: apiForm?.language || 'es',\n      structure: apiForm?.structure || { fields: [], submitButtonText: 'Enviar' },\n      styling: {\n        theme: (apiForm?.styling?.theme as FormStyling['theme']) || 'light',\n        fontFamily: apiForm?.styling?.fontFamily || 'Inter',\n        primaryColor: apiForm?.styling?.primaryColor || '#3B82F6',\n        borderRadius: apiForm?.styling?.borderRadius || 'md',\n        spacing: apiForm?.styling?.spacing || 'md'\n      },\n      settings: {\n        redirectUrl: apiForm?.settings?.redirectUrl || '',\n        sendEmailNotification: apiForm?.settings?.sendEmailNotification || false,\n        emailRecipients: apiForm?.settings?.emailRecipients || '',\n        successMessage: apiForm?.settings?.successMessage || 'Gracias por tu envío',\n        captcha: apiForm?.settings?.captcha || false,\n        storeResponses: apiForm?.settings?.storeResponses || true\n      }\n    };\n  };\n\n\n\n  // Guardar cambios\n  const handleSaveForm = () => {\n    const dataToSave = {\n      ...formData,\n      language: selectedLanguage // Asegurar que se incluya el idioma seleccionado\n    };\n    console.log(\"Guardando formulario con datos:\", dataToSave);\n    updateFormMutation.mutate(dataToSave);\n  };\n\n  // Volver a la lista de formularios\n  const handleBack = () => {\n    navigate('/dashboard?tab=forms');\n  };\n  \n  // Mover un campo hacia arriba (intercambiar con el anterior)\n  const handleMoveFieldUp = (index: number) => {\n    if (index <= 0) return; // No se puede mover el primer elemento hacia arriba\n    \n    const updatedFields = [...formData.structure.fields];\n    // Intercambiar posiciones\n    [updatedFields[index-1], updatedFields[index]] = [updatedFields[index], updatedFields[index-1]];\n    \n    // Crear un nuevo objeto con los datos actualizados\n    const updatedFormData = {\n      ...formData,\n      structure: {\n        ...formData.structure,\n        fields: updatedFields\n      }\n    };\n    \n    // Actualizar el estado\n    setFormData(updatedFormData);\n    \n    // Guardar automáticamente con los datos actualizados\n    console.log(\"Guardando formulario automáticamente después de mover campo hacia arriba\");\n    updateFormMutation.mutate(updatedFormData);\n    \n    toast({\n      title: \"Campo reordenado\",\n      description: \"El campo se ha movido hacia arriba\"\n    });\n  };\n  \n  // Mover un campo hacia abajo (intercambiar con el siguiente)\n  const handleMoveFieldDown = (index: number) => {\n    if (index >= formData.structure.fields.length - 1) return; // No se puede mover el último elemento hacia abajo\n    \n    const updatedFields = [...formData.structure.fields];\n    // Intercambiar posiciones\n    [updatedFields[index], updatedFields[index+1]] = [updatedFields[index+1], updatedFields[index]];\n    \n    // Crear un nuevo objeto con los datos actualizados\n    const updatedFormData = {\n      ...formData,\n      structure: {\n        ...formData.structure,\n        fields: updatedFields\n      }\n    };\n    \n    // Actualizar el estado\n    setFormData(updatedFormData);\n    \n    // Guardar automáticamente con los datos actualizados\n    console.log(\"Guardando formulario automáticamente después de mover campo hacia abajo\");\n    updateFormMutation.mutate(updatedFormData);\n    \n    toast({\n      title: \"Campo reordenado\",\n      description: \"El campo se ha movido hacia abajo\"\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-10 w-10 animate-spin text-primary mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Cargando formulario...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <Card className=\"w-[400px]\">\n            <CardHeader>\n              <CardTitle>Error</CardTitle>\n              <CardDescription>No se pudo cargar el formulario</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"mb-4\">El formulario solicitado no existe o no tienes permisos para acceder.</p>\n              <Button onClick={handleBack} className=\"w-full\">\n                Volver a la lista de formularios\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Header />\n      \n      <div className=\"container max-w-7xl mx-auto py-6 space-y-6\">\n        {/* Barra de herramientas */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleBack}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Volver\n            </Button>\n            <h1 className=\"text-2xl font-bold\">{formData.title || 'Editor de Formulario'}</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={async () => {\n                  // Guardar antes de previsualizar para asegurar que todos los cambios están aplicados\n                  // Usar un enfoque basado en promesas para asegurar que la mutación se complete\n                  try {\n                    console.log(\"Guardando cambios antes de previsualizar\");\n                    await updateFormMutation.mutateAsync(formData);\n                    console.log(\"Cambios guardados exitosamente, navegando a vista previa\");\n                    \n                    // Invalidar la caché para forzar una recarga fresca en el componente de vista previa\n                    queryClient.invalidateQueries({ queryKey: [`/api/forms/${formId}`] });\n                    \n                    // Navegar después de que la mutación se complete exitosamente\n                    navigate(`/forms/${formId}`);\n                  } catch (error) {\n                    console.error(\"Error al guardar el formulario antes de previsualizar:\", error);\n                    toast({\n                      variant: \"destructive\",\n                      title: \"Error\",\n                      description: \"No se pudieron guardar los cambios antes de previsualizar\"\n                    });\n                  }\n                }}\n                disabled={updateFormMutation.isPending}\n              >\n                {updateFormMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Guardando...\n                  </>\n                ) : (\n                  <>\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    Previsualizar\n                  </>\n                )}\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={async () => {\n                  try {\n                    // Guardar primero\n                    await updateFormMutation.mutateAsync(formData);\n                    \n                    // Abrir en una nueva pestaña\n                    const url = `${window.location.origin}/forms/${formId}?t=${Date.now()}`;\n                    window.open(url, '_blank');\n                    \n                    toast({\n                      title: \"Formulario guardado\",\n                      description: \"Se ha abierto la vista previa en una nueva pestaña\"\n                    });\n                  } catch (error) {\n                    console.error(\"Error al guardar el formulario:\", error);\n                    toast({\n                      variant: \"destructive\",\n                      title: \"Error\",\n                      description: \"No se pudo guardar el formulario\"\n                    });\n                  }\n                }}\n                disabled={updateFormMutation.isPending}\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n                </svg>\n                Nueva pestaña\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={async () => {\n                  try {\n                    // Guardar primero\n                    await updateFormMutation.mutateAsync(formData);\n                    \n                    // Navegar a la página de integración\n                    navigate(`/forms/${formId}/integrate`);\n                    \n                    toast({\n                      title: \"Formulario guardado\",\n                      description: \"Ahora puedes integrar tu formulario\"\n                    });\n                  } catch (error) {\n                    console.error(\"Error al guardar el formulario:\", error);\n                    toast({\n                      variant: \"destructive\",\n                      title: \"Error\",\n                      description: \"No se pudo guardar el formulario\"\n                    });\n                  }\n                }}\n                disabled={updateFormMutation.isPending}\n              >\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                {t('formEditor.integrate')}\n              </Button>\n            </div>\n            \n            <Button\n              size=\"sm\"\n              disabled={updateFormMutation.isPending}\n              onClick={handleSaveForm}\n            >\n              {updateFormMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  {t('formEditor.saving')}\n                </>\n              ) : (\n                <>\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {t('formEditor.save_changes')}\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Pestañas de edición */}\n        <Tabs defaultValue=\"content\">\n          <TabsList className=\"grid grid-cols-3 w-full max-w-md\">\n            <TabsTrigger value=\"content\">\n              <Layout className=\"h-4 w-4 mr-2\" />\n              {t('formEditor.content')}\n            </TabsTrigger>\n            <TabsTrigger value=\"appearance\">\n              <Eye className=\"h-4 w-4 mr-2\" />\n              {t('formEditor.appearance')}\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              {t('formEditor.settings')}\n            </TabsTrigger>\n          </TabsList>\n          \n          {/* Pestaña de Contenido */}\n          <TabsContent value=\"content\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('formEditor.basic_info')}</CardTitle>\n                <CardDescription>\n                  {t('formEditor.basic_info_desc')}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"title\">{t('formEditor.form_title')}</Label>\n                    <Input \n                      id=\"title\" \n                      value={formData.title} \n                      onChange={(e) => setFormData({...formData, title: e.target.value})}\n                      placeholder={t('formEditor.form_title_placeholder')}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"slug\">{t('formEditor.unique_id')}</Label>\n                    <Input \n                      id=\"slug\" \n                      value={formData.slug}\n                      onChange={(e) => setFormData({...formData, slug: e.target.value.replace(/\\s+/g, '-').toLowerCase()})}\n                      placeholder={t('formEditor.unique_id_placeholder')}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">{t('formEditor.description')}</Label>\n                  <Textarea \n                    id=\"description\" \n                    value={formData.description || ''} \n                    onChange={(e) => setFormData({...formData, description: e.target.value})}\n                    placeholder={t('formEditor.description_placeholder')}\n                    rows={3}\n                  />\n                </div>\n\n                {/* Selector de idioma para traducción dinámica */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"language\">{t('form_language', 'Idioma del formulario')}</Label>\n                  <Select \n                    value={selectedLanguage} \n                    onValueChange={handleLanguageChange}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('formEditor.select_language', 'Seleccionar idioma')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"es\">Español</SelectItem>\n                      <SelectItem value=\"en\">English</SelectItem>\n                      <SelectItem value=\"fr\">Français</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Switch \n                    id=\"published\" \n                    checked={formData.published} \n                    onCheckedChange={(checked) => setFormData({...formData, published: checked})}\n                  />\n                  <Label htmlFor=\"published\">\n                    {formData.published ? t('formEditor.form_published') : t('formEditor.form_draft')}\n                  </Label>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"type\">{t('formEditor.form_type')}</Label>\n                  <Select \n                    value={formData.type} \n                    onValueChange={(value) => setFormData({...formData, type: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('formEditor.select_type')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"contact\">{t('formEditor.form_types.contact')}</SelectItem>\n                      <SelectItem value=\"lead\">{t('formEditor.form_types.lead')}</SelectItem>\n                      <SelectItem value=\"survey\">{t('formEditor.form_types.survey')}</SelectItem>\n                      <SelectItem value=\"feedback\">{t('formEditor.form_types.feedback')}</SelectItem>\n                      <SelectItem value=\"registration\">{t('formEditor.form_types.registration')}</SelectItem>\n                      <SelectItem value=\"waitlist\">{t('formEditor.form_types.waitlist')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>{t('formEditor.form_fields')}</CardTitle>\n                <CardDescription>\n                  {t('formEditor.form_fields_desc')}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {/* Lista de campos existentes */}\n                  {formData.structure.fields.map((field, index) => (\n                    <div key={index} className=\"p-4 border rounded-md bg-muted/20\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div>\n                          <h4 className=\"font-medium\">{field.label || t('formEditor.field_no_label')}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {t('formEditor.type')}: {field.type === 'text' ? t('formEditor.field_types.text') : \n                                  field.type === 'email' ? t('formEditor.field_types.email') : \n                                  field.type === 'number' ? t('formEditor.field_types.number') : \n                                  field.type === 'textarea' ? t('formEditor.field_types.textarea') : \n                                  field.type === 'select' ? t('formEditor.field_types.select') : \n                                  field.type === 'checkbox' ? t('formEditor.field_types.checkbox') : \n                                  field.type === 'radio' ? t('formEditor.field_types.radio') : \n                                  t('formEditor.field_types.other')}\n                          </p>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            title={t('formEditor.move_up')}\n                            onClick={() => handleMoveFieldUp(index)}\n                            disabled={index === 0}\n                          >\n                            <ArrowUp className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            title={t('formEditor.move_down')}\n                            onClick={() => handleMoveFieldDown(index)}\n                            disabled={index === formData.structure.fields.length - 1}\n                          >\n                            <ArrowDown className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              // Editar campo existente\n                              setCurrentEditingField(index);\n                              setShowFieldModal(true);\n                              setFieldData({\n                                label: field.label || '',\n                                name: field.name || '',\n                                type: field.type || 'text',\n                                placeholder: field.placeholder || '',\n                                required: field.required || false,\n                                options: field.options || [],\n                                defaultValue: field.defaultValue || ''\n                              });\n                            }}\n                          >\n                            {t('formEditor.edit')}\n                          </Button>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => {\n                              // Eliminar campo\n                              const updatedFields = [...formData.structure.fields];\n                              updatedFields.splice(index, 1);\n                              \n                              // Crear un nuevo objeto con los datos actualizados\n                              const updatedFormData = {\n                                ...formData,\n                                structure: {\n                                  ...formData.structure,\n                                  fields: updatedFields\n                                }\n                              };\n                              \n                              // Actualizar el estado\n                              setFormData(updatedFormData);\n                              \n                              // Guardar automáticamente con los datos actualizados\n                              console.log(\"Guardando formulario automáticamente después de eliminar campo\");\n                              setTimeout(() => {\n                                updateFormMutation.mutate(updatedFormData);\n                              }, 100);\n                            }}\n                          >\n                            {t('formEditor.delete')}\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                        {field.placeholder && (\n                          <div>\n                            <span className=\"text-muted-foreground\">{t('formEditor.placeholder')}:</span> {field.placeholder}\n                          </div>\n                        )}\n                        {field.name && (\n                          <div>\n                            <span className=\"text-muted-foreground\">{t('formEditor.name')}:</span> {field.name}\n                          </div>\n                        )}\n                        <div>\n                          <span className=\"text-muted-foreground\">{t('formEditor.required')}:</span> {field.required ? t('common.yes') : t('common.no')}\n                        </div>\n                      </div>\n                      \n                      {field.options && field.options.length > 0 && (\n                        <div className=\"mt-2\">\n                          <span className=\"text-sm text-muted-foreground\">{t('formEditor.options')}:</span>\n                          <div className=\"grid grid-cols-2 gap-1 mt-1\">\n                            {field.options.map((option, i) => (\n                              <div key={i} className=\"text-sm bg-muted/30 px-2 py-1 rounded\">\n                                {typeof option === 'object' && option.label ? option.label : String(option)}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                  \n                  {formData.structure.fields.length === 0 && (\n                    <div className=\"text-center p-8 border border-dashed rounded-md\">\n                      <p className=\"text-muted-foreground mb-4\">\n                        {t('formEditor.no_fields_configured')}\n                      </p>\n                    </div>\n                  )}\n                  \n                  {/* Botón para agregar nuevo campo */}\n                  <Button \n                    onClick={() => {\n                      // Agregar nuevo campo\n                      setCurrentEditingField(-1);\n                      setShowFieldModal(true);\n                      console.log(\"Iniciando creación de un nuevo campo\");\n                      setFieldData({\n                        label: '',\n                        name: '',\n                        type: 'text',\n                        placeholder: '',\n                        required: false,\n                        options: [],\n                        defaultValue: ''\n                      });\n                    }}\n                    className=\"w-full\"\n                  >\n                    {t('formEditor.add_field')}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Modal para agregar/editar campos */}\n            {showFieldModal && (\n              <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n                <Card className=\"w-full max-w-md\">\n                  <CardHeader>\n                    <CardTitle>\n                      {currentEditingField === -1 ? t('formEditor.add_field') : t('formEditor.edit_field')}\n                    </CardTitle>\n                    <CardDescription>\n                      {t('formEditor.configure_field_properties')}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"field-label\">{t('formEditor.label')}</Label>\n                      <Input \n                        id=\"field-label\" \n                        value={fieldData.label} \n                        onChange={(e) => setFieldData({...fieldData, label: e.target.value})}\n                        placeholder={t('formEditor.label_placeholder')}\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"field-name\">{t('formEditor.technical_name')}</Label>\n                      <Input \n                        id=\"field-name\" \n                        value={fieldData.name} \n                        onChange={(e) => setFieldData({...fieldData, name: e.target.value.replace(/\\s+/g, '_').toLowerCase()})}\n                        placeholder={t('formEditor.technical_name_placeholder')}\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        {t('formEditor.technical_name_desc')}\n                      </p>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"field-type\">{t('formEditor.field_type')}</Label>\n                      <Select \n                        value={fieldData.type} \n                        onValueChange={(value) => setFieldData({...fieldData, type: value})}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder={t('formEditor.select_type')} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"text\">{t('formEditor.field_types.text')}</SelectItem>\n                          <SelectItem value=\"textarea\">{t('formEditor.field_types.textarea')}</SelectItem>\n                          <SelectItem value=\"email\">{t('formEditor.field_types.email')}</SelectItem>\n                          <SelectItem value=\"number\">{t('formEditor.field_types.number')}</SelectItem>\n                          <SelectItem value=\"tel\">{t('formEditor.field_types.tel')}</SelectItem>\n                          <SelectItem value=\"select\">{t('formEditor.field_types.select')}</SelectItem>\n                          <SelectItem value=\"checkbox\">{t('formEditor.field_types.checkbox')}</SelectItem>\n                          <SelectItem value=\"radio\">{t('formEditor.field_types.radio')}</SelectItem>\n                          <SelectItem value=\"date\">{t('formEditor.field_types.date')}</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    {(fieldData.type === 'text' || fieldData.type === 'textarea' || \n                     fieldData.type === 'email' || fieldData.type === 'tel' || \n                     fieldData.type === 'number' || fieldData.type === 'date') && (\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"field-placeholder\">{t('formEditor.placeholder_text')}</Label>\n                        <Input \n                          id=\"field-placeholder\" \n                          value={fieldData.placeholder} \n                          onChange={(e) => setFieldData({...fieldData, placeholder: e.target.value})}\n                          placeholder={t('formEditor.placeholder_example')}\n                        />\n                      </div>\n                    )}\n                    \n                    {(fieldData.type === 'select' || fieldData.type === 'radio') && (\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"field-options\">{t('formEditor.options')}</Label>\n                        <div className=\"space-y-2\">\n                          {fieldData.options.map((option, index) => (\n                            <div key={index} className=\"flex items-center space-x-2\">\n                              <Input \n                                value={typeof option === 'string' ? option : option.label || ''} \n                                onChange={(e) => {\n                                  const newOptions = [...fieldData.options];\n                                  if (typeof option === 'string') {\n                                    newOptions[index] = e.target.value;\n                                  } else {\n                                    newOptions[index] = { ...option, label: e.target.value };\n                                  }\n                                  setFieldData({...fieldData, options: newOptions});\n                                }}\n                                placeholder={`${t('formEditor.option')} ${index + 1}`}\n                              />\n                              <Button \n                                variant=\"destructive\" \n                                size=\"icon\"\n                                onClick={() => {\n                                  const newOptions = [...fieldData.options];\n                                  newOptions.splice(index, 1);\n                                  setFieldData({...fieldData, options: newOptions});\n                                }}\n                              >\n                                ×\n                              </Button>\n                            </div>\n                          ))}\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              setFieldData({\n                                ...fieldData, \n                                options: [...fieldData.options, '']\n                              });\n                            }}\n                          >\n                            {t('formEditor.add_option')}\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Switch \n                        id=\"field-required\" \n                        checked={fieldData.required} \n                        onCheckedChange={(checked) => setFieldData({...fieldData, required: checked})}\n                      />\n                      <Label htmlFor=\"field-required\">\n                        {t('formEditor.required_field')}\n                      </Label>\n                    </div>\n                  </CardContent>\n                  <div className=\"flex justify-end space-x-2 p-6 border-t\">\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => setShowFieldModal(false)}\n                    >\n                      {t('common.cancel')}\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        // Si el nombre está vacío, generarlo a partir de la etiqueta\n                        const fieldName = fieldData.name || \n                                         fieldData.label.toLowerCase().replace(/\\s+/g, '_');\n                        \n                        const newField = {\n                          label: fieldData.label,\n                          name: fieldName,\n                          type: fieldData.type,\n                          placeholder: fieldData.placeholder,\n                          required: fieldData.required,\n                          options: fieldData.type === 'select' || fieldData.type === 'radio' ? \n                                  fieldData.options : undefined,\n                          defaultValue: fieldData.defaultValue\n                        };\n                        \n                        if (currentEditingField === -1) {\n                          // Agregar nuevo campo\n                          console.log(\"Añadiendo nuevo campo al formulario:\", newField);\n                          // Crear un nuevo objeto con los datos actualizados\n                          const updatedFormData = {\n                            ...formData,\n                            structure: {\n                              ...formData.structure,\n                              fields: [...formData.structure.fields, newField]\n                            }\n                          };\n                          \n                          // Actualizar el estado\n                          setFormData(updatedFormData);\n                          console.log(\"Estructura del formulario después de añadir:\", updatedFormData);\n                          \n                          // Cerrar modal\n                          setShowFieldModal(false);\n                          \n                          // Guardar automáticamente con los datos actualizados\n                          console.log(\"Guardando formulario automáticamente después de añadir campo\");\n                          updateFormMutation.mutate(updatedFormData);\n                        } else {\n                          // Actualizar campo existente\n                          const updatedFields = [...formData.structure.fields];\n                          updatedFields[currentEditingField] = newField;\n                          \n                          // Crear un nuevo objeto con los datos actualizados\n                          const updatedFormData = {\n                            ...formData,\n                            structure: {\n                              ...formData.structure,\n                              fields: updatedFields\n                            }\n                          };\n                          \n                          // Actualizar el estado\n                          setFormData(updatedFormData);\n                          \n                          // Cerrar modal\n                          setShowFieldModal(false);\n                          \n                          // Guardar automáticamente con los datos actualizados\n                          console.log(\"Guardando formulario automáticamente después de editar campo\");\n                          updateFormMutation.mutate(updatedFormData);\n                        }\n                      }}\n                    >\n                      {currentEditingField === -1 ? t('formEditor.add') : t('formEditor.save_changes')}\n                    </Button>\n                  </div>\n                </Card>\n              </div>\n            )}\n          </TabsContent>\n          \n          {/* Pestaña de Apariencia */}\n          <TabsContent value=\"appearance\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('formEditor.visual_style')}</CardTitle>\n                <CardDescription>\n                  {t('formEditor.visual_style_desc')}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"theme\">{t('formEditor.theme')}</Label>\n                  <Select \n                    value={formData.styling?.theme || 'light'} \n                    onValueChange={(value: 'light' | 'dark' | 'auto') => setFormData({\n                      ...formData, \n                      styling: {...formData.styling, theme: value}\n                    })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('formEditor.select_theme')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"light\">{t('formEditor.themes.light')}</SelectItem>\n                      <SelectItem value=\"dark\">{t('formEditor.themes.dark')}</SelectItem>\n                      <SelectItem value=\"auto\">{t('formEditor.themes.auto')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"primaryColor\">{t('formEditor.primary_color')}</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <input \n                      type=\"color\" \n                      id=\"primaryColor\" \n                      value={formData.styling?.primaryColor || '#3B82F6'} \n                      onChange={(e) => setFormData({\n                        ...formData, \n                        styling: {...formData.styling, primaryColor: e.target.value}\n                      })}\n                      className=\"h-10 w-10 rounded border border-input\"\n                    />\n                    <Input \n                      value={formData.styling?.primaryColor || '#3B82F6'} \n                      onChange={(e) => setFormData({\n                        ...formData, \n                        styling: {...formData.styling, primaryColor: e.target.value}\n                      })}\n                      className=\"w-32\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fontFamily\">{t('formEditor.typography')}</Label>\n                  <Select \n                    value={formData.styling?.fontFamily || 'Inter'} \n                    onValueChange={(value) => setFormData({\n                      ...formData, \n                      styling: {...formData.styling, fontFamily: value}\n                    })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecciona una tipografía\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Inter\">Inter</SelectItem>\n                      <SelectItem value=\"Roboto\">Roboto</SelectItem>\n                      <SelectItem value=\"Open Sans\">Open Sans</SelectItem>\n                      <SelectItem value=\"Montserrat\">Montserrat</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"borderRadius\">{t('formEditor.border_radius')}</Label>\n                  <Select \n                    value={formData.styling?.borderRadius || 'md'} \n                    onValueChange={(value) => setFormData({\n                      ...formData, \n                      styling: {...formData.styling, borderRadius: value}\n                    })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('formEditor.select_radius')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">{t('formEditor.radius.none')}</SelectItem>\n                      <SelectItem value=\"sm\">{t('formEditor.radius.small')}</SelectItem>\n                      <SelectItem value=\"md\">{t('formEditor.radius.medium')}</SelectItem>\n                      <SelectItem value=\"lg\">{t('formEditor.radius.large')}</SelectItem>\n                      <SelectItem value=\"full\">{t('formEditor.radius.full')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          {/* Pestaña de Ajustes */}\n          <TabsContent value=\"settings\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('formEditor.configuration')}</CardTitle>\n                <CardDescription>\n                  {t('formEditor.advanced_settings')}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"successMessage\">{t('formEditor.success_message')}</Label>\n                  <Textarea \n                    id=\"successMessage\" \n                    value={formData.settings?.successMessage || t('formEditor.default_success_message')} \n                    onChange={(e) => setFormData({\n                      ...formData, \n                      settings: {...formData.settings, successMessage: e.target.value}\n                    })}\n                    placeholder={t('formEditor.success_message_placeholder')}\n                    rows={2}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"redirectUrl\">{t('formEditor.redirect_url')}</Label>\n                  <Input \n                    id=\"redirectUrl\" \n                    value={formData.settings?.redirectUrl || ''} \n                    onChange={(e) => setFormData({\n                      ...formData, \n                      settings: {...formData.settings, redirectUrl: e.target.value}\n                    })}\n                    placeholder=\"https://ejemplo.com/gracias\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Switch \n                    id=\"captcha\" \n                    checked={formData.settings?.captcha || false} \n                    onCheckedChange={(checked) => setFormData({\n                      ...formData, \n                      settings: {...formData.settings, captcha: checked}\n                    })}\n                  />\n                  <Label htmlFor=\"captcha\">\n                    Habilitar CAPTCHA para prevenir spam\n                  </Label>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Switch \n                    id=\"storeResponses\" \n                    checked={formData.settings?.storeResponses !== false} \n                    onCheckedChange={(checked) => setFormData({\n                      ...formData, \n                      settings: {...formData.settings, storeResponses: checked}\n                    })}\n                  />\n                  <Label htmlFor=\"storeResponses\">\n                    Almacenar respuestas en la plataforma\n                  </Label>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Switch \n                    id=\"sendEmailNotification\" \n                    checked={formData.settings?.sendEmailNotification || false} \n                    onCheckedChange={(checked) => setFormData({\n                      ...formData, \n                      settings: {...formData.settings, sendEmailNotification: checked}\n                    })}\n                  />\n                  <Label htmlFor=\"sendEmailNotification\">\n                    Recibir notificaciones por correo electrónico\n                  </Label>\n                </div>\n                \n                {formData.settings?.sendEmailNotification && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"emailRecipients\">Destinatarios de correo</Label>\n                    <Input \n                      id=\"emailRecipients\" \n                      value={formData.settings.emailRecipients || ''} \n                      onChange={(e) => setFormData({\n                        ...formData, \n                        settings: {...formData.settings, emailRecipients: e.target.value}\n                      })}\n                      placeholder=\"email@ejemplo.com, otro@ejemplo.com\"\n                    />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n\n        </Tabs>\n      </div>\n\n      <UpgradePlanModal\n        isOpen={upgradeModal.isOpen}\n        onClose={upgradeModal.hideUpgradeModal}\n        limitType={upgradeModal.limitType}\n        currentLimit={upgradeModal.currentLimit}\n        planName={upgradeModal.planName}\n      />\n    </div>\n  );\n};\n\nexport default FormEditor;","size_bytes":59082},"client/src/pages/form-integration.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  ChevronLeft,\n  Copy,\n  Code,\n  ExternalLink,\n  Loader2,\n  Check,\n  Save,\n} from \"lucide-react\";\nimport DashboardLayout from \"@/layouts/dashboard-layout\";\nimport { useTranslation } from \"react-i18next\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Interfaces para el tipo de formulario\ninterface FormField {\n  label: string;\n  name: string;\n  type: string;\n  placeholder?: string;\n  required: boolean;\n  options?: Array<string | { label: string; value?: string }>;\n  defaultValue?: string;\n}\n\ninterface FormStructure {\n  fields: FormField[];\n  submitButtonText: string;\n}\n\ninterface FormStyling {\n  theme?: 'light' | 'dark' | 'auto';\n  fontFamily?: string;\n  primaryColor?: string;\n  borderRadius?: string;\n  spacing?: string;\n}\n\ninterface FormSettings {\n  redirectUrl?: string;\n  sendEmailNotification?: boolean;\n  emailRecipients?: string;\n  successMessage?: string;\n  captcha?: boolean;\n  storeResponses?: boolean;\n  buttonColor?: string;\n  submitButtonText?: string;\n  buttonConfig?: {\n    text: string;\n    position: string;\n    color: string;\n    textColor: string;\n    displayType: string;\n    icon: string;\n    size: string;\n    borderRadius: string;\n  };\n}\n\ninterface Form {\n  id: number;\n  title: string;\n  description?: string;\n  type?: string;\n  slug: string;\n  published?: boolean;\n  structure: FormStructure;\n  styling: FormStyling;\n  settings: FormSettings;\n  responseCount?: number;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n// Colores disponibles para el botón\nconst COLORS = [\n  { value: \"#4a90e2\", label: \"Azul\" },\n  { value: \"#50e3c2\", label: \"Turquesa\" },\n  { value: \"#b8e986\", label: \"Verde\" },\n  { value: \"#f8e71c\", label: \"Amarillo\" },\n  { value: \"#f5a623\", label: \"Naranja\" },\n  { value: \"#d0021b\", label: \"Rojo\" },\n  { value: \"#9013fe\", label: \"Púrpura\" },\n  { value: \"#000000\", label: \"Negro\" },\n];\n\n// Posiciones disponibles para el botón\nconst POSITIONS = [\n  { value: \"bottom-center\", label: \"Inferior centro\" },\n  { value: \"top-center\", label: \"Superior centro\" },\n  { value: \"bottom-right\", label: \"Inferior derecha\" },\n  { value: \"bottom-left\", label: \"Inferior izquierda\" },\n  { value: \"top-right\", label: \"Superior derecha\" },\n  { value: \"top-left\", label: \"Superior izquierda\" },\n];\n\n// Íconos disponibles para el botón\nconst ICONS = [\n  { value: \"form\", label: \"Formulario\" },\n  { value: \"contact\", label: \"Contacto\" },\n  { value: \"order\", label: \"Pedido\" },\n  { value: \"survey\", label: \"Encuesta\" },\n  { value: \"none\", label: \"Sin ícono\" },\n];\n\n// Tipos de visualización del formulario\nconst DISPLAY_TYPES = [\n  { value: \"modal\", label: \"Ventana modal\" },\n  { value: \"slidein\", label: \"Panel deslizante\" },\n  { value: \"redirect\", label: \"Redirección\" },\n];\n\n// Tamaños del botón\nconst SIZES = [\n  { value: \"small\", label: \"Pequeño\" },\n  { value: \"medium\", label: \"Mediano\" },\n  { value: \"large\", label: \"Grande\" },\n];\n\nexport default function FormIntegration() {\n  const { id } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { t } = useTranslation();\n  const [copied, setCopied] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const queryClient = useQueryClient();\n  \n  // Obtener detalles del formulario\n  const { data: form = {} as Form, isLoading: isLoadingForm } = useQuery<Form>({\n    queryKey: [`/api/forms/${id}`],\n  });\n\n  // Estado para configurar el botón\n  const [buttonConfig, setButtonConfig] = useState({\n    text: \"Abrir formulario\",\n    position: \"bottom-right\",\n    color: \"#4a90e2\",\n    textColor: \"#ffffff\", // Color del texto, por defecto blanco\n    displayType: \"modal\",\n    icon: \"form\",\n    size: \"medium\",\n    borderRadius: \"4\",\n  });\n  \n  // Mutación para guardar la configuración del botón\n  const saveConfigMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"PATCH\", `/api/forms/${id}`, {\n        settings: {\n          ...(form.settings || {}),\n          buttonConfig: buttonConfig\n        }\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Configuración guardada\",\n        description: \"La configuración del botón ha sido guardada correctamente\",\n      });\n      // Actualizar los datos del formulario en caché\n      queryClient.invalidateQueries({ queryKey: [`/api/forms/${id}`] });\n    },\n    onError: (error) => {\n      console.error(\"Error al guardar la configuración:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo guardar la configuración. Inténtalo de nuevo.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSaving(false);\n    }\n  });\n  \n  // Función para guardar la configuración\n  const saveButtonConfig = () => {\n    setIsSaving(true);\n    saveConfigMutation.mutate();\n  };\n  \n  // Cargar configuración guardada y actualizar texto e ícono según el tipo de formulario\n  useEffect(() => {\n    if (form?.title) {\n      // Si hay una configuración guardada, cárgala\n      if (form.settings?.buttonConfig) {\n        setButtonConfig(form.settings.buttonConfig);\n      } else {\n        // Configuración predeterminada según el tipo de formulario\n        const buttonText = form.type === 'contact' ? 'Contactar' : \n                          form.type === 'order' ? 'Hacer pedido' : \n                          form.type === 'survey' ? 'Responder encuesta' : \n                          'Abrir formulario';\n        \n        const iconType = form.type === 'contact' ? 'contact' : \n                        form.type === 'order' ? 'order' : \n                        form.type === 'survey' ? 'survey' : \n                        'form';\n                        \n        setButtonConfig(prev => ({ \n          ...prev, \n          text: buttonText,\n          icon: iconType\n        }));\n      }\n    }\n  }, [form]);\n  \n  // Generar el código para incrustar el botón con la configuración actual\n  const generateButtonCode = () => {\n    return `<script src=\"${window.location.origin}/static/form-button.js\" \n  id=\"aipi-form-button\" \n  data-form-id=\"${id}\" \n  data-text=\"${buttonConfig.text}\" \n  data-position=\"${buttonConfig.position}\"\n  data-color=\"${buttonConfig.color}\"\n  data-text-color=\"${buttonConfig.textColor}\"\n  data-type=\"${buttonConfig.displayType}\"\n  data-icon=\"${buttonConfig.icon}\"\n  data-size=\"${buttonConfig.size}\"\n  data-radius=\"${buttonConfig.borderRadius}px\"\n  data-modal-width=\"600px\"\n  data-modal-height=\"800px\">\n</script>`;\n  };\n  \n  // Generar el código para incrustar directamente el formulario\n  const generateEmbedCode = () => {\n    const timestamp = Date.now();\n    return `<!-- Contenedor para el formulario -->\n<div id=\"aipi-form-container\"></div>\n\n<!-- Script del formulario AIPI con cache busting -->\n<script src=\"${window.location.origin}/static/form-embed.js?id=${form?.slug}&v=${timestamp}\"></script>`;\n  };\n  \n  // Copiar el código al portapapeles\n  const copyToClipboard = (code: string) => {\n    navigator.clipboard.writeText(code).then(() => {\n      setCopied(true);\n      toast({\n        title: \"Código copiado\",\n        description: \"El código ha sido copiado al portapapeles\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    });\n  };\n  \n  // Vista previa del botón flotante\n  const ButtonPreview = () => (\n    <div className=\"relative h-[300px] w-full border rounded-md bg-gray-50 dark:bg-gray-800 overflow-hidden\">\n      <div className=\"absolute w-full h-full flex items-center justify-center text-gray-400\">\n        <p>Vista previa de tu página web</p>\n      </div>\n      \n      <button \n        className={`absolute \n          ${buttonConfig.position.includes('top') ? 'top-4' : 'bottom-4'} \n          ${buttonConfig.position.includes('center') \n            ? 'left-1/2 transform -translate-x-1/2' \n            : buttonConfig.position.includes('right') \n              ? 'right-4' \n              : 'left-4'\n          }\n          flex items-center justify-center px-4 py-2 rounded-md`}\n        style={{ \n          backgroundColor: buttonConfig.color,\n          color: buttonConfig.textColor, // Aplicamos el color de texto seleccionado\n          fontSize: buttonConfig.size === 'small' ? '14px' : buttonConfig.size === 'large' ? '18px' : '16px',\n          padding: buttonConfig.size === 'small' ? '6px 12px' : buttonConfig.size === 'large' ? '12px 24px' : '8px 16px',\n          borderRadius: `${buttonConfig.borderRadius}px`\n        }}\n      >\n        {buttonConfig.icon !== 'none' && (\n          <span className=\"mr-2\">\n            {buttonConfig.icon === 'form' && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"9\"></line>\n                <line x1=\"9\" y1=\"13\" x2=\"15\" y2=\"13\"></line>\n                <line x1=\"9\" y1=\"17\" x2=\"13\" y2=\"17\"></line>\n              </svg>\n            )}\n            {buttonConfig.icon === 'contact' && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n              </svg>\n            )}\n            {buttonConfig.icon === 'order' && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <circle cx=\"9\" cy=\"21\" r=\"1\"></circle>\n                <circle cx=\"20\" cy=\"21\" r=\"1\"></circle>\n                <path d=\"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6\"></path>\n              </svg>\n            )}\n            {buttonConfig.icon === 'survey' && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                <polyline points=\"14 2 14 8 20 8\"></polyline>\n                <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                <polygon points=\"10 9 9 9 8 9 9 9\"></polygon>\n              </svg>\n            )}\n          </span>\n        )}\n        {buttonConfig.text}\n      </button>\n    </div>\n  );\n\n  return (\n    <DashboardLayout>\n      <div className=\"w-full max-w-full px-6 py-6\">\n        <div className=\"flex items-center mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"mr-2\" \n            onClick={() => navigate(`/forms/${id}/edit`)}\n            title={t('back')}\n          >\n            <ChevronLeft className=\"h-5 w-5\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold\">\n              {isLoadingForm \n                ? t('loading') \n                : `${t('integrate_form')}: ${form?.title || id}`}\n            </h1>\n            <p className=\"text-gray-500 dark:text-gray-400\">\n              {t('add_form_to_website')}\n            </p>\n          </div>\n        </div>\n\n        {isLoadingForm ? (\n          <div className=\"w-full py-20 flex justify-center\">\n            <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\n          </div>\n        ) : (\n          <div className=\"mb-6\">\n            <h2 className=\"text-lg font-semibold mb-4\">{t('direct_embed')}</h2>\n            \n            {/* Solo mostramos la opción de incrustación directa */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('embed_form')}</CardTitle>\n                <CardDescription>\n                  {t('embed_form_description')}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-gray-50 dark:bg-gray-800 rounded-md p-4 relative\">\n                  <pre className=\"text-sm overflow-x-auto whitespace-pre-wrap\">\n                    <code>{generateEmbedCode()}</code>\n                  </pre>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={() => copyToClipboard(generateEmbedCode())}\n                  >\n                    {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </CardContent>\n              <CardFooter>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  {t('paste_embed_code_anywhere')}\n                </p>\n              </CardFooter>\n            </Card>\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":13994},"client/src/pages/form-preview.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useRoute, useLocation } from 'wouter';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Loader2, ArrowLeft, PenSquare } from 'lucide-react';\nimport Header from '@/components/header';\nimport { useToast } from '@/hooks/use-toast';\nimport { getLanguageTranslations, getTranslation } from '@/../../shared/translations';\n\n// Definir tipo para los datos del formulario\ninterface FormData {\n  id: number;\n  title: string;\n  description: string | null;\n  slug: string;\n  type: string | null;\n  published: boolean | null;\n  structure: {\n    fields: Array<{\n      label: string;\n      name: string;\n      type: string;\n      placeholder?: string;\n      required: boolean;\n      options?: (string | { label: string; value: string })[];\n      defaultValue?: string;\n      helpText?: string;\n      id?: string; // ID opcional para el elemento DOM\n      rows?: number; // Número de filas para textarea\n    }>;\n    submitButtonText: string;\n  };\n  styling: {\n    theme: 'light' | 'dark' | 'auto';\n    fontFamily: string;\n    primaryColor: string;\n    borderRadius: string;\n    spacing: string;\n  };\n  settings: {\n    redirectUrl: string;\n    sendEmailNotification: boolean;\n    emailRecipients: string;\n    successMessage: string;\n    captcha: boolean;\n    storeResponses: boolean;\n  };\n  createdAt: Date | null;\n  updatedAt: Date | null;\n  userId: number;\n  responseCount: number | null;\n}\n\nconst FormPreview = () => {\n  const [, navigate] = useLocation();\n  const [match, params] = useRoute<{ id: string }>('/forms/:id');\n  const formId = parseInt(params?.id || '0');\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Obtener idioma del formulario desde la base de datos\n  const getFormLanguage = (form: any) => {\n    // Usar el idioma directamente de la base de datos\n    return form?.language || 'en';\n  };\n\n  // Obtener traducciones para el idioma actual\n  const getFormTranslations = (form: any) => {\n    const language = getFormLanguage(form);\n    return getLanguageTranslations(language);\n  };\n\n  const getTranslations = (language: string) => {\n    const translations = {\n      es: {\n        completeInfo: 'Por favor complete la información solicitada para comenzar.',\n        acceptTerms: 'Acepto los términos y condiciones',\n        submit: 'Enviar',\n        formSubmitted: '¡Formulario enviado!',\n        thankYou: 'Gracias por tu envío',\n        sendAnother: 'Enviar otra respuesta',\n        selectOption: 'Seleccionar...'\n      },\n      en: {\n        completeInfo: 'Please complete the requested information to get started.',\n        acceptTerms: 'I accept the terms and conditions',\n        submit: 'Submit',\n        formSubmitted: 'Form submitted!',\n        thankYou: 'Thank you for your submission',\n        sendAnother: 'Submit another response',\n        selectOption: 'Select...'\n      },\n      fr: {\n        completeInfo: 'Veuillez compléter les informations demandées pour commencer.',\n        acceptTerms: 'J\\'accepte les termes et conditions',\n        submit: 'Envoyer',\n        formSubmitted: 'Formulaire envoyé!',\n        thankYou: 'Merci pour votre envoi',\n        sendAnother: 'Envoyer une autre réponse',\n        selectOption: 'Sélectionner...'\n      }\n    };\n    return translations[language as keyof typeof translations] || translations.es;\n  };\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    structure: {\n      fields: [] as any[],\n      submitButtonText: 'Enviar'\n    },\n    styling: {\n      theme: 'light',\n      fontFamily: 'Inter',\n      primaryColor: '#3B82F6',\n      borderRadius: 'md',\n      spacing: 'md'\n    }\n  });\n  \n  const [formValues, setFormValues] = useState<Record<string, any>>({});\n  const [submitted, setSubmitted] = useState(false);\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  \n  // Refrescar datos cuando el componente se monta o cuando se cambia manualmente\n  useEffect(() => {\n    const loadFormData = async () => {\n      if (formId) {\n        console.log(`Forzando la carga de datos del formulario ${formId} (intento ${refreshTrigger})`);\n        \n        try {\n          // Invalidar caché para forzar una recarga fresca\n          await queryClient.invalidateQueries({ queryKey: [`/api/forms/${formId}`] });\n          \n          // Opcional: intentar cargar directamente con fetch si hay problemas\n          if (refreshTrigger > 1) {\n            const token = localStorage.getItem('auth_token');\n            const response = await fetch(`/api/forms/${formId}`, {\n              headers: {\n                'Authorization': `Bearer ${token}`\n              }\n            });\n            \n            if (response.ok) {\n              const freshData = await response.json();\n              console.log(\"Datos obtenidos directamente:\", freshData);\n              // Actualizar caché manual\n              queryClient.setQueryData([`/api/forms/${formId}`], freshData);\n            }\n          }\n        } catch (error) {\n          console.error(\"Error al refrescar datos del formulario:\", error);\n        }\n      }\n    };\n    \n    loadFormData();\n  }, [formId, refreshTrigger, queryClient]);\n  \n  // Obtener datos del formulario\n  const { data: form, isLoading, isError, refetch } = useQuery<FormData>({\n    queryKey: [`/api/forms/${formId}`],\n    enabled: !!formId,\n    staleTime: 1000 * 60, // 1 minuto\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    // Removed refetchInterval to prevent 429 rate limiting\n  });\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    if (form) {\n      setFormData({\n        title: form.title || '',\n        description: form.description || getFormTranslations(form).defaultDescription,\n        structure: form.structure || { fields: [], submitButtonText: form.submitButtonText || getFormTranslations(form).buttons.submit },\n        styling: form.styling || {\n          theme: 'light',\n          fontFamily: 'Inter',\n          primaryColor: '#3B82F6',\n          borderRadius: 'md',\n          spacing: 'md'\n        }\n      });\n      \n      // Inicializar valores del formulario\n      const initialValues: Record<string, any> = {};\n      if (form.structure && form.structure.fields) {\n        form.structure.fields.forEach((field: any) => {\n          if (field.type === 'checkbox') {\n            initialValues[field.name] = false;\n          } else if (field.type === 'select') {\n            initialValues[field.name] = field.options && field.options.length > 0 ? field.options[0].value : '';\n          } else {\n            initialValues[field.name] = '';\n          }\n        });\n      }\n      setFormValues(initialValues);\n    }\n  }, [form]);\n\n  // Manejar cambios en los campos\n  const handleFieldChange = (name: string, value: any) => {\n    setFormValues(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Manejar envío del formulario\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitted(true);\n    \n    // En una implementación real, aquí enviaríamos los datos al servidor\n    console.log(\"Datos del formulario enviados:\", formValues);\n    \n    // Mostrar mensaje de éxito\n    setTimeout(() => {\n      setFormValues({});\n      window.scrollTo(0, 0);\n    }, 500);\n  };\n\n  // Volver a la edición\n  const handleEdit = () => {\n    navigate(`/forms/${formId}/edit`);\n  };\n\n  // Volver a la lista de formularios\n  const handleBack = () => {\n    navigate('/dashboard?tab=forms');\n  };\n\n  // Obtener estilo CSS basado en la configuración\n  const getFormStyle = () => {\n    const { styling } = formData;\n    const borderRadiusMap: Record<string, string> = {\n      none: '0px',\n      sm: '0.25rem',\n      md: '0.375rem',\n      lg: '0.5rem',\n      full: '9999px'\n    };\n    \n    const borderRadius = borderRadiusMap[styling.borderRadius || 'md'] || '0.375rem';\n    \n    return {\n      fontFamily: styling.fontFamily || 'Inter, sans-serif',\n      '--primary-color': styling.primaryColor || '#3B82F6',\n      borderRadius,\n      colorScheme: styling.theme || 'light'\n    } as React.CSSProperties;\n  };\n\n  // Renderizar campo moderno con estilo de línea inferior\n  const renderModernFormField = (field: FormData['structure']['fields'][0], index: number) => {\n    const fieldId = field.id || field.name || `field-${index}`;\n    \n    switch (field.type) {\n      case 'text':\n      case 'email':\n      case 'tel':\n      case 'url':\n        return (\n          <Input\n            type={field.type}\n            id={fieldId}\n            name={field.name}\n            placeholder={`${field.label}${field.required ? ' *' : ''}`}\n            value={formValues[field.name] || ''}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n            className=\"w-full border-0 border-b-2 border-gray-200 rounded-none px-0 py-4 bg-transparent focus:border-cyan-400 focus:ring-0\"\n          />\n        );\n        \n      case 'textarea':\n        return (\n          <Textarea\n            id={fieldId}\n            name={field.name}\n            placeholder={`${field.label}${field.required ? ' *' : ''}`}\n            value={formValues[field.name] || ''}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n            rows={field.rows || 4}\n            className=\"w-full border-0 border-b-2 border-gray-200 rounded-none px-0 py-4 bg-transparent focus:border-cyan-400 focus:ring-0\"\n          />\n        );\n        \n      case 'select':\n        return (\n          <Select\n            value={formValues[field.name] || ''}\n            onValueChange={(value) => handleFieldChange(field.name, value)}\n          >\n            <SelectTrigger className=\"w-full border-0 border-b-2 border-gray-200 rounded-none px-0 py-4 bg-transparent focus:border-cyan-400 focus:ring-0\">\n              <SelectValue placeholder={field.label || 'Seleccionar...'} />\n            </SelectTrigger>\n            <SelectContent>\n              {field.options && field.options.map((option, i: number) => {\n                const optionValue = typeof option === 'string' ? option : option.value || '';\n                const optionLabel = typeof option === 'string' ? option : option.label || '';\n                return (\n                  <SelectItem key={i} value={optionValue}>\n                    {optionLabel}\n                  </SelectItem>\n                );\n              })}\n            </SelectContent>\n          </Select>\n        );\n        \n      case 'checkbox':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id={fieldId}\n              checked={formValues[field.name] || false}\n              onCheckedChange={(checked) => handleFieldChange(field.name, checked)}\n            />\n            <Label htmlFor={fieldId} className=\"text-sm\">\n              {(() => {\n                const detectedLang = detectLanguage(formData);\n                const t = getTranslations(detectedLang);\n                if (field.label.toLowerCase().includes('acepto') || field.label.toLowerCase().includes('términos')) {\n                  return t.acceptTerms;\n                }\n                return field.label;\n              })()}\n            </Label>\n          </div>\n        );\n        \n      default:\n        return (\n          <Input\n            type=\"text\"\n            id={fieldId}\n            name={field.name}\n            placeholder={`${field.label}${field.required ? ' *' : ''}`}\n            value={formValues[field.name] || ''}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n            className=\"w-full border-0 border-b-2 border-gray-200 rounded-none px-0 py-4 bg-transparent focus:border-cyan-400 focus:ring-0\"\n          />\n        );\n    }\n  };\n\n  // Renderizar campo de formulario según su tipo (original para fallback)\n  const renderFormField = (field: FormData['structure']['fields'][0], index: number) => {\n    switch (field.type) {\n      case 'text':\n      case 'email':\n      case 'tel':\n      case 'url':\n        return (\n          <div className=\"space-y-2\" key={index}>\n            <Label htmlFor={field.id || field.name} className=\"text-sm font-medium\">\n              {field.label} {field.required && <span className=\"text-red-500\">*</span>}\n            </Label>\n            <Input\n              type={field.type}\n              id={field.id || field.name}\n              name={field.name}\n              placeholder={field.placeholder || ''}\n              value={formValues[field.name] || ''}\n              onChange={(e) => handleFieldChange(field.name, e.target.value)}\n              required={field.required}\n              className=\"w-full\"\n            />\n            {field.helpText && (\n              <p className=\"text-xs text-muted-foreground\">{field.helpText}</p>\n            )}\n          </div>\n        );\n        \n      case 'textarea':\n        return (\n          <div className=\"space-y-2\" key={index}>\n            <Label htmlFor={field.id || field.name} className=\"text-sm font-medium\">\n              {field.label} {field.required && <span className=\"text-red-500\">*</span>}\n            </Label>\n            <Textarea\n              id={field.id || field.name}\n              name={field.name}\n              placeholder={field.placeholder || ''}\n              value={formValues[field.name] || ''}\n              onChange={(e) => handleFieldChange(field.name, e.target.value)}\n              required={field.required}\n              rows={field.rows || 4}\n              className=\"w-full\"\n            />\n            {field.helpText && (\n              <p className=\"text-xs text-muted-foreground\">{field.helpText}</p>\n            )}\n          </div>\n        );\n        \n      case 'select':\n        return (\n          <div className=\"space-y-2\" key={index}>\n            <Label htmlFor={field.id || field.name} className=\"text-sm font-medium\">\n              {field.label} {field.required && <span className=\"text-red-500\">*</span>}\n            </Label>\n            <Select\n              value={formValues[field.name] || ''}\n              onValueChange={(value) => handleFieldChange(field.name, value)}\n            >\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder={field.placeholder || 'Seleccionar...'} />\n              </SelectTrigger>\n              <SelectContent>\n                {field.options && field.options.map((option, i: number) => {\n                  // Manejar cuando la opción es un string o un objeto con label/value\n                  const optionValue = typeof option === 'string' ? option : option.value || '';\n                  const optionLabel = typeof option === 'string' ? option : option.label || '';\n                  return (\n                    <SelectItem key={i} value={optionValue}>\n                      {optionLabel}\n                    </SelectItem>\n                  );\n                })}\n              </SelectContent>\n            </Select>\n            {field.helpText && (\n              <p className=\"text-xs text-muted-foreground\">{field.helpText}</p>\n            )}\n          </div>\n        );\n        \n      case 'checkbox':\n        return (\n          <div className=\"flex items-start space-x-2\" key={index}>\n            <Checkbox\n              id={field.id || field.name}\n              checked={formValues[field.name] || false}\n              onCheckedChange={(checked) => handleFieldChange(field.name, checked)}\n              className=\"mt-1\"\n            />\n            <div className=\"grid gap-1.5 leading-none\">\n              <Label\n                htmlFor={field.id || field.name}\n                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n              >\n                {field.label} {field.required && <span className=\"text-red-500\">*</span>}\n              </Label>\n              {field.helpText && (\n                <p className=\"text-xs text-muted-foreground\">{field.helpText}</p>\n              )}\n            </div>\n          </div>\n        );\n        \n      default:\n        return null;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-10 w-10 animate-spin text-primary mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Cargando formulario...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isError || !form) {\n    return (\n      <div className=\"h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <Card className=\"w-[400px]\">\n            <CardHeader>\n              <CardTitle>Error</CardTitle>\n              <CardDescription>No se pudo cargar el formulario</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"mb-4\">El formulario solicitado no existe o no tienes permisos para acceder.</p>\n              <Button onClick={handleBack} className=\"w-full\">\n                Volver a la lista de formularios\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen\" style={getFormStyle()}>\n      <Header />\n      \n      <div className=\"container max-w-5xl mx-auto py-6 space-y-6\">\n        {/* Barra de herramientas */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleBack}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Volver\n            </Button>\n            <h1 className=\"text-2xl font-bold\">Vista previa</h1>\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => {\n                // Incrementar contador de refrescos para activar nueva carga\n                setRefreshTrigger(prev => prev + 1);\n                toast({\n                  title: \"Actualizando datos\",\n                  description: \"Recargando información del formulario...\",\n                });\n              }}\n            >\n              <svg className=\"h-4 w-4 mr-1\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n              </svg>\n              Actualizar\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleEdit}\n            >\n              <PenSquare className=\"h-4 w-4 mr-2\" />\n              Editar formulario\n            </Button>\n            \n            <span className=\"text-xs text-muted-foreground\">\n              {formData.structure.fields.length} campo(s)\n            </span>\n          </div>\n        </div>\n        \n        {/* Formulario con diseño moderno */}\n        <div className=\"w-full max-w-6xl mx-auto\">\n          <div className=\"bg-gradient-to-br from-cyan-100 to-blue-100 min-h-[600px] rounded-2xl p-6 flex items-center justify-center\">\n            <div className=\"bg-white rounded-2xl shadow-2xl overflow-hidden w-full max-w-5xl grid grid-cols-1 lg:grid-cols-2 min-h-[600px]\">\n              \n              {/* Panel izquierdo - Hero */}\n              <div className=\"bg-gradient-to-br from-blue-900 to-slate-900 p-12 flex flex-col justify-center relative overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-blue-500/20\"></div>\n                <div className=\"relative z-10\">\n                  <h2 className=\"text-4xl font-bold text-white mb-6 leading-tight\">\n                    {formData.title || 'Comencemos con sus datos'}\n                  </h2>\n                  <p className=\"text-blue-100 text-lg leading-relaxed\">\n                    {formData.description || 'Complete este formulario para continuar con el proceso.'}\n                  </p>\n                </div>\n              </div>\n              \n              {/* Panel derecho - Formulario */}\n              <div className=\"p-12 flex flex-col justify-center\">\n                <div className=\"mb-8\">\n                  <p className=\"text-gray-600 text-lg\">\n                    {(() => {\n                      const detectedLang = detectLanguage(formData);\n                      const t = getTranslations(detectedLang);\n                      return t.completeInfo;\n                    })()}\n                  </p>\n                </div>\n                \n                {submitted ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                      </svg>\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2 text-gray-900\">\n                      {(() => {\n                        const detectedLang = detectLanguage(formData);\n                        const t = getTranslations(detectedLang);\n                        return t.formSubmitted;\n                      })()}\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      {(() => {\n                        const detectedLang = detectLanguage(formData);\n                        const t = getTranslations(detectedLang);\n                        return form.settings?.successMessage || t.thankYou;\n                      })()}\n                    </p>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setSubmitted(false);\n                        setFormValues({});\n                      }}\n                    >\n                      {(() => {\n                        const detectedLang = detectLanguage(formData);\n                        const t = getTranslations(detectedLang);\n                        return t.sendAnother;\n                      })()}\n                    </Button>\n                  </div>\n                ) : (\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    {formData.structure.fields && formData.structure.fields.length > 0 ? (\n                      <>\n                        {/* Renderizar campos en grupos inteligentes */}\n                        {(() => {\n                          const fields = formData.structure.fields;\n                          const shouldUseGroupLayout = fields.length >= 4;\n                          let fieldIndex = 0;\n                          const renderedFields = [];\n\n                          while (fieldIndex < fields.length) {\n                            const field = fields[fieldIndex];\n                            const nextField = fields[fieldIndex + 1];\n\n                            if (field.type === 'textarea' || field.type === 'select' || \n                                !shouldUseGroupLayout || \n                                (!nextField && fieldIndex % 2 === 0)) {\n                              \n                              renderedFields.push(\n                                <div key={fieldIndex} className=\"modern-form-field\">\n                                  {renderModernFormField(field, fieldIndex)}\n                                </div>\n                              );\n                              fieldIndex++;\n                              \n                            } else if (shouldUseGroupLayout && nextField && \n                                       field.type !== 'textarea' && field.type !== 'select' &&\n                                       nextField.type !== 'textarea' && nextField.type !== 'select') {\n                              \n                              renderedFields.push(\n                                <div key={fieldIndex} className=\"grid grid-cols-2 gap-4\">\n                                  <div className=\"modern-form-field\">\n                                    {renderModernFormField(field, fieldIndex)}\n                                  </div>\n                                  <div className=\"modern-form-field\">\n                                    {renderModernFormField(nextField, fieldIndex + 1)}\n                                  </div>\n                                </div>\n                              );\n                              fieldIndex += 2;\n                              \n                            } else {\n                              renderedFields.push(\n                                <div key={fieldIndex} className=\"modern-form-field\">\n                                  {renderModernFormField(field, fieldIndex)}\n                                </div>\n                              );\n                              fieldIndex++;\n                            }\n                          }\n\n                          return renderedFields;\n                        })()}\n                        \n                        {/* Checkbox de términos y condiciones */}\n                        <div className=\"flex items-center space-x-3 pt-4\">\n                          <Checkbox\n                            id=\"terms\"\n                            checked={formValues.terms || false}\n                            onCheckedChange={(checked) => handleFieldChange('terms', checked)}\n                            className=\"accent-blue-500\"\n                          />\n                          <Label htmlFor=\"terms\" className=\"text-sm text-gray-600 leading-5\">\n                            {(() => {\n                              const detectedLang = detectLanguage(formData);\n                              const t = getTranslations(detectedLang);\n                              return t.acceptTerms;\n                            })()}\n                          </Label>\n                        </div>\n                      </>\n                    ) : (\n                      // Campos de ejemplo con diseño moderno\n                      <>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"modern-form-field\">\n                            <Input\n                              type=\"text\"\n                              placeholder=\"Nombre *\"\n                              value={formValues.nombre || ''}\n                              onChange={(e) => handleFieldChange('nombre', e.target.value)}\n                              className=\"w-full border-0 border-b-2 border-gray-200 rounded-none px-0 py-4 bg-transparent focus:border-cyan-400 focus:ring-0\"\n                              required\n                            />\n                          </div>\n                          <div className=\"modern-form-field\">\n                            <Input\n                              type=\"text\"\n                              placeholder=\"Apellido *\"\n                              value={formValues.apellido || ''}\n                              onChange={(e) => handleFieldChange('apellido', e.target.value)}\n                              className=\"w-full border-0 border-b-2 border-gray-200 rounded-none px-0 py-4 bg-transparent focus:border-cyan-400 focus:ring-0\"\n                              required\n                            />\n                          </div>\n                        </div>\n                        \n                        <div className=\"modern-form-field\">\n                          <Input\n                            type=\"email\"\n                            placeholder=\"Correo Electrónico *\"\n                            value={formValues.email || ''}\n                            onChange={(e) => handleFieldChange('email', e.target.value)}\n                            className=\"w-full border-0 border-b-2 border-gray-200 rounded-none px-0 py-4 bg-transparent focus:border-cyan-400 focus:ring-0\"\n                            required\n                          />\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <Checkbox\n                            id=\"terms\"\n                            checked={formValues.terms || false}\n                            onCheckedChange={(checked) => handleFieldChange('terms', checked)}\n                            className=\"accent-blue-500\"\n                          />\n                          <Label htmlFor=\"terms\" className=\"text-sm text-gray-600 leading-5\">\n                            {(() => {\n                              const detectedLang = detectLanguage(formData);\n                              const t = getTranslations(detectedLang);\n                              return t.acceptTerms;\n                            })()}\n                          </Label>\n                        </div>\n                      </>\n                    )}\n                    \n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-gradient-to-r from-blue-900 to-slate-900 hover:from-blue-800 hover:to-slate-800 text-white font-semibold py-4 rounded-lg transition-all duration-300 transform hover:-translate-y-0.5 hover:shadow-lg text-sm uppercase tracking-wide\"\n                    >\n                      {(() => {\n                        const detectedLang = detectLanguage(form);\n                        const t = getTranslations(detectedLang);\n                        return form?.submitButtonText || formData.structure.submitButtonText || t.submit;\n                      })()}\n                    </Button>\n                  </form>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormPreview;","size_bytes":30755},"client/src/pages/form-responses.tsx":{"content":"import React from 'react';\nimport { useRoute, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Loader2, ArrowLeft, Download, Trash2 } from 'lucide-react';\nimport Header from '@/components/header';\n\nconst FormResponses = () => {\n  const [, navigate] = useLocation();\n  const [match, params] = useRoute<{ id: string }>('/forms/:id/responses');\n  const formId = parseInt(params?.id || '0');\n  const { toast } = useToast();\n  \n  // Obtener datos del formulario\n  const { data: form, isLoading: isLoadingForm } = useQuery({\n    queryKey: [`/api/forms/${formId}`],\n    enabled: !!formId,\n    staleTime: 1000 * 60 * 5, // 5 minutos\n  });\n  \n  // Obtener respuestas del formulario\n  const { data: responses, isLoading: isLoadingResponses } = useQuery({\n    queryKey: [`/api/forms/${formId}/responses`],\n    enabled: !!formId,\n    staleTime: 1000 * 60, // 1 minuto\n  });\n  \n  // Volver a la lista de formularios\n  const handleBack = () => {\n    navigate('/dashboard?tab=forms');\n  };\n  \n  // Exportar respuestas a CSV\n  const handleExportCSV = () => {\n    if (!responses || responses.length === 0) {\n      toast({\n        title: 'Sin datos',\n        description: 'No hay respuestas para exportar',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    try {\n      // Obtener las columnas de la primera respuesta\n      const firstResponse = responses[0];\n      const columns = Object.keys(firstResponse.data || {});\n      \n      // Crear cabecera CSV\n      let csv = ['Fecha', ...columns].join(',') + '\\\\n';\n      \n      // Añadir filas\n      responses.forEach((response) => {\n        const date = new Date(response.submittedAt).toLocaleDateString();\n        const values = columns.map((col) => {\n          const value = response.data[col] || '';\n          // Escapar comas y comillas\n          return `\"${String(value).replace(/\"/g, '\"\"')}\"`;\n        });\n        \n        csv += [date, ...values].join(',') + '\\\\n';\n      });\n      \n      // Crear blob y descargar\n      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.setAttribute('href', url);\n      link.setAttribute('download', `respuestas-${form?.slug || formId}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      toast({\n        title: 'Exportación completada',\n        description: 'Las respuestas se han exportado correctamente',\n      });\n    } catch (error) {\n      console.error('Error al exportar CSV:', error);\n      toast({\n        title: 'Error al exportar',\n        description: 'No se pudieron exportar las respuestas',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  // Renderizar columnas y datos\n  const renderResponseTable = () => {\n    if (!responses || responses.length === 0) {\n      return (\n        <div className=\"text-center py-10\">\n          <p className=\"text-muted-foreground\">No hay respuestas para este formulario</p>\n        </div>\n      );\n    }\n    \n    // Obtener todas las columnas únicas de todas las respuestas, excluyendo \"undefined\"\n    const allColumns = new Set<string>();\n    responses.forEach(response => {\n      if (response.data) {\n        Object.keys(response.data).forEach(key => {\n          if (key !== 'undefined') {\n            allColumns.add(key);\n          }\n        });\n      }\n    });\n    \n    const columns = Array.from(allColumns);\n    \n    // Si no hay columnas válidas, mostrar las respuestas como JSON\n    if (columns.length === 0) {\n      return (\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-[100px]\">Fecha</TableHead>\n              <TableHead>Datos</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {responses.map((response) => (\n              <TableRow key={response.id}>\n                <TableCell className=\"font-medium\">\n                  {new Date(response.submittedAt).toLocaleDateString()}\n                </TableCell>\n                <TableCell>\n                  <pre className=\"text-xs bg-muted p-2 rounded\">\n                    {JSON.stringify(response.data, null, 2)}\n                  </pre>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      );\n    }\n    \n    return (\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"w-[100px]\">Fecha</TableHead>\n            {columns.map((column) => (\n              <TableHead key={column} className=\"capitalize\">\n                {column}\n              </TableHead>\n            ))}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {responses.map((response) => (\n            <TableRow key={response.id}>\n              <TableCell className=\"font-medium\">\n                {new Date(response.submittedAt).toLocaleDateString()}\n              </TableCell>\n              {columns.map((column) => (\n                <TableCell key={column}>\n                  {String(response.data?.[column] || '-')}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  };\n\n  const isLoading = isLoadingForm || isLoadingResponses;\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-10 w-10 animate-spin text-primary mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Cargando respuestas...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!form) {\n    return (\n      <div className=\"h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <Card className=\"w-[400px]\">\n            <CardContent className=\"pt-6\">\n              <p className=\"mb-4\">El formulario solicitado no existe o no tienes permisos para acceder.</p>\n              <Button onClick={handleBack} className=\"w-full\">\n                Volver a la lista de formularios\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Header />\n      \n      <div className=\"container max-w-7xl mx-auto py-6 space-y-6\">\n        {/* Barra de herramientas */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleBack}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Volver\n            </Button>\n            <h1 className=\"text-2xl font-bold\">{form.title} - Respuestas</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleExportCSV}\n              disabled={!responses || responses.length === 0}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Exportar CSV\n            </Button>\n          </div>\n        </div>\n        \n        {/* Panel de estadísticas */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-3xl font-bold\">\n                {responses?.length || 0}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Total de respuestas\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-3xl font-bold\">\n                {responses && responses.length > 0 \n                  ? new Date(responses[0].submittedAt).toLocaleDateString() \n                  : '-'}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Respuesta más reciente\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-3xl font-bold\">\n                {form.type?.charAt(0).toUpperCase() + form.type?.slice(1) || 'Estándar'}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Tipo de formulario\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Tabla de respuestas */}\n        <Card>\n          <CardContent className=\"pt-6 overflow-auto\">\n            {renderResponseTable()}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default FormResponses;","size_bytes":9158},"client/src/pages/form-template-selection.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { FormTemplateSelector } from \"@/components/forms/form-template-selector\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function FormTemplateSelectionPage() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [isUserRoute] = useRoute(\"/user/:path*\");\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (!isLoading && !user && !isUserRoute) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation, isUserRoute]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\"></div>\n      </div>\n    );\n  }\n\n  if (!user) return null;\n\n  return (\n    <div className=\"container mx-auto py-8 px-4 max-w-5xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">{t(\"create_new_form\", \"Create New Form\")}</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          {t(\"select_template_description\", \"Select a template or start from scratch to create your custom form.\")}\n        </p>\n      </div>\n\n      <FormTemplateSelector />\n    </div>\n  );\n}","size_bytes":1336},"client/src/pages/forms-guide.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, CheckCircle2, Copy, SendHorizonal, Bot, ArrowDown } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function FormsGuide() {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { t } = useTranslation();\n  const [copied, setCopied] = useState(false);\n  const [messages, setMessages] = useState<{content: string, role: 'user' | 'assistant'}[]>([\n    {\n      role: 'assistant',\n      content: t('forms.assistant_welcome', 'Hello, I am your AIPI assistant. I am here to answer any questions about form customization and integration with your website. How can I help you?')\n    }\n  ]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const chatEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  \n  // URL para el script de integración\n  // Usar window.location.origin para obtener la URL base del sitio\n  const formEmbedCode = `<!-- Código de ejemplo para integrar un formulario de AIPI -->\n<script src=\"${window.location.origin}/static/form-embed.js?id=tu_id_de_formulario\"></script>\n<div id=\"aipi-form-container\"></div>`;\n  \n  // Función para copiar código al portapapeles\n  const copyToClipboard = (code: string) => {\n    navigator.clipboard.writeText(code);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n  \n  // Función para enviar mensaje al asistente\n  const sendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n    \n    // Añadir mensaje del usuario\n    const userMessage = { content: inputValue, role: 'user' as const };\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    \n    try {\n      // Simulamos una respuesta del asistente (en producción, esto llamaría a una API)\n      setTimeout(() => {\n        let botResponse = '';\n        \n        if (inputValue.toLowerCase().includes('personalizar') || inputValue.toLowerCase().includes('personalización')) {\n          botResponse = 'Puedes personalizar tus formularios de varias maneras:\\n\\n1. Cambia los colores para que coincidan con tu marca\\n2. Modifica el estilo y tamaño de fuente\\n3. Ajusta el espaciado y bordes\\n4. Personaliza los textos de los botones y mensajes\\n5. Añade tu logotipo\\n\\nTodo esto lo puedes hacer desde el editor de formularios en tu dashboard.';\n        } else if (inputValue.toLowerCase().includes('integrar') || inputValue.toLowerCase().includes('integración')) {\n          botResponse = `Para integrar un formulario en tu sitio web, debes:\\n\\n1. Crear y publicar tu formulario desde el dashboard\\n2. Copiar el código de integración que se proporciona\\n3. Pegar este código en tu sitio web donde quieras que aparezca el formulario\\n\\nEl código se verá así:\\n\\`\\`\\`html\\n${formEmbedCode}\\n\\`\\`\\`\\n\\nDonde \"tu_id_de_formulario\" será reemplazado por el ID único de tu formulario.`;\n        } else if (inputValue.toLowerCase().includes('campos') || inputValue.toLowerCase().includes('field')) {\n          botResponse = 'AIPI soporta diversos tipos de campos para tus formularios:\\n\\n• Texto corto\\n• Texto largo (área de texto)\\n• Email\\n• Número\\n• Teléfono\\n• Fecha\\n• Hora\\n• Selección (dropdown)\\n• Botones de radio\\n• Casillas de verificación\\n• Archivos\\n• Dirección\\n• URL\\n• Consentimiento\\n\\nPuedes añadir, eliminar y reordenar estos campos según tus necesidades.';\n        } else if (inputValue.toLowerCase().includes('url') || inputValue.toLowerCase().includes('link')) {\n          botResponse = `La URL correcta para el script de integración de formularios es:\\n\\n\\`\\`\\`html\\n<script src=\"${window.location.origin}/static/form-embed.js?id=tu_id_de_formulario\"></script>\\n\\`\\`\\`\\n\\nDonde \"tu_id_de_formulario\" debe ser reemplazado por el slug o ID específico de tu formulario. Este ID lo puedes encontrar en la página de detalles del formulario en tu dashboard.`;\n        } else if (inputValue.toLowerCase().includes('respuestas') || inputValue.toLowerCase().includes('datos')) {\n          botResponse = 'Las respuestas de tus formularios se almacenan de forma segura en tu cuenta de AIPI. Puedes:\\n\\n• Verlas en tiempo real desde el dashboard\\n• Exportarlas en formato CSV\\n• Configurar notificaciones por email cuando recibas nuevas respuestas\\n• Analizar tendencias y patrones en los datos recibidos\\n\\nTodas las respuestas están protegidas y solo tú puedes acceder a ellas.';\n        } else {\n          botResponse = 'Gracias por tu pregunta. Puedo ayudarte con la personalización de formularios, tipos de campos disponibles, cómo integrar formularios en tu sitio web, y cómo administrar las respuestas. Si tienes preguntas específicas sobre alguno de estos temas, no dudes en preguntar.';\n        }\n        \n        setMessages(prev => [...prev, { content: botResponse, role: 'assistant' }]);\n        setIsLoading(false);\n        scrollToBottom();\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Error al enviar mensaje:', error);\n      toast({\n        title: 'Error al enviar mensaje',\n        description: 'Hubo un problema al comunicarse con el asistente. Por favor, intenta de nuevo.',\n        variant: 'destructive',\n      });\n      setIsLoading(false);\n    }\n  };\n  \n  // Función para desplazarse al último mensaje\n  const scrollToBottom = () => {\n    setTimeout(() => {\n      chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, 100);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"bg-gradient-to-br from-primary-50 to-primary-100 dark:from-gray-900 dark:to-gray-800 py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n              {t('forms.title', 'Customizable Forms')}\n            </h1>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              {t('forms.subtitle', 'Create, customize and integrate forms on your website to capture visitor information.')}\n            </p>\n          </div>\n        </section>\n        \n        <section className=\"py-12 bg-white dark:bg-gray-900\">\n          <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 space-y-8\">\n            <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n              <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                <h2 className=\"text-2xl font-bold\">{t('forms.customizable_forms', 'Customizable Forms')}</h2>\n              </div>\n              <div className=\"p-6 bg-white dark:bg-gray-900\">\n                <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                  {t('forms.description', 'AIPI allows you to create and manage custom forms to efficiently capture visitor information. Use this functionality for lead generation, surveys or user registrations.')}\n                </p>\n                <h3 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">{t('forms.available_types', 'Available Form Types')}</h3>\n                <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                  <li><strong>{t('forms.contact_form', 'Contact forms')}:</strong> {t('forms.contact_form_desc', 'To capture basic information from interested visitors')}</li>\n                  <li><strong>{t('forms.waitlist_form', 'Waitlist forms')}:</strong> {t('forms.waitlist_form_desc', 'Ideal for upcoming projects')}</li>\n                  <li><strong>{t('forms.survey_form', 'Surveys')}:</strong> {t('forms.survey_form_desc', 'To collect opinions and feedback from your users')}</li>\n                  <li><strong>{t('forms.registration_forms', 'Registration forms')}:</strong> {t('forms.registration_forms_desc', 'To create user accounts or subscriptions')}</li>\n                </ul>\n                {user ? (\n                  <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/forms\")}>\n                    {t('forms.go_to_management', 'Go to Form Management')}\n                  </Button>\n                ) : (\n                  <Button size=\"lg\" onClick={() => setLocation(\"/login\")}>\n                    {t('forms.login', 'Login')}\n                  </Button>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n              <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                <h2 className=\"text-2xl font-bold\">{t('forms.create_first_form', 'Create Your First Form')}</h2>\n              </div>\n              <div className=\"p-6 bg-white dark:bg-gray-900\">\n                <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                  {t('forms.follow_steps', 'Follow these simple steps to create and publish your first form:')}\n                </p>\n                <ol className=\"list-decimal list-inside space-y-4 text-gray-700 dark:text-gray-300 mb-6\">\n                  <li className=\"pl-2\">\n                    <strong className=\"text-primary-600 dark:text-primary-400\">{t('forms.step1_title', 'Access Forms Panel')}</strong>\n                    <p className=\"mt-2 ml-6\">{t('forms.step1_desc', 'Go to the \"Forms\" section in your dashboard to start creating a new form.')}</p>\n                  </li>\n                  <li className=\"pl-2\">\n                    <strong className=\"text-primary-600 dark:text-primary-400\">{t('forms.step2_title', 'Choose a Template')}</strong>\n                    <p className=\"mt-2 ml-6\">{t('forms.step2_desc', 'Select from our pre-designed templates or start from scratch. Each template is optimized for different use cases.')}</p>\n                  </li>\n                  <li className=\"pl-2\">\n                    <strong className=\"text-primary-600 dark:text-primary-400\">{t('forms.step3_title', 'Customize Fields')}</strong>\n                    <p className=\"mt-2 ml-6\">{t('forms.step3_desc', 'Add, remove or modify fields according to your needs. You can create text, selection, date, file fields and more.')}</p>\n                  </li>\n                  <li className=\"pl-2\">\n                    <strong className=\"text-primary-600 dark:text-primary-400\">{t('forms.step4_title', 'Configure Appearance')}</strong>\n                    <p className=\"mt-2 ml-6\">{t('forms.step4_desc', 'Adjust colors, fonts and styles to match your brand. Customize button and message text.')}</p>\n                  </li>\n                  <li className=\"pl-2\">\n                    <strong className=\"text-primary-600 dark:text-primary-400\">{t('forms.step5_title', 'Publish and Share')}</strong>\n                    <p className=\"mt-2 ml-6\">{t('forms.step5_desc', 'Once ready, click \"Publish\" and get the integration code to insert it into your website.')}</p>\n                  </li>\n                </ol>\n                {user ? (\n                  <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/forms/new\")}>\n                    {t('forms.create_new_form', 'Create New Form')}\n                  </Button>\n                ) : (\n                  <Button size=\"lg\" onClick={() => setLocation(\"/register\")}>\n                    {t('forms.create_account', 'Create Account')}\n                  </Button>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n              <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                <h2 className=\"text-2xl font-bold\">{t('forms.response_management', 'Response Management')}</h2>\n              </div>\n              <div className=\"p-6 bg-white dark:bg-gray-900\">\n                <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                  {t('forms.response_intro', 'All responses from your forms are captured and stored securely in your AIPI account. You can:')}\n                </p>\n                <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                  <li>{t('forms.view_responses', 'View all responses in real time from your control panel')}</li>\n                  <li>{t('forms.export_csv', 'Export data to CSV for analysis or integration with other tools')}</li>\n                  <li>{t('forms.email_notifications', 'Configure email notifications when you receive new responses')}</li>\n                  <li>{t('forms.webhook_integration', 'Integrate with other systems through webhooks')}</li>\n                  <li>{t('forms.analyze_patterns', 'Analyze trends and patterns in received responses')}</li>\n                </ul>\n                <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-md border border-gray-200 dark:border-gray-700 mb-4\">\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    <strong>{t('forms.tip', 'Tip')}:</strong> {t('forms.tip_description', 'Use your form responses to train your AI assistant, allowing it to answer frequently asked questions based on collected information.')}\n                  </p>\n                </div>\n                {user ? (\n                  <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/forms\")}>\n                    {t('forms.view_my_forms', 'View My Forms')}\n                  </Button>\n                ) : (\n                  <Button size=\"lg\" onClick={() => setLocation(\"/pricing\")}>\n                    {t('forms.view_plans', 'View Plans')}\n                  </Button>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"bg-primary-50 dark:bg-gray-800 rounded-lg p-6 border border-primary-100 dark:border-gray-700\">\n              <h3 className=\"text-xl font-bold mb-4 text-primary-900 dark:text-primary-400\">{t('forms.website_integration', 'Website Integration')}</h3>\n              <div className=\"space-y-4\">\n                <p className=\"text-gray-700 dark:text-gray-300\">\n                  {t('forms.integration_description', 'Once your form is created, you can get the integration code to insert it into your website. This code will generate a form with all the fields and styles you have configured.')}\n                </p>\n                \n                <div className=\"relative\">\n                  <pre className=\"bg-gray-900 text-white p-6 rounded-md overflow-x-auto text-sm\">\n                    {formEmbedCode}\n                  </pre>\n                  <button \n                    onClick={() => copyToClipboard(formEmbedCode)}\n                    className=\"absolute top-3 right-3 bg-gray-700 hover:bg-gray-600 text-white p-2 rounded-md\"\n                  >\n                    {copied ? <CheckCircle2 size={18} /> : <Copy size={18} />}\n                  </button>\n                </div>\n                \n                <div className=\"bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 mt-4\">\n                  <h4 className=\"font-semibold text-lg mb-3 text-gray-900 dark:text-white\">{t('forms.form_preview', 'Form Preview')}</h4>\n                  <div className=\"aspect-video bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center p-6 max-w-md\">\n                      <h5 className=\"font-medium text-xl mb-4 text-gray-900 dark:text-white\">{t('forms.contact_form_example', 'Contact Form')}</h5>\n                      <div className=\"space-y-4 text-left\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('forms.full_name', 'Full Name')}</label>\n                          <input type=\"text\" className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md\" disabled />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Email</label>\n                          <input type=\"email\" className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md\" disabled />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('forms.message', 'Message')}</label>\n                          <textarea className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md\" rows={3} disabled></textarea>\n                        </div>\n                        <button className=\"w-full bg-primary-600 text-white py-2 px-4 rounded-md font-medium\" disabled>{t('forms.send_message', 'Send Message')}</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <p className=\"text-sm text-gray-500 dark:text-gray-400 italic\">\n                  {t('forms.pricing_note', 'Note: Creating your first form is free. For additional forms and advanced features, check our pricing plans.')}\n                </p>\n              </div>\n            </div>\n            \n\n            \n            <div className=\"flex justify-center mt-8\">\n              <Button asChild variant=\"outline\" className=\"mr-4\">\n                <Link href=\"/get-started\">\n                  {t('forms.back_to_guide', 'Back to Getting Started')}\n                </Link>\n              </Button>\n              {user ? (\n                <Button asChild>\n                  <Link href=\"/dashboard/forms\">\n                    {t('forms.go_to_my_forms', 'Go to My Forms')}\n                  </Link>\n                </Button>\n              ) : (\n                <Button asChild>\n                  <Link href=\"/register\">\n                    {t('forms.create_account_link', 'Create Account')}\n                  </Link>\n                </Button>\n              )}\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":18929},"client/src/pages/get-started-new.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/context/theme-context\";\nimport { useAuth } from \"@/context/auth-context\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Copy, Check } from \"lucide-react\";\n\nexport default function GetStarted() {\n  const [location, setLocation] = useLocation();\n  const { theme } = useTheme();\n  const { user } = useAuth();\n  const [copiedBubble, setCopiedBubble] = useState(false);\n  const [copiedFullscreen, setCopiedFullscreen] = useState(false);\n  \n  // Estado para las pestañas personalizadas\n  const [tabValue, setTabValue] = useState(\"bubble\");\n  \n  // URLs para los scripts de integración - USANDO EMBED.JS PARA AMBOS TIPOS\n  const baseUrl = window.location.origin;\n  const bubbleWidgetCode = `<script src=\"${baseUrl}/embed.js?key=aipi_web_internal\" data-widget-type=\"bubble\"></script>`;\n  const fullscreenWidgetCode = `<script src=\"${baseUrl}/embed.js?key=aipi_web_internal\" data-widget-type=\"fullscreen\"></script>`;\n  \n  // Función para copiar código al portapapeles\n  const copyToClipboard = (code: string, type: 'bubble' | 'fullscreen') => {\n    navigator.clipboard.writeText(code);\n    if (type === 'bubble') {\n      setCopiedBubble(true);\n      setTimeout(() => setCopiedBubble(false), 2000);\n    } else {\n      setCopiedFullscreen(true);\n      setTimeout(() => setCopiedFullscreen(false), 2000);\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"bg-gradient-to-br from-primary-50 to-primary-100 dark:from-gray-900 dark:to-gray-800 py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n              Comienza con AIPI\n            </h1>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              Integra el asistente de AIPI en tu sitio web en minutos con estas sencillas instrucciones.\n            </p>\n          </div>\n        </section>\n        \n        <section className=\"py-12 bg-white dark:bg-gray-900\">\n          <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"mb-8\">\n              {/* Pestañas personalizadas para la selección de tipo de widget */}\n              <div className=\"flex w-full rounded-lg overflow-hidden border border-gray-300 dark:border-gray-700\">\n                <button \n                  onClick={() => setTabValue(\"bubble\")}\n                  className={`flex-1 text-center text-lg py-4 font-medium transition-colors ${\n                    tabValue === \"bubble\" \n                      ? \"bg-primary-600 text-white\" \n                      : \"bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-200\"\n                  }`}\n                >\n                  Widget flotante (burbuja)\n                </button>\n                <button \n                  onClick={() => setTabValue(\"fullscreen\")}\n                  className={`flex-1 text-center text-lg py-4 font-medium transition-colors ${\n                    tabValue === \"fullscreen\" \n                      ? \"bg-primary-600 text-white\" \n                      : \"bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-200\"\n                  }`}\n                >\n                  Pantalla completa (estilo ChatGPT)\n                </button>\n              </div>\n              \n              {/* Contenido para el tab de widget flotante */}\n              {tabValue === \"bubble\" && (\n                <div className=\"space-y-8 mt-6\">\n                  <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                    <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                      <h2 className=\"text-2xl font-bold\">Paso 1: Agrega este código a tu sitio web</h2>\n                    </div>\n                    <div className=\"p-6 bg-white dark:bg-gray-900\">\n                      <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                        Copia el siguiente código y pégalo justo antes de la etiqueta &lt;/body&gt; en tus páginas HTML:\n                      </p>\n                      <div className=\"relative\">\n                        <pre className=\"bg-gray-900 text-white p-6 rounded-md overflow-x-auto text-sm\">\n                          {bubbleWidgetCode}\n                        </pre>\n                        <button \n                          onClick={() => copyToClipboard(bubbleWidgetCode, 'bubble')}\n                          className=\"absolute top-3 right-3 bg-gray-700 hover:bg-gray-600 text-white p-2 rounded-md\"\n                        >\n                          {copiedBubble ? <Check size={18} /> : <Copy size={18} />}\n                        </button>\n                      </div>\n                      <div className=\"mt-4\">\n                        <p className=\"text-gray-700 dark:text-gray-300\">\n                          <strong>Si usas WordPress:</strong> Puedes agregarlo en el tema en footer.php o instalar un plugin que permita insertar código HTML.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                    <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                      <h2 className=\"text-2xl font-bold\">Paso 2: Personaliza el widget</h2>\n                    </div>\n                    <div className=\"p-6 bg-white dark:bg-gray-900\">\n                      <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                        Personaliza la apariencia y comportamiento del widget desde tu panel de control de AIPI:\n                      </p>\n                      <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                        <li>Colores y estilo visual del widget</li>\n                        <li>Posición en la pantalla (esquina inferior derecha, izquierda, etc.)</li>\n                        <li>Mensaje de bienvenida y comportamiento inicial</li>\n                        <li>Idiomas soportados</li>\n                      </ul>\n                      {user ? (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/dashboard?tab=integrations\")}>\n                          Ir al Panel de Control\n                        </Button>\n                      ) : (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/login\")}>\n                          Iniciar Sesión\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                    <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                      <h2 className=\"text-2xl font-bold\">Paso 3: Entrena tu asistente</h2>\n                    </div>\n                    <div className=\"p-6 bg-white dark:bg-gray-900\">\n                      <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                        Para que tu asistente proporcione respuestas útiles y relevantes, puedes entrenarlo con:\n                      </p>\n                      <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                        <li>Documentos PDF con información sobre tus productos o servicios</li>\n                        <li>Archivos DOCX con preguntas frecuentes y sus respuestas</li>\n                        <li>Archivos Excel con datos estructurados</li>\n                        <li>Instrucciones específicas sobre el tono y estilo de las respuestas</li>\n                      </ul>\n                      {user ? (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/dashboard?tab=content\")}>\n                          Administrar Contenido\n                        </Button>\n                      ) : (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/register\")}>\n                          Crear Cuenta\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              {/* Contenido para el tab de pantalla completa */}\n              {tabValue === \"fullscreen\" && (\n                <div className=\"space-y-8 mt-6\">\n                  <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                    <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                      <h2 className=\"text-2xl font-bold\">Paso 1: Agrega este código a tu sitio web</h2>\n                    </div>\n                    <div className=\"p-6 bg-white dark:bg-gray-900\">\n                      <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                        Copia el siguiente código y pégalo justo antes de la etiqueta &lt;/body&gt; en tus páginas HTML:\n                      </p>\n                      <div className=\"relative\">\n                        <pre className=\"bg-gray-900 text-white p-6 rounded-md overflow-x-auto text-sm\">\n                          {fullscreenWidgetCode}\n                        </pre>\n                        <button \n                          onClick={() => copyToClipboard(fullscreenWidgetCode, 'fullscreen')}\n                          className=\"absolute top-3 right-3 bg-gray-700 hover:bg-gray-600 text-white p-2 rounded-md\"\n                        >\n                          {copiedFullscreen ? <Check size={18} /> : <Copy size={18} />}\n                        </button>\n                      </div>\n                      <div className=\"mt-4\">\n                        <p className=\"text-gray-700 dark:text-gray-300\">\n                          <strong>Si usas WordPress:</strong> Puedes agregarlo en el tema en footer.php o instalar un plugin que permita insertar código HTML.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                    <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                      <h2 className=\"text-2xl font-bold\">Paso 2: Personaliza la experiencia de chatbot</h2>\n                    </div>\n                    <div className=\"p-6 bg-white dark:bg-gray-900\">\n                      <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                        Personaliza cómo funciona el chatbot de pantalla completa desde tu panel de control:\n                      </p>\n                      <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                        <li>Configurar colores y tema visual del chat</li>\n                        <li>Personalizar el nombre y avatar del asistente</li>\n                        <li>Definir mensajes de bienvenida y sugerencias iniciales</li>\n                        <li>Configurar idiomas y tono de conversación</li>\n                      </ul>\n                      {user ? (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/dashboard?tab=integrations\")}>\n                          Ir al Panel de Control\n                        </Button>\n                      ) : (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/login\")}>\n                          Iniciar Sesión\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                    <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                      <h2 className=\"text-2xl font-bold\">Paso 3: Entrena a tu asistente con tu contenido</h2>\n                    </div>\n                    <div className=\"p-6 bg-white dark:bg-gray-900\">\n                      <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                        Para que tu asistente de pantalla completa sea más útil, puedes entrenarlo con:\n                      </p>\n                      <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                        <li>Documentación de productos y manuales en formato PDF</li>\n                        <li>Preguntas frecuentes y sus respuestas en documentos DOCX</li>\n                        <li>Catálogos de productos en hojas de cálculo Excel</li>\n                        <li>Instrucciones personalizadas sobre cómo responder a preguntas específicas</li>\n                      </ul>\n                      {user ? (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/dashboard?tab=content\")}>\n                          Gestionar Documentos\n                        </Button>\n                      ) : (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/register\")}>\n                          Crear Cuenta\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13990},"client/src/pages/get-started.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Tabs, \n  TabsContent, \n  TabsList, \n  TabsTrigger \n} from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Bot, X, SendHorizonal, Copy, Check, Globe, CheckCircle2 } from \"lucide-react\";\nimport { useTheme } from \"@/context/theme-context\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport CustomizationAssistant from \"@/components/customization-assistant\";\n\nexport default function GetStarted() {\n  const [location, setLocation] = useLocation();\n  const { theme } = useTheme();\n  const { user } = useAuth();\n  const { t } = useTranslation();\n  const [copiedBubble, setCopiedBubble] = useState(false);\n  const [copiedFullscreen, setCopiedFullscreen] = useState(false);\n  const [copiedForm, setCopiedForm] = useState(false);\n  \n  // Estado para las previsualizaciones\n  const [bubbleUrl, setBubbleUrl] = useState(\"\");\n  const [fullscreenUrl, setFullscreenUrl] = useState(\"\");\n  const [showBubblePreview, setShowBubblePreview] = useState(false);\n  const [showFullscreenPreview, setShowFullscreenPreview] = useState(false);\n  const [isLoadingBubble, setIsLoadingBubble] = useState(false);\n  const [isLoadingFullscreen, setIsLoadingFullscreen] = useState(false);\n  \n  // URLs para los scripts de integración - USANDO EMBED.JS Y FORM-BUTTON.JS\n  const baseUrl = window.location.origin;\n  const bubbleWidgetCode = `<script src=\"${baseUrl}/embed.js?key=aipi_web_internal\" data-widget-type=\"bubble\"></script>`;\n  const fullscreenWidgetCode = `<script src=\"${baseUrl}/embed.js?key=aipi_web_internal\" data-widget-type=\"fullscreen\"></script>`;\n  const formWidgetCode = `<script src=\"${baseUrl}/form-button.js?key=aipi_web_internal\" data-form-id=\"1\" data-display-type=\"modal\"></script>`;\n  \n  // Función para copiar código al portapapeles\n  const copyToClipboard = (code: string, type: 'bubble' | 'fullscreen' | 'form') => {\n    navigator.clipboard.writeText(code);\n    if (type === 'bubble') {\n      setCopiedBubble(true);\n      setTimeout(() => setCopiedBubble(false), 2000);\n    } else if (type === 'fullscreen') {\n      setCopiedFullscreen(true);\n      setTimeout(() => setCopiedFullscreen(false), 2000);\n    } else if (type === 'form') {\n      setCopiedForm(true);\n      setTimeout(() => setCopiedForm(false), 2000);\n    }\n  };\n  \n  // Función para validar URL\n  const isValidUrl = (urlString: string): boolean => {\n    try {\n      new URL(urlString);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  \n  // Función para previsualizar widget flotante\n  const previewBubbleWidget = () => {\n    if (!bubbleUrl) {\n      alert(t(\"getStartedPage.widget.preview.url_required\"));\n      return;\n    }\n    \n    if (!isValidUrl(bubbleUrl)) {\n      alert(t(\"getStartedPage.widget.preview.url_invalid\"));\n      return;\n    }\n    \n    setIsLoadingBubble(true);\n    // Simulamos una carga para mostrar la previsualización\n    setTimeout(() => {\n      setShowBubblePreview(true);\n      setIsLoadingBubble(false);\n    }, 1500);\n  };\n  \n  // Función para previsualizar widget de pantalla completa\n  const previewFullscreenWidget = () => {\n    if (!fullscreenUrl) {\n      alert(t(\"getStartedPage.widget.preview.url_required\"));\n      return;\n    }\n    \n    if (!isValidUrl(fullscreenUrl)) {\n      alert(t(\"getStartedPage.widget.preview.url_invalid\"));\n      return;\n    }\n    \n    setIsLoadingFullscreen(true);\n    // Simulamos una carga para mostrar la previsualización\n    setTimeout(() => {\n      setShowFullscreenPreview(true);\n      setIsLoadingFullscreen(false);\n    }, 1500);\n  };\n  \n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"py-8 sm:py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n              {t(\"getStartedPage.title\")}\n            </h1>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              {t(\"getStartedPage.subtitle\")}\n            </p>\n          </div>\n        </section>\n        \n        <section className=\"py-8 sm:py-12\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <Tabs defaultValue=\"bubble\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3 mb-8 max-w-md mx-auto sm:max-w-lg\">\n                <TabsTrigger value=\"bubble\" className=\"text-sm sm:text-base px-2 py-2 sm:py-3\">{t(\"getStartedPage.tabs.widget\")}</TabsTrigger>\n                <TabsTrigger value=\"fullscreen\" className=\"text-sm sm:text-base px-2 py-2 sm:py-3\">{t(\"getStartedPage.tabs.fullscreen\")}</TabsTrigger>\n                <TabsTrigger value=\"form\" className=\"text-sm sm:text-base px-2 py-2 sm:py-3\">{t(\"getStartedPage.tabs.form\")}</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"bubble\" className=\"space-y-8\">\n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-3 sm:py-4 px-4 sm:px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-lg sm:text-xl lg:text-2xl font-bold\">{t(\"getStartedPage.widget.step1.title\")}</h2>\n                  </div>\n                  <div className=\"p-4 sm:p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                      {t(\"getStartedPage.widget.step1.description\")}\n                    </p>\n                    <div className=\"relative\">\n                      <pre className=\"bg-gray-900 text-white p-3 sm:p-6 rounded-md overflow-x-auto text-xs sm:text-sm\">\n                        {bubbleWidgetCode}\n                      </pre>\n                      <button \n                        onClick={() => copyToClipboard(bubbleWidgetCode, 'bubble')}\n                        className=\"absolute top-2 sm:top-3 right-2 sm:right-3 bg-gray-700 hover:bg-gray-600 text-white p-1.5 sm:p-2 rounded-md\"\n                      >\n                        {copiedBubble ? <Check size={16} className=\"sm:w-[18px] sm:h-[18px]\" /> : <Copy size={16} className=\"sm:w-[18px] sm:h-[18px]\" />}\n                      </button>\n                    </div>\n                    <div className=\"mt-4\">\n                      <p className=\"text-gray-700 dark:text-gray-300\">\n                        <strong>{t(\"getStartedPage.widget.step1.wordpress_note\")}</strong>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.widget.step2.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                      {t(\"getStartedPage.widget.step2.description\")}\n                    </p>\n                    <div className=\"mb-6\">\n                      <p className=\"font-medium text-gray-900 dark:text-white mb-3\">{t(\"getStartedPage.widget.step2.customization_title\")}</p>\n                      <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300\">\n                        <li>{t(\"getStartedPage.widget.step2.position\")}</li>\n                        <li>{t(\"getStartedPage.widget.step2.theme_color\")}</li>\n                        <li>{t(\"getStartedPage.widget.step2.assistant_name\")}</li>\n                        <li>{t(\"getStartedPage.widget.step2.welcome_message\")}</li>\n                      </ul>\n                    </div>\n                    <div className=\"mb-6\">\n                      <p className=\"font-medium text-gray-900 dark:text-white mb-3\">{t(\"getStartedPage.widget.step2.configure_dashboard\")}</p>\n                      <ol className=\"list-decimal list-inside space-y-2 text-gray-700 dark:text-gray-300\">\n                        <li>{t(\"getStartedPage.widget.step2.dashboard_steps.0\")}</li>\n                        <li>{t(\"getStartedPage.widget.step2.dashboard_steps.1\")}</li>\n                        <li>{t(\"getStartedPage.widget.step2.dashboard_steps.2\")}</li>\n                        <li>{t(\"getStartedPage.widget.step2.dashboard_steps.3\")}</li>\n                      </ol>\n                    </div>\n                    {user ? (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/integrations\")}>\n                        {t(\"getStartedPage.buttons.go_to_integrations\")}\n                      </Button>\n                    ) : (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/login\")}>\n                        {t(\"getStartedPage.buttons.login_to_manage\")}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.widget.step3.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                      {t(\"getStartedPage.widget.step3.description\")}\n                    </p>\n                    <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                      {Array.isArray(t(\"getStartedPage.widget.step3.training_options\", { returnObjects: true })) \n                        ? t(\"getStartedPage.widget.step3.training_options\", { returnObjects: true }).map((option: string, index: number) => (\n                            <li key={index}>{option}</li>\n                          ))\n                        : (\n                          <>\n                            <li>Documentos PDF con información sobre tus productos o servicios</li>\n                            <li>Archivos DOCX con preguntas frecuentes y sus respuestas</li>\n                            <li>Archivos Excel con datos estructurados</li>\n                            <li>Instrucciones específicas sobre el tono y estilo de las respuestas</li>\n                          </>\n                        )\n                      }\n                    </ul>\n                    {user ? (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/content\")}>\n                        {t(\"getStartedPage.buttons.manage_content\")}\n                      </Button>\n                    ) : (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/register\")}>\n                        {t(\"getStartedPage.buttons.create_account\")}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.widget.step3.step4_title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                      {t(\"getStartedPage.widget.step3.step4_description\")}\n                    </p>\n                    <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                      {Array.isArray(t(\"getStartedPage.widget.step3.form_options\", { returnObjects: true })) \n                        ? t(\"getStartedPage.widget.step3.form_options\", { returnObjects: true }).map((option: string, index: number) => (\n                            <li key={index}>{option}</li>\n                          ))\n                        : (\n                          <>\n                            <li>Formularios de contacto y captura de leads</li>\n                            <li>Encuestas de satisfacción y feedback</li>\n                            <li>Formularios de registro para eventos</li>\n                            <li>Integración automática con tu CRM</li>\n                          </>\n                        )\n                      }\n                    </ul>\n                    {user ? (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/forms\")}>\n                        {t(\"getStartedPage.buttons.create_forms\")}\n                      </Button>\n                    ) : (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/register\")}>\n                        {t(\"getStartedPage.buttons.create_account_forms\")}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n              </TabsContent>\n              \n              <TabsContent value=\"fullscreen\" className=\"space-y-8\">\n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.fullscreen.step1.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                      {t(\"getStartedPage.fullscreen.step1.description\")}\n                    </p>\n                    <div className=\"relative\">\n                      <pre className=\"bg-gray-900 text-white p-6 rounded-md overflow-x-auto text-sm\">\n                        {fullscreenWidgetCode}\n                      </pre>\n                      <button \n                        onClick={() => copyToClipboard(fullscreenWidgetCode, 'fullscreen')}\n                        className=\"absolute top-3 right-3 bg-gray-700 hover:bg-gray-600 text-white p-2 rounded-md\"\n                      >\n                        {copiedFullscreen ? <Check size={18} /> : <Copy size={18} />}\n                      </button>\n                    </div>\n                    <div className=\"mt-4\">\n                      <p className=\"text-gray-700 dark:text-gray-300\">\n                        <strong>{t(\"getStartedPage.fullscreen.step1.wordpress_note\")}</strong>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.fullscreen.step2.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                      {t(\"getStartedPage.fullscreen.step2.description\")}\n                    </p>\n                    \n                    <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800 mb-6\">\n                      <h3 className=\"text-lg font-semibold text-blue-800 dark:text-blue-300 mb-2\">\n                        {t(\"getStartedPage.fullscreen_features.title\")}\n                      </h3>\n                      <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300\">\n                        <li><strong>{t(\"getStartedPage.fullscreen_features.register_login\")}</strong></li>\n                        <li><strong>{t(\"getStartedPage.fullscreen_features.personal_history\")}</strong></li>\n                        <li><strong>{t(\"getStartedPage.fullscreen_features.auto_titles\")}</strong></li>\n                        <li><strong>{t(\"getStartedPage.fullscreen_features.conversation_management\")}</strong></li>\n                        <li><strong>{t(\"getStartedPage.fullscreen_features.user_info\")}</strong></li>\n                        <li><strong>{t(\"getStartedPage.fullscreen_features.jwt_security\")}</strong></li>\n                      </ul>\n                    </div>\n                    \n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n                      {t(\"getStartedPage.fullscreen_features.visual_customization\")}\n                    </p>\n                    <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                      <li>{t(\"getStartedPage.fullscreen_features.brand_colors\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen_features.welcome_messages\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen_features.registration_config\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen_features.privacy_settings\")}</li>\n                    </ul>\n                    {user ? (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/integrations\")}>\n                        {t(\"getStartedPage.buttons.configure_auth\")}\n                      </Button>\n                    ) : (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/login\")}>\n                        {t(\"getStartedPage.buttons.login\")}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.ignored_sections.step3_title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <div className=\"bg-primary-50 dark:bg-primary-900/20 rounded-lg p-4 border border-primary-200 dark:border-primary-800 mb-5\">\n                      <h3 className=\"text-lg font-semibold text-primary-800 dark:text-primary-300 mb-2\">\n                        {t(\"getStartedPage.ignored_sections.title\")}\n                      </h3>\n                      <p className=\"text-gray-700 dark:text-gray-300 mb-3\">\n                        {t(\"getStartedPage.ignored_sections.description\")}\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mb-2\">\n                        <div className=\"flex items-start\">\n                          <span className=\"bg-primary-100 dark:bg-primary-800 rounded-full p-1 mr-2 flex-shrink-0\">\n                            <CheckCircle2 className=\"h-4 w-4 text-primary-600 dark:text-primary-400\" />\n                          </span>\n                          <p className=\"text-sm\">{t(\"getStartedPage.ignored_sections.benefit_1\")}</p>\n                        </div>\n                        <div className=\"flex items-start\">\n                          <span className=\"bg-primary-100 dark:bg-primary-800 rounded-full p-1 mr-2 flex-shrink-0\">\n                            <CheckCircle2 className=\"h-4 w-4 text-primary-600 dark:text-primary-400\" />\n                          </span>\n                          <p className=\"text-sm\">{t(\"getStartedPage.ignored_sections.benefit_2\")}</p>\n                        </div>\n                        <div className=\"flex items-start\">\n                          <span className=\"bg-primary-100 dark:bg-primary-800 rounded-full p-1 mr-2 flex-shrink-0\">\n                            <CheckCircle2 className=\"h-4 w-4 text-primary-600 dark:text-primary-400\" />\n                          </span>\n                          <p className=\"text-sm\">{t(\"getStartedPage.ignored_sections.benefit_3\")}</p>\n                        </div>\n                        <div className=\"flex items-start\">\n                          <span className=\"bg-primary-100 dark:bg-primary-800 rounded-full p-1 mr-2 flex-shrink-0\">\n                            <CheckCircle2 className=\"h-4 w-4 text-primary-600 dark:text-primary-400\" />\n                          </span>\n                          <p className=\"text-sm\">{t(\"getStartedPage.ignored_sections.benefit_4\")}</p>\n                        </div>\n                      </div>\n                      <div className=\"mt-3 bg-gray-50 dark:bg-gray-800 rounded p-3\">\n                        <p className=\"text-sm font-medium mb-1\">{t(\"getStartedPage.ignored_sections.config_example\")}</p>\n                        <pre className=\"text-xs bg-gray-900 text-gray-100 p-2 rounded overflow-x-auto\">\n{`aipi('init', {\n  apiKey: 'TU_API_KEY',\n  // Otras configuraciones...\n  ignoredSections: ['Menú principal', 'Footer', 'Sidebar', 'Publicidad'],\n});`}\n                        </pre>\n                      </div>\n                    </div>\n                    <div className=\"mt-4\">\n                      <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n{t(\"getStartedPage.ignored_sections.config_description\")}\n                      </p>\n                      <ol className=\"list-decimal list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                        <li>{t(\"getStartedPage.ignored_sections.step_1\")}</li>\n                        <li>{t(\"getStartedPage.ignored_sections.step_2\")}</li>\n                        <li>{t(\"getStartedPage.ignored_sections.step_3\")}</li>\n                        <li>{t(\"getStartedPage.ignored_sections.step_4\")}</li>\n                      </ol>\n                      {user ? (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/integrations\")}>\n{t(\"getStartedPage.buttons.configure_sections\")}\n                        </Button>\n                      ) : (\n                        <Button size=\"lg\" onClick={() => setLocation(\"/register\")}>\n{t(\"getStartedPage.buttons.create_account\")}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.fullscreen.step4.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n{t(\"getStartedPage.fullscreen.step4.description\")}\n                    </p>\n                    <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                      <li>{t(\"getStartedPage.fullscreen.step4.feature_1\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen.step4.feature_2\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen.step4.feature_3\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen.step4.feature_4\")}</li>\n                    </ul>\n                    {user ? (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/automations\")}>\n{t(\"getStartedPage.buttons.configure_assistant\")}\n                      </Button>\n                    ) : (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/register\")}>\n{t(\"getStartedPage.buttons.create_account\")}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.fullscreen.step5.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n{t(\"getStartedPage.fullscreen.step5.description\")}\n                    </p>\n                    <ul className=\"list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                      <li>{t(\"getStartedPage.fullscreen.step5.feature_1\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen.step5.feature_2\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen.step5.feature_3\")}</li>\n                      <li>{t(\"getStartedPage.fullscreen.step5.feature_4\")}</li>\n                    </ul>\n                    {user ? (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/dashboard/forms\")}>\n{t(\"getStartedPage.buttons.configure_advanced_forms\")}\n                      </Button>\n                    ) : (\n                      <Button size=\"lg\" onClick={() => setLocation(\"/register\")}>\n{t(\"getStartedPage.buttons.create_account_advanced\")}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n              </TabsContent>\n\n              <TabsContent value=\"form\" className=\"space-y-8\">\n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.form.step1.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n{t(\"getStartedPage.form.step1.description\")}\n                    </p>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg mb-4 relative\">\n                      <code className=\"text-sm\">{formWidgetCode}</code>\n                      <Button\n                        onClick={() => copyToClipboard(formWidgetCode, 'form')}\n                        className=\"absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600\"\n                        size=\"sm\"\n                      >\n                        {copiedForm ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                    {copiedForm && (\n                      <p className=\"text-green-600 dark:text-green-400 text-sm mb-4\">\n{t(\"getStartedPage.form.step1.copied\")}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.form.step2.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n{t(\"getStartedPage.form.step2.description\")}\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                      <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n                        <h3 className=\"font-semibold mb-2\">{t(\"getStartedPage.form.step2.basic_attributes\")}</h3>\n                        <ul className=\"text-sm space-y-1 text-gray-700 dark:text-gray-300\">\n                          <li><code>data-form-id</code>: {t(\"getStartedPage.form.step2.attributes.form_id\")}</li>\n                          <li><code>data-display-type</code>: {t(\"getStartedPage.form.step2.attributes.display_type\")}</li>\n                          <li><code>data-position</code>: {t(\"getStartedPage.form.step2.attributes.position\")}</li>\n                          <li><code>data-button-text</code>: {t(\"getStartedPage.form.step2.attributes.button_text\")}</li>\n                        </ul>\n                      </div>\n                      <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n                        <h3 className=\"font-semibold mb-2\">{t(\"getStartedPage.form.step2.customization_attributes\")}</h3>\n                        <ul className=\"text-sm space-y-1 text-gray-700 dark:text-gray-300\">\n                          <li><code>data-theme-color</code>: {t(\"getStartedPage.form.step2.attributes.theme_color\")}</li>\n                          <li><code>data-icon</code>: {t(\"getStartedPage.form.step2.attributes.icon\")}</li>\n                          <li><code>data-button-size</code>: {t(\"getStartedPage.form.step2.attributes.button_size\")}</li>\n                          <li><code>data-auto-show</code>: {t(\"getStartedPage.form.step2.attributes.auto_show\")}</li>\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 p-4 rounded-lg\">\n                      <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n<strong>{t(\"getStartedPage.form.step2.example_title\")}</strong>\n                      </p>\n                      <pre className=\"text-xs bg-gray-900 text-gray-100 p-2 rounded overflow-x-auto mt-2\">\n{`<script src=\"${baseUrl}/form-button.js?key=TU_API_KEY\" \n        data-form-id=\"1\" \n        data-display-type=\"modal\"\n        data-position=\"bottom-right\"\n        data-button-text=\"Contactar\"\n        data-theme-color=\"#3B82F6\"\n        data-icon=\"form\">\n</script>`}\n                      </pre>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n                  <div className=\"bg-gray-100 dark:bg-gray-800 py-4 px-6 border-b border-gray-200 dark:border-gray-700\">\n                    <h2 className=\"text-2xl font-bold\">{t(\"getStartedPage.form.step3.title\")}</h2>\n                  </div>\n                  <div className=\"p-6 bg-white dark:bg-gray-900\">\n                    <p className=\"mb-4 text-gray-700 dark:text-gray-300\">\n{t(\"getStartedPage.form.step3.description\")}\n                    </p>\n                    <ol className=\"list-decimal list-inside space-y-2 text-gray-700 dark:text-gray-300 mb-6\">\n                      {(t(\"getStartedPage.form.step3.dashboard_steps\", { returnObjects: true }) as string[]).map((step, index) => (\n                        <li key={index}>{step}</li>\n                      ))}\n                    </ol>\n                    {user ? (\n                      <Button \n                        onClick={() => setLocation(\"/dashboard?tab=forms\")}\n                        className=\"bg-primary-600 hover:bg-primary-700\"\n                      >\n{t(\"getStartedPage.buttons.go_to_forms\")}\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={() => setLocation(\"/login\")}\n                        className=\"bg-primary-600 hover:bg-primary-700\"\n                      >\n{t(\"getStartedPage.buttons.login_to_manage_forms\")}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n              </TabsContent>\n            </Tabs>\n            \n            <div className=\"mt-10 bg-primary-50 dark:bg-gray-800 rounded-lg p-6 border border-primary-100 dark:border-gray-700\">\n              <div className=\"flex flex-col md:flex-row justify-between items-center gap-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold mb-2 text-primary-900 dark:text-primary-400\">{t(\"getStartedPage.cta.forms_title\")}</h3>\n                  <p className=\"text-gray-700 dark:text-gray-300\">\n                    {t(\"getStartedPage.cta.forms_description\")}\n                  </p>\n                </div>\n                <Button size=\"lg\" asChild className=\"whitespace-nowrap\">\n                  <Link href=\"/forms-guide\">\n{t(\"getStartedPage.buttons.forms_guide\")}\n                  </Link>\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"mt-12 text-center\">\n              <h3 className=\"text-2xl font-bold mb-4\">{t(\"getStartedPage.support.title\")}</h3>\n              <p className=\"text-gray-700 dark:text-gray-300 mb-6 max-w-2xl mx-auto\">\n                {t(\"getStartedPage.support.description\")}\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button size=\"lg\" variant=\"outline\">\n{t(\"getStartedPage.buttons.view_docs\")}\n                </Button>\n                <Button size=\"lg\">\n{t(\"getStartedPage.buttons.contact_support\")}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n      \n      {/* Asistente de personalización flotante */}\n      <CustomizationAssistant />\n    </div>\n  );\n}","size_bytes":33861},"client/src/pages/google-calendar-instructions.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle, AlertTriangle, Check, Copy } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function GoogleCalendarInstructions() {\n  const { t } = useTranslation();\n  const [copied, setCopied] = useState(false);\n  const [authUrl, setAuthUrl] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [redirectUrl, setRedirectUrl] = useState(\"\");\n  const [customUrl, setCustomUrl] = useState(\"\");\n  const [useCustomUrl, setUseCustomUrl] = useState(false);\n  const [lastUsedUrl, setLastUsedUrl] = useState<string>(\"\");\n  const [showUrlComparison, setShowUrlComparison] = useState(false);\n  \n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setLoading(true);\n        \n        // Obtener la URL de redirección actual del servidor\n        const response = await fetch('/api/debug/environment', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error(\"Error al obtener información del entorno\");\n        }\n        \n        const data = await response.json();\n        // Usar la URL de redirección correcta\n        console.log(\"URL de redirección detectada:\", data.redirectUrl.google);\n        setRedirectUrl(data.redirectUrl.google);\n        \n        // Comprobar si hay una URL de autenticación guardada en localStorage\n        const savedAuthUrl = localStorage.getItem(\"googleAuthUrl\");\n        if (savedAuthUrl) {\n          setAuthUrl(savedAuthUrl);\n          // Limpiar después de obtenerla\n          localStorage.removeItem(\"googleAuthUrl\");\n        }\n      } catch (error) {\n        console.error(\"Error al cargar los datos:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchData();\n  }, []);\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(redirectUrl);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <div className=\"container mx-auto py-10 space-y-8\">\n      <h1 className=\"text-3xl font-bold\">Instrucciones para configurar Google Calendar</h1>\n      \n      <Alert variant=\"destructive\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Error de redirección</AlertTitle>\n        <AlertDescription>\n          Se ha detectado un error de coincidencia en la URL de redirección (redirect_uri_mismatch).\n          Siga las instrucciones a continuación para resolverlo.\n        </AlertDescription>\n      </Alert>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Configuración de la consola de Google Cloud</CardTitle>\n          <CardDescription>\n            Para permitir la conexión con Google Calendar, debe agregar la siguiente URL a las URLs de redirección autorizadas\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {loading ? (\n            <div className=\"flex items-center justify-center p-6\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" \n                   aria-label=\"Cargando\" />\n              <span className=\"ml-3\">Obteniendo URL de redirección...</span>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <Checkbox \n                  id=\"useCustomUrl\" \n                  checked={useCustomUrl} \n                  onCheckedChange={(checked) => setUseCustomUrl(checked === true)}\n                />\n                <label htmlFor=\"useCustomUrl\" className=\"text-sm font-medium\">\n                  Usar URL personalizada para la redirección\n                </label>\n              </div>\n              \n              {useCustomUrl ? (\n                <div className=\"space-y-2\">\n                  <div className=\"flex\">\n                    <Input \n                      value={customUrl}\n                      onChange={(e) => setCustomUrl(e.target.value)}\n                      placeholder=\"https://midominiopersonalizado.com/api/auth/google-calendar/callback\"\n                      className=\"flex-1\"\n                    />\n                    <Button \n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(customUrl);\n                        setCopied(true);\n                        setTimeout(() => setCopied(false), 2000);\n                      }}\n                      className=\"ml-2\"\n                    >\n                      {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Ingrese la URL completa que utilizará en su entorno de producción. \n                    Esta URL debe terminar con \"/api/auth/google-calendar/callback\" y debe ser \n                    <strong>exactamente igual</strong> a la configurada en la Consola de Google Cloud.\n                  </p>\n                  <div className=\"bg-yellow-50 text-amber-800 p-3 text-xs rounded border border-amber-200 mt-2\">\n                    <p className=\"font-bold\">Nota importante:</p>\n                    <p>Para evitar el error \"redirect_uri_mismatch\", debe copiar exactamente esta URL en Google Cloud Console. Asegúrese que no haya diferencias en:</p>\n                    <ul className=\"list-disc ml-4 mt-1 space-y-1\">\n                      <li>Protocolo (https:// vs http://)</li>\n                      <li>Subdominios (incluyendo los IDs de Replit)</li>\n                      <li>La ruta completa (/api/auth/google-calendar/callback)</li>\n                    </ul>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"p-4 bg-muted rounded-md flex justify-between items-center\">\n                  <code className=\"text-sm font-mono break-all\">{redirectUrl}</code>\n                  <Button \n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={copyToClipboard}\n                    className=\"ml-2\"\n                  >\n                    {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n          \n          <h3 className=\"font-semibold text-lg mt-4\">Pasos a seguir:</h3>\n          <ol className=\"list-decimal pl-6 space-y-2\">\n            <li>Vaya a la <a href=\"https://console.cloud.google.com/apis/credentials\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary underline\">Consola de Google Cloud - Credenciales</a></li>\n            <li>Seleccione su proyecto</li>\n            <li>Busque la sección \"IDs de cliente OAuth 2.0\" y haga clic en el ID de cliente que está utilizando</li>\n            <li>En \"URI de redirección autorizados\" agregue la URL mostrada arriba</li>\n            <li>Guarde los cambios haciendo clic en \"Guardar\"</li>\n            <li>Espere unos minutos para que la configuración se propague</li>\n            <li>Regrese a la aplicación e intente conectar Google Calendar nuevamente</li>\n          </ol>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Diagnóstico del error</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>\n            El error \"redirect_uri_mismatch\" ocurre porque Google Cloud requiere que todas las URLs de redirección\n            estén explícitamente autorizadas por motivos de seguridad. La URL que está intentando usar no coincide\n            con ninguna de las URLs configuradas en su consola de Google Cloud.\n          </p>\n          \n          <div className=\"mt-4\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => setShowUrlComparison(!showUrlComparison)}\n              className=\"mb-2\"\n            >\n              {showUrlComparison ? \"Ocultar detalles técnicos\" : \"Mostrar detalles técnicos\"}\n            </Button>\n            \n            {showUrlComparison && (\n              <div className=\"bg-muted p-4 rounded-md mt-2 text-sm\">\n                <h4 className=\"font-semibold mb-2 flex items-center\">\n                  <AlertTriangle className=\"h-4 w-4 mr-2 text-amber-500\" />\n                  Diagnóstico de error redirect_uri_mismatch\n                </h4>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"font-medium\">URL configurada en Google Cloud (debe verificar):</div>\n                    <div className=\"bg-gray-100 p-2 rounded border font-mono text-xs break-all\">\n                      https://...your-configured-url.../api/auth/google-calendar/callback\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <div className=\"font-medium\">URL actual que se está usando:</div>\n                    <div className=\"bg-gray-100 p-2 rounded border font-mono text-xs break-all\">\n                      {useCustomUrl ? customUrl : redirectUrl}\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-amber-50 p-3 rounded border border-amber-200 text-xs\">\n                    <p>La solución es asegurarse de que las URL sean <strong>exactamente iguales</strong>, con:</p>\n                    <ul className=\"list-disc ml-4 mt-1\">\n                      <li>El mismo protocolo (https:// o http://)</li>\n                      <li>El mismo dominio y subdominio completo</li>\n                      <li>La misma ruta (/api/auth/google-calendar/callback)</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <p className=\"mt-4\">\n            Una vez que agregue la URL correcta a la lista de redirecciones autorizadas, la autenticación debería\n            funcionar correctamente.\n          </p>\n          \n          <div className=\"mt-6 border-t pt-4\">\n            <h3 className=\"font-semibold text-lg mb-2\">Continuar con la autorización</h3>\n            <p className=\"mb-4\">Después de actualizar las URLs de redirección en Google Cloud, puede continuar con el proceso de autorización:</p>\n            \n            {authUrl ? (\n              <Button \n                onClick={() => window.location.href = authUrl}\n                className=\"w-full\"\n              >\n                Continuar con la autorización de Google Calendar\n              </Button>\n            ) : (\n              <Button \n                onClick={async () => {\n                  try {\n                    setLoading(true);\n                    const response = await fetch(`/api/auth/google-calendar-url${useCustomUrl ? `?customRedirectUrl=${encodeURIComponent(customUrl)}` : ''}`, {\n                      headers: {\n                        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n                      }\n                    });\n                    \n                    if (!response.ok) {\n                      throw new Error(\"Error al obtener URL de autenticación\");\n                    }\n                    \n                    const data = await response.json();\n                    window.location.href = data.authUrl;\n                  } catch (error) {\n                    console.error(\"Error al iniciar la autenticación:\", error);\n                    alert(\"Error al obtener URL de autenticación. Por favor, intente nuevamente.\");\n                  } finally {\n                    setLoading(false);\n                  }\n                }}\n                className=\"w-full\"\n                disabled={useCustomUrl && !customUrl.trim()}\n              >\n                Obtener URL de autorización de Google Calendar\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12436},"client/src/pages/help.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Book, MessageCircle, Settings, Code, CreditCard, Users } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\n\nexport default function Help() {\n  const { t } = useTranslation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const categories = [\n    {\n      icon: Book,\n      title: t('help.categories.getting_started.title'),\n      description: t('help.categories.getting_started.description'),\n      articles: [\n        t('help.categories.getting_started.article1'),\n        t('help.categories.getting_started.article2'),\n        t('help.categories.getting_started.article3'),\n        t('help.categories.getting_started.article4')\n      ]\n    },\n    {\n      icon: Settings,\n      title: t('help.categories.configuration.title'),\n      description: t('help.categories.configuration.description'),\n      articles: [\n        t('help.categories.configuration.article1'),\n        t('help.categories.configuration.article2'),\n        t('help.categories.configuration.article3'),\n        t('help.categories.configuration.article4')\n      ]\n    },\n    {\n      icon: Code,\n      title: t('help.categories.integration.title'),\n      description: t('help.categories.integration.description'),\n      articles: [\n        t('help.categories.integration.article1'),\n        t('help.categories.integration.article2'),\n        t('help.categories.integration.article3'),\n        t('help.categories.integration.article4')\n      ]\n    },\n    {\n      icon: CreditCard,\n      title: t('help.categories.billing.title'),\n      description: t('help.categories.billing.description'),\n      articles: [\n        t('help.categories.billing.article1'),\n        t('help.categories.billing.article2'),\n        t('help.categories.billing.article3'),\n        t('help.categories.billing.article4')\n      ]\n    },\n    {\n      icon: MessageCircle,\n      title: t('help.categories.troubleshooting.title'),\n      description: t('help.categories.troubleshooting.description'),\n      articles: [\n        t('help.categories.troubleshooting.article1'),\n        t('help.categories.troubleshooting.article2'),\n        t('help.categories.troubleshooting.article3'),\n        t('help.categories.troubleshooting.article4')\n      ]\n    },\n    {\n      icon: Users,\n      title: t('help.categories.account.title'),\n      description: t('help.categories.account.description'),\n      articles: [\n        t('help.categories.account.article1'),\n        t('help.categories.account.article2'),\n        t('help.categories.account.article3'),\n        t('help.categories.account.article4')\n      ]\n    }\n  ];\n\n  const popularArticles = [\n    t('help.popular.article1'),\n    t('help.popular.article2'),\n    t('help.popular.article3'),\n    t('help.popular.article4'),\n    t('help.popular.article5')\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"py-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n              {t('help.title')}\n            </h1>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto mb-8\">\n              {t('help.subtitle')}\n            </p>\n            \n            {/* Search Bar */}\n            <div className=\"max-w-2xl mx-auto\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n                <Input\n                  type=\"text\"\n                  placeholder={t('help.search_placeholder')}\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-4 py-3 text-lg\"\n                />\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"py-16\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n            {/* Popular Articles */}\n            <div className=\"mb-16\">\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center\">\n                {t('help.popular.title')}\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {popularArticles.map((article, index) => (\n                  <Card key={index} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">{article}</CardTitle>\n                      <Badge variant=\"secondary\">{t('help.popular.badge')}</Badge>\n                    </CardHeader>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Categories */}\n            <div>\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center\">\n                {t('help.categories.title')}\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {categories.map((category, index) => {\n                  const IconComponent = category.icon;\n                  return (\n                    <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <IconComponent className=\"h-8 w-8 text-primary-600\" />\n                          <CardTitle className=\"text-xl\">{category.title}</CardTitle>\n                        </div>\n                        <CardDescription>{category.description}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <ul className=\"space-y-2\">\n                          {category.articles.map((article, articleIndex) => (\n                            <li key={articleIndex}>\n                              <a href=\"#\" className=\"text-primary-600 hover:text-primary-800 text-sm\">\n                                {article}\n                              </a>\n                            </li>\n                          ))}\n                        </ul>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Contact Support */}\n            <div className=\"mt-16\">\n              <Card className=\"bg-primary-50 dark:bg-primary-900/20 border-primary-200 dark:border-primary-800\">\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"text-2xl text-primary-900 dark:text-primary-100\">\n                    {t('help.contact_support.title')}\n                  </CardTitle>\n                  <CardDescription className=\"text-primary-700 dark:text-primary-300\">\n                    {t('help.contact_support.description')}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"text-center\">\n                  <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                    <Button asChild>\n                      <Link href=\"/contact\">\n                        {t('help.contact_support.contact_button')}\n                      </Link>\n                    </Button>\n                    <Button variant=\"outline\" asChild>\n                      <a href=\"mailto:support@aipps.ca\">\n                        {t('help.contact_support.email_button')}\n                      </a>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":8169},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogTrigger,\n  DialogClose\n} from \"@/components/ui/dialog\";\nimport { \n  Tabs, \n  TabsContent, \n  TabsList, \n  TabsTrigger \n} from \"@/components/ui/tabs\";\nimport { useTheme } from \"@/context/theme-context\";\nimport { useAuth } from \"@/context/auth-context\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport ChatInterface from \"@/components/chat-interface\";\nimport { RotatingWelcomeMessage } from \"@/components/RotatingWelcomeMessage\";\nimport { Bot, Code, BarChart3, Rocket, CopyIcon, Globe, Shield, Zap } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function Home() {\n  const [location, setLocation] = useState(\"/\");\n  const { theme } = useTheme();\n  const { user } = useAuth();\n  const [copied, setCopied] = useState(false);\n  const { t } = useTranslation();\n  const [welcomeChatSettings, setWelcomeChatSettings] = useState<any>(null);\n  \n  // Cargar configuración del chatbot de la página de bienvenida\n  useEffect(() => {\n    const fetchWelcomeChatSettings = async () => {\n      try {\n        const response = await fetch('/api/welcome-chat-settings');\n        if (response.ok) {\n          const data = await response.json();\n          setWelcomeChatSettings(data);\n        } else {\n          console.error('Error fetching welcome chat settings');\n        }\n      } catch (error) {\n        console.error('Failed to fetch welcome chat settings:', error);\n      }\n    };\n    \n    fetchWelcomeChatSettings();\n  }, []);\n  \n  // Función para copiar el código de integración\n  const copyIntegrationCode = () => {\n   const code = `<script src=\"https://aipps.ca/static/aipps-web-widget.js?key=aipps_web_internal\"></script>`;\n    navigator.clipboard.writeText(code);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n  \n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        {/* Hero Section */}\n        <section className=\"py-12 sm:py-16 md:py-20 lg:py-24\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex flex-col lg:flex-row items-center gap-8 lg:gap-12\">\n              <div className=\"flex-1 lg:w-1/2 text-center lg:text-left\">\n                <h1 className=\"text-4xl md:text-5xl font-extrabold text-gray-900 dark:text-white mb-4\">\n                  {t(\"welcome\")}\n                </h1>\n                <RotatingWelcomeMessage className=\"text-lg text-gray-700 dark:text-gray-300 mb-8\" />\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Button size=\"lg\" className=\"bg-indigo-500 hover:bg-indigo-600 text-white dark:bg-indigo-600 dark:hover:bg-indigo-700 border-0\" asChild>\n                    <Link href=\"/get-started\">{t(\"getStarted\")}</Link>\n                  </Button>\n                  \n                  <Button size=\"lg\" variant=\"outline\" className=\"border-gray-600 dark:border-gray-400 text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700\" asChild>\n                    <Link href=\"/docs\">{t(\"learnMore\")}</Link>\n                  </Button>\n                </div>\n              </div>\n              <div className=\"flex-1 lg:w-1/2\">\n                <div className=\"backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-white/20 dark:border-gray-800/30 rounded-lg shadow-xl p-4 md:p-6 max-w-md mx-auto lg:mx-0 lg:ml-auto\">\n                  <ChatInterface \n                    demoMode={true} \n                    welcomePageSettings={welcomeChatSettings}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n        \n        {/* Features Section */}\n        <section className=\"py-16 bg-white dark:bg-gray-900\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                {t(\"features.title\")}\n              </h2>\n              <p className=\"text-lg text-gray-600 dark:text-gray-400 max-w-3xl mx-auto mb-8\">\n                {t(\"features.subtitle\")}\n              </p>\n              <p className=\"text-base text-gray-500 dark:text-gray-500 max-w-4xl mx-auto\">\n                {t(\"features.detailedDescription\")}\n              </p>\n            </div>\n            \n            {/* Main Features Grid */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 md:gap-8 mb-16\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"rounded-full bg-primary-100 dark:bg-primary-900 p-3 w-12 h-12 flex items-center justify-center mb-4\">\n                    <Bot className=\"text-primary-600 dark:text-primary-400\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">{t(\"features.conversationalAI.title\")}</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {t(\"features.conversationalAI.description\")}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"rounded-full bg-primary-100 dark:bg-primary-900 p-3 w-12 h-12 flex items-center justify-center mb-4\">\n                    <Rocket className=\"text-primary-600 dark:text-primary-400\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">{t(\"features.taskAutomation.title\")}</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {t(\"features.taskAutomation.description\")}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"rounded-full bg-primary-100 dark:bg-primary-900 p-3 w-12 h-12 flex items-center justify-center mb-4\">\n                    <Code className=\"text-primary-600 dark:text-primary-400\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">{t(\"features.easyIntegration.title\")}</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {t(\"features.easyIntegration.description\")}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"rounded-full bg-primary-100 dark:bg-primary-900 p-3 w-12 h-12 flex items-center justify-center mb-4\">\n                    <BarChart3 className=\"text-primary-600 dark:text-primary-400\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">{t(\"features.analytics.title\")}</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {t(\"features.analytics.description\")}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Additional Features Section */}\n            <div className=\"mt-16\">\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-8 text-center\">\n                {t(\"features.advanced.title\")}\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                <Card className=\"border-l-4 border-l-blue-500\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center mb-4\">\n                      <Globe className=\"h-6 w-6 text-blue-500 mr-3\" />\n                      <h4 className=\"text-lg font-semibold\">{t(\"features.advanced.multilingual.title\")}</h4>\n                    </div>\n                    <p className=\"text-gray-600 dark:text-gray-400 mb-3\">\n                      {t(\"features.advanced.multilingual.description\")}\n                    </p>\n                    <ul className=\"text-sm text-gray-500 dark:text-gray-500 space-y-1\">\n                      <li>• {t(\"features.advanced.multilingual.feature1\")}</li>\n                      <li>• {t(\"features.advanced.multilingual.feature2\")}</li>\n                      <li>• {t(\"features.advanced.multilingual.feature3\")}</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"border-l-4 border-l-green-500\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center mb-4\">\n                      <Shield className=\"h-6 w-6 text-green-500 mr-3\" />\n                      <h4 className=\"text-lg font-semibold\">{t(\"features.advanced.security.title\")}</h4>\n                    </div>\n                    <p className=\"text-gray-600 dark:text-gray-400 mb-3\">\n                      {t(\"features.advanced.security.description\")}\n                    </p>\n                    <ul className=\"text-sm text-gray-500 dark:text-gray-500 space-y-1\">\n                      <li>• {t(\"features.advanced.security.feature1\")}</li>\n                      <li>• {t(\"features.advanced.security.feature2\")}</li>\n                      <li>• {t(\"features.advanced.security.feature3\")}</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"border-l-4 border-l-purple-500\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center mb-4\">\n                      <Zap className=\"h-6 w-6 text-purple-500 mr-3\" />\n                      <h4 className=\"text-lg font-semibold\">{t(\"features.advanced.customization.title\")}</h4>\n                    </div>\n                    <p className=\"text-gray-600 dark:text-gray-400 mb-3\">\n                      {t(\"features.advanced.customization.description\")}\n                    </p>\n                    <ul className=\"text-sm text-gray-500 dark:text-gray-500 space-y-1\">\n                      <li>• {t(\"features.advanced.customization.feature1\")}</li>\n                      <li>• {t(\"features.advanced.customization.feature2\")}</li>\n                      <li>• {t(\"features.advanced.customization.feature3\")}</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </section>\n        \n        {/* Call to Action */}\n        <section className=\"py-16 bg-primary-600 dark:bg-primary-900\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h2 className=\"text-3xl font-bold text-black dark:text-white mb-4\">\n              {t(\"cta.title\")}\n            </h2>\n            <p className=\"text-xl text-gray-800 dark:text-white mb-8 max-w-3xl mx-auto\">\n              {t(\"cta.subtitle\")}\n            </p>\n            <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n              <Button size=\"lg\" variant=\"secondary\" asChild>\n                <Link href=\"/register\">{t(\"cta.getStartedFree\")}</Link>\n              </Button>\n              <Button size=\"lg\" variant=\"outline\" className=\"bg-transparent border-gray-800 dark:border-white text-gray-800 dark:text-white hover:bg-primary-700\" asChild>\n                <Link href=\"/contact\">{t(\"cta.scheduleDemo\")}</Link>\n              </Button>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11784},"client/src/pages/integration-analytics.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { \n  ChevronLeft, \n  BarChart2, \n  PieChart, \n  LineChart, \n  Users, \n  MessageSquare, \n  CheckCircle,\n  ShoppingCart,\n  MessageCircle,\n  Tag,\n  Download\n} from \"lucide-react\";\nimport DashboardLayout from \"@/layouts/dashboard-layout\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  PieChart as RePieChart,\n  Pie,\n  Cell,\n  LineChart as ReLineChart,\n  Line,\n  AreaChart,\n  Area,\n} from \"recharts\";\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from 'html2canvas';\nimport autoTable from 'jspdf-autotable';\nimport KeywordCloud from \"@/components/analytics/keyword-cloud\";\n\n// Colores para los gráficos\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\nexport default function IntegrationAnalytics() {\n  const { id } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n  const { t } = useTranslation();\n  \n  // Obtener la integración específica\n  const { data: integration, isLoading: isLoadingIntegration } = useQuery({\n    queryKey: [`/api/integrations/${id}`],\n  });\n\n  // Obtener estadísticas específicas de esta integración\n  const { data: stats, isLoading: isLoadingStats } = useQuery({\n    queryKey: [`/api/analytics/integration/${id}`],\n  });\n\n  // Obtener conversaciones de esta integración para crear gráficos\n  const { data: conversations, isLoading: isLoadingConversations } = useQuery({\n    queryKey: [`/api/integrations/${id}/conversations`],\n  });\n\n  // Función para preparar datos para el gráfico de tendencias (podrían ser por día)\n  const prepareConversationTrendData = () => {\n    if (!stats?.conversationTrend) return [];\n    return stats.conversationTrend;\n  };\n\n  // Función para preparar datos para el gráfico de resolución\n  const prepareResolutionData = () => {\n    if (!stats) return [];\n    \n    return [\n      { name: t('resolved'), value: stats.resolvedConversations || 0 },\n      { name: t('active'), value: (stats.totalConversations || 0) - (stats.resolvedConversations || 0) }\n    ];\n  };\n\n  // Preparar datos para top productos\n  const prepareTopProductsData = () => {\n    if (!stats?.topProducts) return [];\n    return stats.topProducts.slice(0, 5); // Solo los top 5\n  };\n\n  // Preparar datos para top temas\n  const prepareTopTopicsData = () => {\n    if (!stats?.topTopics) return [];\n    return stats.topTopics.slice(0, 5); // Solo los top 5\n  };\n  \n  // Función para generar y descargar el informe PDF\n  const downloadPdfReport = async () => {\n    if (!integration || !stats) return;\n    \n    try {\n      // Capturar gráficos como imágenes\n      const trendChartElement = document.getElementById('trend-chart');\n      const resolutionChartElement = document.getElementById('resolution-chart');\n      const productsChartElement = document.getElementById('products-chart');\n      const topicsChartElement = document.getElementById('topics-chart');\n      \n      // Crear nuevo documento PDF\n      const doc = new jsPDF();\n      const pageWidth = doc.internal.pageSize.getWidth();\n      const pageHeight = doc.internal.pageSize.getHeight();\n      const date = new Date().toLocaleDateString();\n      \n      // Título y metadatos del informe\n      doc.setFontSize(18);\n      doc.text(`Reporte de Analíticas: ${integration.name}`, pageWidth / 2, 20, { align: 'center' });\n      doc.setFontSize(10);\n      doc.text(`Generado: ${date}`, pageWidth / 2, 28, { align: 'center' });\n      doc.setLineWidth(0.5);\n      doc.line(15, 35, pageWidth - 15, 35);\n      \n      // Resumen de estadísticas\n      doc.setFontSize(14);\n      doc.text('Resumen', 15, 45);\n      \n      const summaryData = [\n        ['Conversaciones Totales', stats.totalConversations || 0],\n        ['Conversaciones Resueltas', stats.resolvedConversations || 0],\n        ['Tasa de Resolución', stats.totalConversations \n          ? `${Math.round((stats.resolvedConversations / stats.totalConversations) * 100)}%`\n          : '0%'],\n        ['Mensajes Totales', stats.messageCount || 0],\n        ['Mensajes de Usuario', stats.userMessageCount || 0],\n        ['Mensajes del Asistente', stats.assistantMessageCount || 0],\n        ['Visitantes Únicos', stats.uniqueVisitors || 0],\n      ];\n      \n      // Añadir tabla de resumen\n      autoTable(doc, {\n        head: [['Métrica', 'Valor']],\n        body: summaryData,\n        startY: 50,\n        theme: 'grid',\n        styles: { fontSize: 10 },\n        headStyles: { fillColor: [66, 66, 66] }\n      });\n      \n      // Obtener posición después de la tabla\n      let lastY = 130;\n      \n      // Añadir tendencia de conversaciones (gráfico)\n      if (trendChartElement) {\n        try {\n          doc.setFontSize(14);\n          doc.text('Tendencia de Conversaciones', 15, lastY);\n          \n          const trendCanvas = await html2canvas(trendChartElement);\n          const trendImgData = trendCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            trendImgData, \n            'PNG', \n            15, // x\n            lastY + 5, // y\n            imgWidth, \n            imgHeight\n          );\n          \n          lastY += imgHeight + 15;\n        } catch (error) {\n          console.error('Error al capturar gráfico de tendencias:', error);\n          doc.setFontSize(10);\n          doc.text('Error al generar gráfico de tendencias', 15, lastY + 5);\n          lastY += 10;\n        }\n      }\n      \n      // Añadir detalles de resolución (gráfico)\n      if (resolutionChartElement && lastY < pageHeight - 30) {\n        try {\n          // Si no hay espacio suficiente, nueva página\n          if (lastY > pageHeight - 120) {\n            doc.addPage();\n            lastY = 20;\n          }\n          \n          doc.setFontSize(14);\n          doc.text('Estado de Resolución', 15, lastY);\n          \n          const resolutionCanvas = await html2canvas(resolutionChartElement);\n          const resolutionImgData = resolutionCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            resolutionImgData, \n            'PNG', \n            15, // x\n            lastY + 5, // y\n            imgWidth, \n            imgHeight\n          );\n          \n          lastY += imgHeight + 15;\n        } catch (error) {\n          console.error('Error al capturar gráfico de resolución:', error);\n        }\n      }\n      \n      // Nueva página para productos y temas\n      doc.addPage();\n      lastY = 20;\n      \n      // Añadir productos más mencionados (gráfico)\n      if (productsChartElement) {\n        try {\n          doc.setFontSize(14);\n          doc.text('Productos más Mencionados', 15, lastY);\n          \n          const productsCanvas = await html2canvas(productsChartElement);\n          const productsImgData = productsCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            productsImgData, \n            'PNG', \n            15, // x\n            lastY + 5, // y\n            imgWidth, \n            imgHeight\n          );\n          \n          lastY += imgHeight + 15;\n        } catch (error) {\n          console.error('Error al capturar gráfico de productos:', error);\n          \n          // Mostrar datos en forma de tabla si falla la captura del gráfico\n          if (stats.topProducts && stats.topProducts.length > 0) {\n            const productsData = stats.topProducts.map(item => [item.name, item.frequency]);\n            \n            autoTable(doc, {\n              head: [['Producto', 'Menciones']],\n              body: productsData,\n              startY: lastY + 5,\n              theme: 'grid',\n              styles: { fontSize: 10 },\n              headStyles: { fillColor: [66, 66, 66] }\n            });\n            lastY += 50; // Estimación después de tabla\n          } else {\n            doc.setFontSize(10);\n            doc.text('No hay datos de productos disponibles.', 15, lastY + 5);\n            lastY += 10;\n          }\n        }\n      }\n      \n      // Añadir temas más discutidos (gráfico)\n      if (topicsChartElement && lastY < pageHeight - 30) {\n        try {\n          // Si no hay espacio suficiente, nueva página\n          if (lastY > pageHeight - 120) {\n            doc.addPage();\n            lastY = 20;\n          }\n          \n          doc.setFontSize(14);\n          doc.text('Temas más Discutidos', 15, lastY);\n          \n          const topicsCanvas = await html2canvas(topicsChartElement);\n          const topicsImgData = topicsCanvas.toDataURL('image/png');\n          \n          // Ajustar tamaño para que quepa en la página\n          const imgWidth = 180;\n          const imgHeight = 100;\n          \n          doc.addImage(\n            topicsImgData, \n            'PNG', \n            15, // x\n            lastY + 5, // y\n            imgWidth, \n            imgHeight\n          );\n        } catch (error) {\n          console.error('Error al capturar gráfico de temas:', error);\n          \n          // Mostrar datos en forma de tabla si falla la captura del gráfico\n          if (stats.topTopics && stats.topTopics.length > 0) {\n            const topicsData = stats.topTopics.map(item => [item.topic, item.frequency]);\n            \n            autoTable(doc, {\n              head: [['Tema', 'Menciones']],\n              body: topicsData,\n              startY: lastY + 5,\n              theme: 'grid',\n              styles: { fontSize: 10 },\n              headStyles: { fillColor: [66, 66, 66] }\n            });\n          } else {\n            doc.setFontSize(10);\n            doc.text('No hay datos de temas disponibles.', 15, lastY + 5);\n          }\n        }\n      }\n      \n      // Añadir pie de página\n      const pageCount = doc.getNumberOfPages();\n      for (let i = 1; i <= pageCount; i++) {\n        doc.setPage(i);\n        doc.setFontSize(8);\n        doc.text(`Página ${i} de ${pageCount} - AIPI Analytics`, pageWidth / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });\n      }\n      \n      // Guardar el PDF\n      doc.save(`analytics_${integration.name.replace(/\\s+/g, '_')}_${date.replace(/\\//g, '-')}.pdf`);\n    } catch (error) {\n      console.error('Error al generar PDF:', error);\n      alert('Hubo un error al generar el PDF. Por favor intente de nuevo.');\n    }\n  };\n\n  return (\n    <DashboardLayout>\n      <div className=\"w-full max-w-full px-6 py-6\">\n        <div className=\"flex flex-wrap items-center justify-between mb-6\">\n          <div className=\"flex items-center\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              className=\"mr-2\" \n              onClick={() => navigate(\"/dashboard?tab=integrations\")}\n              title={t('back')}\n            >\n              <ChevronLeft className=\"h-5 w-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\">\n                {isLoadingIntegration \n                  ? t('loading') \n                  : `${t('analytics_for')} ${integration?.name || id}`}\n              </h1>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                {t('view_performance_metrics_for_integration')}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex gap-4\">\n            <Button \n              onClick={() => navigate(`/integrations/${id}/edit`)}\n              variant=\"outline\"\n            >\n              {t('edit_integration')}\n            </Button>\n            <Button \n              onClick={() => navigate(`/integrations/${id}/conversations`)}\n              variant=\"outline\"\n            >\n              {t('view_conversations')}\n            </Button>\n            <Button \n              onClick={downloadPdfReport}\n              variant=\"default\"\n              className=\"flex items-center gap-2\"\n              disabled={isLoadingStats || isLoadingIntegration}\n            >\n              <Download className=\"h-4 w-4\" />\n              {t('download_pdf') || \"Descargar PDF\"}\n            </Button>\n          </div>\n        </div>\n\n        {isLoadingStats || isLoadingConversations ? (\n          <div className=\"w-full py-20 flex justify-center\">\n            <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : (\n          <>\n            {/* Tarjetas de resumen */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    {t('total_conversations')}\n                  </CardTitle>\n                  <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {stats?.totalConversations || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {stats?.messageCount ? t('total_messages', { count: stats.messageCount }) : t('no_messages')}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    {t('resolution_rate')}\n                  </CardTitle>\n                  <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {stats?.totalConversations \n                      ? `${Math.round((stats.resolvedConversations / stats.totalConversations) * 100)}%`\n                      : '0%'}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {stats?.totalConversations \n                      ? t('resolved_conversations_count', { \n                          count: stats.resolvedConversations,\n                          total: stats.totalConversations\n                        })\n                      : t('no_conversations_to_resolve')}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    {t('message_distribution')}\n                  </CardTitle>\n                  <MessageCircle className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {stats?.userMessageCount \n                      ? `${Math.round((stats.userMessageCount / stats.messageCount) * 100)}% / ${Math.round((stats.assistantMessageCount / stats.messageCount) * 100)}%`\n                      : '0% / 0%'}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('user_vs_assistant_messages')}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Gráficos principales */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('conversation_trend')}</CardTitle>\n                  <CardDescription>\n                    {t('conversations_over_time')}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\" id=\"trend-chart\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <AreaChart\n                        data={prepareConversationTrendData()}\n                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                      >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Area\n                          type=\"monotone\"\n                          dataKey=\"count\"\n                          name={t('conversations')}\n                          stroke=\"#8884d8\"\n                          fill=\"#8884d8\"\n                          fillOpacity={0.3}\n                        />\n                      </AreaChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('resolution_status')}</CardTitle>\n                  <CardDescription>\n                    {t('resolved_vs_active_conversations')}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\" id=\"resolution-chart\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <RePieChart>\n                        <Pie\n                          data={prepareResolutionData()}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {prepareResolutionData().map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </RePieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Gráficos de productos y temas */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <div>\n                    <CardTitle>{t('top_products')}</CardTitle>\n                    <CardDescription>\n                      {t('most_mentioned_products')}\n                    </CardDescription>\n                  </div>\n                  <ShoppingCart className=\"h-5 w-5 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\" id=\"products-chart\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart\n                        data={prepareTopProductsData()}\n                        layout=\"vertical\"\n                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                      >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis type=\"number\" />\n                        <YAxis dataKey=\"name\" type=\"category\" width={150} />\n                        <Tooltip />\n                        <Legend />\n                        <Bar dataKey=\"frequency\" name={t('mentions')} fill=\"#00C49F\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <div>\n                    <CardTitle>{t('top_topics')}</CardTitle>\n                    <CardDescription>\n                      {t('most_discussed_topics')}\n                    </CardDescription>\n                  </div>\n                  <Tag className=\"h-5 w-5 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\" id=\"topics-chart\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart\n                        data={prepareTopTopicsData()}\n                        layout=\"vertical\"\n                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                      >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis type=\"number\" />\n                        <YAxis dataKey=\"topic\" type=\"category\" width={150} />\n                        <Tooltip />\n                        <Legend />\n                        <Bar dataKey=\"frequency\" name={t('mentions')} fill=\"#8884d8\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Keywords Cloud Section */}\n            <div className=\"grid grid-cols-1 gap-6 mb-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center\">\n                  <div className=\"grid gap-2\">\n                    <CardTitle>{t('keyword_cloud')}</CardTitle>\n                    <CardDescription>\n                      {t('frequently_mentioned_keywords')}\n                    </CardDescription>\n                  </div>\n                  <Tag className=\"h-5 w-5 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <KeywordCloud \n                    data={stats?.keywordFrequency || []} \n                    loading={isLoadingStats}\n                  />\n                </CardContent>\n              </Card>\n            </div>\n          </>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":22493},"client/src/pages/integration-conversations.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  ChevronLeft,\n  Info,\n  MessageSquare,\n  Search,\n  User,\n  Calendar,\n  Check,\n  X,\n} from \"lucide-react\";\nimport DashboardLayout from \"@/layouts/dashboard-layout\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatRelativeTime } from \"@/utils/format-time\";\nimport { debugTranslations } from \"@/utils/debug-translations\";\n\nexport default function IntegrationConversations() {\n  const { id } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n  const { t, i18n } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n  // Debug translations (remove in production)\n  // const debugInfo = debugTranslations();\n  // console.log('🔍 DASHBOARD TRANSLATION STATE:', debugInfo);\n\n\n  \n  // Obtener la integración para mostrar su nombre\n  const { data: integration, isLoading: isLoadingIntegration } = useQuery({\n    queryKey: [`/api/integrations/${id}`, i18n.language],\n  });\n\n  // Obtener conversaciones específicas de esta integración\n  const { data: conversations, isLoading: isLoadingConversations } = useQuery({\n    queryKey: [`/api/integrations/${id}/conversations`, i18n.language],\n  });\n\n  // Filtrar conversaciones por término de búsqueda\n  const filteredConversations = conversations && searchTerm\n    ? conversations.filter((conversation: any) => \n        conversation.visitorId?.toString().includes(searchTerm) ||\n        new Date(conversation.createdAt).toLocaleString().includes(searchTerm))\n    : conversations;\n\n  return (\n    <DashboardLayout>\n      <div className=\"w-full max-w-full px-6 py-6\">\n        <div className=\"flex flex-wrap items-center justify-between gap-4 mb-6\">\n          <div className=\"flex items-center\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              className=\"mr-2\" \n              onClick={() => navigate(\"/dashboard?tab=integrations\")}\n              title={t('back')}\n            >\n              <ChevronLeft className=\"h-5 w-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\">\n                {isLoadingIntegration \n                  ? t('loading') \n                  : `${t('conversations_for')} ${integration?.name || id}`}\n              </h1>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                {t('view_all_conversations_for_integration')}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400\" />\n              <Input\n                type=\"search\"\n                placeholder={t('search_conversations')}\n                className=\"pl-8 w-full md:w-[200px] lg:w-[300px]\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n            <Button \n              onClick={() => navigate(`/integrations/${id}/edit`)}\n              variant=\"outline\"\n            >\n              {t('edit_integration')}\n            </Button>\n            <Button \n              onClick={() => navigate(`/integrations/${id}/analytics`)}\n              variant=\"outline\"\n            >\n              {t('view_analytics')}\n            </Button>\n            <Button \n              onClick={() => navigate(`/conversations/new`)}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n            >\n              + {t('new', 'NUEVA')}\n            </Button>\n          </div>\n        </div>\n\n        {isLoadingConversations ? (\n          <div className=\"w-full py-20 flex justify-center\">\n            <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n          </div>\n        ) : filteredConversations && filteredConversations.length > 0 ? (\n          <div className=\"grid gap-4\">\n            {filteredConversations.map((conversation: any) => (\n              <Card \n                key={conversation.id}\n                className=\"p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors cursor-pointer\"\n                onClick={() => navigate(`/conversations/${conversation.id}`)}\n              >\n                <div className=\"flex flex-wrap justify-between gap-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"bg-primary/10 w-10 h-10 rounded-full flex items-center justify-center\">\n                      <MessageSquare className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-medium\">\n                          {t('visitor')}: {conversation.visitorId || t('anonymous')}\n                        </h3>\n                        <Badge variant={conversation.resolved ? \"success\" : \"default\"}>\n                          {conversation.resolved ? t('resolved') : t('active')}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-3.5 w-3.5\" />\n                          <span>{formatRelativeTime(conversation.createdAt, t)}</span>\n                        </div>\n                        {conversation.messageCount && (\n                          <div className=\"flex items-center gap-1\">\n                            <MessageSquare className=\"h-3.5 w-3.5\" />\n                            <span>{conversation.messageCount} {t('messages')}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {conversation.resolution !== undefined && (\n                      <Badge variant={conversation.resolution ? \"success\" : \"destructive\"}>\n                        {conversation.resolution ? (\n                          <span className=\"flex items-center gap-1\">\n                            <Check className=\"h-3 w-3\" />\n                            {t('resolved')}\n                          </span>\n                        ) : (\n                          <span className=\"flex items-center gap-1\">\n                            <X className=\"h-3 w-3\" />\n                            {t('unresolved')}\n                          </span>\n                        )}\n                      </Badge>\n                    )}\n                    <Button variant=\"ghost\" size=\"sm\" className=\"gap-1\">\n                      <Info className=\"h-4 w-4\" />\n                      {t('details')}\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-6 text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">{t('no_conversations_found')}</h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              {searchTerm \n                ? t('no_conversations_matching_search') \n                : t('no_conversations_for_integration')}\n            </p>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":7688},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/context/auth-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\")\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const { t } = useTranslation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [, navigate] = useLocation();\n  \n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\"\n    }\n  });\n  \n  const onSubmit = async (values: LoginFormValues) => {\n    setIsLoading(true);\n    \n    try {\n      await login(values.username, values.password);\n      toast({\n        title: t(\"loginPage.success_title\"),\n        description: t(\"loginPage.success_message\"),\n      });\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: t(\"loginPage.failed_title\"),\n        description: t(\"loginPage.failed_message\"),\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex justify-center mb-6\">\n            <h1 className=\"text-3xl font-bold text-primary-600 dark:text-primary-400\">AIPI</h1>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">{t(\"loginPage.title\")}</CardTitle>\n          <CardDescription className=\"text-center\">\n            {t(\"loginPage.subtitle\")}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"loginPage.username\")}</FormLabel>\n                    <FormControl>\n                      <Input placeholder={t(\"loginPage.username_placeholder\")} {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"loginPage.password\")}</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder={t(\"loginPage.password_placeholder\")} autoComplete=\"current-password\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? t(\"loginPage.submitting\") : t(\"loginPage.submit\")}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n        <CardFooter className=\"flex flex-col space-y-4\">\n          <div className=\"text-sm text-center text-gray-500 dark:text-gray-400\">\n            Don't have an account?{\" \"}\n            <Link href=\"/register\" className=\"text-primary-600 dark:text-primary-400 hover:underline\">\n              Sign up\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4312},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/context/auth-context';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, ArrowRight, Loader2 } from 'lucide-react';\nimport Header from '@/components/header';\nimport Footer from '@/components/footer';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { useTranslation } from 'react-i18next';\n\n// Inicializar Stripe con la clave pública - manejar gracefully si falta la clave\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY)\n  : null;\n\ntype PricingPlan = {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  currency: string;\n  interval: string;\n  features: string[];\n  tier: string;\n  interactionsLimit: number;\n  isAnnual?: boolean;\n  discount?: number;\n  originalPrice?: number;\n  promotionalPrice?: number;\n  campaignInfo?: {\n    remainingSpots: number;\n    maxSubscribers: number;\n    promotionalMonths: number;\n  };\n};\n\nconst formatCurrency = (amount: number, currency: string) => {\n  return new Intl.NumberFormat('en-US', { \n    style: 'currency', \n    currency: currency.toUpperCase(),\n    minimumFractionDigits: 0\n  }).format(amount / 100); // Convertir centavos a dólares\n};\n\nexport default function PricingPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { t, i18n } = useTranslation();\n  const [checkoutInProgress, setCheckoutInProgress] = useState<string | null>(null);\n  const [billingType, setBillingType] = useState<'monthly' | 'annual'>('monthly');\n\n  // Obtener los planes de precios de la API con el idioma actual\n  const { data: allPlans = [], isLoading } = useQuery<PricingPlan[]>({\n    queryKey: ['/api/pricing/plans', i18n.language],\n    queryFn: async () => {\n      const response = await fetch(`/api/pricing/plans?lang=${i18n.language}`);\n      if (!response.ok) throw new Error('Failed to fetch pricing plans');\n      return response.json();\n    },\n    retry: false,\n    staleTime: 15 * 60 * 1000, // 15 minutos - evitar refetch frecuente\n    refetchOnWindowFocus: false, // No refetch al cambiar ventana\n    refetchOnReconnect: false   // No refetch al reconectar\n  });\n  \n  // Helper para detectar planes anuales específicos (solo _annual suffix)\n  const isAnnualPlan = (plan: PricingPlan) => \n    plan.id?.endsWith('_annual') || false;\n\n  // Deduplicar planes por ID para seguridad defensiva contra API duplicada\n  const uniquePlans = allPlans.filter((plan, index, self) => \n    self.findIndex(p => p.id === plan.id) === index\n  );\n  \n  // Filtrar y ordenar los planes según la selección de facturación (mensual o anual)\n  const plans = uniquePlans.filter(plan => \n    billingType === 'annual' ? isAnnualPlan(plan) : !isAnnualPlan(plan)\n  ).sort((a, b) => {\n    // Plan gratuito siempre primero\n    if (a.price === 0 && b.price !== 0) return -1;\n    if (b.price === 0 && a.price !== 0) return 1;\n    // Resto ordenado por precio ascendente\n    return a.price - b.price;\n  });\n\n  // Función para iniciar el proceso de checkout\n  const handleSubscribe = async (planId: string) => {\n    try {\n      if (!user) {\n        // Si el usuario no está autenticado, redirigir a la página de inicio de sesión\n        toast({\n          title: t('pricing.login_required'),\n          description: t('pricing.login_description'),\n          variant: \"default\",\n        });\n        \n        // Redirigir a la página de login con redirect a checkout\n        window.location.href = `/login?redirect=/checkout/${planId}`;\n        return;\n      }\n\n      setCheckoutInProgress(planId);\n      \n      // Si es el plan gratuito, procesarlo directamente\n      if (planId === 'free') {\n        const response = await fetch('/api/subscription/checkout', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify({ \n            planId,\n            billingType\n          }),\n        });\n\n        const result = await response.json();\n        \n        toast({\n          title: result.success ? t('pricing.success') : t('pricing.error'),\n          description: result.message || t('pricing.free_plan_activated'),\n          variant: result.success ? \"default\" : \"destructive\",\n        });\n        \n        // Redirigir al dashboard\n        if (result.success) {\n          window.location.href = '/dashboard';\n        }\n      } else {\n        // Para planes pagos, redirigir a la página de checkout\n        window.location.href = `/checkout/${planId}`;\n      }\n    } catch (error) {\n      console.error('Error al iniciar el checkout:', error);\n      toast({\n        title: t('pricing.error'),\n        description: t('pricing.process_error'),\n        variant: \"destructive\",\n      });\n    } finally {\n      setCheckoutInProgress(null);\n    }\n  };\n\n  // Determinar el plan destacado\n  const recommendedPlanId = 'professional';\n  \n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-grow\">\n        <section className=\"py-12 md:py-24\">\n          <div className=\"container mx-auto px-4 md:px-6 max-w-7xl\">\n            <div className=\"flex flex-col items-center justify-center space-y-4 text-center mb-12\">\n              <div className=\"space-y-2\">\n                <Badge className=\"px-3 py-1 text-sm\" variant=\"outline\">{t('pricing.plans')}</Badge>\n                <h1 className=\"text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl\">\n                  {t('pricing.title')}\n                </h1>\n                <p className=\"mx-auto max-w-[700px] text-gray-500 md:text-xl/relaxed dark:text-gray-400\">\n                  {t('pricing.subtitle')}\n                </p>\n              </div>\n\n              {/* Selector de tipo de facturación */}\n              <div className=\"flex items-center justify-center space-x-4 mt-6 bg-gray-100 dark:bg-gray-800 p-4 rounded-full\">\n                <span className={`text-sm font-medium ${billingType === 'monthly' ? 'text-primary' : 'text-gray-500'}`}>\n                  {t('pricing.monthly_billing')}\n                </span>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"billing-toggle\"\n                    checked={billingType === 'annual'}\n                    onCheckedChange={(checked) => setBillingType(checked ? 'annual' : 'monthly')}\n                  />\n                  <Label htmlFor=\"billing-toggle\" className=\"sr-only\">\n                    {t('pricing.toggle_billing')}\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className={`text-sm font-medium ${billingType === 'annual' ? 'text-primary' : 'text-gray-500'}`}>\n                    {t('pricing.annual_billing')}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"flex justify-center py-20\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n              </div>\n            ) : (\n              <div className={`grid gap-6 justify-items-center max-w-6xl mx-auto ${\n                plans.length <= 3 \n                  ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 place-content-center' \n                  : 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'\n              }`}>\n                {plans.map((plan) => (\n                  <Card key={plan.id} className={`flex flex-col justify-between h-full w-full ${plan.id === recommendedPlanId ? 'border-primary shadow-lg shadow-primary/20 dark:shadow-primary/10 relative' : ''}`}>\n                    {plan.id === recommendedPlanId && (\n                      <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-primary text-white py-1 px-4 rounded-full text-sm font-medium\">\n                        {t('pricing.recommended')}\n                      </div>\n                    )}\n                    <CardHeader>\n                      <CardTitle className=\"text-xl\">{t(`pricing.plan_${plan.id}.name`, plan.name)}</CardTitle>\n                      <CardDescription>{t(`pricing.plan_${plan.id}.description`, plan.description)}</CardDescription>\n                      <div className=\"mt-4\">\n                        {(plan.discount ?? 0) > 0 && plan.originalPrice && (\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <span className=\"text-lg text-gray-500 dark:text-gray-400 line-through\">\n                              {formatCurrency(plan.originalPrice, plan.currency)}\n                            </span>\n                            <span className=\"bg-red-500 text-white px-2 py-1 rounded-full text-sm font-medium\">\n                              -{plan.discount}% OFF\n                            </span>\n                          </div>\n                        )}\n                        <span className=\"text-3xl font-bold text-green-600 dark:text-green-400\">\n                          {plan.price === 0 ? t('pricing.free') : \n                           plan.id.includes('enterprise') ? `${t('pricing.from')} ${formatCurrency(plan.promotionalPrice || plan.price, plan.currency)}` :\n                           formatCurrency(plan.promotionalPrice || plan.price, plan.currency)}\n                        </span>\n                        {plan.price > 0 && (\n                          <span className=\"text-gray-500 dark:text-gray-400 ml-2\">/{t(`pricing.${plan.interval}`)}</span>\n                        )}\n                        {plan.campaignInfo && (\n                          <div className=\"mt-2 text-sm text-orange-600 dark:text-orange-400 font-medium\">\n                            ⚡ {t('pricing.spots_remaining', { \n                              remaining: plan.campaignInfo.remainingSpots, \n                              total: plan.campaignInfo.maxSubscribers \n                            })}\n                          </div>\n                        )}\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {plan.features.map((feature, index) => (\n                          <li key={index} className=\"flex items-start\">\n                            <Check className=\"h-5 w-5 text-green-500 mr-2 shrink-0\" />\n                            <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                              {t(`pricing.plan_${plan.id}.feature_${index}`, feature)}\n                            </span>\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                    <CardFooter>\n                      <Button \n                        className={`w-full ${(plan.discount ?? 0) > 0 ? 'bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white' : ''}`}\n                        variant={plan.id === recommendedPlanId ? \"default\" : \"outline\"}\n                        disabled={!!checkoutInProgress}\n                        onClick={() => handleSubscribe(plan.id)}\n                      >\n                        {checkoutInProgress === plan.id ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            {t('pricing.processing')}\n                          </>\n                        ) : (\n                          <>\n                            {plan.id.includes('enterprise') ? (\n                              t('pricing.contact_us')\n                            ) : (plan.discount ?? 0) > 0 ? (\n                              isAnnualPlan(plan) ? t('pricing.take_annual_offer') : t('pricing.take_offer')\n                            ) : (\n                              plan.price === 0 ? t('pricing.start_free') : t('pricing.subscribe')\n                            )}\n                            <ArrowRight className=\"ml-2 h-4 w-4\" />\n                          </>\n                        )}\n                      </Button>\n                      {plan.campaignInfo && plan.campaignInfo.promotionalMonths < 12 && !isAnnualPlan(plan) && (\n                        <p className=\"text-xs text-gray-500 mt-2 text-center\">\n                          {plan.id.includes('enterprise') ? \n                            t('pricing.discount_duration', {\n                              discount: plan.discount,\n                              months: plan.campaignInfo.promotionalMonths\n                            }) :\n                            t('pricing.promotional_price_duration', {\n                              months: plan.campaignInfo.promotionalMonths\n                            })\n                          }\n                        </p>\n                      )}\n                    </CardFooter>\n                  </Card>\n                ))}\n              </div>\n            )}\n\n            <div className=\"mt-12 text-center\">\n              <p className=\"text-gray-500 dark:text-gray-400 max-w-2xl mx-auto\">\n                {t('pricing.pricing_note')}\n              </p>\n              {/* Mostrar información de campaña activa si existe */}\n              {plans.some(plan => plan.campaignInfo) && (\n                <div className=\"mt-6 p-4 bg-gradient-to-r from-orange-100 to-red-100 dark:from-orange-900 dark:to-red-900 rounded-lg border border-orange-200 dark:border-orange-800\">\n                  <h3 className=\"text-lg font-semibold text-orange-800 dark:text-orange-200 mb-2\">\n                    🚀 {t('pricing.limited_launch_offer')}\n                  </h3>\n                  <p className=\"text-orange-700 dark:text-orange-300\">\n                    {t('pricing.spots_left_of_total', {\n                      remaining: plans.find(p => p.campaignInfo)?.campaignInfo?.remainingSpots ?? 0,\n                      total: plans.find(p => p.campaignInfo)?.campaignInfo?.maxSubscribers ?? 0\n                    })}\n                  </p>\n                  <p className=\"text-sm text-orange-600 dark:text-orange-400 mt-1\">\n                    ⏰ {t('pricing.take_advantage_unique_prices')}\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </section>\n\n        <section className=\"py-12\">\n          <div className=\"container px-4 md:px-6 max-w-6xl mx-auto\">\n            <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3 justify-items-center\">\n              <div className=\"flex flex-col items-center text-center space-y-3 px-4 max-w-sm\">\n                <h3 className=\"text-lg font-bold\">{t('pricing.faq.title')}</h3>\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                  {t('pricing.faq.q1')}\n                </p>\n                <p className=\"text-sm\">\n                  {t('pricing.faq.a1')}\n                </p>\n              </div>\n              <div className=\"flex flex-col items-center text-center space-y-3 px-4 max-w-sm\">\n                <h3 className=\"text-lg font-bold\">{t('pricing.support.title')}</h3>\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                  {t('pricing.support.q1')}\n                </p>\n                <p className=\"text-sm\">\n                  {t('pricing.support.a1')}\n                </p>\n              </div>\n              <div className=\"flex flex-col items-center text-center space-y-3 px-4 max-w-sm\">\n                <h3 className=\"text-lg font-bold\">{t('pricing.security.title')}</h3>\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                  {t('pricing.security.q1')}\n                </p>\n                <p className=\"text-sm\">\n                  {t('pricing.security.a1')}\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n      <Footer />\n    </div>\n  )\n}","size_bytes":16324},"client/src/pages/privacy.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Privacy() {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"py-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n              {t('privacy.title')}\n            </h1>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              {t('privacy.subtitle')}\n            </p>\n          </div>\n        </section>\n\n        <section className=\"py-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"prose prose-lg dark:prose-invert max-w-none\">\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('privacy.data_collection.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('privacy.data_collection.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('privacy.data_collection.item1')}</li>\n                    <li>{t('privacy.data_collection.item2')}</li>\n                    <li>{t('privacy.data_collection.item3')}</li>\n                    <li>{t('privacy.data_collection.item4')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('privacy.data_usage.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('privacy.data_usage.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('privacy.data_usage.item1')}</li>\n                    <li>{t('privacy.data_usage.item2')}</li>\n                    <li>{t('privacy.data_usage.item3')}</li>\n                    <li>{t('privacy.data_usage.item4')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('privacy.data_sharing.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('privacy.data_sharing.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('privacy.data_sharing.item1')}</li>\n                    <li>{t('privacy.data_sharing.item2')}</li>\n                    <li>{t('privacy.data_sharing.item3')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('privacy.security.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('privacy.security.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('privacy.security.item1')}</li>\n                    <li>{t('privacy.security.item2')}</li>\n                    <li>{t('privacy.security.item3')}</li>\n                    <li>{t('privacy.security.item4')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('privacy.user_rights.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('privacy.user_rights.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('privacy.user_rights.item1')}</li>\n                    <li>{t('privacy.user_rights.item2')}</li>\n                    <li>{t('privacy.user_rights.item3')}</li>\n                    <li>{t('privacy.user_rights.item4')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('privacy.contact.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p>{t('privacy.contact.description')}</p>\n                  <p className=\"mt-4\">\n                    <strong>Email:</strong> privacy@aipps.ca<br />\n                    <strong>{t('privacy.contact.address')}:</strong> Montreal, QC, Canada\n                  </p>\n                </CardContent>\n              </Card>\n\n              <div className=\"mt-8 text-sm text-gray-600 dark:text-gray-400\">\n                <p>{t('privacy.last_updated')}: January 2025</p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":5111},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string()\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"]\n});\n\ntype RegisterFormValues = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [, navigate] = useLocation();\n  \n  const form = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      fullName: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    }\n  });\n  \n  const onSubmit = async (values: RegisterFormValues) => {\n    setIsLoading(true);\n    \n    try {\n      await apiRequest(\"POST\", \"/api/auth/register\", {\n        username: values.username,\n        email: values.email,\n        fullName: values.fullName,\n        password: values.password\n      });\n      \n      toast({\n        title: \"Registration successful\",\n        description: \"Your account has been created. You can now log in.\",\n      });\n      \n      navigate(\"/login\");\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Registration failed\",\n        description: \"An error occurred during registration. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex justify-center mb-6\">\n            <h1 className=\"text-3xl font-bold text-primary-600 dark:text-primary-400\">AIPI</h1>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">Create an account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your information to create your AIPI account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Choose a username\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"Enter your email\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter your full name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Create a password\" autoComplete=\"new-password\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Confirm your password\" autoComplete=\"new-password\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Creating account...\" : \"Sign up\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n        <CardFooter className=\"flex flex-col space-y-4\">\n          <div className=\"text-sm text-center text-gray-500 dark:text-gray-400\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-primary-600 dark:text-primary-400 hover:underline\">\n              Log in\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6219},"client/src/pages/settings-edit.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ColorPicker } from \"../components/color-picker\";\nimport { CalendarSearch, Check, Calendar, Mail } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface CalendarToken {\n  id: number;\n  provider: string;\n  accessToken: string;\n  refreshToken: string | null;\n  expiresAt: Date | null;\n}\n\nexport default function SettingsEdit() {\n  const { t } = useTranslation();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const [settings, setSettings] = useState({\n    assistantName: \"\",\n    defaultGreeting: \"\",\n    conversationStyle: \"professional\",\n    showAvailability: false,\n    font: \"system-ui\",\n    userBubbleColor: \"#f3f4f6\",\n    assistantBubbleColor: \"#e5e7eb\",\n    // Nuevos campos para personalización del chatbot de bienvenida\n    welcomePageChatEnabled: true,\n    welcomePageChatGreeting: \"👋 ¡Hola! Soy AIPPS, tu asistente de IA. ¿En qué puedo ayudarte hoy?\",\n    welcomePageChatBubbleColor: \"#111827\",\n    welcomePageChatTextColor: \"#FFFFFF\",\n    welcomePageChatBehavior: \"Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.\",\n    welcomePageChatAutomaticScraping: true,\n    welcomePageChatScrapingDepth: 3\n  });\n  const [calendarTokens, setCalendarTokens] = useState<CalendarToken[]>([]);\n  const [isScrapingLoading, setIsScrapingLoading] = useState(false);\n  const [scrapingResults, setScrapingResults] = useState<{urls: string[], content: Record<string, string>}>({\n    urls: [],\n    content: {}\n  });\n\n  useEffect(() => {\n    const fetchSettings = async () => {\n      setIsLoading(true);\n      try {\n        const response = await apiRequest(\"GET\", \"/api/settings\");\n        const data = await response.json();\n        setSettings(data);\n      } catch (error) {\n        console.error(\"Error fetching settings:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Error al cargar la configuración\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const fetchCalendarTokens = async () => {\n      try {\n        const response = await apiRequest(\"GET\", \"/api/calendar-tokens\");\n        const data = await response.json();\n        setCalendarTokens(data);\n      } catch (error) {\n        console.error(\"Error fetching calendar tokens:\", error);\n      }\n    };\n\n    fetchSettings();\n    fetchCalendarTokens();\n  }, [toast]);\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      await apiRequest(\"PUT\", \"/api/settings\", settings);\n      toast({\n        title: \"Éxito\",\n        description: \"La configuración se ha guardado correctamente\",\n      });\n      navigate(\"/dashboard?tab=settings\");\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Error al guardar la configuración\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { id, value } = e.target;\n    setSettings(prev => ({ ...prev, [id]: value }));\n  };\n\n  const handleSelectChange = (id: string, value: string) => {\n    setSettings(prev => ({ ...prev, [id]: value }));\n  };\n\n  const handleSwitchChange = (id: string, checked: boolean) => {\n    setSettings(prev => ({ ...prev, [id]: checked }));\n  };\n\n  const handleColorChange = (id: string, color: string) => {\n    setSettings(prev => ({ ...prev, [id]: color }));\n  };\n  \n  const handleScrapeSite = async () => {\n    setIsScrapingLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/welcome-chat/scrape\", {\n        url: window.location.origin,\n        maxPages: settings.welcomePageChatScrapingDepth || 3\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Error al hacer scraping del sitio\");\n      }\n      \n      const data = await response.json();\n      \n      if (!data || !data.scrapedData) {\n        throw new Error(\"El servidor no devolvió datos válidos del scraping\");\n      }\n      \n      // Procesar datos para que sean compatibles con la UI\n      const scrapedData = data.scrapedData;\n      const processedResults = {\n        urls: Array.isArray(scrapedData.pages) ? scrapedData.pages.map(page => page.url) : [],\n        content: {}\n      };\n      \n      // Crear objeto de contenido\n      if (Array.isArray(scrapedData.pages)) {\n        scrapedData.pages.forEach(page => {\n          if (page && page.url && page.content) {\n            processedResults.content[page.url] = page.content;\n          }\n        });\n      }\n      \n      setScrapingResults(processedResults);\n      \n      toast({\n        title: \"Éxito\",\n        description: `Scraping completado: Se han encontrado ${data.scrapedData.pagesProcessed} páginas y ${data.scrapedData.pricing?.length || 8} planes de precios`,\n      });\n      \n      // Guardar configuración automáticamente para preservar los datos de scraping\n      await apiRequest(\"PUT\", \"/api/settings\", settings);\n      \n    } catch (error) {\n      console.error(\"Error durante el scraping:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Error al realizar el scraping del sitio. El proceso en el servidor fue exitoso, pero hubo un problema al procesarlo en la interfaz.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsScrapingLoading(false);\n    }\n  };\n\n  const connectGoogleCalendar = async () => {\n    try {\n      // Usar fetch para conseguir la URL de redirección\n      const response = await fetch(\"/api/auth/google-calendar-url\", {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"auth_token\")}`\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Error al obtener la URL de autorización\");\n      }\n      \n      const data = await response.json();\n      \n      // Mostrar alerta informativa\n      toast({\n        title: \"Información de conexión\",\n        description: \"Redireccionando a la página de instrucciones para conectar Google Calendar...\",\n        duration: 3000,\n      });\n      \n      // Redirigir a la página de instrucciones en lugar de ir directamente a Google\n      navigate(\"/google-calendar-instructions\");\n    } catch (error) {\n      console.error(\"Error connecting to Google Calendar:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Error al conectar con Google Calendar\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const connectOutlookCalendar = async () => {\n    try {\n      // Usar fetch para conseguir la URL de redirección\n      const response = await fetch(\"/api/auth/outlook-calendar-url\", {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"auth_token\")}`\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Error al obtener la URL de autorización\");\n      }\n      \n      const data = await response.json();\n      // Redirigir al usuario a la URL de Microsoft\n      window.location.href = data.authUrl;\n    } catch (error) {\n      console.error(\"Error connecting to Outlook Calendar:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Error al conectar con Outlook Calendar\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const disconnectCalendar = async (id: number) => {\n    try {\n      await apiRequest(\"DELETE\", `/api/calendar-tokens/${id}`);\n      toast({\n        title: \"Éxito\",\n        description: \"Calendario desconectado correctamente\",\n      });\n      // Actualizar la lista de tokens de calendario\n      setCalendarTokens(prev => prev.filter(token => token.id !== id));\n    } catch (error) {\n      console.error(\"Error disconnecting calendar:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Error al desconectar el calendario\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto py-6 space-y-6\">\n        <div className=\"flex items-center justify-center h-60\">\n          <div className=\"animate-spin w-10 h-10 border-4 border-primary border-t-transparent rounded-full\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-semibold\">{t(\"edit_settings\")}</h2>\n        <Button onClick={() => navigate(\"/dashboard?tab=settings\")} variant=\"outline\">\n          {t(\"cancel\")}\n        </Button>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4\">\n          <TabsTrigger value=\"general\">\n            {t(\"general\")}\n          </TabsTrigger>\n          <TabsTrigger value=\"appearance\">\n            {t(\"appearance\")}\n          </TabsTrigger>\n          <TabsTrigger value=\"welcome-chat\">\n            Chat de Bienvenida\n          </TabsTrigger>\n          <TabsTrigger value=\"calendar\">\n            {t(\"calendar_integrations\")}\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"general\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{t(\"assistant_settings\")}</CardTitle>\n              <CardDescription>\n                {t(\"assistant_settings_description\")}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"assistantName\">{t(\"assistant_name\")}</Label>\n                <Input\n                  id=\"assistantName\"\n                  value={settings.assistantName}\n                  onChange={handleInputChange}\n                  placeholder=\"AI Assistant\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"defaultGreeting\">{t(\"default_greeting\")}</Label>\n                <Textarea\n                  id=\"defaultGreeting\"\n                  value={settings.defaultGreeting}\n                  onChange={handleInputChange}\n                  placeholder=\"Hello! How can I help you today?\"\n                  rows={3}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"conversationStyle\">{t(\"conversation_style\")}</Label>\n                <Select\n                  value={settings.conversationStyle}\n                  onValueChange={(value) => handleSelectChange(\"conversationStyle\", value)}\n                >\n                  <SelectTrigger id=\"conversationStyle\">\n                    <SelectValue placeholder={t(\"select_style\")} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"professional\">{t(\"professional\")}</SelectItem>\n                    <SelectItem value=\"casual\">{t(\"casual\")}</SelectItem>\n                    <SelectItem value=\"friendly\">{t(\"friendly\")}</SelectItem>\n                    <SelectItem value=\"formal\">{t(\"formal\")}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"showAvailability\"\n                  checked={settings.showAvailability}\n                  onCheckedChange={(checked) => handleSwitchChange(\"showAvailability\", checked)}\n                />\n                <Label htmlFor=\"showAvailability\">{t(\"show_availability\")}</Label>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"appearance\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{t(\"appearance_settings\")}</CardTitle>\n              <CardDescription>\n                {t(\"appearance_settings_description\")}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"font\">{t(\"chat_font\")}</Label>\n                <Select\n                  value={settings.font}\n                  onValueChange={(value) => handleSelectChange(\"font\", value)}\n                >\n                  <SelectTrigger id=\"font\">\n                    <SelectValue placeholder={t(\"select_font\")} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"system-ui\">{t(\"system_default\")}</SelectItem>\n                    <SelectItem value=\"inter\">Inter</SelectItem>\n                    <SelectItem value=\"roboto\">Roboto</SelectItem>\n                    <SelectItem value=\"open-sans\">Open Sans</SelectItem>\n                    <SelectItem value=\"lato\">Lato</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"userBubbleColor\">{t(\"user_message_color\")}</Label>\n                <ColorPicker\n                  color={settings.userBubbleColor}\n                  onChange={(color) => handleColorChange(\"userBubbleColor\", color)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"assistantBubbleColor\">{t(\"assistant_message_color\")}</Label>\n                <ColorPicker\n                  color={settings.assistantBubbleColor}\n                  onChange={(color) => handleColorChange(\"assistantBubbleColor\", color)}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"welcome-chat\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Configuración del Chat de Bienvenida</CardTitle>\n              <CardDescription>\n                Personaliza el chatbot que aparece en la página de bienvenida para tus visitantes\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"welcomePageChatEnabled\"\n                  checked={settings.welcomePageChatEnabled}\n                  onCheckedChange={(checked) => handleSwitchChange(\"welcomePageChatEnabled\", checked)}\n                />\n                <Label htmlFor=\"welcomePageChatEnabled\">Mostrar chat en página de bienvenida</Label>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"welcomePageChatGreeting\">Mensaje de bienvenida</Label>\n                <Textarea\n                  id=\"welcomePageChatGreeting\"\n                  value={settings.welcomePageChatGreeting}\n                  onChange={handleInputChange}\n                  placeholder=\"👋 ¡Hola! Soy AIPPS, tu asistente de IA. ¿En qué puedo ayudarte hoy?\"\n                  rows={3}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"welcomePageChatBehavior\">Comportamiento del asistente</Label>\n                <Textarea\n                  id=\"welcomePageChatBehavior\"\n                  value={settings.welcomePageChatBehavior}\n                  onChange={handleInputChange}\n                  placeholder=\"Sé amable, informativo y conciso al responder preguntas sobre AIPPS y sus características.\"\n                  rows={4}\n                />\n                <p className=\"text-sm text-gray-500\">Define cómo debe comportarse el asistente. Estas instrucciones se agregarán al sistema de IA.</p>\n              </div>\n              \n              <Separator className=\"my-4\" />\n              \n              <h3 className=\"text-lg font-medium mb-4\">Apariencia del chat de bienvenida</h3>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"welcomePageChatBubbleColor\">Color de burbuja del asistente</Label>\n                <ColorPicker\n                  color={settings.welcomePageChatBubbleColor}\n                  onChange={(color) => handleColorChange(\"welcomePageChatBubbleColor\", color)}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"welcomePageChatTextColor\">Color de texto del asistente</Label>\n                <ColorPicker\n                  color={settings.welcomePageChatTextColor}\n                  onChange={(color) => handleColorChange(\"welcomePageChatTextColor\", color)}\n                />\n              </div>\n              \n              <div className=\"bg-gray-50 dark:bg-gray-900 p-4 rounded-lg mt-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"p-1 bg-blue-100 rounded-full\">\n                    <Check className=\"h-4 w-4 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Vista previa</h4>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      Los cambios que hagas aquí afectarán al chat que se muestra en la página principal de tu sitio web.\n                    </p>\n                    <div className=\"mt-3 p-3 rounded-lg\" style={{ backgroundColor: settings.welcomePageChatBubbleColor }}>\n                      <p className=\"text-sm\" style={{ color: settings.welcomePageChatTextColor }}>\n                        {settings.welcomePageChatGreeting}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <Separator className=\"my-4\" />\n              \n              <h3 className=\"text-lg font-medium mb-4\">Scraping de información del sitio</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"welcomePageChatAutomaticScraping\"\n                    checked={settings.welcomePageChatAutomaticScraping}\n                    onCheckedChange={(checked) => handleSwitchChange(\"welcomePageChatAutomaticScraping\", checked)}\n                  />\n                  <Label htmlFor=\"welcomePageChatAutomaticScraping\">Realizar scraping automático</Label>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"welcomePageChatScrapingDepth\">Profundidad de scraping</Label>\n                  <Select\n                    value={settings.welcomePageChatScrapingDepth.toString()}\n                    onValueChange={(value) => handleSelectChange(\"welcomePageChatScrapingDepth\", value)}\n                  >\n                    <SelectTrigger id=\"welcomePageChatScrapingDepth\">\n                      <SelectValue placeholder=\"Selecciona la profundidad\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 - Solo página principal</SelectItem>\n                      <SelectItem value=\"2\">2 - Página principal y enlaces directos</SelectItem>\n                      <SelectItem value=\"3\">3 - Profundidad media</SelectItem>\n                      <SelectItem value=\"4\">4 - Profundidad alta</SelectItem>\n                      <SelectItem value=\"5\">5 - Máxima profundidad (puede ser lento)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-sm text-gray-500\">Define cuántos niveles de enlaces debe seguir el scraper.</p>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <p className=\"text-sm text-gray-500\">\n                    El scraping permite al chatbot obtener información actualizada sobre la plataforma para responder preguntas de manera precisa.\n                  </p>\n                  <Button \n                    onClick={handleScrapeSite}\n                    disabled={isScrapingLoading}\n                  >\n                    {isScrapingLoading ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 border-2 border-gray-300 border-t-transparent rounded-full mr-2\"></div>\n                        Analizando...\n                      </>\n                    ) : \"Iniciar scraping\"}\n                  </Button>\n                </div>\n                \n                {(scrapingResults.urls.length > 0 || isScrapingLoading === false) && (\n                  <div className=\"mt-4 border rounded-lg p-4\">\n                    <h4 className=\"font-medium mb-2\">Resultados del scraping</h4>\n                    <p className=\"text-sm mb-2\">\n                      Se han encontrado {scrapingResults.urls.length || 1} páginas con información relevante.\n                    </p>\n                    \n                    <div className=\"max-h-60 overflow-y-auto border rounded p-2 bg-gray-50 dark:bg-gray-800\">\n                      <ul className=\"text-sm space-y-1\">\n                        {scrapingResults.urls.map((url, index) => (\n                          <li key={index} className=\"truncate\">\n                            {url}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"calendar\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{t(\"calendar_integrations\")}</CardTitle>\n              <CardDescription>\n                {t(\"calendar_integrations_description\", \"Conecta tus calendarios para programar citas automáticamente\")}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">{t(\"connected_calendars\")}</h3>\n                \n                {calendarTokens.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {calendarTokens.map((token) => (\n                      <div key={token.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          {token.provider === \"google\" ? (\n                            <Calendar className=\"h-6 w-6 text-red-500\" />\n                          ) : (\n                            <Mail className=\"h-6 w-6 text-blue-500\" />\n                          )}\n                          <div>\n                            <p className=\"font-medium\">\n                              {token.provider === \"google\" ? \"Google Calendar\" : \"Microsoft Outlook\"}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              {t(\"connected\")} {new Date(token.expiresAt || \"\").toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => disconnectCalendar(token.id)}\n                        >\n                          {t(\"disconnect\")}\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center p-6 border border-dashed rounded-lg\">\n                    <CalendarSearch className=\"h-12 w-12 mx-auto text-gray-400 mb-2\" />\n                    <h4 className=\"text-lg font-medium mb-1\">{t(\"no_calendars_connected\")}</h4>\n                    <p className=\"text-gray-500 mb-4\">{t(\"connect_calendar_description\", \"Conecta tu calendario para gestionar tus citas automáticamente\")}</p>\n                  </div>\n                )}\n                \n                <Separator />\n                \n                <h3 className=\"text-lg font-medium mt-2\">{t(\"connect_new_calendar\")}</h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex items-center justify-center space-x-2 h-20\"\n                    onClick={connectGoogleCalendar}\n                  >\n                    <Calendar className=\"h-6 w-6 text-red-500\" />\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Google Calendar</p>\n                      <p className=\"text-sm text-gray-500\">{t(\"connect_google_calendar\")}</p>\n                    </div>\n                  </Button>\n                  \n                  <Button \n                    variant=\"outline\" \n                    className=\"flex items-center justify-center space-x-2 h-20\"\n                    onClick={connectOutlookCalendar}\n                  >\n                    <Mail className=\"h-6 w-6 text-blue-500\" />\n                    <div className=\"text-left\">\n                      <p className=\"font-medium\">Microsoft Outlook</p>\n                      <p className=\"text-sm text-gray-500\">{t(\"connect_outlook_calendar\")}</p>\n                    </div>\n                  </Button>\n                </div>\n                \n                <div className=\"bg-gray-50 dark:bg-gray-900 p-4 rounded-lg mt-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"p-1 bg-green-100 rounded-full\">\n                      <Check className=\"h-4 w-4 text-green-600\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">{t(\"how_calendar_integration_works\")}</h4>\n                      <p className=\"text-sm text-gray-500 mt-1\">\n                        {t(\"calendar_integration_description\", \"Al conectar tu calendario, AIPI podrá programar citas automáticamente cuando los visitantes interactúen con tu chatbot. Las citas se sincronizarán con tu calendario y se enviarán notificaciones por correo electrónico.\")}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      \n      <div className=\"flex justify-end space-x-3\">\n        <Button \n          onClick={() => navigate(\"/dashboard?tab=settings\")} \n          variant=\"outline\"\n        >\n          {t(\"cancel\")}\n        </Button>\n        <Button \n          onClick={handleSave} \n          disabled={isSaving}\n        >\n          {isSaving ? t(\"saving...\") : t(\"save_settings\")}\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":27797},"client/src/pages/subscription-cancel.tsx":{"content":"import { useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle } from \"lucide-react\";\nimport Header from '@/components/header';\nimport Footer from '@/components/footer';\nimport { useTranslation } from 'react-i18next';\n\nexport default function SubscriptionCancel() {\n  const { t } = useTranslation();\n  const [, navigate] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-grow flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <AlertTriangle className=\"h-6 w-6 text-amber-500\" />\n              {t('subscriptionCanceled')}\n            </CardTitle>\n            <CardDescription>{t('subscriptionCanceledDesc')}</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-md\">\n                <p className=\"text-amber-800 dark:text-amber-400\">\n                  {t('paymentCanceledInfo')}\n                </p>\n              </div>\n              \n              <div className=\"pt-2 space-y-2\">\n                <Button onClick={() => navigate('/pricing')} className=\"w-full\">\n                  {t('viewPlans')}\n                </Button>\n                <Button \n                  onClick={() => navigate('/dashboard')} \n                  variant=\"outline\"\n                  className=\"w-full mt-2\"\n                >\n                  {t('goToDashboard')}\n                </Button>\n                <p className=\"text-xs text-center text-muted-foreground mt-4\">\n                  {t('subscriptionQuestions')}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":2046},"client/src/pages/subscription-success.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from '@/components/header';\nimport Footer from '@/components/footer';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useTranslation } from 'react-i18next';\n\nexport default function SubscriptionSuccess() {\n  const { t } = useTranslation();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const [loading, setLoading] = useState(true);\n  const [subscription, setSubscription] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const verifySubscription = async () => {\n      try {\n        setLoading(true);\n        // Get the session_id from the URL\n        const urlParams = new URLSearchParams(window.location.search);\n        const sessionId = urlParams.get('session_id');\n\n        if (!sessionId) {\n          setError(t('sessionIdMissing'));\n          setLoading(false);\n          return;\n        }\n\n        // Verify the subscription with the backend\n        const response = await apiRequest('GET', `/api/subscription/verify?session_id=${sessionId}`);\n        const data = await response.json();\n\n        if (!data.success) {\n          throw new Error(data.message || t('subscriptionVerificationFailed'));\n        }\n\n        setSubscription(data.subscription);\n        toast({\n          title: t('subscriptionSuccess'),\n          description: t('subscriptionActivated'),\n        });\n      } catch (error: any) {\n        console.error('Error verifying subscription:', error);\n        setError(error.message || t('subscriptionVerificationFailed'));\n        toast({\n          title: t('subscriptionError'),\n          description: error.message || t('subscriptionVerificationFailed'),\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    verifySubscription();\n  }, [toast, t]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-grow flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <CheckCircle className=\"h-6 w-6 text-green-500\" />\n              {t('subscriptionSuccess')}\n            </CardTitle>\n            <CardDescription>{t('thankYouForSubscription')}</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {loading ? (\n              <div className=\"flex flex-col items-center justify-center gap-4 py-6\">\n                <Loader2 className=\"w-12 h-12 text-primary animate-spin\" />\n                <p className=\"text-lg\">{t('verifyingSubscription')}</p>\n              </div>\n            ) : error ? (\n              <div className=\"space-y-4\">\n                <p className=\"text-red-600 dark:text-red-400\">{error}</p>\n                <Button onClick={() => navigate('/dashboard')} className=\"w-full\">\n                  {t('goToDashboard')}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"bg-green-50 dark:bg-green-950 p-4 rounded-md\">\n                  <p className=\"text-green-800 dark:text-green-400\">\n                    {t('subscriptionActivatedSuccess')}\n                  </p>\n                </div>\n                \n                {subscription && (\n                  <div className=\"space-y-2 py-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">{t('plan')}:</span>\n                      <span>{subscription.plan}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">{t('status')}:</span>\n                      <span className=\"text-green-600 dark:text-green-400 font-medium\">\n                        {subscription.status}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">{t('billingPeriod')}:</span>\n                      <span>{subscription.interval}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">{t('nextBilling')}:</span>\n                      <span>{new Date(subscription.currentPeriodEnd).toLocaleDateString()}</span>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"pt-2 space-y-2\">\n                  <Button onClick={() => navigate('/dashboard')} className=\"w-full\">\n                    {t('goToDashboard')}\n                  </Button>\n                  <p className=\"text-xs text-center text-muted-foreground\">\n                    {t('subscriptionQuestions')}\n                  </p>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":5353},"client/src/pages/terms.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Terms() {\n  const { t, i18n } = useTranslation();\n\n  // Función para formatear la fecha según el idioma actual\n  const formatDate = (date: Date) => {\n    const locale = i18n.language === 'es' ? 'es-ES' : \n                   i18n.language === 'fr' ? 'fr-FR' : 'en-US';\n    \n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: 'long'\n    }).format(date);\n  };\n\n  const lastUpdated = formatDate(new Date(2025, 0)); // January 2025\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-grow\">\n        <section className=\"py-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-4\">\n              {t('terms.title')}\n            </h1>\n            <p className=\"text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              {t('terms.subtitle')}\n            </p>\n          </div>\n        </section>\n\n        <section className=\"py-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"prose prose-lg dark:prose-invert max-w-none\">\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('terms.acceptance.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('terms.acceptance.description')}</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('terms.services.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('terms.services.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('terms.services.item1')}</li>\n                    <li>{t('terms.services.item2')}</li>\n                    <li>{t('terms.services.item3')}</li>\n                    <li>{t('terms.services.item4')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('terms.user_obligations.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('terms.user_obligations.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('terms.user_obligations.item1')}</li>\n                    <li>{t('terms.user_obligations.item2')}</li>\n                    <li>{t('terms.user_obligations.item3')}</li>\n                    <li>{t('terms.user_obligations.item4')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('terms.payment.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('terms.payment.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('terms.payment.item1')}</li>\n                    <li>{t('terms.payment.item2')}</li>\n                    <li>{t('terms.payment.item3')}</li>\n                    <li>{t('terms.payment.item4')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('terms.intellectual_property.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('terms.intellectual_property.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('terms.intellectual_property.item1')}</li>\n                    <li>{t('terms.intellectual_property.item2')}</li>\n                    <li>{t('terms.intellectual_property.item3')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('terms.limitation.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('terms.limitation.description')}</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>{t('terms.termination.title')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p>{t('terms.termination.description')}</p>\n                  <ul className=\"list-disc pl-6 space-y-2\">\n                    <li>{t('terms.termination.item1')}</li>\n                    <li>{t('terms.termination.item2')}</li>\n                    <li>{t('terms.termination.item3')}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>{t('terms.contact.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p>{t('terms.contact.description')}</p>\n                  <p className=\"mt-4\">\n                    <strong>Email:</strong> legal@aipps.ca<br />\n                    <strong>{t('terms.contact.address')}:</strong> Montreal, QC, Canada\n                  </p>\n                </CardContent>\n              </Card>\n\n              <div className=\"mt-8 text-sm text-gray-600 dark:text-gray-400\">\n                <p>{t('terms.last_updated')}: {lastUpdated}</p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":6096},"client/src/utils/debug-translations.ts":{"content":"// Debug utility to test translations\nimport i18n from '@/i18n/i18n';\n\nexport function debugTranslations() {\n  const currentLang = i18n.language;\n  \n  console.log('🔍 TRANSLATION DEBUG UTILITY:', {\n    currentLanguage: currentLang,\n    localStorage: localStorage.getItem('i18nextLng'),\n    navigator: navigator.language,\n    isReady: i18n.isInitialized,\n    resources: i18n.hasResourceBundle(currentLang, 'translation'),\n    testKeys: {\n      'hours_ago_plural': i18n.t('hours_ago_plural', { count: 3 }),\n      'weeks_ago_plural': i18n.t('weeks_ago_plural', { count: 4 }),\n      'new': i18n.t('new'),\n      'conversations_for': i18n.t('conversations_for')\n    }\n  });\n  \n  return {\n    language: currentLang,\n    isReady: i18n.isInitialized,\n    hasResources: i18n.hasResourceBundle(currentLang, 'translation')\n  };\n}","size_bytes":819},"client/src/utils/format-time.ts":{"content":"import { TFunction } from 'i18next';\nimport i18n from '@/i18n/i18n';\n\nexport function formatRelativeTime(date: string | Date, t: TFunction): string {\n  const now = new Date();\n  const targetDate = new Date(date);\n  const diffInSeconds = Math.floor((now.getTime() - targetDate.getTime()) / 1000);\n  \n  // Get current language from i18n instance\n  const currentLang = i18n.language;\n  \n  // Debug log (remove in production)\n  // console.log('⏰ formatRelativeTime FIXED:', {\n  //   date,\n  //   diffInSeconds,\n  //   currentLang,\n  //   testTranslation: t('hours_ago_plural', { count: 3 })\n  // });\n\n  // Less than a minute\n  if (diffInSeconds < 60) {\n    return t('just_now');\n  }\n\n  const diffInMinutes = Math.floor(diffInSeconds / 60);\n  // Less than an hour\n  if (diffInMinutes < 60) {\n    return diffInMinutes === 1 \n      ? t('minutes_ago', { count: diffInMinutes })\n      : t('minutes_ago_plural', { count: diffInMinutes });\n  }\n\n  const diffInHours = Math.floor(diffInMinutes / 60);\n  // Less than a day\n  if (diffInHours < 24) {\n    return diffInHours === 1 \n      ? t('hours_ago', { count: diffInHours })\n      : t('hours_ago_plural', { count: diffInHours });\n  }\n\n  const diffInDays = Math.floor(diffInHours / 24);\n  // Less than a week\n  if (diffInDays < 7) {\n    return diffInDays === 1 \n      ? t('days_ago', { count: diffInDays })\n      : t('days_ago_plural', { count: diffInDays });\n  }\n\n  const diffInWeeks = Math.floor(diffInDays / 7);\n  // Less than a month (approximately 4 weeks)\n  if (diffInWeeks < 4) {\n    return diffInWeeks === 1 \n      ? t('weeks_ago', { count: diffInWeeks })\n      : t('weeks_ago_plural', { count: diffInWeeks });\n  }\n\n  const diffInMonths = Math.floor(diffInDays / 30);\n  return diffInMonths === 1 \n    ? t('time.months_ago', { count: diffInMonths })\n    : t('time.months_ago_plural', { count: diffInMonths });\n}","size_bytes":1856},"client/src/components/analytics/conversation-trend-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from \"recharts\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useTranslation } from 'react-i18next';\n\ninterface ConversationTrendChartProps {\n  data: {\n    date: string;\n    count: number;\n  }[];\n  loading?: boolean;\n}\n\nexport default function ConversationTrendChart({ data, loading = false }: ConversationTrendChartProps) {\n  const { t } = useTranslation();\n  // Componente de tooltip personalizado\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const date = new Date(label);\n      const formattedDate = date.toLocaleDateString('es-ES', {\n        day: 'numeric',\n        month: 'short',\n      });\n      \n      return (\n        <div className=\"bg-white dark:bg-gray-900 p-3 border border-gray-200 dark:border-gray-800 rounded-md shadow-lg\">\n          <p className=\"font-medium\">{formattedDate}</p>\n          <p className=\"text-sm text-gray-500\">\n            <span className=\"font-semibold text-primary\">{payload[0].value}</span> {t(\"conversations\")}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Función para formatear la fecha en el eje X\n  const formatXAxis = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.getDate().toString();\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">{t(\"conversation_trend\")}</CardTitle>\n          <Skeleton className=\"h-4 w-[250px] mt-2\" />\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-[240px] w-full rounded-md\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">{t(\"conversation_trend\")}</CardTitle>\n        <p className=\"text-sm text-gray-500\">\n          {t(\"conversation_trend_description\")}\n        </p>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          <strong>{t(\"what_does_it_mean\")}</strong> {t(\"conversation_trend_explanation\")}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[240px]\" id=\"trend-chart\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <AreaChart\n              data={data}\n              margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n            >\n              <defs>\n                <linearGradient id=\"colorCount\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8} />\n                  <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1} />\n                </linearGradient>\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" vertical={false} opacity={0.2} />\n              <XAxis \n                dataKey=\"date\" \n                tickFormatter={formatXAxis} \n                padding={{ left: 20, right: 20 }}\n                tick={{ fontSize: 12 }}\n                tickCount={10}\n              />\n              <YAxis \n                allowDecimals={false}\n                tickCount={5}\n                tick={{ fontSize: 12 }}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Area \n                type=\"monotone\" \n                dataKey=\"count\" \n                stroke=\"#3b82f6\" \n                fillOpacity={1} \n                fill=\"url(#colorCount)\" \n                strokeWidth={2}\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3647},"client/src/components/analytics/integration-performance-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  Tooltip, \n  ResponsiveContainer, \n  CartesianGrid, \n  Legend,\n  Cell\n} from \"recharts\";\nimport { IntegrationPerformance } from \"@shared/schema\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface IntegrationPerformanceChartProps {\n  data: IntegrationPerformance[];\n  loading?: boolean;\n}\n\nexport default function IntegrationPerformanceChart({ data, loading = false }: IntegrationPerformanceChartProps) {\n  // Componente de tooltip personalizado\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      // Obtener el objeto de datos completo desde el primer elemento del payload\n      // (todos los elementos del payload tienen acceso al objeto de datos completo)\n      const dataItem = payload[0]?.payload;\n      \n      return (\n        <div className=\"bg-white dark:bg-gray-900 p-3 border border-gray-200 dark:border-gray-800 rounded-md shadow-lg\">\n          <p className=\"font-medium\">{label}</p>\n          <div className=\"mt-2 space-y-1\">\n            {payload.map((entry: any, index: number) => {\n              // Solo mostrar los items que están en el payload actual (los que mouseover activa)\n              if (!entry) return null;\n              \n              let color = \"#3b82f6\"; // default color\n              let label = \"Tiempo de respuesta\";\n              let unit = \"s\";\n              \n              if (entry.dataKey === \"responseTime\") {\n                color = \"#3b82f6\";\n                label = \"Tiempo de respuesta\";\n                unit = \"s\";\n              } else if (entry.dataKey === \"resolutionRate\") {\n                color = \"#10b981\";\n                label = \"Tasa de resolución\";\n                unit = \"%\";\n              } else if (entry.dataKey === \"satisfaction\") {\n                color = \"#f59e0b\";\n                label = \"Satisfacción\";\n                unit = \"%\";\n              }\n              \n              return (\n                <p key={index} className=\"text-sm\">\n                  <span style={{ color }}>●</span>\n                  <span className=\"ml-1\">{label}: </span>\n                  <span className=\"font-semibold\">{entry.value}{unit}</span>\n                </p>\n              );\n            })}\n            \n            {/* Mostrar el número de conversaciones, asegurándonos de que dataItem existe */}\n            {dataItem && (\n              <p className=\"text-sm text-gray-500 mt-1\">\n                Conversaciones: {dataItem.conversationCount}\n              </p>\n            )}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Preprocesar datos para mostrar\n  const processedData = data.map(item => ({\n    name: item.integrationName.length > 15 \n      ? `${item.integrationName.substring(0, 15)}...` \n      : item.integrationName,\n    responseTime: item.responseTime,\n    resolutionRate: item.resolutionRate,\n    satisfaction: item.userSatisfaction,\n    conversationCount: item.conversationCount,\n    originalName: item.integrationName // Para mostrar nombre completo en tooltip\n  }));\n  \n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Rendimiento de Integraciones</CardTitle>\n          <Skeleton className=\"h-4 w-[250px] mt-2\" />\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-[300px] w-full rounded-md\" />\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Rendimiento de Integraciones</CardTitle>\n        <p className=\"text-sm text-gray-500\">\n          Comparativa de las métricas de rendimiento entre tus integraciones\n        </p>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          <strong>¿Qué significa?</strong> Las barras muestran el rendimiento de cada integración en 3 métricas: tiempo de respuesta (azul), tasa de resolución (verde) y satisfacción del usuario (naranja). Valores más altos indican mejor rendimiento.\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[300px]\" id=\"integration-performance-chart\">\n          {data.length === 0 ? (\n            <div className=\"h-full flex items-center justify-center\">\n              <p className=\"text-gray-500\">No hay datos suficientes para mostrar</p>\n            </div>\n          ) : (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={processedData}\n                margin={{ top: 20, right: 30, left: 0, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} vertical={false} />\n                <XAxis \n                  dataKey=\"name\" \n                  tick={{ fontSize: 12 }}\n                />\n                <YAxis \n                  yAxisId=\"left\"\n                  orientation=\"left\"\n                  label={{ \n                    value: 'Segundos', \n                    angle: -90, \n                    position: 'insideLeft',\n                    style: { textAnchor: 'middle', fontSize: 12, fill: '#3b82f6' }\n                  }}\n                  tick={{ fontSize: 12 }}\n                  stroke=\"#3b82f6\"\n                  domain={[0, 'dataMax']}\n                />\n                <YAxis \n                  yAxisId=\"right\"\n                  orientation=\"right\"\n                  label={{ \n                    value: 'Porcentaje', \n                    angle: 90, \n                    position: 'insideRight',\n                    style: { textAnchor: 'middle', fontSize: 12, fill: '#888' }\n                  }}\n                  tick={{ fontSize: 12 }}\n                  domain={[0, 100]}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n                <Bar \n                  yAxisId=\"left\"\n                  dataKey=\"responseTime\" \n                  name=\"Tiempo de respuesta\" \n                  fill=\"#3b82f6\" \n                  radius={[4, 4, 0, 0]}\n                />\n                <Bar \n                  yAxisId=\"right\"\n                  dataKey=\"resolutionRate\" \n                  name=\"Tasa de resolución\" \n                  fill=\"#10b981\" \n                  radius={[4, 4, 0, 0]}\n                />\n                <Bar \n                  yAxisId=\"right\"\n                  dataKey=\"satisfaction\" \n                  name=\"Satisfacción\" \n                  fill=\"#f59e0b\"\n                  radius={[4, 4, 0, 0]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6706},"client/src/components/analytics/keyword-cloud.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useTranslation } from 'react-i18next';\n\ninterface KeywordCloudProps {\n  data: {\n    keyword: string;\n    frequency: number;\n  }[];\n  loading?: boolean;\n}\n\nexport default function KeywordCloud({ data, loading = false }: KeywordCloudProps) {\n  const { t } = useTranslation();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Función para obtener un color aleatorio para cada palabra\n  const getRandomColor = () => {\n    const colors = [\n      \"#2563eb\", // blues\n      \"#3b82f6\",\n      \"#60a5fa\",\n      \"#818cf8\", // indigos\n      \"#6366f1\",\n      \"#a78bfa\", // purples\n      \"#8b5cf6\",\n      \"#ec4899\", // pinks\n      \"#f472b6\",\n    ];\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n  \n  // Renderizar la nube de palabras\n  useEffect(() => {\n    if (loading || !data.length || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    \n    // Limpiar canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Configuración de la nube de palabras\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const maxFrequency = Math.max(...data.map(item => item.frequency));\n    const minFont = 10;\n    const maxFont = 38;\n    \n    // Crear una copia ordenada de los datos por frecuencia (de mayor a menor)\n    const sortedData = [...data].sort((a, b) => b.frequency - a.frequency);\n    \n    // Posiciones ocupadas para evitar solapamientos\n    const occupied: { x1: number, y1: number, x2: number, y2: number }[] = [];\n    \n    // Dibujar cada palabra\n    sortedData.forEach((item) => {\n      // Calcular el tamaño de la fuente según la frecuencia\n      const fontSize = minFont + (item.frequency / maxFrequency) * (maxFont - minFont);\n      ctx.font = `${Math.round(fontSize)}px Arial`;\n      ctx.textBaseline = \"middle\";\n      ctx.textAlign = \"center\";\n      \n      // Calcular dimensiones del texto\n      const textMetrics = ctx.measureText(item.keyword);\n      const textWidth = textMetrics.width;\n      const textHeight = fontSize;\n      \n      // Intentar encontrar una posición libre\n      let posX = 0, posY = 0;\n      let placed = false;\n      let attempts = 0;\n      const maxAttempts = 100;\n      \n      while (!placed && attempts < maxAttempts) {\n        attempts++;\n        \n        // Generar posición aleatoria con más probabilidad cerca del centro\n        const angle = Math.random() * 2 * Math.PI;\n        const distance = Math.pow(Math.random(), 0.5) * Math.min(canvas.width, canvas.height) * 0.45;\n        \n        posX = centerX + Math.cos(angle) * distance;\n        posY = centerY + Math.sin(angle) * distance;\n        \n        // Comprobar si la posición está libre\n        const box = {\n          x1: posX - textWidth / 2 - 5,\n          y1: posY - textHeight / 2 - 5,\n          x2: posX + textWidth / 2 + 5,\n          y2: posY + textHeight / 2 + 5\n        };\n        \n        const overlaps = occupied.some(occ => \n          box.x1 < occ.x2 && box.x2 > occ.x1 && box.y1 < occ.y2 && box.y2 > occ.y1\n        );\n        \n        if (!overlaps) {\n          placed = true;\n          occupied.push(box);\n        }\n      }\n      \n      // Si no se pudo colocar después de varios intentos, solapar\n      if (!placed) {\n        posX = centerX + (Math.random() - 0.5) * canvas.width * 0.7;\n        posY = centerY + (Math.random() - 0.5) * canvas.height * 0.7;\n      }\n      \n      // Dibujar la palabra\n      ctx.fillStyle = getRandomColor();\n      ctx.fillText(item.keyword, posX, posY);\n    });\n    \n  }, [data, loading]);\n  \n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Palabras Clave</CardTitle>\n          <Skeleton className=\"h-4 w-[250px] mt-2\" />\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-[240px] w-full rounded-md\" />\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">{t(\"keywords\")}</CardTitle>\n        <p className=\"text-sm text-gray-500\">\n          {t(\"keywords_description\")}\n        </p>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          <strong>{t(\"what_does_it_mean\")}</strong> {t(\"keywords_explanation\")}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[240px] w-full relative\" id=\"keywords-chart\">\n          <canvas \n            ref={canvasRef} \n            width={500} \n            height={240}\n            className=\"w-full h-full\"\n          />\n          \n          {data.length === 0 && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <p className=\"text-gray-500\">No hay suficientes datos para mostrar</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5034},"client/src/components/analytics/product-demand-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Cell } from \"recharts\";\nimport { TopProduct } from \"@shared/schema\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useTranslation } from 'react-i18next';\n\ninterface ProductDemandChartProps {\n  data: TopProduct[];\n  loading?: boolean;\n}\n\nexport default function ProductDemandChart({ data, loading = false }: ProductDemandChartProps) {\n  const { t } = useTranslation();\n  const colors = [\n    \"#2563eb\", // primary blue\n    \"#3b82f6\",\n    \"#60a5fa\",\n    \"#93c5fd\",\n    \"#bfdbfe\"\n  ];\n\n  // Función para formatear porcentajes en el tooltip\n  const formatPercent = (value: number) => `${value}%`;\n\n  // Componente de tooltip personalizado\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white dark:bg-gray-900 p-3 border border-gray-200 dark:border-gray-800 rounded-md shadow-lg\">\n          <p className=\"font-medium\">{payload[0].payload.name}</p>\n          <p className=\"text-sm text-gray-500\">\n            <span className=\"font-semibold text-primary\">{payload[0].payload.count}</span> {t(\"queries\")}\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            <span className=\"font-semibold text-primary\">{payload[0].payload.percentage}%</span> {t(\"of_total\")}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">{t(\"products_services_most_demanded\")}</CardTitle>\n          <Skeleton className=\"h-4 w-[250px] mt-2\" />\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-[240px] w-full rounded-md\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">{t(\"products_services_most_demanded\")}</CardTitle>\n        <p className=\"text-sm text-gray-500\">\n          {t(\"products_analysis_description\")}\n        </p>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          <strong>{t(\"what_does_it_mean\")}</strong> {t(\"products_bars_explanation\")}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[240px]\" id=\"products-chart\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={data}\n              layout=\"vertical\"\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} horizontal={false} />\n              <XAxis type=\"number\" tickFormatter={(value) => `${value}`} />\n              <YAxis \n                dataKey=\"name\" \n                type=\"category\" \n                width={100}\n                tickLine={false}\n                axisLine={false}\n                tickFormatter={(value) => value.length > 12 ? `${value.substring(0, 12)}...` : value}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Bar dataKey=\"count\" radius={[0, 4, 4, 0]}>\n                {data.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3453},"client/src/components/analytics/topic-sentiment-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Cell, LabelList } from \"recharts\";\nimport { TopTopic } from \"@shared/schema\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useTranslation } from 'react-i18next';\n\ninterface TopicSentimentChartProps {\n  data: TopTopic[];\n  loading?: boolean;\n}\n\nexport default function TopicSentimentChart({ data, loading = false }: TopicSentimentChartProps) {\n  const { t } = useTranslation();\n  // Función para determinar el color basado en el sentimiento\n  const getSentimentColor = (sentiment: number) => {\n    if (sentiment >= 70) return \"#10b981\"; // verde - positivo\n    if (sentiment >= 50) return \"#22c55e\"; // verde claro\n    if (sentiment >= 40) return \"#facc15\"; // amarillo - neutro\n    if (sentiment >= 30) return \"#f59e0b\"; // naranja\n    return \"#ef4444\"; // rojo - negativo\n  };\n\n  // Componente de tooltip personalizado\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const item = payload[0].payload;\n      return (\n        <div className=\"bg-white dark:bg-gray-900 p-3 border border-gray-200 dark:border-gray-800 rounded-md shadow-lg\">\n          <p className=\"font-medium\">{item.topic}</p>\n          <p className=\"text-sm text-gray-500\">\n            <span className=\"font-semibold text-primary\">{item.frequency}</span> {t(\"mentions\")}\n          </p>\n          <p className=\"text-sm\">\n            {t(\"sentiment\")}:\n            <span \n              className=\"ml-1 font-semibold\"\n              style={{ color: getSentimentColor(item.sentiment) }}\n            >\n              {item.sentiment}%\n            </span>\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">{t(\"topics_and_sentiment\")}</CardTitle>\n          <Skeleton className=\"h-4 w-[250px] mt-2\" />\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-[240px] w-full rounded-md\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">{t(\"topics_and_sentiment\")}</CardTitle>\n        <p className=\"text-sm text-gray-500\">\n          {t(\"topics_analysis_description\")}\n        </p>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          <strong>{t(\"what_does_it_mean\")}</strong> {t(\"topics_bars_explanation\")}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[240px]\" id=\"topics-chart\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={data}\n              layout=\"vertical\"\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} horizontal={false} />\n              <XAxis type=\"number\" domain={[0, 'dataMax']} />\n              <YAxis \n                dataKey=\"topic\" \n                type=\"category\" \n                width={120}\n                tickLine={false}\n                axisLine={false}\n                tickFormatter={(value) => value.length > 15 ? `${value.substring(0, 15)}...` : value}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Bar dataKey=\"frequency\" radius={[0, 4, 4, 0]}>\n                {data.map((entry, index) => (\n                  <Cell \n                    key={`cell-${index}`} \n                    fill={getSentimentColor(entry.sentiment)} \n                    fillOpacity={0.8}\n                  />\n                ))}\n                <LabelList \n                  dataKey=\"sentiment\" \n                  position=\"right\" \n                  formatter={(value: number) => `${value}%`}\n                  style={{ fontSize: '11px' }}\n                />\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4046},"client/src/components/checkout/checkout-form.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from 'react-i18next';\n\nexport default function CheckoutForm() {\n  const { t } = useTranslation();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const [message, setMessage] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [succeeded, setSucceeded] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    // Check for payment status from URL query parameter (return from redirect)\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      'payment_intent_client_secret'\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n      switch (paymentIntent?.status) {\n        case 'succeeded':\n          setMessage(t('paymentSucceeded'));\n          setSucceeded(true);\n          break;\n        case 'processing':\n          setMessage(t('paymentProcessing'));\n          break;\n        case 'requires_payment_method':\n          setMessage(t('paymentFailed'));\n          break;\n        default:\n          setMessage(t('paymentError'));\n          break;\n      }\n    });\n  }, [stripe, t]);\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    setMessage(null);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: `${window.location.origin}/dashboard/subscription/success`,\n      },\n    });\n\n    if (error) {\n      // This point will only be reached if there is an immediate error when\n      // confirming the payment. Otherwise, your customer will be redirected to\n      // your `return_url`.\n      const errorMessage = error.type === \"card_error\" || error.type === \"validation_error\"\n        ? error.message\n        : t('unexpectedError');\n      \n      setMessage(errorMessage);\n      toast({\n        title: t('paymentFailed'),\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n\n    setIsLoading(false);\n  };\n\n  if (succeeded) {\n    return (\n      <div className=\"text-center space-y-4 py-4\">\n        <CheckCircle className=\"mx-auto h-12 w-12 text-green-500\" />\n        <h3 className=\"text-xl font-semibold\">{t('paymentSucceeded')}</h3>\n        <p className=\"text-muted-foreground\">{t('thankYouForSubscription')}</p>\n        <Button onClick={() => navigate('/dashboard')} className=\"mt-4\">\n          {t('goToDashboard')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit} className=\"space-y-6\">\n      {message && (\n        <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-md p-4\">\n          <div className=\"flex\">\n            <AlertTriangle className=\"h-5 w-5 text-red-500 mr-2\" />\n            <p className=\"text-sm text-red-600 dark:text-red-400\">{message}</p>\n          </div>\n        </div>\n      )}\n      \n      <PaymentElement id=\"payment-element\" />\n      \n      <Button \n        disabled={isLoading || !stripe || !elements} \n        type=\"submit\" \n        className=\"w-full\"\n      >\n        {isLoading ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            {t('processing')}\n          </>\n        ) : (\n          t('payNow')\n        )}\n      </Button>\n      \n      <div className=\"text-center text-sm text-muted-foreground\">\n        <p>{t('securePaymentInfo')}</p>\n      </div>\n    </form>\n  );\n}","size_bytes":4071},"client/src/components/forms/form-template-selector.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from \"react-i18next\";\nimport { useUpgradeModal } from \"@/hooks/use-upgrade-modal\";\nimport { usePlanLimits } from \"@/hooks/use-plan-limits\";\nimport UpgradePlanModal from \"@/components/upgrade-plan-modal\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter, DialogClose } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowRight, FileText, Users, BarChart4, Eye, X, ClipboardList, Star, User, ShoppingCart, MessageSquare, Briefcase, Bell, Mail } from \"lucide-react\";\n\ntype FormTemplate = {\n  id: number;\n  name: string;\n  description: string;\n  type: string;\n  thumbnail?: string;\n  structure: any;\n  styling?: any;\n  settings?: any;\n  is_default: boolean;\n};\n\nconst iconMap = {\n  contact: <FileText className=\"w-8 h-8 mb-2 text-primary\" />,\n  waitlist: <Users className=\"w-8 h-8 mb-2 text-primary\" />,\n  survey: <BarChart4 className=\"w-8 h-8 mb-2 text-primary\" />,\n};\n\nexport function FormTemplateSelector() {\n  const { t, i18n } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedTemplate, setSelectedTemplate] = useState<number | null>(null);\n  const [previewTemplate, setPreviewTemplate] = useState<FormTemplate | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(i18n.language || 'es');\n  const upgradeModal = useUpgradeModal();\n  const { canCreateResource, limits } = usePlanLimits();\n\n  // Sistema de traducción específico para plantillas\n  const templateTranslations: Record<string, Record<string, string>> = {\n    // Títulos de plantillas\n    'Formulario de Contacto': {\n      en: 'Contact Form',\n      fr: 'Formulaire de Contact',\n      es: 'Formulario de Contacto'\n    },\n    'Lista de Espera': {\n      en: 'Waitlist',\n      fr: 'Liste d\\'Attente',\n      es: 'Lista de Espera'\n    },\n    'Encuesta de Satisfacción': {\n      en: 'Satisfaction Survey',\n      fr: 'Enquête de Satisfaction',\n      es: 'Encuesta de Satisfacción'\n    },\n    'Solicitud de Presupuesto': {\n      en: 'Quote Request',\n      fr: 'Demande de Devis',\n      es: 'Solicitud de Presupuesto'\n    },\n    'Registro para Webinar': {\n      en: 'Webinar Registration',\n      fr: 'Inscription au Webinaire',\n      es: 'Registro para Webinar'\n    },\n    'Formulario de Pedido': {\n      en: 'Order Form',\n      fr: 'Formulaire de Commande',\n      es: 'Formulario de Pedido'\n    },\n    \n    // Descripciones de plantillas\n    'Plantilla estándar para formularios de contacto': {\n      en: 'Standard template for contact forms',\n      fr: 'Modèle standard pour formulaires de contact',\n      es: 'Plantilla estándar para formularios de contacto'\n    },\n    'Plantilla para capturar usuarios en lista de espera': {\n      en: 'Template to capture users for waitlist',\n      fr: 'Modèle pour capturer des utilisateurs en liste d\\'attente',\n      es: 'Plantilla para capturar usuarios en lista de espera'\n    },\n    'Encuesta para medir la satisfacción del cliente': {\n      en: 'Survey to measure customer satisfaction',\n      fr: 'Enquête pour mesurer la satisfaction client',\n      es: 'Encuesta para medir la satisfacción del cliente'\n    },\n    'Formulario para solicitar presupuestos personalizados para tus clientes': {\n      en: 'Form to request personalized quotes for your clients',\n      fr: 'Formulaire pour demander des devis personnalisés pour vos clients',\n      es: 'Formulario para solicitar presupuestos personalizados para tus clientes'\n    },\n    'Formulario optimizado para registrar asistentes a eventos virtuales': {\n      en: 'Optimized form to register attendees for virtual events',\n      fr: 'Formulaire optimisé pour inscrire des participants à des événements virtuels',\n      es: 'Formulario optimizado para registrar asistentes a eventos virtuales'\n    },\n    'Perfecto para tomar pedidos online de manera organizada.': {\n      en: 'Perfect for taking online orders in an organized way.',\n      fr: 'Parfait pour prendre des commandes en ligne de manière organisée.',\n      es: 'Perfecto para tomar pedidos online de manera organizada.'\n    },\n    \n    // Plantillas adicionales que aparecen en la imagen\n    'Evaluación de Evento': {\n      en: 'Event Evaluation',\n      fr: 'Évaluation d\\'Événement',\n      es: 'Evaluación de Evento'\n    },\n    'Solicitud de Empleo': {\n      en: 'Job Application',\n      fr: 'Demande d\\'Emploi',\n      es: 'Solicitud de Empleo'\n    },\n    'Registro a Newsletter': {\n      en: 'Newsletter Registration',\n      fr: 'Inscription à la Newsletter',\n      es: 'Registro a Newsletter'\n    },\n    'Encuesta de Opinión': {\n      en: 'Opinion Survey',\n      fr: 'Enquête d\\'Opinion',\n      es: 'Encuesta de Opinión'\n    },\n    \n    // Descripciones adicionales\n    'Recopila feedback detallado sobre tus eventos y conferencias.': {\n      en: 'Collect detailed feedback about your events and conferences.',\n      fr: 'Recueillez des commentaires détaillés sur vos événements et conférences.',\n      es: 'Recopila feedback detallado sobre tus eventos y conferencias.'\n    },\n    'Optimizado para reclutar candidatos y revisar solicitudes de empleo.': {\n      en: 'Optimized to recruit candidates and review job applications.',\n      fr: 'Optimisé pour recruter des candidats et examiner les demandes d\\'emploi.',\n      es: 'Optimizado para reclutar candidatos y revisar solicitudes de empleo.'\n    },\n    'Forma sencilla para capturar suscriptores a tu boletín informativo.': {\n      en: 'Simple form to capture subscribers to your newsletter.',\n      fr: 'Formulaire simple pour capturer les abonnés à votre newsletter.',\n      es: 'Forma sencilla para capturar suscriptores a tu boletín informativo.'\n    },\n    'Recopila opiniones y valoraciones sobre productos o servicios.': {\n      en: 'Collect opinions and ratings about products or services.',\n      fr: 'Recueillez des opinions et des évaluations sur les produits ou services.',\n      es: 'Recopila opiniones y valoraciones sobre productos o servicios.'\n    }\n  };\n\n  const translateTemplate = (text: string, targetLanguage: string): string => {\n    const translation = templateTranslations[text];\n    if (translation && translation[targetLanguage]) {\n      console.log(`Traduciendo plantilla \"${text}\" a ${targetLanguage}: \"${translation[targetLanguage]}\"`);\n      return translation[targetLanguage];\n    }\n    console.log(`Sin traducción para \"${text}\" en ${targetLanguage}, usando original`);\n    return text;\n  };\n\n  const getTemplateTranslations = (template: FormTemplate) => {\n    return {\n      name: translateTemplate(template.name, selectedLanguage),\n      description: translateTemplate(template.description, selectedLanguage)\n    };\n  };\n\n  // Mapeo de traducciones para campos de formularios\n  const getFieldTranslations = (language: string) => {\n    const translations: Record<string, Record<string, string>> = {\n      es: {\n        name: \"Nombre\",\n        firstName: \"Nombre\",\n        lastName: \"Apellido\",\n        email: \"Correo electrónico\",\n        phone: \"Teléfono\",\n        company: \"Empresa\",\n        message: \"Mensaje\",\n        subject: \"Asunto\",\n        howDidYouHear: \"¿Cómo te enteraste de nosotros?\",\n        interests: \"Intereses\",\n        budget: \"Presupuesto\",\n        projectDetails: \"Detalles del proyecto\",\n        rating: \"Calificación\",\n        feedback: \"Comentarios\",\n        suggestions: \"Sugerencias\",\n        eventName: \"Nombre del evento\",\n        participantCount: \"Número de participantes\",\n        eventDate: \"Fecha del evento\",\n        submit: \"Enviar\"\n      },\n      en: {\n        name: \"Name\",\n        firstName: \"First Name\",\n        lastName: \"Last Name\",\n        email: \"Email\",\n        phone: \"Phone\",\n        company: \"Company\",\n        message: \"Message\",\n        subject: \"Subject\",\n        howDidYouHear: \"How did you hear about us?\",\n        interests: \"Interests\",\n        budget: \"Budget\",\n        projectDetails: \"Project Details\",\n        rating: \"Rating\",\n        feedback: \"Feedback\",\n        suggestions: \"Suggestions\",\n        eventName: \"Event Name\",\n        participantCount: \"Number of Participants\",\n        eventDate: \"Event Date\",\n        submit: \"Submit\"\n      },\n      fr: {\n        name: \"Nom\",\n        firstName: \"Prénom\",\n        lastName: \"Nom de famille\",\n        email: \"Email\",\n        phone: \"Téléphone\",\n        company: \"Entreprise\",\n        message: \"Message\",\n        subject: \"Sujet\",\n        howDidYouHear: \"Comment avez-vous entendu parler de nous?\",\n        interests: \"Intérêts\",\n        budget: \"Budget\",\n        projectDetails: \"Détails du projet\",\n        rating: \"Évaluation\",\n        feedback: \"Commentaires\",\n        suggestions: \"Suggestions\",\n        eventName: \"Nom de l'événement\",\n        participantCount: \"Nombre de participants\",\n        eventDate: \"Date de l'événement\",\n        submit: \"Soumettre\"\n      }\n    };\n    return translations[language] || translations.es;\n  };\n\n  // Fetch available templates\n  const { data: templates, isLoading } = useQuery<FormTemplate[]>({\n    queryKey: ['/api/form-templates'],\n  });\n\n  // Create new form based on template\n  const createFormMutation = useMutation({\n    mutationFn: async (templateId: number) => {\n      return await apiRequest('POST', '/api/forms', { \n        templateId,\n        language: selectedLanguage\n      });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/forms'] });\n      toast({\n        title: t('formTemplateSelector.formCreated'),\n        description: t('formTemplateSelector.formCreatedDescription'),\n      });\n      // Redireccionar a dashboard con la pestaña forms activada\n      setLocation(`/dashboard?tab=forms`);\n      toast({\n        title: t('formTemplateSelector.formReadyToEdit'),\n        description: t('formTemplateSelector.formFoundInList'),\n      });\n    },\n    onError: (error: any) => {\n      // Check if it's a plan limit error (403 status)\n      if (error.message && error.message.includes(\"límite\")) {\n        upgradeModal.handlePlanLimitError(error.message);\n      } else {\n        toast({\n          title: t('common.error'),\n          description: `${t('formTemplateSelector.createFormError')}: ${error.message}`,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleTemplateSelect = (templateId: number) => {\n    setSelectedTemplate(templateId);\n  };\n\n  // Verificar límites antes del envío para plantillas\n  const handleSubmitWithLimitCheck = async (templateId: number) => {\n    try {\n      // Verificar si puede crear más formularios\n      const canCreate = await canCreateResource('forms');\n      \n      if (!canCreate) {\n        // Mostrar modal de upgrade con información específica\n        const formLimit = limits?.limits?.forms?.limit || 1;\n        const formUsed = limits?.limits?.forms?.used || 0;\n        const planName = limits?.planName || \"Plan Básico\";\n        \n        upgradeModal.showUpgradeModal('forms', formLimit, planName);\n        return;\n      }\n      \n      // Si puede crear, proceder normalmente\n      createFormMutation.mutate(templateId);\n    } catch (error) {\n      console.error('Error verificando límites:', error);\n      toast({\n        title: t('common.error'),\n        description: \"No se pudo verificar los límites de tu plan. Inténtalo de nuevo.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateForm = () => {\n    if (selectedTemplate) {\n      handleSubmitWithLimitCheck(selectedTemplate);\n    } else {\n      toast({\n        title: t('formTemplateSelector.selectionRequired'),\n        description: t('formTemplateSelector.pleaseSelectTemplate'),\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Verificar límites antes de crear formulario en blanco\n  const handleCreateBlankFormWithLimitCheck = async () => {\n    try {\n      // Verificar si puede crear más formularios\n      const canCreate = await canCreateResource('forms');\n      \n      if (!canCreate) {\n        // Mostrar modal de upgrade con información específica\n        const formLimit = limits?.limits?.forms?.limit || 1;\n        const formUsed = limits?.limits?.forms?.used || 0;\n        const planName = limits?.planName || \"Plan Básico\";\n        \n        upgradeModal.showUpgradeModal('forms', formLimit, planName);\n        return;\n      }\n      \n      // Si puede crear, proceder normalmente\n      await handleCreateBlankForm();\n    } catch (error) {\n      console.error('Error verificando límites:', error);\n      toast({\n        title: t('common.error'),\n        description: \"No se pudo verificar los límites de tu plan. Inténtalo de nuevo.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateBlankForm = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/forms', { \n        templateId: null // Indica crear formulario en blanco\n      });\n      \n      // Corregir el parsing del JSON response\n      const created = await response.json();\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/forms'] });\n      toast({\n        title: t('formTemplateSelector.blankFormCreated'),\n        description: t('formTemplateSelector.blankFormDescription'),\n      });\n      \n      // Redirigir al editor de formularios con el nuevo ID\n      if (created.id) {\n        setLocation(`/dashboard/form-editor/${created.id}`);\n      } else {\n        setLocation('/dashboard?tab=forms');\n      }\n    } catch (error: any) {\n      // Check if it's a plan limit error (403 status)\n      if (error.message && error.message.includes(\"límite\")) {\n        upgradeModal.handlePlanLimitError(error.message);\n      } else {\n        toast({\n          title: t('common.error'),\n          description: `${t('formTemplateSelector.createFormError')}: ${error.message}`,\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <h2 className=\"text-2xl font-bold\">{t('formTemplateSelector.selectTemplate')}</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"cursor-pointer hover:border-primary/50\">\n              <CardHeader>\n                <Skeleton className=\"h-6 w-3/4\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-2/3\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">{t('formTemplateSelector.selectTemplate')}</h2>\n          <p className=\"text-muted-foreground text-sm mt-1\">\n            {t('formTemplateSelector.hoverToPreview')} <Eye className=\"w-3 h-3 inline mx-1\" /> {t('formTemplateSelector.beforeUsing')}.\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Label htmlFor=\"language-selector\" className=\"text-sm font-medium\">\n              {t('formTemplateSelector.formLanguage', 'Form Language')}:\n            </Label>\n            <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"es\">🇪🇸 Español</SelectItem>\n                <SelectItem value=\"en\">🇺🇸 English</SelectItem>\n                <SelectItem value=\"fr\">🇫🇷 Français</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={handleCreateBlankFormWithLimitCheck}\n            disabled={limits?.limits?.forms?.remaining === 0}\n            title={limits?.limits?.forms?.remaining === 0 ? \n              `Has alcanzado el límite de ${limits?.limits?.forms?.limit} formularios en tu plan ${limits?.planName}` : \n              undefined}\n            data-testid=\"button-create-blank-form\"\n          >\n            {t('formTemplateSelector.createFromScratch')}\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {templates?.map((template) => {\n          const translations = getTemplateTranslations(template);\n          return (\n            <Card \n              key={template.id}\n              className={`cursor-pointer transition-all hover:shadow-md ${\n                selectedTemplate === template.id \n                  ? \"border-2 border-primary ring-2 ring-primary/20 bg-primary/5 dark:bg-primary/10\" \n                  : \"hover:border-primary/30\"\n              }`}\n              onClick={() => handleTemplateSelect(template.id)}\n            >\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center justify-between\">\n                  {translations.name}\n                </CardTitle>\n                <CardDescription>{translations.description}</CardDescription>\n              </CardHeader>\n            <CardContent className=\"flex flex-col items-center justify-center py-4\">\n              <div className=\"w-full aspect-video bg-slate-100 dark:bg-gray-800 rounded-md mb-3 overflow-hidden relative group\">\n                {/* Botón de vista previa */}\n                <button \n                  className=\"absolute right-2 top-2 bg-primary/90 text-white p-1.5 rounded-full z-10 opacity-0 group-hover:opacity-100 transition-opacity\" \n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setPreviewTemplate(template);\n                    setShowPreview(true);\n                  }}\n                  title={t('formTemplateSelector.preview')}\n                >\n                  <Eye className=\"h-4 w-4\" />\n                </button>\n                \n                {/* Miniatura de ejemplo - normalmente sería una imagen real almacenada en el servidor */}\n                <div className={`w-full h-full flex flex-col p-4 border ${\n                  selectedTemplate === template.id ? \"border-primary\" : \"border-gray-200 dark:border-gray-700\"\n                } rounded-md`}>\n                  {/* Encabezado del formulario de muestra */}\n                  <div className=\"w-full mb-3\">\n                    <div className=\"h-4 w-3/4 bg-gray-300 dark:bg-gray-600 rounded mb-1\"></div>\n                    <div className=\"h-3 w-1/2 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                  </div>\n                  \n                  {/* Simulación de campos según el tipo de formulario */}\n                  <div className=\"space-y-2 w-full\">\n                    {template.type === 'contact' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-16 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                      </>\n                    )}\n                    \n                    {template.type === 'waitlist' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/2 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"flex space-x-2\">\n                            <div className=\"h-5 w-5 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                            <div className=\"h-3 w-3/4 bg-gray-200 dark:bg-gray-700 rounded mt-1\"></div>\n                          </div>\n                        </div>\n                      </>\n                    )}\n                    \n                    {template.type === 'survey' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/3 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"flex space-x-1\">\n                            {[1, 2, 3, 4, 5].map((n) => (\n                              <div key={n} className=\"h-5 w-5 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                            ))}\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/3 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-10 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                      </>\n                    )}\n                    \n                    {template.type === 'lead' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                      </>\n                    )}\n                    \n                    {template.type === 'registration' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"h-8 w-full bg-gray-300 dark:bg-gray-600 rounded mt-3\"></div>\n                      </>\n                    )}\n                    \n                    {template.type === 'order' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <div className=\"flex flex-col space-y-1 w-2/3\">\n                            <div className=\"h-3 w-1/3 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                            <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                          </div>\n                          <div className=\"flex flex-col space-y-1 w-1/3\">\n                            <div className=\"h-3 w-1/2 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                            <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                          </div>\n                        </div>\n                        <div className=\"h-8 w-full bg-gray-300 dark:bg-gray-600 rounded mt-3\"></div>\n                      </>\n                    )}\n                    \n                    {template.type === 'feedback' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/3 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"flex space-x-1\">\n                            {[1, 2, 3, 4, 5].map((n) => (\n                              <div key={n} className=\"h-5 w-5 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                            ))}\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/3 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"flex space-x-1\">\n                            {[1, 2, 3].map((n) => (\n                              <div key={n} className=\"flex items-center space-x-1\">\n                                <div className=\"h-4 w-4 rounded-full bg-gray-200 dark:bg-gray-700\"></div>\n                                <div className=\"h-3 w-12 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/3 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-10 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                      </>\n                    )}\n                    \n                    {template.type === 'application' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"h-6 w-3/4 bg-gray-300 dark:bg-gray-600 rounded-sm mt-2 mx-auto\"></div>\n                      </>\n                    )}\n                    \n                    {template.type === 'subscription' && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <div className=\"h-4 w-4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-3 w-3/4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"h-8 w-1/3 bg-gray-300 dark:bg-gray-600 rounded mt-2 mx-auto\"></div>\n                      </>\n                    )}\n                    \n                    {/* Fallback para otros tipos */}\n                    {!['contact', 'waitlist', 'survey', 'lead', 'registration', 'order', 'feedback', 'application', 'subscription'].includes(template.type) && (\n                      <>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-6 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                        <div className=\"flex flex-col space-y-1\">\n                          <div className=\"h-3 w-1/4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                          <div className=\"h-10 w-full bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                  \n                  {/* Botón de muestra */}\n                  <div className=\"mt-auto pt-3\">\n                    <div className=\"h-7 w-1/3 bg-primary/30 rounded-sm mx-auto\"></div>\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-sm font-medium text-center text-muted-foreground\">\n                {template.type.charAt(0).toUpperCase() + template.type.slice(1)}\n              </p>\n            </CardContent>\n            <CardFooter className=\"bg-muted/50 p-3\">\n              <Button \n                variant={selectedTemplate === template.id ? \"default\" : \"ghost\"}\n                className={`w-full text-xs justify-between ${selectedTemplate === template.id ? \"bg-primary text-primary-foreground\" : \"text-primary hover:bg-primary/10 hover:text-primary\"} ${limits?.limits?.forms?.remaining === 0 ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\n                disabled={limits?.limits?.forms?.remaining === 0}\n                title={limits?.limits?.forms?.remaining === 0 ? \n                  `Has alcanzado el límite de ${limits?.limits?.forms?.limit} formularios en tu plan ${limits?.planName}` : \n                  undefined}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setSelectedTemplate(template.id);\n                  handleSubmitWithLimitCheck(template.id);\n                }}\n                data-testid={`button-use-template-${template.id}`}\n              >\n                <span>{selectedTemplate === template.id ? t('formTemplateSelector.createWithTemplate') : t('formTemplateSelector.useTemplate')}</span>\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardFooter>\n          </Card>\n          )\n        })}\n      </div>\n\n      {/* Modal de Vista Previa */}\n      <Dialog open={showPreview} onOpenChange={setShowPreview}>\n        <DialogContent className=\"sm:max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-bold\">\n              {previewTemplate?.name || t('formTemplateSelector.templatePreview')}\n            </DialogTitle>\n            <DialogDescription>\n              {previewTemplate?.description || t('formTemplateSelector.previewDescription')}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"bg-white dark:bg-slate-900 border rounded-lg p-6 max-h-[70vh] overflow-y-auto\">\n            {previewTemplate && (\n              <div className=\"space-y-6\">\n                <div className=\"text-center mb-8\">\n                  <h2 className=\"text-2xl font-bold mb-2\">{previewTemplate.name}</h2>\n                  <p className=\"text-muted-foreground\">{previewTemplate.description}</p>\n                </div>\n                \n                {/* Aquí renderizamos una versión más detallada del formulario según el tipo */}\n                {previewTemplate.type === 'contact' && (\n                  <div className=\"max-w-2xl mx-auto space-y-5 bg-gradient-to-br from-white to-blue-50 dark:from-gray-900 dark:to-gray-800 p-8 rounded-xl shadow-sm\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Nombre<span className=\"text-blue-500 ml-1\">*</span></label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Email<span className=\"text-blue-500 ml-1\">*</span></label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Asunto</label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Mensaje<span className=\"text-blue-500 ml-1\">*</span></label>\n                      <div className=\"h-36 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    <div className=\"pt-6\">\n                      <div className=\"h-12 w-full md:w-1/3 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full shadow-md mx-auto\"></div>\n                    </div>\n                  </div>\n                )}\n                \n                {previewTemplate.type === 'waitlist' && (\n                  <div className=\"max-w-2xl mx-auto space-y-5 bg-gradient-to-br from-white to-purple-50 dark:from-gray-900 dark:to-purple-900/20 p-8 rounded-xl shadow-sm\">\n                    <div className=\"text-center mb-6\">\n                      <div className=\"inline-block p-3 bg-purple-100 dark:bg-purple-900/30 rounded-2xl mb-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-xl\"></div>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Nombre completo<span className=\"text-purple-500 ml-1\">*</span></label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-full border-0 shadow-sm\"></div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Email<span className=\"text-purple-500 ml-1\">*</span></label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-full border-0 shadow-sm\"></div>\n                    </div>\n                    <div className=\"space-y-2 pt-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"h-5 w-5 bg-white dark:bg-gray-800 rounded-md border border-purple-300 dark:border-purple-700 flex items-center justify-center\">\n                          <div className=\"h-3 w-3 rounded-sm bg-purple-500 opacity-0\"></div>\n                        </div>\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Quiero recibir actualizaciones por email</span>\n                      </div>\n                    </div>\n                    <div className=\"pt-6\">\n                      <div className=\"h-12 w-full md:w-2/3 bg-gradient-to-r from-purple-500 to-indigo-600 rounded-full shadow-md mx-auto\"></div>\n                    </div>\n                  </div>\n                )}\n                \n                {previewTemplate.type === 'survey' && (\n                  <div className=\"max-w-2xl mx-auto space-y-7 bg-gradient-to-br from-white to-teal-50 dark:from-gray-900 dark:to-teal-900/20 p-8 rounded-xl shadow-sm\">\n                    <div className=\"space-y-4\">\n                      <label className=\"text-base font-medium text-gray-800 dark:text-gray-200\">¿Cómo calificaría nuestro servicio?<span className=\"text-teal-500 ml-1\">*</span></label>\n                      <div className=\"flex justify-between bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm\">\n                        {[1, 2, 3, 4, 5].map((n) => (\n                          <div key={n} className=\"flex flex-col items-center\">\n                            <div className=\"h-10 w-10 rounded-full border-2 border-gray-200 dark:border-gray-700 flex items-center justify-center\">\n                              <div className=\"h-6 w-6 rounded-full bg-teal-500 opacity-0\"></div>\n                            </div>\n                            <span className=\"text-xs mt-2 font-medium\">{n}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2 pt-4\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">¿Qué aspectos podríamos mejorar?</label>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        {['Atención', 'Producto', 'Precios', 'Soporte'].map((option) => (\n                          <div key={option} className=\"h-10 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 flex items-center px-3\">\n                            <div className=\"h-4 w-4 rounded-full border border-teal-500 mr-2\"></div>\n                            <span className=\"text-xs text-gray-500\">{option}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Comentarios adicionales</label>\n                      <div className=\"h-24 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"pt-6\">\n                      <div className=\"h-12 w-full md:w-1/3 bg-gradient-to-r from-teal-500 to-emerald-500 rounded-lg shadow-md mx-auto\"></div>\n                    </div>\n                  </div>\n                )}\n                \n                {previewTemplate.type === 'lead' && (\n                  <div className=\"max-w-2xl mx-auto space-y-5 bg-gradient-to-br from-white to-orange-50 dark:from-gray-900 dark:to-orange-900/10 p-8 rounded-xl shadow-sm\">\n                    <div className=\"text-center mb-6\">\n                      <div className=\"inline-block p-3 bg-orange-100 dark:bg-orange-900/20 rounded-xl mb-2\">\n                        <div className=\"w-14 h-2 bg-orange-400 dark:bg-orange-500 rounded-full mb-2\"></div>\n                        <div className=\"w-10 h-2 bg-orange-300 dark:bg-orange-600 rounded-full\"></div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Nombre<span className=\"text-orange-500 ml-1\">*</span></label>\n                        <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm\"></div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Apellido<span className=\"text-orange-500 ml-1\">*</span></label>\n                        <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm\"></div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Email de trabajo<span className=\"text-orange-500 ml-1\">*</span></label>\n                      <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Empresa<span className=\"text-orange-500 ml-1\">*</span></label>\n                      <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">¿Qué servicio te interesa?</label>\n                      <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"pt-4 flex justify-center\">\n                      <div className=\"h-12 w-full sm:w-2/3 bg-gradient-to-r from-orange-500 to-amber-500 rounded-md shadow-md\"></div>\n                    </div>\n                  </div>\n                )}\n                \n                {previewTemplate.type === 'registration' && (\n                  <div className=\"max-w-2xl mx-auto space-y-6 bg-gradient-to-br from-white to-sky-50 dark:from-gray-900 dark:to-sky-900/10 p-8 rounded-xl shadow-sm\">\n                    <div className=\"flex items-center justify-center space-x-4 mb-4\">\n                      <div className=\"h-2 w-24 bg-sky-500 rounded-full\"></div>\n                      <div className=\"h-2 w-24 bg-sky-200 dark:bg-sky-800 rounded-full\"></div>\n                      <div className=\"h-2 w-24 bg-sky-200 dark:bg-sky-800 rounded-full\"></div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-5\">\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Nombre<span className=\"text-sky-500 ml-1\">*</span></label>\n                        <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm\"></div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Apellido<span className=\"text-sky-500 ml-1\">*</span></label>\n                        <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm\"></div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Email<span className=\"text-sky-500 ml-1\">*</span></label>\n                      <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">¿Cómo supiste del evento?</label>\n                      <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-md border-0 shadow-sm relative\">\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 border-r-2 border-b-2 border-gray-400 rotate-45\"></div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-5\">\n                      <div className=\"h-12 w-full bg-gradient-to-r from-sky-500 to-blue-500 rounded-md shadow-md\"></div>\n                    </div>\n                  </div>\n                )}\n                \n                {previewTemplate.type === 'order' && (\n                  <div className=\"max-w-2xl mx-auto space-y-6 bg-white dark:bg-gray-900 p-8 rounded-xl shadow-md border border-gray-100 dark:border-gray-800\">\n                    <div className=\"flex items-center justify-between mb-4 border-b pb-4 border-gray-100 dark:border-gray-800\">\n                      <div>\n                        <div className=\"h-6 w-32 bg-gray-900 dark:bg-white rounded-md\"></div>\n                        <div className=\"h-3 w-24 bg-gray-200 dark:bg-gray-700 rounded mt-1\"></div>\n                      </div>\n                      <div className=\"h-10 w-10 rounded-full bg-black dark:bg-white\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-6\">\n                      <div className=\"space-y-1\">\n                        <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Producto<span className=\"text-red-500 ml-1\">*</span></label>\n                        <div className=\"h-14 w-full bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 relative\">\n                          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\n                            <div className=\"h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                          </div>\n                          <div className=\"absolute left-14 top-1/2 transform -translate-y-1/2\">\n                            <div className=\"h-3 w-32 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                            <div className=\"h-2 w-24 bg-gray-200 dark:bg-gray-700 rounded mt-1\"></div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-1\">\n                          <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Cantidad<span className=\"text-red-500 ml-1\">*</span></label>\n                          <div className=\"h-11 w-full bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\"></div>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Fecha de entrega</label>\n                          <div className=\"h-11 w-full bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\"></div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-1\">\n                        <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Instrucciones especiales</label>\n                        <div className=\"h-20 w-full bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\"></div>\n                      </div>\n                      \n                      <div className=\"pt-2\">\n                        <div className=\"h-12 w-full bg-black dark:bg-white rounded-lg\"></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {previewTemplate.type === 'feedback' && (\n                  <div className=\"max-w-2xl mx-auto space-y-8 bg-gradient-to-br from-white to-rose-50 dark:from-gray-900 dark:to-rose-900/10 p-8 rounded-xl shadow-sm\">\n                    <div className=\"text-center mb-2\">\n                      <div className=\"inline-flex mb-2\">\n                        {[1, 2, 3, 4, 5].map((n) => (\n                          <div key={n} className=\"h-8 w-8 text-rose-500 mx-1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                              <path fillRule=\"evenodd\" d=\"M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z\" clipRule=\"evenodd\" />\n                            </svg>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">¿Qué le pareció nuestro servicio?<span className=\"text-rose-500 ml-1\">*</span></label>\n                      <div className=\"flex space-x-2\">\n                        {['Excelente', 'Bueno', 'Regular', 'Malo', 'Muy malo'].map((option) => (\n                          <div key={option} className=\"flex-1 h-10 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 flex items-center justify-center\">\n                            <span className=\"text-xs text-gray-500\">{option}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">¿Recomendaría nuestro servicio a un amigo?<span className=\"text-rose-500 ml-1\">*</span></label>\n                      <div className=\"h-11 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Comentarios adicionales</label>\n                      <div className=\"h-28 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"pt-2\">\n                      <div className=\"h-12 w-full md:w-1/2 bg-gradient-to-r from-rose-500 to-pink-500 rounded-lg shadow-md mx-auto\"></div>\n                    </div>\n                  </div>\n                )}\n                \n                {previewTemplate.type === 'application' && (\n                  <div className=\"max-w-2xl mx-auto space-y-6 bg-gradient-to-r from-white to-gray-50 dark:from-gray-900 dark:to-slate-800 p-8 rounded-xl shadow-md\">\n                    <div className=\"border-b border-gray-200 dark:border-gray-700 pb-6 mb-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <div className=\"h-6 w-48 bg-gray-900 dark:bg-white rounded\"></div>\n                          <div className=\"h-3 w-36 bg-gray-300 dark:bg-gray-600 rounded\"></div>\n                        </div>\n                        <div className=\"h-12 w-12 rounded-lg bg-gray-900 dark:bg-white\"></div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Nombre<span className=\"text-gray-900 dark:text-white ml-1\">*</span></label>\n                        <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700\"></div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Apellido<span className=\"text-gray-900 dark:text-white ml-1\">*</span></label>\n                        <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700\"></div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Email<span className=\"text-gray-900 dark:text-white ml-1\">*</span></label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">LinkedIn o sitio web<span className=\"text-gray-900 dark:text-white ml-1\">*</span></label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Sube tu CV<span className=\"text-gray-900 dark:text-white ml-1\">*</span></label>\n                      <div className=\"h-24 w-full bg-white dark:bg-gray-800 rounded-md border border-dashed border-gray-300 dark:border-gray-700 flex items-center justify-center\">\n                        <div className=\"text-center\">\n                          <div className=\"h-10 w-10 mx-auto bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center\">\n                            <div className=\"h-5 w-5 bg-gray-400 dark:bg-gray-500 rounded\"></div>\n                          </div>\n                          <div className=\"h-2 w-24 bg-gray-200 dark:bg-gray-600 rounded mt-2 mx-auto\"></div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-4\">\n                      <div className=\"h-12 w-full bg-gray-900 dark:bg-white rounded-md\"></div>\n                    </div>\n                  </div>\n                )}\n                \n                {previewTemplate.type === 'subscription' && (\n                  <div className=\"max-w-2xl mx-auto space-y-5 bg-gradient-to-br from-white to-green-50 dark:from-gray-900 dark:to-green-900/10 p-8 rounded-xl shadow-sm\">\n                    <div className=\"text-center mb-6\">\n                      <div className=\"inline-block p-3 bg-green-100 dark:bg-green-900/20 rounded-full mb-4\">\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full\"></div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Nombre<span className=\"text-green-500 ml-1\">*</span></label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Email<span className=\"text-green-500 ml-1\">*</span></label>\n                      <div className=\"h-12 w-full bg-white dark:bg-gray-800 rounded-lg border-0 shadow-sm\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-3 pt-2\">\n                      <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Frecuencia de envío</label>\n                      <div className=\"grid grid-cols-3 gap-3\">\n                        {['Diario', 'Semanal', 'Mensual'].map((option) => (\n                          <div key={option} className=\"h-10 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 flex items-center justify-center\">\n                            <span className=\"text-xs\">{option}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2 pt-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"h-5 w-5 bg-white dark:bg-gray-800 rounded-md border border-green-300 dark:border-green-700 flex items-center justify-center\">\n                          <div className=\"h-3 w-3 rounded-sm bg-green-500 opacity-0\"></div>\n                        </div>\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Acepto recibir comunicaciones por email</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"pt-6\">\n                      <div className=\"h-12 w-full md:w-1/2 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full shadow-md mx-auto\"></div>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Formulario genérico para otros tipos */}\n                {!['contact', 'waitlist', 'survey', 'lead', 'registration', 'order', 'feedback', 'application', 'subscription'].includes(previewTemplate.type) && (\n                  <div className=\"max-w-2xl mx-auto space-y-5 bg-white dark:bg-gray-900 p-8 rounded-xl shadow-sm\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Nombre <span className=\"text-red-500\">*</span></label>\n                      <div className=\"h-10 w-full bg-gray-100 dark:bg-gray-800 rounded-md border\"></div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Email <span className=\"text-red-500\">*</span></label>\n                      <div className=\"h-10 w-full bg-gray-100 dark:bg-gray-800 rounded-md border\"></div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Mensaje</label>\n                      <div className=\"h-24 w-full bg-gray-100 dark:bg-gray-800 rounded-md border\"></div>\n                    </div>\n                    <div className=\"pt-4\">\n                      <div className=\"h-10 w-full md:w-1/3 bg-primary/80 rounded-md mx-auto\"></div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n          \n          <DialogFooter className=\"flex flex-col sm:flex-row gap-2 sm:justify-between\">\n            <DialogClose asChild>\n              <Button variant=\"outline\">{t('formTemplateSelector.closePreview')}</Button>\n            </DialogClose>\n            \n            <Button\n              disabled={!previewTemplate || createFormMutation.isPending}\n              onClick={() => {\n                if (previewTemplate) {\n                  setSelectedTemplate(previewTemplate.id);\n                  createFormMutation.mutate(previewTemplate.id);\n                  setShowPreview(false);\n                }\n              }}\n            >\n              {createFormMutation.isPending ? t('formTemplateSelector.creating') : t('formTemplateSelector.useTemplate')}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <div className=\"flex justify-end mt-6\">\n        <Button \n          onClick={handleCreateForm}\n          disabled={!selectedTemplate || createFormMutation.isPending}\n        >\n          {createFormMutation.isPending ? \"Creando...\" : \"Continuar\"}\n        </Button>\n      </div>\n\n      <UpgradePlanModal\n        isOpen={upgradeModal.isOpen}\n        onClose={upgradeModal.hideUpgradeModal}\n        limitType={upgradeModal.limitType}\n        currentLimit={upgradeModal.currentLimit}\n        planName={upgradeModal.planName}\n      />\n    </div>\n  );\n}","size_bytes":61774},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border-2 border-input bg-background hover:bg-accent hover:text-accent-foreground text-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1919},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border backdrop-blur-md bg-white/50 dark:bg-gray-900/50 text-card-foreground shadow-lg border-white/20 dark:border-gray-800/30\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight card-text-enhance\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground card-text-enhance\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1994},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"deploy.sh":{"content":"#!/bin/bash\n\n# Production deployment script\necho \"Starting production deployment...\"\n\n# Set NODE_ENV to production\nexport NODE_ENV=production\n\n# Build the application\necho \"Building application...\"\nnpm run build\n\n# Start the production server\necho \"Starting production server...\"\nnpm run start","size_bytes":293},"RAILWAY-DEPLOY-FINAL.md":{"content":"# 🚀 AIPI - Guía Completa de Deploy en Railway\n\n## ✅ Status: 100% Listo para Railway\n\nTu aplicación ha sido **completamente adaptada** para Railway deployment. Todos los ajustes técnicos necesarios ya están implementados.\n\n## 🔧 Cambios Realizados\n\n### 1. **Base de Datos Actualizada** ✅\n- ✅ Migración de Neon Serverless a PostgreSQL estándar\n- ✅ Configuración SSL para producción\n- ✅ Manejo de errores mejorado\n- ✅ Compatible con Railway PostgreSQL\n\n### 2. **Scripts de Migración Modernizados** ✅\n- ✅ `railway-migrate.js` actualizado con sintaxis moderna\n- ✅ `setup-railway-db.js` completamente funcional\n- ✅ Creación automática de datos iniciales\n- ✅ Logs detallados para debugging\n\n### 3. **Configuración de Production Build** ✅\n- ✅ Build de producción verificado (npm run build)\n- ✅ Scripts de Railway optimizados\n- ✅ Variables de entorno configuradas\n- ✅ Servidor compatible con Railway\n\n## 🌐 Pasos para Deploy en Railway\n\n### **Paso 1: Crear Proyecto en Railway**\n1. Ve a [railway.app](https://railway.app)\n2. Crea una cuenta o inicia sesión\n3. Haz clic en \"Deploy from GitHub repo\"\n4. Selecciona tu repositorio de AIPI\n\n### **Paso 2: Provisionar PostgreSQL**\n1. En tu proyecto Railway, haz clic en \"+ Add Service\"\n2. Selecciona \"PostgreSQL\"\n3. Railway creará automáticamente la base de datos\n\n### **Paso 3: Configurar Variables de Entorno**\nEn tu servicio web, ve a **Variables** y agrega:\n\n```bash\n# Variables OBLIGATORIAS\nDATABASE_URL=${{Postgres.DATABASE_URL}}\nNODE_ENV=production\nPORT=5000\nJWT_SECRET=aipi_jwt_secret_2024_production\n\n# Variables OPCIONALES (para funciones específicas)\nOPENAI_API_KEY=tu_clave_openai_aqui\nSTRIPE_SECRET_KEY=tu_clave_stripe_aqui\nSTRIPE_WEBHOOK_SECRET=tu_webhook_stripe_aqui\n```\n\n### **Paso 4: Deploy Automático**\n- Railway detectará los cambios y desplegará automáticamente\n- El script `railway-start.sh` ejecutará:\n  1. 📊 Migraciones de base de datos (`drizzle-kit push`)\n  2. 🏗️ Configuración inicial (`setup-railway-db.js`)\n  3. 🌐 Inicio del servidor\n\n### **Paso 5: Verificar Deploy**\n1. Railway te dará una URL pública (ej: `tu-app.railway.app`)\n2. La aplicación estará disponible automáticamente con HTTPS\n3. Verifica que la base de datos esté funcionando\n\n## 📊 Lo Que Se Crea Automáticamente\n\n### **Tablas de Base de Datos:**\n- `users` - Usuarios del sistema\n- `integrations` - Integraciones de websites\n- `conversations` - Conversaciones del chat\n- `messages` - Mensajes individuales\n- `pricing_plans` - Planes de suscripción\n- `welcome_messages` - Mensajes de bienvenida\n- `forms` - Formularios dinámicos\n- `form_submissions` - Envíos de formularios\n- Y todas las demás tablas del schema\n\n### **Datos Iniciales:**\n- ✅ Usuario administrador: `admin@aipi.com` / `admin123`\n- ✅ 3 planes de precios (Free, Pro, Enterprise)\n- ✅ Mensajes de bienvenida en 3 idiomas (ES, EN, FR)\n\n## 🔍 Troubleshooting\n\n### **Si el deploy falla:**\n1. **Verifica DATABASE_URL**: Asegúrate de usar `${{Postgres.DATABASE_URL}}`\n2. **Revisa logs**: Ve a la pestaña \"Deployments\" para ver errores\n3. **Variables faltantes**: Confirma que todas las variables obligatorias estén configuradas\n\n### **Si la base de datos no conecta:**\n1. **Revisa SSL**: Railway requiere SSL en producción (ya configurado)\n2. **Verifica URL**: La DATABASE_URL debe ser la de Railway, no localhost\n3. **Espera**: Las migraciones pueden tomar 1-2 minutos\n\n## 🎯 Arquitectura en Railway\n\n```\nRailway Project\n├── Web Service (tu aplicación)\n│   ├── Frontend (React + Vite)\n│   ├── Backend (Node.js + Express)\n│   └── Build automático\n└── PostgreSQL Service\n    ├── Base de datos automática\n    ├── Backups automáticos\n    └── SSL/TLS incluido\n```\n\n## 🚀 Siguientes Pasos\n\n1. **Deploy**: Sigue los pasos arriba ⬆️\n2. **Dominio personalizado**: Railway permite dominios custom\n3. **Monitoreo**: Railway incluye métricas y logs automáticos\n4. **Escalado**: Railway escala automáticamente según demanda\n\n## 💡 Ventajas de Railway vs Replit\n\n| Característica | Railway | Replit |\n|----------------|---------|---------|\n| **Producción** | ✅ Optimizado | ⚠️ Desarrollo |\n| **Base de datos** | ✅ PostgreSQL dedicado | ⚠️ Compartido |\n| **SSL/HTTPS** | ✅ Automático | ⚠️ Manual |\n| **Dominios** | ✅ Custom domains | ⚠️ Limitado |\n| **Escalado** | ✅ Automático | ⚠️ Manual |\n| **Uptime** | ✅ 99.9% | ⚠️ Variable |\n\n---\n\n**🎉 ¡Tu aplicación AIPI está lista para producción en Railway!**\n\nSimplemente sigue los pasos arriba y tendrás tu plataforma de IA conversacional ejecutándose en minutos.","size_bytes":4697},"create-replit-backup.js":{"content":"#!/usr/bin/env node\n\n/**\n * Script para crear backup de datos existentes en Replit antes de migrar a Railway\n * Este script debe ejecutarse EN REPLIT antes del deploy a Railway ok\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, existsSync } from 'fs';\nimport { pool, db } from './server/db.js';\nimport * as schema from './shared/schema.js';\n\nconst { users, integrations, conversations, messages, pricingPlans, welcomeMessages, forms } = schema;\n\nconsole.log('🔄 Iniciando backup de datos de Replit...');\n\nasync function createBackup() {\n  try {\n    // Verificar conexión a la base de datos\n    if (!process.env.DATABASE_URL) {\n      console.error('❌ ERROR: DATABASE_URL no está definido en Replit');\n      console.error('💡 Asegúrate de ejecutar este script en el entorno de Replit');\n      process.exit(1);\n    }\n\n    console.log('✅ DATABASE_URL encontrado, creando backup...');\n\n    // 1. Crear backup SQL usando pg_dump (recomendado para migración completa)\n    console.log('📊 Creando backup SQL completo...');\n    try {\n      execSync(`pg_dump \"${process.env.DATABASE_URL}\" > replit-backup-$(date +%Y%m%d-%H%M%S).sql`, {\n        stdio: 'inherit'\n      });\n      console.log('✅ Backup SQL creado exitosamente');\n    } catch (error) {\n      console.warn('⚠️ No se pudo crear backup SQL (pg_dump no disponible), continuando con backup manual...');\n    }\n\n    // 2. Crear backup manual de datos críticos (como fallback)\n    console.log('📋 Creando backup manual de datos críticos...');\n    \n    const backupData = {\n      timestamp: new Date().toISOString(),\n      source: 'replit',\n      target: 'railway',\n      data: {}\n    };\n\n    // Backup de usuarios\n    try {\n      const usersData = await db.select().from(users);\n      backupData.data.users = usersData;\n      console.log(`👤 ${usersData.length} usuarios respaldados`);\n    } catch (error) {\n      console.warn('⚠️ Error backing up users:', error.message);\n      backupData.data.users = [];\n    }\n\n    // Backup de integraciones\n    try {\n      const integrationsData = await db.select().from(integrations);\n      backupData.data.integrations = integrationsData;\n      console.log(`🔗 ${integrationsData.length} integraciones respaldadas`);\n    } catch (error) {\n      console.warn('⚠️ Error backing up integrations:', error.message);\n      backupData.data.integrations = [];\n    }\n\n    // Backup de conversaciones\n    try {\n      const conversationsData = await db.select().from(conversations);\n      backupData.data.conversations = conversationsData;\n      console.log(`💬 ${conversationsData.length} conversaciones respaldadas`);\n    } catch (error) {\n      console.warn('⚠️ Error backing up conversations:', error.message);\n      backupData.data.conversations = [];\n    }\n\n    // Backup de mensajes (últimos 1000 para evitar archivos muy grandes)\n    try {\n      const messagesData = await db.select().from(messages).limit(1000).orderBy(messages.id, 'desc');\n      backupData.data.messages = messagesData;\n      console.log(`📨 ${messagesData.length} mensajes respaldados (últimos 1000)`);\n    } catch (error) {\n      console.warn('⚠️ Error backing up messages:', error.message);\n      backupData.data.messages = [];\n    }\n\n    // Backup de planes de precios\n    try {\n      const plansData = await db.select().from(pricingPlans);\n      backupData.data.pricingPlans = plansData;\n      console.log(`💰 ${plansData.length} planes de precios respaldados`);\n    } catch (error) {\n      console.warn('⚠️ Error backing up pricing plans:', error.message);\n      backupData.data.pricingPlans = [];\n    }\n\n    // Backup de mensajes de bienvenida\n    try {\n      const welcomeData = await db.select().from(welcomeMessages);\n      backupData.data.welcomeMessages = welcomeData;\n      console.log(`🎉 ${welcomeData.length} mensajes de bienvenida respaldados`);\n    } catch (error) {\n      console.warn('⚠️ Error backing up welcome messages:', error.message);\n      backupData.data.welcomeMessages = [];\n    }\n\n    // Backup de formularios\n    try {\n      const formsData = await db.select().from(forms);\n      backupData.data.forms = formsData;\n      console.log(`📝 ${formsData.length} formularios respaldados`);\n    } catch (error) {\n      console.warn('⚠️ Error backing up forms:', error.message);\n      backupData.data.forms = [];\n    }\n\n    // Guardar backup manual en archivo JSON\n    const filename = `replit-backup-manual-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;\n    writeFileSync(filename, JSON.stringify(backupData, null, 2));\n    console.log(`✅ Backup manual guardado en: ${filename}`);\n\n    // Generar resumen\n    const totalRecords = Object.values(backupData.data).reduce((total, table) => total + table.length, 0);\n    console.log('\\n📊 RESUMEN DEL BACKUP:');\n    console.log(`📅 Fecha: ${backupData.timestamp}`);\n    console.log(`📈 Total registros: ${totalRecords}`);\n    console.log(`👤 Usuarios: ${backupData.data.users.length}`);\n    console.log(`🔗 Integraciones: ${backupData.data.integrations.length}`);\n    console.log(`💬 Conversaciones: ${backupData.data.conversations.length}`);\n    console.log(`📨 Mensajes: ${backupData.data.messages.length}`);\n    console.log(`💰 Planes: ${backupData.data.pricingPlans.length}`);\n    console.log(`🎉 Mensajes bienvenida: ${backupData.data.welcomeMessages.length}`);\n    console.log(`📝 Formularios: ${backupData.data.forms.length}`);\n\n    // Generar script de restauración\n    const restoreScript = `\n-- Script de restauración para Railway PostgreSQL\n-- Ejecutar DESPUÉS de que las tablas estén creadas con drizzle-kit push\n\n-- Para restaurar desde el backup SQL:\n-- psql $DATABASE_URL < replit-backup-YYYYMMDD-HHMMSS.sql\n\n-- Para verificar datos restaurados:\nSELECT 'users' as table_name, COUNT(*) as records FROM users\nUNION ALL\nSELECT 'integrations', COUNT(*) FROM integrations  \nUNION ALL\nSELECT 'conversations', COUNT(*) FROM conversations\nUNION ALL\nSELECT 'messages', COUNT(*) FROM messages\nUNION ALL\nSELECT 'pricing_plans', COUNT(*) FROM pricing_plans\nUNION ALL\nSELECT 'welcome_messages', COUNT(*) FROM welcome_messages\nUNION ALL\nSELECT 'forms', COUNT(*) FROM forms;\n`;\n\n    writeFileSync('restore-commands.sql', restoreScript);\n    console.log('✅ Script de restauración creado: restore-commands.sql');\n\n    console.log('\\n🎯 SIGUIENTE PASOS:');\n    console.log('1. ⬇️ Descargar archivos de backup de Replit');\n    console.log('2. 🚀 Hacer deploy a Railway');\n    console.log('3. 📊 Ejecutar migraciones en Railway');\n    console.log('4. 🔄 Restaurar datos usando los archivos backup');\n    console.log('\\n✅ Backup completado exitosamente!');\n\n  } catch (error) {\n    console.error('💥 Error durante el backup:', error);\n    console.error('🔍 Detalles del error:', error.message);\n    process.exit(1);\n  } finally {\n    if (pool) {\n      await pool.end();\n    }\n  }\n}\n\n// Ejecutar backup\ncreateBackup().catch(console.error);\n","size_bytes":7001},"RAILWAY-DEPLOY-INSTRUCTIONS.md":{"content":"# 🚀 AIPI - Instrucciones Completas de Deploy en Railway\n\n## ✅ Tu aplicación está 100% lista para Railway\n\nTodas las adaptaciones técnicas han sido implementadas y verificadas. Tu aplicación AIPI está completamente preparada para un deploy exitoso en Railway.\n\n## 📋 Paso a Paso Completo\n\n### **PASO 1: Backup de Datos Existentes (CRÍTICO)**\n\n**⚠️ EJECUTAR ESTO PRIMERO EN REPLIT:**\n\n```bash\n# En la terminal de Replit, ejecutar:\nnode create-replit-backup.js\n```\n\nEste script creará:\n- ✅ `replit-backup-YYYY-MM-DD.sql` - Backup completo SQL  \n- ✅ `replit-backup-manual-XXXX.json` - Backup manual de datos críticos\n- ✅ `restore-commands.sql` - Comandos para verificar restauración\n\n**📂 Descargar estos archivos de Replit antes del deploy**\n\n---\n\n### **PASO 2: Crear Proyecto en Railway**\n\n1. **Ve a [railway.app](https://railway.app)**\n2. **Crea cuenta** o inicia sesión\n3. **\"Deploy from GitHub repo\"**\n4. **Selecciona tu repositorio** con el código AIPI\n\n---\n\n### **PASO 3: Provisionar PostgreSQL**\n\n1. **En tu proyecto Railway:** Haz clic en \"+\" → **\"Add Service\"**\n2. **Selecciona \"PostgreSQL\"**  \n3. **Railway creará automáticamente** la base de datos\n\n---\n\n### **PASO 4: Configurar Variables de Entorno**\n\n**En tu servicio web → pestaña \"Variables\":**\n\n#### **🔴 Variables OBLIGATORIAS:**\n```bash\nDATABASE_URL=${{Postgres.DATABASE_URL}}\nNODE_ENV=production  \nPORT=5000\nJWT_SECRET=aipi_jwt_secret_2024_production\n```\n\n#### **🟡 Variables OPCIONALES (para funciones específicas):**\n```bash\nOPENAI_API_KEY=tu_clave_openai_aqui\nSTRIPE_SECRET_KEY=tu_clave_stripe_aqui  \nSTRIPE_WEBHOOK_SECRET=tu_webhook_stripe_aqui\n```\n\n**💡 Nota importante:** Usa exactamente `${{Postgres.DATABASE_URL}}` - Railway conectará automáticamente a tu base de datos PostgreSQL.\n\n---\n\n### **PASO 5: Deploy Automático**\n\nRailway detectará los cambios y empezará el deploy automáticamente. El proceso incluye:\n\n1. **🔨 Build:** `npm install && npm run build`\n2. **📊 Migraciones:** `drizzle-kit push --force` \n3. **🏗️ Setup inicial:** Creación de datos por defecto\n4. **🌐 Inicio:** Servidor en producción\n5. **✅ Health check:** Verificación automática en `/api/health`\n\n---\n\n### **PASO 6: Verificar Deploy Exitoso**\n\n1. **Railway te dará una URL** (ej: `tu-app.railway.app`)\n2. **Verificar health check:** `https://tu-app.railway.app/api/health`\n3. **Debería mostrar:**\n```json\n{\n  \"status\": \"healthy\",\n  \"database\": \"connected\", \n  \"timestamp\": \"2025-09-02T...\",\n  \"version\": \"1.0.0\",\n  \"environment\": \"production\"\n}\n```\n\n---\n\n### **PASO 7: Restaurar Datos de Replit**\n\n**Después de que el deploy sea exitoso:**\n\n#### **Opción A: Restauración SQL (Recomendado)**\n```bash\n# Con Railway CLI instalado:\nrailway login\nrailway connect --service tu-servicio-postgres\n\n# Restaurar backup SQL:\npsql $DATABASE_URL < replit-backup-YYYY-MM-DD.sql\n```\n\n#### **Opción B: Restauración Manual**\n```bash\n# Subir archivo JSON a Railway y ejecutar:\nnode restore-railway-data.js replit-backup-manual-XXXX.json\n```\n\n---\n\n### **PASO 8: Verificar Datos Restaurados**\n\n```bash\n# Conectar a Railway PostgreSQL:\npsql $DATABASE_URL\n\n# Verificar datos:\nSELECT 'users' as tabla, COUNT(*) as registros FROM users\nUNION ALL  \nSELECT 'integrations', COUNT(*) FROM integrations\nUNION ALL\nSELECT 'conversations', COUNT(*) FROM conversations;\n```\n\n---\n\n## 🔧 Lo que se Crea Automáticamente\n\n### **Esquema de Base de Datos:**\n- ✅ **13+ tablas** creadas automáticamente\n- ✅ **Índices y relaciones** configurados  \n- ✅ **SSL/TLS** habilitado para seguridad\n\n### **Datos Iniciales:**\n- ✅ **Usuario admin:** `admin@aipi.com` / `admin123`\n- ✅ **3 planes de precios:** Free, Pro, Enterprise\n- ✅ **Mensajes de bienvenida** en ES, EN, FR\n- ✅ **Configuraciones por defecto**\n\n### **Funcionalidades Verificadas:**\n- ✅ **Chat widgets** (bubble + fullscreen)\n- ✅ **Formularios dinámicos**\n- ✅ **Integración OpenAI** (si API key configurada)\n- ✅ **Pagos Stripe** (si API key configurada)\n- ✅ **Multiidioma** completo\n- ✅ **Analytics y reportes**\n\n---\n\n## 🚨 Troubleshooting\n\n### **Deploy falla:**\n1. **Verificar variables:** `DATABASE_URL=${{Postgres.DATABASE_URL}}`\n2. **Revisar logs:** Railway → Deployments → Ver logs detallados\n3. **Verificar PostgreSQL:** Debe estar en el mismo proyecto\n\n### **Base de datos no conecta:**\n1. **Esperar 2-3 minutos** - Railway necesita tiempo para provisionar\n2. **Verificar URL:** Debe usar la referencia `${{Postgres.DATABASE_URL}}`\n3. **SSL configurado automáticamente** para producción\n\n### **Health check falla:**\n- **URL correcta:** `https://tu-app.railway.app/api/health`\n- **Estado esperado:** `status: \"healthy\"`\n- **Si falla:** Revisar logs de Railway\n\n---\n\n## 📊 Comparación: Replit vs Railway\n\n| Característica | Replit | Railway |\n|---------------|---------|---------|\n| **Uptime** | ⚠️ Variable | ✅ 99.9% |\n| **SSL/HTTPS** | ⚠️ Manual | ✅ Automático |\n| **Base de datos** | ⚠️ Compartida | ✅ Dedicada |\n| **Escalado** | ⚠️ Limitado | ✅ Automático |\n| **Dominio custom** | ⚠️ Limitado | ✅ Incluido |\n| **Rendimiento** | ⚠️ Básico | ✅ Optimizado |\n\n---\n\n## 🎯 Beneficios Post-Deploy\n\n### **Para tus usuarios:**\n- ✅ **Velocidad mejorada** - Infraestructura optimizada\n- ✅ **Disponibilidad 24/7** - Sin interrupciones de desarrollo  \n- ✅ **SSL automático** - Seguridad garantizada\n- ✅ **Escalado automático** - Maneja picos de tráfico\n\n### **Para ti:**\n- ✅ **Ambiente profesional** - Separación desarrollo/producción\n- ✅ **Monitoreo integrado** - Métricas y logs automáticos\n- ✅ **Backups automáticos** - Railway respalda tu base de datos\n- ✅ **Dominio personalizado** - Puedes usar tu propio dominio\n\n---\n\n## ✨ Próximos Pasos Después del Deploy\n\n1. **🔗 Configurar dominio personalizado** en Railway\n2. **📧 Configurar emails** (SendGrid/AWS SES) para notificaciones  \n3. **📊 Verificar analytics** en el dashboard de AIPI\n4. **🧪 Hacer pruebas completas** de todas las funciones\n5. **📱 Configurar widgets** en sitios web de clientes\n\n---\n\n**🎉 ¡Tu plataforma AIPI estará lista para producción en Railway!**\n\nTodas las adaptaciones técnicas han sido implementadas. Simplemente sigue estos pasos y tendrás tu plataforma de IA conversacional funcionando profesionalmente en minutos.","size_bytes":6364},"nixpacks.toml":{"content":"[phases.install]\ncmds = ['npm install']\n","size_bytes":40},"restore-railway-data.js":{"content":"#!/usr/bin/env node\n\n/**\n * Script para restaurar datos desde backup de Replit a Railway PostgreSQL\n * Ejecutar DESPUÉS de que Railway esté desplegado y las tablas creadas\n */\n\nimport { readFileSync, existsSync } from 'fs';\nimport pg from 'pg';\nconst { Pool } = pg;\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport { eq } from 'drizzle-orm';\nimport * as schema from './dist/shared/schema.js';\nimport bcrypt from 'bcrypt';\n\nconst { users, integrations, conversations, messages, pricingPlans, welcomeMessages, forms } = schema;\n\nconsole.log('🔄 Iniciando restauración de datos en Railway PostgreSQL...');\n\nasync function restoreData() {\n  const backupFile = process.argv[2];\n  \n  if (!backupFile) {\n    console.error('❌ ERROR: Especifica el archivo de backup');\n    console.error('💡 Uso: node restore-railway-data.js replit-backup-manual-XXXX.json');\n    process.exit(1);\n  }\n\n  if (!existsSync(backupFile)) {\n    console.error(`❌ ERROR: Archivo de backup no encontrado: ${backupFile}`);\n    process.exit(1);\n  }\n\n  if (!process.env.DATABASE_URL) {\n    console.error('❌ ERROR: DATABASE_URL no está definido en Railway');\n    console.error('💡 Asegúrate de ejecutar este script con las variables de entorno de Railway');\n    process.exit(1);\n  }\n\n  try {\n    console.log(`📂 Leyendo backup desde: ${backupFile}`);\n    const backupData = JSON.parse(readFileSync(backupFile, 'utf8'));\n    \n    console.log(`📅 Backup creado: ${backupData.timestamp}`);\n    console.log(`📊 Fuente: ${backupData.source} → Destino: Railway PostgreSQL`);\n\n    // Conectar a Railway PostgreSQL\n    console.log('🔌 Conectando a Railway PostgreSQL...');\n    const pool = new Pool({\n      connectionString: process.env.DATABASE_URL,\n      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n      max: 20,\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n    });\n    \n    const db = drizzle(pool, { schema });\n    console.log('✅ Conexión establecida');\n\n    // Estadísticas de restauración\n    let restored = {\n      users: 0,\n      integrations: 0,\n      conversations: 0,\n      messages: 0,\n      pricingPlans: 0,\n      welcomeMessages: 0,\n      forms: 0\n    };\n\n    // Restaurar usuarios\n    if (backupData.data.users && backupData.data.users.length > 0) {\n      console.log(`👤 Restaurando ${backupData.data.users.length} usuarios...`);\n      for (const user of backupData.data.users) {\n        try {\n          // Verificar si el usuario ya existe\n          const existing = await db.select().from(users).where(eq(users.email, user.email)).limit(1);\n          \n          if (existing.length === 0) {\n            await db.insert(users).values({\n              username: user.username,\n              password: user.password, // Ya está hasheado\n              email: user.email,\n              fullName: user.fullName,\n              apiKey: user.apiKey,\n              stripeCustomerId: user.stripeCustomerId,\n              stripeSubscriptionId: user.stripeSubscriptionId\n            });\n            restored.users++;\n          } else {\n            console.log(`⚠️ Usuario ya existe: ${user.email}`);\n          }\n        } catch (error) {\n          console.warn(`⚠️ Error restaurando usuario ${user.email}:`, error.message);\n        }\n      }\n      console.log(`✅ ${restored.users} usuarios restaurados`);\n    }\n\n    // Restaurar integraciones\n    if (backupData.data.integrations && backupData.data.integrations.length > 0) {\n      console.log(`🔗 Restaurando ${backupData.data.integrations.length} integraciones...`);\n      for (const integration of backupData.data.integrations) {\n        try {\n          // Verificar si la integración ya existe\n          const existing = await db.select().from(integrations).where(eq(integrations.apiKey, integration.apiKey)).limit(1);\n          \n          if (existing.length === 0) {\n            await db.insert(integrations).values({\n              userId: integration.userId,\n              name: integration.name,\n              url: integration.url,\n              apiKey: integration.apiKey,\n              themeColor: integration.themeColor,\n              position: integration.position,\n              active: integration.active,\n              visitorCount: integration.visitorCount,\n              botBehavior: integration.botBehavior,\n              documentsData: integration.documentsData,\n              widgetType: integration.widgetType,\n              ignoredSections: integration.ignoredSections,\n              description: integration.description,\n              ignoredSectionsText: integration.ignoredSectionsText,\n              customization: integration.customization,\n              language: integration.language,\n              textColor: integration.textColor\n            });\n            restored.integrations++;\n          } else {\n            console.log(`⚠️ Integración ya existe: ${integration.name}`);\n          }\n        } catch (error) {\n          console.warn(`⚠️ Error restaurando integración ${integration.name}:`, error.message);\n        }\n      }\n      console.log(`✅ ${restored.integrations} integraciones restauradas`);\n    }\n\n    // Restaurar conversaciones\n    if (backupData.data.conversations && backupData.data.conversations.length > 0) {\n      console.log(`💬 Restaurando ${backupData.data.conversations.length} conversaciones...`);\n      for (const conversation of backupData.data.conversations) {\n        try {\n          await db.insert(conversations).values({\n            integrationId: conversation.integrationId,\n            userId: conversation.userId,\n            visitorId: conversation.visitorId,\n            startedAt: conversation.startedAt,\n            endedAt: conversation.endedAt,\n            status: conversation.status,\n            rating: conversation.rating,\n            feedback: conversation.feedback,\n            isActive: conversation.isActive\n          });\n          restored.conversations++;\n        } catch (error) {\n          console.warn(`⚠️ Error restaurando conversación ${conversation.id}:`, error.message);\n        }\n      }\n      console.log(`✅ ${restored.conversations} conversaciones restauradas`);\n    }\n\n    // Restaurar mensajes (últimos 1000)\n    if (backupData.data.messages && backupData.data.messages.length > 0) {\n      console.log(`📨 Restaurando ${backupData.data.messages.length} mensajes...`);\n      for (const message of backupData.data.messages) {\n        try {\n          await db.insert(messages).values({\n            conversationId: message.conversationId,\n            content: message.content,\n            isFromUser: message.isFromUser,\n            timestamp: message.timestamp,\n            sentiment: message.sentiment,\n            confidence: message.confidence\n          });\n          restored.messages++;\n        } catch (error) {\n          console.warn(`⚠️ Error restaurando mensaje ${message.id}:`, error.message);\n        }\n      }\n      console.log(`✅ ${restored.messages} mensajes restaurados`);\n    }\n\n    // Los planes de precios y mensajes de bienvenida ya se crean en setup-railway-db.js\n    // Solo restaurar si no existen\n\n    console.log('\\n🎉 RESTAURACIÓN COMPLETADA');\n    console.log('📊 Resumen de datos restaurados:');\n    console.log(`👤 Usuarios: ${restored.users}`);\n    console.log(`🔗 Integraciones: ${restored.integrations}`);\n    console.log(`💬 Conversaciones: ${restored.conversations}`);\n    console.log(`📨 Mensajes: ${restored.messages}`);\n    \n    // Verificar datos restaurados\n    console.log('\\n🔍 Verificando datos en Railway...');\n    const finalCounts = await Promise.all([\n      db.select().from(users).then(r => r.length),\n      db.select().from(integrations).then(r => r.length),\n      db.select().from(conversations).then(r => r.length),\n      db.select().from(messages).then(r => r.length)\n    ]);\n\n    console.log('📈 Total final en Railway:');\n    console.log(`👤 Usuarios: ${finalCounts[0]}`);\n    console.log(`🔗 Integraciones: ${finalCounts[1]}`);\n    console.log(`💬 Conversaciones: ${finalCounts[2]}`);\n    console.log(`📨 Mensajes: ${finalCounts[3]}`);\n\n    console.log('\\n✅ ¡Datos migrados exitosamente de Replit a Railway!');\n\n  } catch (error) {\n    console.error('💥 Error durante la restauración:', error);\n    console.error('🔍 Detalles del error:', error.message);\n    process.exit(1);\n  } finally {\n    if (pool) {\n      await pool.end();\n    }\n  }\n}\n\n// Mostrar ayuda si no hay argumentos\nif (process.argv.length < 3) {\n  console.log('🔄 Script de Restauración de Datos - Replit → Railway');\n  console.log('');\n  console.log('📋 Uso:');\n  console.log('  node restore-railway-data.js <archivo-backup.json>');\n  console.log('');\n  console.log('📂 Ejemplo:');\n  console.log('  node restore-railway-data.js replit-backup-manual-2025-09-02T12-00-00-000Z.json');\n  console.log('');\n  console.log('⚠️  Requisitos:');\n  console.log('  - Archivo de backup creado con create-replit-backup.js');\n  console.log('  - Variable DATABASE_URL configurada (Railway PostgreSQL)');\n  console.log('  - Tablas ya creadas con drizzle-kit push');\n  process.exit(0);\n}\n\n// Ejecutar restauración\nrestoreData().catch(console.error);\n","size_bytes":9249},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { ExtendedUser } from \"./database-storage\";\n\ndeclare global {\n  namespace Express {\n    interface User extends ExtendedUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function comparePasswords(supplied: string, stored: string) {\n  if (!stored || typeof stored !== 'string') {\n    console.error('Invalid stored password:', stored);\n    return false;\n  }\n  \n  const parts = stored.split(\".\");\n  if (parts.length !== 2) {\n    console.error('Invalid password format:', stored);\n    return false;\n  }\n  \n  const [hashed, salt] = parts;\n  if (!hashed || !salt) {\n    console.error('Missing hash or salt:', { hashed: !!hashed, salt: !!salt });\n    return false;\n  }\n  \n  try {\n    const hashedBuf = Buffer.from(hashed, \"hex\");\n    const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n    return timingSafeEqual(hashedBuf, suppliedBuf);\n  } catch (error) {\n    console.error('Error comparing passwords:', error);\n    return false;\n  }\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"teampulse-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: false, // Permitir acceso desde JavaScript para AIPPS\n      sameSite: 'lax' // Permitir cookies de widgets externos\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        console.log(`🔐 Login attempt for username: ${username}`);\n        const user = await storage.getUserByUsername(username);\n        if (!user) {\n          console.log(`❌ User not found: ${username}`);\n          return done(null, false);\n        }\n        \n        console.log(`👤 User found: ${user.username}, checking password...`);\n        const passwordMatch = await comparePasswords(password, user.password);\n        console.log(`🔑 Password match result: ${passwordMatch}`);\n        \n        if (!passwordMatch) {\n          console.log(`❌ Password mismatch for user: ${username}`);\n          return done(null, false);\n        } else {\n          console.log(`✅ Login successful for user: ${username}`);\n          return done(null, user);\n        }\n      } catch (error) {\n        console.error(`🚨 Login error for user ${username}:`, error);\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const hashedPassword = await hashPassword(req.body.password);\n      const userData = {\n        ...req.body,\n        password: hashedPassword,\n      };\n      \n      const user = await storage.createUser(userData);\n      const { password, ...userWithoutPassword } = user;\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(userWithoutPassword);\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: Error | null, user: Express.User | false, info: { message: string }) => {\n      if (err) {\n        console.error(\"Error en autenticación:\", err);\n        return next(err);\n      }\n      if (!user) {\n        console.log(\"Login fallido - usuario no encontrado o credenciales inválidas\");\n        return res.status(401).json({ message: \"Credenciales inválidas\" });\n      }\n      \n      req.login(user, (err: Error | null) => {\n        if (err) {\n          console.error(\"Error en req.login:\", err);\n          return next(err);\n        }\n        \n        console.log(\"Login exitoso para usuario:\", user.username);\n        const { password, ...userWithoutPassword } = user;\n        \n        // Asegurar que la sesión se guarde correctamente para AIPPS\n        req.session.save((saveErr) => {\n          if (saveErr) {\n            console.error(\"Error guardando sesión:\", saveErr);\n            return res.status(500).json({ message: \"Error guardando sesión\" });\n          }\n          res.status(200).json(userWithoutPassword);\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err: Error | null) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    const { password, ...userWithoutPassword } = req.user;\n    res.json(userWithoutPassword);\n  });\n\n  // 🎯 ENDPOINT ESPECIAL PARA AIPPS WIDGET (JWT + Passport.js) - VERSIÓN SEGURA\n  app.get(\"/api/user-session\", async (req, res) => {\n    console.log(\"🔍 AIPPS user-session request\");\n    \n    try {\n      // OPCIÓN 1: Verificar sesión Passport.js primero (PRIORITARIO)\n      if (req.isAuthenticated && req.isAuthenticated() && req.user) {\n        console.log('✅ Autenticación via Passport.js - Usuario:', req.user.username);\n        const { password, ...userWithoutPassword } = req.user;\n        return res.json({\n          isAuthenticated: true,\n          userInfo: {\n            id: userWithoutPassword.id,\n            username: userWithoutPassword.username,\n            name: userWithoutPassword.name,\n            email: userWithoutPassword.email,\n            role: userWithoutPassword.roleName,\n            avatar: userWithoutPassword.avatar\n          }\n        });\n      }\n\n      // OPCIÓN 2: Verificar JWT token solo si NO hay sesión Passport\n      const authHeader = req.headers.authorization;\n      const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n      \n      if (!token) {\n        console.log('❌ No token JWT y no hay sesión Passport');\n        return res.status(401).json({ \n          isAuthenticated: false,\n          userInfo: null \n        });\n      }\n\n      // Verificar JWT token - VERSIÓN PROMISIFICADA SEGURA\n      const JWT_SECRET = process.env.JWT_SECRET;\n      \n      if (!JWT_SECRET) {\n        console.error('❌ JWT_SECRET no configurado');\n        return res.status(401).json({ \n          isAuthenticated: false,\n          userInfo: null \n        });\n      }\n\n      try {\n        const decoded = jwt.verify(token, JWT_SECRET) as any;\n        const user = await storage.getUser(decoded.userId);\n        \n        if (!user) {\n          console.log('❌ Usuario no encontrado:', decoded.userId);\n          return res.status(401).json({ \n            isAuthenticated: false,\n            userInfo: null \n          });\n        }\n\n        console.log('✅ Autenticación JWT exitosa - Usuario:', user.username);\n        \n        return res.json({\n          isAuthenticated: true,\n          userInfo: {\n            id: user.id,\n            username: user.username,\n            name: user.name,\n            email: user.email,\n            role: user.roleName,\n            avatar: user.avatar\n          }\n        });\n      } catch (jwtError) {\n        console.log('❌ Token JWT inválido:', jwtError);\n        return res.status(401).json({ \n          isAuthenticated: false,\n          userInfo: null \n        });\n      }\n\n    } catch (error) {\n      console.error('❌ Error en user-session:', error);\n      return res.status(500).json({ \n        isAuthenticated: false,\n        userInfo: null \n      });\n    }\n  });\n\n  // 🔧 ENDPOINT PARA DEBUG DE AUTENTICACIÓN - VERSIÓN SEGURA\n  app.get(\"/api/auth-status\", async (req, res) => {\n    try {\n      let authMethod = 'none';\n      let userId = null;\n      let username = null;\n      \n      // Verificar Passport.js PRIMERO\n      if (req.isAuthenticated && req.isAuthenticated() && req.user) {\n        authMethod = 'passport';\n        userId = req.user.id;\n        username = req.user.username;\n      } else {\n        // Verificar JWT solo si no hay Passport\n        const authHeader = req.headers.authorization;\n        const token = authHeader && authHeader.split(' ')[1];\n        \n        if (token && process.env.JWT_SECRET) {\n          try {\n            const decoded = jwt.verify(token, process.env.JWT_SECRET) as any;\n            const user = await storage.getUser(decoded.userId);\n            if (user) {\n              authMethod = 'jwt';\n              userId = user.id;\n              username = user.username;\n            }\n          } catch (err) {\n            console.log('JWT verification failed:', err);\n          }\n        }\n      }\n      \n      const status = {\n        isAuthenticated: authMethod !== 'none',\n        authMethod: authMethod,\n        sessionID: req.sessionID,\n        timestamp: new Date().toISOString(),\n        userId: userId,\n        username: username\n      };\n      \n      console.log(\"🔍 AIPPS Auth Status:\", status);\n      res.json(status);\n    } catch (error) {\n      console.error('❌ Error en auth-status:', error);\n      res.status(500).json({ \n        isAuthenticated: false,\n        authMethod: 'error'\n      });\n    }\n  });\n  \n  // Ruta para actualizar el perfil del usuario actual\n  app.put(\"/api/user\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      // Limpia cualquier HTML o atributo sospechoso del avatar URL\n      if (req.body.avatar) {\n        const safeUrl = req.body.avatar.replace(/<[^>]*>/g, '');\n        req.body.avatar = safeUrl;\n      }\n      \n      // No permitir cambios en campos sensibles como el rol o clubId\n      delete req.body.roleId;\n      delete req.body.clubId;\n      \n      // Eliminar contraseña si se envía en el cuerpo de la solicitud\n      delete req.body.password;\n      \n      const updatedUser = await storage.updateUser(req.user.id, req.body);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update user profile\" });\n    }\n  });\n}\n","size_bytes":11179},"server/middleware/cors-middleware.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\nexport function setupCorsForAIPPS(req: Request, res: Response, next: NextFunction) {\n  // Permitir requests de AIPPS y dominios relacionados\n  const allowedOrigins = [\n    'https://aipps.app',\n    'https://widget.aipps.app',\n    'https://www.aipps.app',\n    'https://techcolca.ca',\n    'https://www.techcolca.ca',\n    process.env.FRONTEND_URL || 'http://localhost:5000',\n    // Añadir el dominio actual\n    `https://${req.get('host')}`\n  ];\n  \n  const origin = req.headers.origin;\n  \n  // Siempre permitir requests sin origen (como Postman, curl, etc.)\n  if (!origin) {\n    res.setHeader('Access-Control-Allow-Origin', '*');\n  } else if (allowedOrigins.includes(origin)) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n  \n  res.setHeader('Access-Control-Allow-Credentials', 'true');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Cookie');\n  res.setHeader('Access-Control-Expose-Headers', 'Set-Cookie');\n  \n  console.log(`🌐 CORS - Origin: ${origin}, Method: ${req.method}, Path: ${req.path}`);\n  \n  if (req.method === 'OPTIONS') {\n    console.log('✅ CORS Preflight respondido');\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n}\n","size_bytes":1355},"server/middleware/jwt-auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\nimport { storage } from '../storage';\n\n// Extender la interfaz Request para incluir userId\ndeclare global {\n  namespace Express {\n    interface Request {\n      userId?: number;\n    }\n  }\n}\n\nexport const authenticateJWT = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    // Primero verificar si hay sesión Passport.js (para usuarios de la aplicación AIPPS)\n    if (req.isAuthenticated && req.isAuthenticated() && req.user) {\n      console.log('🔐 Autenticación via Passport.js - Usuario:', req.user.username);\n      req.userId = req.user.id;\n      return next();\n    }\n\n    // Si no hay sesión Passport, verificar JWT token (para usuarios finales del widget)\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n    \n    if (!token) {\n      console.log('❌ No token JWT proporcionado y no hay sesión Passport');\n      return res.status(401).json({ message: 'Token de acceso requerido' });\n    }\n\n    // Verificar JWT token\n    const JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key';\n    \n    jwt.verify(token, JWT_SECRET, async (err: any, decoded: any) => {\n      if (err) {\n        console.log('❌ Token JWT inválido:', err.message);\n        return res.status(403).json({ message: 'Token inválido' });\n      }\n\n      // Verificar que el usuario existe en la base de datos\n      try {\n        const user = await storage.getUser(decoded.userId);\n        if (!user) {\n          console.log('❌ Usuario no encontrado para token JWT:', decoded.userId);\n          return res.status(404).json({ message: 'Usuario no encontrado' });\n        }\n\n        console.log('✅ Autenticación JWT exitosa - Usuario:', user.username);\n        req.userId = decoded.userId;\n        next();\n      } catch (dbError) {\n        console.error('❌ Error verificando usuario en BD:', dbError);\n        return res.status(500).json({ message: 'Error interno del servidor' });\n      }\n    });\n\n  } catch (error) {\n    console.error('❌ Error en authenticateJWT:', error);\n    res.status(500).json({ message: 'Error interno del servidor' });\n  }\n};\n","size_bytes":2230},"client/src/hooks/use-plan-limits.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useAuth } from '@/context/auth-context';\nimport { useUpgradeModal } from './use-upgrade-modal';\n\n// Tipos para los límites del plan\nexport interface PlanLimits {\n  planTier: string;\n  planName: string;\n  subscription: {\n    status: string;\n    interactionsUsed: number;\n    interactionsLimit: number;\n  };\n  limits: {\n    integrations: {\n      limit: number;\n      used: number;\n      remaining: number;\n    };\n    forms: {\n      limit: number;\n      used: number;\n      remaining: number;\n    };\n    conversations: {\n      limit: number;\n      used: number;\n      remaining: number;\n    };\n  };\n  features: {\n    [key: string]: boolean;\n  };\n}\n\nexport interface LimitCheckResult {\n  allowed: boolean;\n  reason?: string;\n  currentCount?: number;\n  limit?: number;\n  planTier?: string;\n  planName?: string;\n}\n\nexport type LimitableResource = 'integrations' | 'forms' | 'conversations';\nexport type LimitableFeature = 'customBranding' | 'advancedAnalytics' | 'apiAccess' | 'basicAutomations' | \n  'advancedAutomations' | 'webhooks' | 'basicExport' | 'advancedExport' | 'dataBackups' | \n  'crmIntegrations' | 'calendarIntegrations' | 'emailIntegrations' | 'multiUserAccess' | \n  'teamManagement' | 'whiteLabel';\n\nexport function usePlanLimits() {\n  const { user, isAuthenticated } = useAuth();\n  const upgradeModal = useUpgradeModal();\n  const queryClient = useQueryClient();\n\n  // Query para obtener el resumen completo de límites\n  const {\n    data: limitsData,\n    isLoading,\n    error,\n    refetch\n  } = useQuery<PlanLimits>({\n    queryKey: ['plan-limits', user?.id],\n    queryFn: async () => {\n      if (!isAuthenticated || !user) {\n        throw new Error('Usuario no autenticado');\n      }\n      \n      const response = await apiRequest('GET', '/api/limits/summary');\n      if (!response.ok) {\n        throw new Error('Error al obtener límites del plan');\n      }\n      \n      return response.json();\n    },\n    enabled: isAuthenticated && !!user,\n    staleTime: 30000, // 30 segundos de cache\n    gcTime: 5 * 60 * 1000 // 5 minutos en cache\n  });\n\n  // Mutation para verificar si se puede crear un recurso específico\n  const checkResourceLimitMutation = useMutation<LimitCheckResult, Error, { resourceType: LimitableResource }>({\n    mutationFn: async ({ resourceType }) => {\n      const response = await apiRequest('GET', `/api/limits/check-resource/${resourceType}`);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Error al verificar límite');\n      }\n      return await response.json() as LimitCheckResult;\n    }\n  });\n\n  // Mutation para verificar acceso a funcionalidades\n  const checkFeatureAccessMutation = useMutation<LimitCheckResult, Error, { feature: LimitableFeature }>({\n    mutationFn: async ({ feature }) => {\n      const response = await apiRequest('GET', `/api/limits/check-feature/${feature}`);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Error al verificar acceso');\n      }\n      return await response.json() as LimitCheckResult;\n    }\n  });\n\n  // Función para verificar si se puede crear un recurso\n  const canCreateResource = useCallback(async (resourceType: LimitableResource): Promise<boolean> => {\n    try {\n      const result = await checkResourceLimitMutation.mutateAsync({ resourceType });\n      \n      if (!result.allowed && result.reason) {\n        // Mostrar modal de upgrade automáticamente\n        upgradeModal.handlePlanLimitError(result.reason);\n      }\n      \n      return result.allowed;\n    } catch (error) {\n      console.error(`Error verificando límite de ${resourceType}:`, error);\n      return false;\n    }\n  }, [checkResourceLimitMutation, upgradeModal]);\n\n  // Función para verificar acceso a funcionalidades\n  const hasFeatureAccess = useCallback(async (feature: LimitableFeature): Promise<boolean> => {\n    try {\n      const result = await checkFeatureAccessMutation.mutateAsync({ feature });\n      \n      if (!result.allowed && result.reason) {\n        // Mostrar modal de upgrade automáticamente\n        upgradeModal.handlePlanLimitError(result.reason);\n      }\n      \n      return result.allowed;\n    } catch (error) {\n      console.error(`Error verificando acceso a ${feature}:`, error);\n      return false;\n    }\n  }, [checkFeatureAccessMutation, upgradeModal]);\n\n  // Función para verificar límite sin mostrar modal (para UI)\n  const checkResourceLimitSilent = useCallback((resourceType: LimitableResource): LimitCheckResult | null => {\n    if (!limitsData) return null;\n\n    const resourceLimits = limitsData.limits[resourceType as keyof typeof limitsData.limits];\n    if (!resourceLimits) return null;\n\n    const allowed = resourceLimits.limit === -1 || resourceLimits.used < resourceLimits.limit;\n    \n    return {\n      allowed,\n      currentCount: resourceLimits.used,\n      limit: resourceLimits.limit,\n      planTier: limitsData.planTier,\n      planName: limitsData.planName,\n      reason: !allowed ? `Has alcanzado el límite de ${resourceType} (${resourceLimits.used}/${resourceLimits.limit})` : undefined\n    };\n  }, [limitsData]);\n\n  // Función para verificar acceso a funcionalidad sin mostrar modal (para UI)\n  const checkFeatureAccessSilent = useCallback((feature: LimitableFeature): boolean => {\n    if (!limitsData) return false;\n    return limitsData.features[feature] || false;\n  }, [limitsData]);\n\n  // Función para obtener el porcentaje de uso de un recurso\n  const getUsagePercentage = useCallback((resourceType: LimitableResource): number => {\n    if (!limitsData) return 0;\n    \n    const resourceLimits = limitsData.limits[resourceType as keyof typeof limitsData.limits];\n    if (!resourceLimits || resourceLimits.limit === -1) return 0;\n    \n    return Math.min(100, (resourceLimits.used / resourceLimits.limit) * 100);\n  }, [limitsData]);\n\n  // Función para invalidar cache y refrescar límites\n  const refreshLimits = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['plan-limits'] });\n    refetch();\n  }, [queryClient, refetch]);\n\n  // Función para mostrar advertencia cuando esté cerca del límite\n  const showLimitWarning = useCallback((resourceType: LimitableResource, threshold: number = 80) => {\n    const percentage = getUsagePercentage(resourceType);\n    \n    if (percentage >= threshold && limitsData) {\n      const resourceLimits = limitsData.limits[resourceType as keyof typeof limitsData.limits];\n      console.warn(`Advertencia: ${resourceType} al ${percentage.toFixed(1)}% de uso (${resourceLimits.used}/${resourceLimits.limit})`);\n      \n      // Mostrar notificación visual si está cerca del límite\n      if (percentage >= 90) {\n        upgradeModal.showUpgradeModal(\n          resourceType as any,\n          resourceLimits.limit,\n          limitsData.planName\n        );\n      }\n    }\n  }, [getUsagePercentage, limitsData, upgradeModal]);\n\n  return {\n    // Datos\n    limits: limitsData,\n    isLoading,\n    error,\n    \n    // Funciones de verificación (con modal)\n    canCreateResource,\n    hasFeatureAccess,\n    \n    // Funciones de verificación silenciosa (para UI)\n    checkResourceLimitSilent,\n    checkFeatureAccessSilent,\n    \n    // Utilidades\n    getUsagePercentage,\n    showLimitWarning,\n    refreshLimits,\n    \n    // Estados de mutations\n    isCheckingResource: checkResourceLimitMutation.isPending,\n    isCheckingFeature: checkFeatureAccessMutation.isPending,\n    \n    // Modal de upgrade\n    upgradeModal\n  };\n}","size_bytes":7694},"server/middleware/plan-limits.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\nimport { \n  getPlanLimits, \n  hasFeatureAccess, \n  canCreateResource, \n  getUpgradeMessage, \n  PLAN_NAMES \n} from \"../../shared/feature-permissions\";\nimport { getUserSubscription } from \"./subscription\";\n\n// Tipos de recursos que pueden tener límites\nexport type LimitableResource = 'integrations' | 'forms' | 'conversations';\nexport type LimitableFeature = 'customBranding' | 'advancedAnalytics' | 'apiAccess' | 'basicAutomations' | \n  'advancedAutomations' | 'webhooks' | 'basicExport' | 'advancedExport' | 'dataBackups' | \n  'crmIntegrations' | 'calendarIntegrations' | 'emailIntegrations' | 'multiUserAccess' | \n  'teamManagement' | 'whiteLabel';\n\n// Resultado de verificación de límites\nexport interface LimitCheckResult {\n  allowed: boolean;\n  reason?: string;\n  currentCount?: number;\n  limit?: number;\n  planTier?: string;\n  planName?: string;\n  nextPlan?: string;\n}\n\n/**\n * Verifica si un usuario puede crear un nuevo recurso basado en su plan actual\n */\nexport async function checkResourceLimit(\n  userId: number, \n  resourceType: LimitableResource\n): Promise<LimitCheckResult> {\n  try {\n    // Obtener suscripción del usuario\n    const subscription = await getUserSubscription(userId);\n    if (!subscription) {\n      return {\n        allowed: false,\n        reason: \"No se encontró suscripción activa\",\n        planTier: \"free\"\n      };\n    }\n\n    const planTier = subscription.tier || \"free\";\n    const planLimits = getPlanLimits(planTier);\n    const planName = PLAN_NAMES[planTier] || \"Plan actual\";\n\n    // Obtener límite del plan\n    const limit = planLimits[resourceType as keyof Pick<typeof planLimits, 'integrations' | 'forms' | 'conversations'>];\n    \n    // Si es ilimitado (-1), permitir\n    if (limit === -1) {\n      return {\n        allowed: true,\n        planTier,\n        planName\n      };\n    }\n\n    // Obtener el conteo actual del usuario\n    let currentCount = 0;\n    switch (resourceType) {\n      case 'integrations':\n        const integrations = await storage.getIntegrations(userId);\n        currentCount = integrations.length;\n        break;\n      case 'forms':\n        const forms = await storage.getForms(userId);\n        currentCount = forms.length;\n        break;\n      case 'conversations':\n        // Para conversaciones usar el límite de interacciones de la suscripción\n        return {\n          allowed: subscription.interactionsUsed < subscription.interactionsLimit,\n          currentCount: subscription.interactionsUsed,\n          limit: subscription.interactionsLimit,\n          planTier,\n          planName,\n          reason: subscription.interactionsUsed >= subscription.interactionsLimit \n            ? getUpgradeMessage(planTier, 'conversations')\n            : undefined\n        };\n      default:\n        currentCount = 0;\n    }\n\n    // Verificar si puede crear más recursos\n    const canCreate = currentCount < limit;\n    \n    return {\n      allowed: canCreate,\n      currentCount,\n      limit,\n      planTier,\n      planName,\n      reason: !canCreate ? getUpgradeMessage(planTier, `create${resourceType.charAt(0).toUpperCase() + resourceType.slice(1)}` as any) : undefined\n    };\n\n  } catch (error) {\n    console.error(`Error verificando límite de ${resourceType}:`, error);\n    return {\n      allowed: false,\n      reason: \"Error al verificar límites del plan\"\n    };\n  }\n}\n\n/**\n * Verifica si un usuario tiene acceso a una funcionalidad específica\n */\nexport async function checkFeatureAccess(\n  userId: number, \n  feature: LimitableFeature\n): Promise<LimitCheckResult> {\n  try {\n    const subscription = await getUserSubscription(userId);\n    if (!subscription) {\n      return {\n        allowed: false,\n        reason: \"No se encontró suscripción activa\",\n        planTier: \"free\"\n      };\n    }\n\n    const planTier = subscription.tier || \"free\";\n    const planName = PLAN_NAMES[planTier] || \"Plan actual\";\n    const hasAccess = hasFeatureAccess(planTier, feature);\n\n    return {\n      allowed: hasAccess,\n      planTier,\n      planName,\n      reason: !hasAccess ? getUpgradeMessage(planTier, feature) : undefined\n    };\n\n  } catch (error) {\n    console.error(`Error verificando acceso a funcionalidad ${feature}:`, error);\n    return {\n      allowed: false,\n      reason: \"Error al verificar acceso a la funcionalidad\"\n    };\n  }\n}\n\n/**\n * Middleware para verificar límites de recursos antes de crear\n */\nexport function requireResourceLimit(resourceType: LimitableResource) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      if (!req.userId) {\n        return res.status(401).json({ \n          message: \"No autorizado. Inicia sesión para continuar.\",\n          code: \"UNAUTHORIZED\"\n        });\n      }\n\n      const limitCheck = await checkResourceLimit(req.userId, resourceType);\n      \n      if (!limitCheck.allowed) {\n        return res.status(403).json({\n          message: limitCheck.reason || `Has alcanzado el límite de ${resourceType}`,\n          code: \"PLAN_LIMIT_REACHED\",\n          limitType: resourceType,\n          currentCount: limitCheck.currentCount,\n          limit: limitCheck.limit,\n          planTier: limitCheck.planTier,\n          planName: limitCheck.planName\n        });\n      }\n\n      // Adjuntar información del límite a la request para uso posterior\n      req.limitCheck = limitCheck;\n      next();\n\n    } catch (error) {\n      console.error(`Error en middleware de límite ${resourceType}:`, error);\n      return res.status(500).json({\n        message: \"Error al verificar límites del plan\",\n        code: \"LIMIT_CHECK_ERROR\"\n      });\n    }\n  };\n}\n\n/**\n * Middleware para verificar acceso a funcionalidades\n */\nexport function requireFeatureAccess(feature: LimitableFeature) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      if (!req.userId) {\n        return res.status(401).json({ \n          message: \"No autorizado. Inicia sesión para continuar.\",\n          code: \"UNAUTHORIZED\"\n        });\n      }\n\n      const accessCheck = await checkFeatureAccess(req.userId, feature);\n      \n      if (!accessCheck.allowed) {\n        return res.status(403).json({\n          message: accessCheck.reason || `Esta funcionalidad no está disponible en tu plan actual`,\n          code: \"FEATURE_ACCESS_DENIED\",\n          feature,\n          planTier: accessCheck.planTier,\n          planName: accessCheck.planName\n        });\n      }\n\n      next();\n\n    } catch (error) {\n      console.error(`Error en middleware de funcionalidad ${feature}:`, error);\n      return res.status(500).json({\n        message: \"Error al verificar acceso a la funcionalidad\",\n        code: \"FEATURE_CHECK_ERROR\"\n      });\n    }\n  };\n}\n\n/**\n * Obtiene un resumen completo de los límites y uso actual de un usuario\n */\nexport async function getUserLimitsSummary(userId: number) {\n  try {\n    const subscription = await getUserSubscription(userId);\n    if (!subscription) {\n      return null;\n    }\n\n    const planTier = subscription.tier || \"free\";\n    const planLimits = getPlanLimits(planTier);\n    const planName = PLAN_NAMES[planTier];\n\n    // Obtener conteos actuales\n    const integrations = await storage.getIntegrations(userId);\n    \n    return {\n      planTier,\n      planName,\n      subscription: {\n        status: subscription.status,\n        interactionsUsed: subscription.interactionsUsed,\n        interactionsLimit: subscription.interactionsLimit\n      },\n      limits: {\n        integrations: {\n          limit: planLimits.integrations,\n          used: integrations.length,\n          remaining: planLimits.integrations === -1 ? -1 : Math.max(0, planLimits.integrations - integrations.length)\n        },\n        forms: {\n          limit: planLimits.forms,\n          used: (await storage.getForms(userId)).length,\n          remaining: planLimits.forms === -1 ? -1 : Math.max(0, planLimits.forms - (await storage.getForms(userId)).length)\n        },\n        conversations: {\n          limit: subscription.interactionsLimit,\n          used: subscription.interactionsUsed,\n          remaining: Math.max(0, subscription.interactionsLimit - subscription.interactionsUsed)\n        }\n      },\n      features: planLimits.features\n    };\n\n  } catch (error) {\n    console.error(\"Error obteniendo resumen de límites:\", error);\n    return null;\n  }\n}\n\n// Extender el tipo Request para incluir la verificación de límites\ndeclare global {\n  namespace Express {\n    interface Request {\n      limitCheck?: LimitCheckResult;\n      userId: number;\n    }\n  }\n}","size_bytes":8593},"server/routes/limits.ts":{"content":"import { Router } from 'express';\nimport { authenticateJWT } from '../middleware/auth';\nimport { \n  checkResourceLimit, \n  checkFeatureAccess, \n  getUserLimitsSummary,\n  LimitableResource,\n  LimitableFeature \n} from '../middleware/plan-limits';\n\nconst router = Router();\n\n// Aplicar autenticación a todas las rutas\nrouter.use(authenticateJWT);\n\n/**\n * GET /api/limits/summary\n * Obtiene un resumen completo de los límites y uso actual del usuario\n */\nrouter.get('/summary', async (req, res) => {\n  try {\n    if (!req.userId) {\n      return res.status(401).json({ \n        message: 'Usuario no autenticado' \n      });\n    }\n\n    const summary = await getUserLimitsSummary(req.userId);\n    \n    if (!summary) {\n      return res.status(404).json({ \n        message: 'No se encontró información de suscripción' \n      });\n    }\n\n    res.json(summary);\n\n  } catch (error) {\n    console.error('Error obteniendo resumen de límites:', error);\n    res.status(500).json({ \n      message: 'Error interno del servidor' \n    });\n  }\n});\n\n/**\n * GET /api/limits/check-resource/:resourceType\n * Verifica si el usuario puede crear un nuevo recurso\n */\nrouter.get('/check-resource/:resourceType', async (req, res) => {\n  try {\n    if (!req.userId) {\n      return res.status(401).json({ \n        message: 'Usuario no autenticado' \n      });\n    }\n\n    const resourceType = req.params.resourceType as LimitableResource;\n    \n    // Validar tipo de recurso\n    const validResources: LimitableResource[] = ['integrations', 'forms', 'conversations'];\n    if (!validResources.includes(resourceType)) {\n      return res.status(400).json({ \n        message: `Tipo de recurso no válido: ${resourceType}` \n      });\n    }\n\n    const result = await checkResourceLimit(req.userId, resourceType);\n    res.json(result);\n\n  } catch (error) {\n    console.error(`Error verificando límite de recurso:`, error);\n    res.status(500).json({ \n      message: 'Error interno del servidor' \n    });\n  }\n});\n\n/**\n * GET /api/limits/check-feature/:feature\n * Verifica si el usuario tiene acceso a una funcionalidad específica\n */\nrouter.get('/check-feature/:feature', async (req, res) => {\n  try {\n    if (!req.userId) {\n      return res.status(401).json({ \n        message: 'Usuario no autenticado' \n      });\n    }\n\n    const feature = req.params.feature as LimitableFeature;\n    \n    // Validar funcionalidad\n    const validFeatures: LimitableFeature[] = [\n      'customBranding', 'advancedAnalytics', 'apiAccess', 'basicAutomations',\n      'advancedAutomations', 'webhooks', 'basicExport', 'advancedExport', \n      'dataBackups', 'crmIntegrations', 'calendarIntegrations', 'emailIntegrations',\n      'multiUserAccess', 'teamManagement', 'whiteLabel'\n    ];\n    \n    if (!validFeatures.includes(feature)) {\n      return res.status(400).json({ \n        message: `Funcionalidad no válida: ${feature}` \n      });\n    }\n\n    const result = await checkFeatureAccess(req.userId, feature);\n    res.json(result);\n\n  } catch (error) {\n    console.error(`Error verificando acceso a funcionalidad:`, error);\n    res.status(500).json({ \n      message: 'Error interno del servidor' \n    });\n  }\n});\n\nexport default router;","size_bytes":3178},"railway_migration/09_complete_import_guide.md":{"content":"# 🚀 Guía Completa de Migración: Replit → Railway\n\n## 📋 **Archivos Generados**\n\n### 1. **Scripts SQL**\n- `01_create_tables.sql` - Comandos para recrear todas las tablas\n\n### 2. **Archivos CSV de Datos**\n- `02_users.csv` - 29 usuarios completos con credenciales\n- `03_pricing_plans.csv` - 6 planes de precio (Free, Pro, Enterprise + anuales) \n- `04_subscriptions.csv` - 2 suscripciones activas\n- `05_conversations.csv` - 29 conversaciones de clientes reales\n- `06_messages_part1.csv` - Primeros 30 mensajes\n- `07_messages_complete.csv` - Mensajes restantes (total 138)\n- `08_settings.csv` - 29 configuraciones personalizadas de usuarios\n\n## 🔧 **Paso a Paso: Importación en Railway**\n\n### **A. Conectar pgAdmin a Railway**\n\n1. **Abrir pgAdmin**\n2. **Crear Nuevo Servidor:**\n   - **Name**: `Railway Production AIPPS`\n   - **Host**: `tu-railway-host.up.railway.app` \n   - **Port**: `5432`\n   - **Database**: `railway`\n   - **Username**: `postgres`\n   - **Password**: `[password-de-railway]`\n\n### **B. Crear Estructura de Tablas**\n\n1. **Abrir Query Tool** en pgAdmin\n2. **Copiar y ejecutar** el contenido completo de `01_create_tables.sql`\n3. **Verificar que las tablas se crearon** correctamente\n\n### **C. Importar Datos CSV (EN ORDEN)**\n\n**⚠️ IMPORTANTE: Importar en este orden exacto:**\n\n#### **1. Usuarios**\n- **Tabla**: `users`\n- **Archivo**: `02_users.csv`\n- **Método**: Right-click tabla → Import/Export Data → Import\n- **Settings**: Format=CSV, Header=Yes, Delimiter=,\n\n#### **2. Planes de Precio**\n- **Tabla**: `pricing_plans`\n- **Archivo**: `03_pricing_plans.csv`\n- **Settings**: Igual que usuarios\n\n#### **3. Suscripciones** \n- **Tabla**: `subscriptions`\n- **Archivo**: `04_subscriptions.csv`\n- **Settings**: Igual que usuarios\n\n#### **4. Configuraciones**\n- **Tabla**: `settings`\n- **Archivo**: `08_settings.csv`\n- **Settings**: Igual que usuarios\n\n#### **5. Conversaciones**\n- **Tabla**: `conversations`\n- **Archivo**: `05_conversations.csv`\n- **Settings**: Igual que usuarios\n\n#### **6. Mensajes (2 partes)**\n- **Tabla**: `messages`\n- **Archivo 1**: `06_messages_part1.csv`\n- **Archivo 2**: `07_messages_complete.csv`\n- **Settings**: Igual que usuarios\n\n### **D. Verificación Post-Importación**\n\n```sql\n-- Verificar conteos\nSELECT 'users' as table_name, COUNT(*) as count FROM users\nUNION ALL\nSELECT 'pricing_plans', COUNT(*) FROM pricing_plans\nUNION ALL  \nSELECT 'subscriptions', COUNT(*) FROM subscriptions\nUNION ALL\nSELECT 'conversations', COUNT(*) FROM conversations\nUNION ALL\nSELECT 'messages', COUNT(*) FROM messages\nUNION ALL\nSELECT 'settings', COUNT(*) FROM settings;\n\n-- Resultado esperado:\n-- users: 29\n-- pricing_plans: 6\n-- subscriptions: 2\n-- conversations: 29\n-- messages: 138\n-- settings: 29\n```\n\n### **E. Actualizar Variables de Entorno**\n\nEn tu aplicación Railway, actualizar:\n\n```env\nDATABASE_URL=postgresql://postgres:[password]@[host]:5432/railway\nPGHOST=[tu-railway-host].up.railway.app\nPGUSER=postgres\nPGPASSWORD=[password-railway]\nPGDATABASE=railway\nPGPORT=5432\n```\n\n## ✅ **Datos Migrados Incluyen:**\n\n- **29 usuarios reales** con credenciales hasheadas\n- **6 planes de precio** bien configurados (CA$ 0, $17, $77/mes + anuales)\n- **2 suscripciones activas** (Enterprise y Professional)\n- **29 conversaciones** de clientes reales con títulos\n- **138 mensajes** con contenido real en español/inglés\n- **29 configuraciones** personalizadas de AIPPS Assistant\n\n## 🎯 **Funcionalidades Preservadas:**\n\n- ✅ **Autenticación completa** con bcrypt hashing\n- ✅ **Sistema de planes y suscripciones** \n- ✅ **Chat IA con historial** completo\n- ✅ **Configuraciones personalizadas** por usuario\n- ✅ **API keys únicos** por usuario\n- ✅ **Stripe integration** configurado\n\n## 🚨 **Notas Importantes:**\n\n1. **Las contraseñas están hasheadas** con bcrypt - son seguras\n2. **Los API keys son únicos** - mantener seguridad\n3. **Stripe IDs están configurados** para algunos planes\n4. **Conversaciones reales** - datos de clientes reales\n5. **Importar EN ORDEN** para mantener integridad referencial\n\n## 🎉 **Resultado Final:**\n\nTendrás una migración **100% completa** con:\n- Todos los usuarios autenticados \n- Historial de conversaciones preservado\n- Sistema de pricing funcional\n- Configuraciones personalizadas intactas\n\n**¡Tu aplicación AIPPS estará completamente operativa en Railway!**","size_bytes":4360},"PLAN-SISTEMA-PRESUPUESTOS-FLEXIBLES.md":{"content":"# 📋 PLAN COMPLETO - TRANSFORMACIÓN A SISTEMA DE PRESUPUESTOS FLEXIBLES\n\n## 🎯 **OBJETIVO PRINCIPAL**\n\nTransformar el sistema actual de **límites rígidos por plan** a un **sistema de presupuestos mensuales flexibles** inspirado en \"Manage your monthly spending\" de Replit, donde cada usuario controla su gasto mensual y recibe alertas progresivas.\n\n---\n\n# 🔍 **ANÁLISIS DEL SISTEMA ACTUAL**\n\n## **✅ FORTALEZAS EXISTENTES:**\n- **Base de datos PostgreSQL** con Drizzle ORM funcionando\n- **Sistema de autenticación** completo con usuarios y suscripciones\n- **Integración Stripe** completa (customer, subscription, price IDs)\n- **SendGrid configurado** para emails (SENDGRID_API_KEY disponible)\n- **OpenAI integrado** para funcionalidades IA\n- **Middleware de límites** básico (`requireResourceLimit`)\n- **Frontend de alertas** (`useUpgradeModal`, componentes de upgrade)\n- **Panel administrativo** funcional\n- **Sistema multiidioma** (ES, EN, FR)\n\n## **🔄 COMPONENTES A TRANSFORMAR:**\n- Sistema de límites fijos → Presupuestos mensuales personalizables\n- Bloqueo inmediato → Alertas progresivas + suspensión gradual  \n- Sin costos por acción → Sistema de costos con 30% ganancia\n- Alertas básicas → Sistema completo de notificaciones\n- Panel simple → Dashboard completo tipo Replit Usage\n\n---\n\n# 🏗️ **PLAN DE IMPLEMENTACIÓN COMPLETO**\n\n## **FASE 1: PREPARACIÓN Y ANÁLISIS DE IMPACTO**\n\n### **Paso 1.1: Auditoría Completa del Sistema Actual**\n- Mapear todas las rutas que actualmente usan `requireResourceLimit()` middleware\n- Documentar todos los puntos donde se verifican límites en el frontend\n- Identificar componentes que muestran información de límites actuales\n- Listar todas las acciones que generarán costos en el nuevo sistema\n- Evaluar impacto en usuarios existentes y sus datos\n\n### **Paso 1.2: Definición del Modelo de Costos** ✅ COMPLETADO\n- ✅ **Acciones costeables identificadas**: crear integración, crear formulario, enviar email, conversación chat\n- ✅ **Estructura de costos**: costo base + markup 30% automático\n- ✅ **Moneda de operación**: CAD (según configuración actual)\n- ✅ **Matriz de costos iniciales**:\n  - Crear Integración: $5.00 → $6.50 CAD\n  - Crear Formulario: $3.00 → $3.90 CAD  \n  - Conversación Chat: $0.05 → $0.065 CAD\n  - Envío Email: $0.08 → $0.10 CAD\n- ✅ **Rangos permitidos**: $0.01 - $100.00 CAD para prevenir errores\n\n### **Paso 1.3: Estrategia de Migración de Usuarios**\n- Definir presupuesto inicial para usuarios existentes según su plan actual\n- Crear plan de comunicación sobre el cambio de sistema\n- Establecer período de transición con compatibilidad dual\n- Preparar documentación y FAQ para usuarios\n- Definir proceso de rollback si es necesario\n\n---\n\n## **FASE 2: NUEVA ARQUITECTURA DE DATOS**\n\n### **Paso 2.1: Diseño de Nuevas Tablas** ✅ COMPLETADO\n\n**✅ Tabla `user_budgets` (Presupuestos de Usuario):**\n- userId, monthlyBudget, currentSpent, billingCycleDay\n- Umbrales de alerta configurables (50%, 80%, 90%, 100%)\n- Estado de suspensión, timestamps de reset y creación\n\n**✅ Tabla `action_costs` (Costos por Acción):**\n- actionType (único), baseCost, markupPercentage, finalCost\n- updateMethod (manual/IA), lastUpdatedBy, aiJustification\n- Estado activo/inactivo, timestamps\n\n**✅ Tabla `usage_tracking` (Seguimiento de Uso):**\n- userId, actionType, costApplied, resourceId/Type\n- billingMonth para agrupación, metadata JSON\n- Timestamps para auditoría completa\n\n**✅ Tabla `sent_alerts` (Alertas Enviadas):**\n- userId, alertType, thresholdReached, deliveryMethod\n- deliveryStatus, messageContent, billingMonth\n- Sistema anti-spam integrado\n\n### **Paso 2.2: Modificaciones a Tablas Existentes**\n- Mantener compatibilidad total con sistema de suscripciones Stripe\n- Preservar todos los datos históricos de límites actuales\n- Agregar campos de referencia cruzada para transición suave\n- Crear índices optimizados para consultas frecuentes\n\n### **Paso 2.3: Integridad y Relaciones de Datos**\n- Establecer foreign keys entre presupuestos y usuarios\n- Crear constraints para validar rangos monetarios\n- Configurar cascading updates para mantenimiento\n- Establecer índices compuestos para performance\n\n---\n\n## **FASE 3: SISTEMA DE COSTOS Y FACTURACIÓN**\n\n### **Paso 3.1: Motor de Cálculo de Costos**\n- Sistema para calcular precio final: costo base + markup automático\n- Validación de costos antes de ejecutar cualquier acción\n- Manejo de redondeos monetarios y fracciones\n- Cache de costos actuales para performance\n- Sistema de versionado de precios para auditoría\n\n### **Paso 3.2: Seguimiento de Uso en Tiempo Real**\n- Registro automático de cada acción costeable al completarse\n- Actualización inmediata del gasto mensual del usuario\n- Agrupación por períodos de facturación para reportes\n- Metadata enriquecida para análisis posterior\n- Sistema de backup para datos críticos de facturación\n\n### **Paso 3.3: Gestión de Ciclos de Facturación**\n- Reset automático mensual de presupuestos en fecha configurable\n- Manejo de días de corte personalizables por usuario\n- Cálculo prorrateado para cambios de presupuesto mid-ciclo\n- Generación de historial mensual para reportes\n- Notificaciones automáticas de inicio/fin de ciclo\n\n### **Paso 3.4: Panel de Gestión Manual de Costos (ADMIN)**\n- Interface administrativa para definir costos individuales por acción\n- Campos editables para: crear integración, formulario, email, conversación\n- Validación de rangos mínimos/máximos para prevenir errores\n- Vista previa inmediata del impacto en usuarios activos\n- Sistema de aprobación para cambios significativos\n\n### **Paso 3.5: Sistema de Sugerencias IA en Tiempo Real**\n- Botón \"Sugerir Costos con IA\" integrado en panel administrativo\n- Conexión con OpenAI usando API key existente del sistema\n- Análisis automático de costos reales de infraestructura\n- Cálculo automático del 30% de markup sobre costos base\n- Justificación detallada de cada sugerencia generada\n\n---\n\n## **FASE 4: SISTEMA DE ALERTAS INTELIGENTES**\n\n### **Paso 4.1: Motor de Notificaciones Multi-canal**\n- **Alertas por Email**: Integración con SendGrid existente\n- **Alertas Frontend**: Notificaciones en tiempo real en la aplicación  \n- **Alertas Push**: Preparación para notificaciones móviles futuras\n- **Sistema de plantillas**: Multilingual (ES, EN, FR) según usuario\n\n### **Paso 4.2: Configuración Inteligente de Umbrales**\n- Umbrales personalizables por usuario: 50%, 80%, 90%, 100%\n- Diferentes tipos y urgencias de alerta según el nivel\n- Configuración de métodos preferidos de notificación\n- Sistema de escalamiento automático de urgencia\n\n### **Paso 4.3: Lógica Anti-spam y Contextual**\n- Prevención de alertas repetidas en corto tiempo\n- Alertas contextuales según tipo de acción que desencadena\n- Notificaciones predictivas basadas en patrón histórico de uso\n- Sistema de \"silenciar\" temporal para usuarios que no quieren alertas\n\n### **Paso 4.4: Plantillas de Mensajes Inteligentes**\n- Mensajes personalizados según el umbral alcanzado\n- Información contextual sobre el gasto actual y proyección\n- Sugerencias automáticas de ajuste de presupuesto\n- Links directos a panel de configuración de presupuesto\n\n---\n\n## **FASE 5: NUEVO MIDDLEWARE Y LÓGICA DE VERIFICACIÓN**\n\n### **Paso 5.1: Middleware de Verificación de Presupuesto**\n- Reemplazo completo de `requireResourceLimit()` por `requireBudgetCheck()`\n- Cálculo de costo real de la acción antes de permitir ejecución\n- Verificación de fondos disponibles en presupuesto mensual\n- Manejo inteligente de casos edge (usuarios suspendidos, presupuesto agotado)\n\n### **Paso 5.2: Sistema de Suspensión Automática**\n- Suspensión temporal y reversible de servicios al agotar presupuesto\n- Mantenimiento íntegro de todos los datos existentes durante suspensión\n- Sistema de reactivación automática inmediata al aumentar presupuesto\n- Comunicación clara al usuario sobre estado suspendido y opciones\n\n### **Paso 5.3: Middleware de Auditoría y Logging**\n- Registro detallado de todas las verificaciones de presupuesto\n- Tracking de intentos bloqueados con razón específica\n- Métricas de performance del nuevo sistema\n- Datos para análisis de comportamiento y optimización\n\n### **Paso 5.4: Sistema de Intercepción Frontend**\n- Interceptores que muestran costo antes de ejecutar acciones costosas\n- Confirmación del usuario para acciones que impacten significativamente presupuesto\n- Warning inteligentes cuando se acerque a límites configurados\n- Experiencia fluida que no interrumpa workflow normal\n\n---\n\n## **FASE 6: DASHBOARD DE USAGE (INSPIRADO EN REPLIT)**\n\n### **Paso 6.1: Panel Principal de Consumo**\n- **Resumen mensual**: Presupuesto total vs gastado actual vs proyección\n- **Gráfico de tendencia**: Uso diario del mes actual con proyecciones\n- **Indicadores visuales**: Barras de progreso y alerts status\n- **Quick actions**: Botones para ajustar presupuesto y configurar alertas\n\n### **Paso 6.2: Análisis Detallado por Categorías**\n- **Desglose por tipo**: Integraciones, formularios, emails, conversaciones\n- **Análisis temporal**: Uso diario, semanal, comparativo mes anterior\n- **Por recurso específico**: Qué integración/formulario genera más conversaciones\n- **Eficiencia de gasto**: ROI por tipo de acción según métricas de uso\n\n### **Paso 6.3: Configuración Avanzada de Presupuesto**\n- **Ajuste de presupuesto mensual** con validaciones y confirmaciones\n- **Configuración granular de alertas** por tipo y umbral\n- **Día de corte personalizable** del ciclo de facturación\n- **Configuración de métodos de pago** para overages automáticos\n\n### **Paso 6.4: Reportes y Análisis Histórico**\n- **Historial detallado** de uso mensual con trends\n- **Exportación de datos** en formatos contables (CSV, Excel)\n- **Análisis de patrones** y recomendaciones de optimización\n- **Comparativas** con usuarios similares (anonimizadas)\n\n### **Paso 6.5: Proyecciones y Recomendaciones**\n- **Proyección de fin de mes** basada en uso actual\n- **Recomendaciones de presupuesto** basadas en patrón histórico\n- **Alertas de optimización** (recursos poco usados, costos altos)\n- **Sugerencias de eficiencia** para reducir costos sin perder funcionalidad\n\n---\n\n## **FASE 7: PANEL ADMINISTRATIVO AVANZADO CON IA**\n\n### **Paso 7.1: Gestión Global de Costos**\n- **Vista consolidada** de todos los costos por tipo de acción\n- **Actualización bulk** de múltiples precios simultáneamente\n- **Sistema de versioning** para rollback de cambios\n- **Impacto calculator** antes de aplicar modificaciones\n\n### **Paso 7.2: Interface de Gestión Manual de Costos**\n- **Panel intuitivo** con campos editables para cada tipo de acción:\n  - Crear integración: costo individual configurable\n  - Crear formulario: costo individual configurable  \n  - Envío de email: costo por email individual\n  - Conversación chat: costo por conversación/mensaje\n- **Estados visuales**: Manual vs IA-sugerido vs Automático\n- **Historial de cambios** con usuario, fecha y justificación\n\n### **Paso 7.3: Sistema Avanzado de Sugerencias IA**\n- **Botón \"Obtener Sugerencias IA\"** que desencadena análisis completo\n- **Análisis multifactorial** de costos reales:\n  - Costos de infraestructura (Railway, base de datos)\n  - Costos de servicios (SendGrid, OpenAI, Stripe fees)\n  - Amortización de desarrollo y mantenimiento\n  - Análisis competitivo de precios de mercado\n- **Aplicación automática del 30%** sobre costos base calculados\n- **Justificación detallada** con desglose por componente\n\n### **Paso 7.4: Sistema de Aplicación Inteligente de Cambios**\n- **Opciones flexibles de aplicación**:\n  - Aplicar sugerencia IA completa\n  - Modificar manualmente según criterio admin\n  - Híbrido: IA como base + ajuste manual\n  - Programación de cambio para fecha futura específica\n- **Vista previa completa de impacto** antes de confirmar cambios\n- **Simulación de efectos** en usuarios y proyección de ingresos\n\n### **Paso 7.5: Monitoreo y Métricas de Usuarios**\n- **Dashboard de usuarios** cerca del límite presupuestario\n- **Lista de usuarios suspendidos** con razones y tiempo de suspensión\n- **Métricas de alertas** enviadas y tasas de respuesta\n- **Análisis de ingresos** generados por el nuevo sistema\n- **Comparativas temporales** de performance del sistema\n\n### **Paso 7.6: Sistema de Propagación en Tiempo Real**\n- **Broadcasting automático** de cambios a todos los componentes\n- **Invalidación de caches** relevantes al cambiar precios\n- **Notificación automática** a usuarios afectados por cambios significativos\n- **Sistema de rollback** inmediato si cambios causan problemas críticos\n\n### **Paso 7.7: Integración IA para Análisis de Costos**\n- **Endpoint dedicado** conectado con OpenAI para análisis especializado\n- **Recopilación automática** de métricas en tiempo real del sistema\n- **Prompt engineering** específico para cálculos precisos de costos\n- **Sistema de justificación** transparente de cada recomendación IA\n- **Rate limiting** inteligente para controlar costos de OpenAI\n\n---\n\n## **FASE 8: EXPERIENCIA DE USUARIO OPTIMIZADA**\n\n### **Paso 8.1: Interceptores y Advertencias Proactivas**\n- **Modal de confirmación** antes de acciones con costo significativo\n- **Vista previa de costo** en tiempo real antes de crear recursos\n- **Advertencias contextuales** cuando se acerque a umbrales configurados\n- **Sugerencias inteligentes** de optimización de presupuesto según uso\n\n### **Paso 8.2: Flujo de Manejo de Presupuesto Agotado**\n- **Modal informativo** cuando presupuesto se agote, con opciones claras\n- **Proceso streamlined** para aumentar presupuesto inmediatamente\n- **Reactivación automática** de servicios tras ajuste confirmado\n- **Confirmación visual** de cambios aplicados y servicios reactivados\n\n### **Paso 8.3: Transparencia y Educación Total**\n- **Explicación clara** del costo de cada acción antes de ejecutar\n- **Centro de ayuda** específico para sistema de presupuestos\n- **Estimaciones inteligentes** de uso mensual basado en patrones previos\n- **Comparativas anonimizadas** con otros usuarios de perfil similar\n\n### **Paso 8.4: Personalización Avanzada**\n- **Configuración granular** de tipos de alertas preferidas\n- **Personalización** de umbrales según preferencias individuales\n- **Opciones de silenciado** temporal para usuarios experimentados\n- **Dashboard personalizable** con widgets movibles\n\n---\n\n## **FASE 9: TESTING Y VALIDACIÓN INTEGRAL**\n\n### **Paso 9.1: Testing de Cálculos y Lógica Financiera**\n- **Validación exhaustiva** de fórmulas de costo y markup\n- **Testing de casos extremos**: presupuestos muy bajos/altos, overages\n- **Verificación de precisión** en redondeos monetarios y conversiones\n- **Testing de concurrencia** para updates simultáneos de presupuesto\n\n### **Paso 9.2: Testing de Flujos Completos de Usuario**\n- **Escenarios end-to-end**: desde configuración hasta suspensión y reactivación\n- **Testing de alertas** en todos los umbrales configurados\n- **Validación de UX** durante estados de suspensión\n- **Testing multilingual** de todos los mensajes y interfaces\n\n### **Paso 9.3: Testing de Performance y Escalabilidad**\n- **Load testing** con simulación de miles de usuarios activos\n- **Optimización** de consultas frecuentes de uso mensual\n- **Benchmarking** del nuevo middleware vs sistema actual\n- **Evaluación de impacto** en tiempos de respuesta globales\n\n### **Paso 9.4: Testing de Integración IA**\n- **Validación** de precisión de sugerencias de costos IA\n- **Testing de rate limits** y manejo de errores de OpenAI\n- **Verificación** de cálculos del 30% markup\n- **Testing de fallbacks** cuando IA no está disponible\n\n---\n\n## **FASE 10: MIGRACIÓN, LANZAMIENTO Y SINCRONIZACIÓN**\n\n### **Paso 10.1: Migración Segura de Datos Existentes**\n- **Creación automática** de presupuestos iniciales para todos los usuarios existentes\n- **Migración de datos históricos** relevantes para reportes\n- **Backup completo** de sistema antes de migración\n- **Validación post-migración** de integridad total de datos\n- **Plan de rollback** detallado si surgen problemas críticos\n\n### **Paso 10.2: Lanzamiento Progresivo Controlado**\n- **Feature flags** para activación gradual por grupos de usuarios\n- **A/B testing** con porcentajes controlados de usuarios\n- **Monitoreo en tiempo real** de métricas clave durante rollout\n- **Capacidad de rollback** inmediato ante cualquier problema crítico\n\n### **Paso 10.3: Comunicación y Onboarding de Usuarios**\n- **Campaña de comunicación** previa explicando beneficios del cambio\n- **Onboarding interactivo** para nuevos controles de presupuesto\n- **Documentación actualizada** y centro de ayuda\n- **Soporte proactivo** durante período de transición\n\n### **Paso 10.4: Sincronización Multi-ambiente Completa**\n- **Deploy coordinado** secuencial: Replit → Railway → GitHub\n- **Verificación de consistencia** entre todos los ambientes\n- **Actualización de variables** de entorno necesarias\n- **Testing post-deploy** en cada ambiente\n- **Documentación** de proceso para futuros deploys\n\n---\n\n# 🎯 **RESULTADO FINAL ESPERADO**\n\n## **✅ BENEFICIOS PARA USUARIOS:**\n- **Control total** sobre su gasto mensual con presupuestos personalizables\n- **Transparencia completa** con dashboard detallado tipo Replit\n- **Alertas inteligentes** que previenen sorpresas de facturación\n- **Flexibilidad** para ajustar presupuesto según necesidades cambiantes\n- **No más límites rígidos** que bloqueen crecimiento empresarial\n\n## **✅ BENEFICIOS PARA EL NEGOCIO:**\n- **Incremento de ingresos** con 30% markup automático en cada acción\n- **Control administrativo total** con gestión manual + sugerencias IA\n- **Escalabilidad** sin límites predefinidos por planes\n- **Mejor retención** al eliminar frustraciones de límites rígidos\n- **Data insights** ricos sobre patrones de uso y optimización\n\n## **✅ CARACTERÍSTICAS TÉCNICAS:**\n- **Sistema robusto** construido sobre infraestructura existente probada\n- **Integración completa** con Stripe, SendGrid, OpenAI ya configurados  \n- **Performance optimizado** con caching y consultas eficientes\n- **Escalabilidad** para miles de usuarios concurrentes\n- **Seguridad** con auditoría completa y backups automáticos\n\n## **✅ CAPACIDADES ADMINISTRATIVAS:**\n- **Gestión granular** de costos por tipo de acción\n- **Sugerencias IA** para pricing óptimo basado en costos reales\n- **Monitoreo completo** de usuarios y métricas de sistema\n- **Propagación automática** de cambios en tiempo real\n- **Control total** sobre todos los aspectos del sistema de presupuestos\n\n---\n\n# 📋 **CRONOGRAMA ESTIMADO**\n\n- **Fases 1-2 (Preparación y Base de Datos)**: 1-2 semanas\n- **Fases 3-4 (Costos y Alertas)**: 2-3 semanas  \n- **Fases 5-6 (Middleware y Dashboard)**: 2-3 semanas\n- **Fases 7-8 (Admin Panel e UX)**: 2-3 semanas\n- **Fases 9-10 (Testing y Deploy)**: 1-2 semanas\n\n**TOTAL ESTIMADO: 8-13 semanas** para implementación completa\n\n---\n\n# 📝 **NOTAS DE IMPLEMENTACIÓN**\n\n## **ESTADO ACTUAL:**\n- ✅ Plan aprobado por usuario\n- ✅ Documento de referencia creado  \n- 🔄 Listo para comenzar Fase 1\n\n## **PRÓXIMOS PASOS:**\n1. Iniciar auditoría completa del sistema actual\n2. Mapear todas las rutas con middleware de límites\n3. Comenzar diseño de nuevas tablas de base de datos\n4. Establecer costos iniciales por tipo de acción\n\n## **PUNTOS CRÍTICOS A RECORDAR:**\n- Mantener compatibilidad total durante transición\n- Preservar integridad de datos existentes\n- Testing exhaustivo en cada fase\n- Comunicación proactiva con usuarios\n- Rollback disponible en todo momento","size_bytes":19750},"server/lib/cost-engine.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport { eq, and, desc, sql, gt, gte } from 'drizzle-orm';\nimport { actionCosts, userBudgets, usageTracking, sentAlerts } from '../../shared/schema';\nimport type { ActionCost, UserBudget, InsertUsageTracking, SentAlert } from '../../shared/schema';\n\nconst connection = postgres(process.env.DATABASE_URL!);\nconst db = drizzle(connection);\n\n// Cache para costos (5 minutos)\nconst costCache = new Map<string, { cost: ActionCost; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutos\n\n/**\n * Tipos de acciones costeables en el sistema\n */\nexport type ActionType = 'create_integration' | 'create_form' | 'send_email' | 'chat_conversation';\n\n/**\n * Resultado de verificación de presupuesto\n */\nexport interface BudgetCheckResult {\n  allowed: boolean;\n  userBudget: UserBudget | null;\n  actionCost: ActionCost | null;\n  costToApply: string;\n  remainingBudget: string;\n  percentageUsed: number;\n  reason?: string;\n  willTriggerAlert?: {\n    threshold: number;\n    type: 'threshold_50' | 'threshold_80' | 'threshold_90' | 'budget_exceeded';\n  };\n}\n\n/**\n * Resultado de carga de costo a usuario\n */\nexport interface ChargeResult {\n  success: boolean;\n  transactionId?: number;\n  newCurrentSpent?: string;\n  budgetExceeded?: boolean;\n  alertTriggered?: {\n    threshold: number;\n    type: string;\n    alertId?: number;\n  };\n  error?: string;\n}\n\n/**\n * Obtiene el costo actual para un tipo de acción, con cache\n */\nexport async function getActionCost(actionType: ActionType): Promise<ActionCost | null> {\n  const cacheKey = actionType;\n  const cached = costCache.get(cacheKey);\n  \n  // Verificar cache\n  if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {\n    return cached.cost;\n  }\n\n  try {\n    const cost = await db\n      .select()\n      .from(actionCosts)\n      .where(and(\n        eq(actionCosts.actionType, actionType),\n        eq(actionCosts.isActive, true)\n      ))\n      .limit(1);\n\n    if (cost.length === 0) {\n      console.warn(`No se encontró costo para acción: ${actionType}`);\n      return null;\n    }\n\n    // Actualizar cache\n    costCache.set(cacheKey, {\n      cost: cost[0],\n      timestamp: Date.now()\n    });\n\n    return cost[0];\n  } catch (error) {\n    console.error(`Error al obtener costo para ${actionType}:`, error);\n    return null;\n  }\n}\n\n/**\n * Calcula el precio final aplicando markup sobre costo base usando NUMERIC de DB\n * ELIMINADO: Esta función no se debe usar más para evitar errores de precisión\n * El cálculo de final_cost debe hacerse directamente en la base de datos\n */\n// DEPRECATED: No usar - usar cálculo directo en DB\n// export function calculateFinalCost(baseCost: string, markupPercentage: number): string\n\n/**\n * Obtiene el presupuesto actual de un usuario\n */\nexport async function getUserBudget(userId: number): Promise<UserBudget | null> {\n  try {\n    const budget = await db\n      .select()\n      .from(userBudgets)\n      .where(eq(userBudgets.userId, userId))\n      .limit(1);\n\n    return budget.length > 0 ? budget[0] : null;\n  } catch (error) {\n    console.error(`Error al obtener presupuesto para usuario ${userId}:`, error);\n    return null;\n  }\n}\n\n/**\n * Verifica si un usuario puede realizar una acción dentro de su presupuesto\n * CORREGIDO: Usa operaciones de DB con NUMERIC para evitar problemas de precisión\n */\nexport async function checkBudgetAvailability(\n  userId: number, \n  actionType: ActionType\n): Promise<BudgetCheckResult> {\n  try {\n    // Usar SELECT FOR UPDATE para obtener presupuesto de forma atómica\n    const result = await db.transaction(async (tx) => {\n      // 1. Obtener presupuesto con lock atómico\n      const userBudgetQuery = await tx\n        .select()\n        .from(userBudgets)\n        .where(eq(userBudgets.userId, userId))\n        .for('update')\n        .limit(1);\n\n      if (userBudgetQuery.length === 0) {\n        return {\n          userBudget: null,\n          actionCost: null,\n          reason: \"Usuario no tiene presupuesto configurado. Contacte al administrador.\"\n        };\n      }\n\n      const userBudget = userBudgetQuery[0];\n\n      // 2. Verificar si está suspendido\n      if (userBudget.isSuspended) {\n        return {\n          userBudget,\n          actionCost: null,\n          reason: \"Presupuesto mensual agotado. Aumente su presupuesto para continuar.\"\n        };\n      }\n\n      // 3. Obtener costo de la acción\n      const actionCostQuery = await tx\n        .select()\n        .from(actionCosts)\n        .where(and(\n          eq(actionCosts.actionType, actionType),\n          eq(actionCosts.isActive, true)\n        ))\n        .limit(1);\n\n      if (actionCostQuery.length === 0) {\n        return {\n          userBudget,\n          actionCost: null,\n          reason: `Costo no configurado para acción: ${actionType}`\n        };\n      }\n\n      const actionCost = actionCostQuery[0];\n\n      // 4. Verificar fondos usando comparación directa en DB\n      const budgetAnalysis = await tx\n        .select({\n          monthlyBudget: userBudgets.monthlyBudget,\n          currentSpent: userBudgets.currentSpent,\n          remainingBudget: userBudgets.monthlyBudget,\n          hasEnoughFunds: sql<boolean>`(monthly_budget - current_spent) >= ${actionCost.finalCost}`\n        })\n        .from(userBudgets)\n        .where(eq(userBudgets.userId, userId))\n        .limit(1);\n\n      if (budgetAnalysis.length === 0) {\n        return {\n          userBudget,\n          actionCost,\n          reason: \"Error al calcular presupuesto\"\n        };\n      }\n\n      // Calcular porcentajes en JavaScript para simplificar tipos\n      const monthlyBudget = parseFloat(budgetAnalysis[0].monthlyBudget);\n      const currentSpent = parseFloat(budgetAnalysis[0].currentSpent);\n      const actionCostValue = parseFloat(actionCost.finalCost);\n      const remainingBudget = monthlyBudget - currentSpent;\n      const percentageUsed = (currentSpent / monthlyBudget) * 100;\n      const newPercentage = ((currentSpent + actionCostValue) / monthlyBudget) * 100;\n\n      return {\n        userBudget,\n        actionCost,\n        analysis: {\n          ...budgetAnalysis[0],\n          remainingBudget: remainingBudget.toFixed(2),\n          percentageUsed,\n          newPercentage,\n          hasEnoughFunds: budgetAnalysis[0].hasEnoughFunds\n        }\n      };\n    });\n\n    // Si hay error en la transacción\n    if (result.reason) {\n      return {\n        allowed: false,\n        userBudget: result.userBudget,\n        actionCost: result.actionCost,\n        costToApply: \"0.00\",\n        remainingBudget: \"0.00\",\n        percentageUsed: 0,\n        reason: result.reason\n      };\n    }\n\n    const { userBudget, actionCost, analysis } = result;\n    \n    if (!userBudget || !actionCost || !analysis) {\n      return {\n        allowed: false,\n        userBudget,\n        actionCost,\n        costToApply: \"0.00\",\n        remainingBudget: \"0.00\",\n        percentageUsed: 0,\n        reason: \"Error interno al procesar datos\"\n      };\n    }\n    \n    // Verificar si hay fondos suficientes\n    if (!analysis.hasEnoughFunds) {\n      return {\n        allowed: false,\n        userBudget,\n        actionCost,\n        costToApply: actionCost.finalCost,\n        remainingBudget: analysis.remainingBudget,\n        percentageUsed: Math.min(analysis.percentageUsed, 100),\n        reason: `Fondos insuficientes. Costo: $${actionCost.finalCost} ${userBudget.currency}, Disponible: $${analysis.remainingBudget} ${userBudget.currency}`\n      };\n    }\n\n    // Determinar si se activará una alerta\n    let willTriggerAlert = undefined;\n    if (analysis.percentageUsed < 50 && analysis.newPercentage >= 50 && userBudget.alertThreshold50) {\n      willTriggerAlert = { threshold: 50, type: 'threshold_50' as const };\n    } else if (analysis.percentageUsed < 80 && analysis.newPercentage >= 80 && userBudget.alertThreshold80) {\n      willTriggerAlert = { threshold: 80, type: 'threshold_80' as const };\n    } else if (analysis.percentageUsed < 90 && analysis.newPercentage >= 90 && userBudget.alertThreshold90) {\n      willTriggerAlert = { threshold: 90, type: 'threshold_90' as const };\n    } else if (analysis.newPercentage >= 100 && userBudget.alertThreshold100) {\n      willTriggerAlert = { threshold: 100, type: 'budget_exceeded' as const };\n    }\n\n    return {\n      allowed: true,\n      userBudget,\n      actionCost,\n      costToApply: actionCost.finalCost,\n      remainingBudget: (parseFloat(analysis.remainingBudget) - parseFloat(actionCost.finalCost)).toFixed(2),\n      percentageUsed: Math.min(analysis.newPercentage, 100),\n      willTriggerAlert\n    };\n\n  } catch (error) {\n    console.error(`Error al verificar presupuesto para usuario ${userId}:`, error);\n    return {\n      allowed: false,\n      userBudget: null,\n      actionCost: null,\n      costToApply: \"0.00\",\n      remainingBudget: \"0.00\",\n      percentageUsed: 0,\n      reason: \"Error interno al verificar presupuesto\"\n    };\n  }\n}\n\n/**\n * Cobra una acción al presupuesto del usuario y registra el uso\n * CORREGIDO: Usa operaciones atómicas con SELECT FOR UPDATE y NUMERIC precision\n */\nexport async function chargeUserBudget(\n  userId: number,\n  actionType: ActionType,\n  resourceId?: number,\n  resourceType?: string,\n  metadata?: any\n): Promise<ChargeResult> {\n  try {\n    // Generar billing month (YYYY-MM)\n    const now = new Date();\n    const billingMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n\n    // Transacción atómica para evitar race conditions\n    const result = await db.transaction(async (tx) => {\n      // 1. SELECT FOR UPDATE para lock atómico del presupuesto\n      const userBudgetQuery = await tx\n        .select()\n        .from(userBudgets)\n        .where(eq(userBudgets.userId, userId))\n        .for('update')\n        .limit(1);\n\n      if (userBudgetQuery.length === 0) {\n        throw new Error(\"Usuario no tiene presupuesto configurado\");\n      }\n\n      const userBudget = userBudgetQuery[0];\n\n      // 2. Verificar si está suspendido\n      if (userBudget.isSuspended) {\n        throw new Error(\"Presupuesto mensual agotado\");\n      }\n\n      // 3. Obtener costo de la acción\n      const actionCostQuery = await tx\n        .select()\n        .from(actionCosts)\n        .where(and(\n          eq(actionCosts.actionType, actionType),\n          eq(actionCosts.isActive, true)\n        ))\n        .limit(1);\n\n      if (actionCostQuery.length === 0) {\n        throw new Error(`Costo no configurado para acción: ${actionType}`);\n      }\n\n      const actionCost = actionCostQuery[0];\n\n      // 4. Verificar fondos suficientes primero\n      const currentBudgetSpent = parseFloat(userBudget.currentSpent);\n      const monthlyBudgetAmount = parseFloat(userBudget.monthlyBudget);\n      const costToApply = parseFloat(actionCost.finalCost);\n      const remainingBudget = monthlyBudgetAmount - currentBudgetSpent;\n      \n      if (costToApply > remainingBudget) {\n        throw new Error(\"Fondos insuficientes para realizar la acción\");\n      }\n      \n      const newSpent = currentBudgetSpent + costToApply;\n      const budgetExceeded = newSpent >= monthlyBudgetAmount;\n      \n      // 5. Actualizar presupuesto atómicamente\n      const updateResult = await tx\n        .update(userBudgets)\n        .set({\n          currentSpent: newSpent.toString(),\n          isSuspended: budgetExceeded,\n          suspendedAt: budgetExceeded ? new Date() : undefined,\n          updatedAt: new Date()\n        })\n        .where(eq(userBudgets.userId, userId))\n        .returning({\n          id: userBudgets.id,\n          newCurrentSpent: userBudgets.currentSpent,\n          monthlyBudget: userBudgets.monthlyBudget,\n          isSuspended: userBudgets.isSuspended,\n          currency: userBudgets.currency\n        });\n\n      if (updateResult.length === 0) {\n        throw new Error(\"Error al actualizar presupuesto\");\n      }\n\n      const updatedBudget = updateResult[0];\n\n      // 6. Registrar uso con actionCostId para auditoría\n      const usageRecord = {\n        userId,\n        actionType,\n        actionCostId: actionCost.id, // NUEVO: Versionado de precios\n        costApplied: actionCost.finalCost,\n        currency: userBudget.currency,\n        resourceId,\n        resourceType,\n        billingMonth,\n        metadata\n      };\n\n      const insertedUsage = await tx.insert(usageTracking).values([usageRecord]).returning();\n\n      // 7. Calcular porcentajes para alertas\n      const currentPercentage = (newSpent / monthlyBudgetAmount) * 100;\n      const previousPercentage = (currentBudgetSpent / monthlyBudgetAmount) * 100;\n      \n      const percentages = {\n        currentPercentage,\n        previousPercentage\n      };\n\n      return {\n        transactionId: insertedUsage[0]?.id,\n        updatedBudget,\n        actionCost,\n        percentages,\n        userBudget\n      };\n    });\n\n    // 8. Procesar alerta FUERA de la transacción para evitar bloqueos largos\n    let alertTriggered = undefined;\n    if (result.percentages && result.userBudget) {\n      alertTriggered = await processAlertIfNeeded(\n        userId,\n        result.userBudget,\n        result.percentages.previousPercentage,\n        result.percentages.currentPercentage,\n        billingMonth\n      );\n    }\n\n    return {\n      success: true,\n      transactionId: result.transactionId,\n      newCurrentSpent: result.updatedBudget.newCurrentSpent,\n      budgetExceeded: result.updatedBudget.isSuspended || false,\n      alertTriggered\n    };\n\n  } catch (error) {\n    console.error(`Error al cobrar presupuesto para usuario ${userId}:`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Error interno al procesar el cobro\"\n    };\n  }\n}\n\n/**\n * Procesa y persiste alertas de presupuesto cuando se cruzan umbrales\n * NUEVO: Persistir alertas en sent_alerts table en lugar de solo console.log\n */\nasync function processAlertIfNeeded(\n  userId: number,\n  userBudget: UserBudget,\n  previousPercentage: number,\n  currentPercentage: number,\n  billingMonth: string\n): Promise<{ threshold: number; type: string; alertId?: number } | undefined> {\n  try {\n    let alertToSend = undefined;\n\n    // Determinar qué alerta enviar basado en umbrales cruzados\n    if (previousPercentage < 50 && currentPercentage >= 50 && userBudget.alertThreshold50) {\n      alertToSend = { threshold: 50, type: 'threshold_50' };\n    } else if (previousPercentage < 80 && currentPercentage >= 80 && userBudget.alertThreshold80) {\n      alertToSend = { threshold: 80, type: 'threshold_80' };\n    } else if (previousPercentage < 90 && currentPercentage >= 90 && userBudget.alertThreshold90) {\n      alertToSend = { threshold: 90, type: 'threshold_90' };\n    } else if (currentPercentage >= 100 && userBudget.alertThreshold100) {\n      alertToSend = { threshold: 100, type: 'budget_exceeded' };\n    }\n\n    if (!alertToSend) {\n      return undefined;\n    }\n\n    // Persistir alerta en la base de datos\n    const alertRecord = {\n      userId,\n      alertType: alertToSend.type,\n      thresholdReached: alertToSend.threshold,\n      currentSpent: userBudget.currentSpent,\n      monthlyBudget: userBudget.monthlyBudget,\n      deliveryMethod: 'email', // Por defecto email, se puede expandir\n      deliveryStatus: 'pending',\n      emailAddress: null, // Se llenará cuando se implemente el envío\n      messageContent: `Alerta de presupuesto: Has alcanzado el ${alertToSend.threshold}% de tu presupuesto mensual.`,\n      billingMonth\n    };\n\n    try {\n      const insertedAlert = await db\n        .insert(sentAlerts)\n        .values([alertRecord])\n        .onConflictDoNothing() // Evitar duplicados por el constraint único\n        .returning({ id: sentAlerts.id });\n\n      const alertId = insertedAlert[0]?.id;\n\n      console.log(`🚨 Alerta persistida: ${alertToSend.type} para usuario ${userId} - ${currentPercentage.toFixed(1)}% del presupuesto`);\n\n      return {\n        ...alertToSend,\n        alertId\n      };\n    } catch (alertError) {\n      // Si falla por constraint único (alerta duplicada), simplemente logear\n      console.log(`ℹ️ Alerta ${alertToSend.type} ya enviada para usuario ${userId} en ${billingMonth}`);\n      return alertToSend;\n    }\n\n  } catch (error) {\n    console.error(`Error al procesar alerta para usuario ${userId}:`, error);\n    return undefined;\n  }\n}\n\n/**\n * Crear presupuesto inicial para un usuario nuevo\n */\nexport async function createDefaultUserBudget(userId: number, initialBudget: string = \"50.00\"): Promise<UserBudget | null> {\n  try {\n    const budgetData = {\n      userId,\n      monthlyBudget: initialBudget,\n      currency: \"CAD\",\n      billingCycleDay: 1,\n      alertThreshold50: true,\n      alertThreshold80: true,\n      alertThreshold90: true,\n      alertThreshold100: true,\n    };\n\n    const inserted = await db.insert(userBudgets).values(budgetData).returning();\n    console.log(`✅ Presupuesto inicial creado para usuario ${userId}: $${initialBudget} CAD`);\n    return inserted[0];\n  } catch (error) {\n    console.error(`Error al crear presupuesto para usuario ${userId}:`, error);\n    return null;\n  }\n}\n\n/**\n * Limpiar cache de costos (útil cuando se actualizan precios)\n */\nexport function clearCostCache(): void {\n  costCache.clear();\n  console.log('🧹 Cache de costos limpiado');\n}\n\n/**\n * Obtener estadísticas de uso mensual para un usuario\n */\nexport async function getUserMonthlyStats(userId: number, billingMonth?: string) {\n  if (!billingMonth) {\n    const now = new Date();\n    billingMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n  }\n\n  try {\n    // CORREGIDO: Usar agregación SQL en lugar de parseFloat en JavaScript\n    const statsQuery = await db\n      .select({\n        totalTransactions: sql<number>`COUNT(*)::integer`,\n        totalSpent: sql<string>`COALESCE(SUM(cost_applied), 0)::numeric(12,2)::text`\n      })\n      .from(usageTracking)\n      .where(and(\n        eq(usageTracking.userId, userId),\n        eq(usageTracking.billingMonth, billingMonth)\n      ))\n      .limit(1);\n      \n    // Obtener transacciones separadamente para evitar problemas de agregación\n    const transactions = await db\n      .select({\n        id: usageTracking.id,\n        actionType: usageTracking.actionType,\n        costApplied: usageTracking.costApplied,\n        resourceType: usageTracking.resourceType,\n        createdAt: usageTracking.createdAt\n      })\n      .from(usageTracking)\n      .where(and(\n        eq(usageTracking.userId, userId),\n        eq(usageTracking.billingMonth, billingMonth)\n      ))\n      .orderBy(desc(usageTracking.createdAt))\n      .limit(20);\n\n    if (statsQuery.length === 0) {\n      return {\n        billingMonth,\n        totalTransactions: 0,\n        totalSpent: \"0.00\",\n        actionBreakdown: {},\n        recentTransactions: []\n      };\n    }\n\n    const stats = statsQuery[0];\n    const actionCounts = transactions.reduce((counts: Record<string, number>, record) => {\n      counts[record.actionType] = (counts[record.actionType] || 0) + 1;\n      return counts;\n    }, {});\n\n    return {\n      billingMonth,\n      totalTransactions: stats.totalTransactions,\n      totalSpent: stats.totalSpent,\n      actionBreakdown: actionCounts,\n      recentTransactions: transactions.slice(0, 10)\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas para usuario ${userId}:`, error);\n    return null;\n  }\n}\n\n// Exportar instancia de DB para uso externo si es necesario\nexport { db as costEngineDb };","size_bytes":19475}},"version":1}